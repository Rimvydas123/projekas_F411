
projekas_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ea8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009040  08009040  00019040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090a8  080090a8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080090a8  080090a8  000190a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090b0  080090b0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090b0  080090b0  000190b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090b4  080090b4  000190b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080090b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad4  200001e8  080092a0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20001cbc  080092a0  00021cbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6a7  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003966  00000000  00000000  0003b8bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015e0  00000000  00000000  0003f228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001438  00000000  00000000  00040808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a96d  00000000  00000000  00041c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012c50  00000000  00000000  0005c5ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097906  00000000  00000000  0006f1fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00106b03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d70  00000000  00000000  00106b80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001e8 	.word	0x200001e8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009028 	.word	0x08009028

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001ec 	.word	0x200001ec
 80001d4:	08009028 	.word	0x08009028

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_ADC_ConvCpltCallback>:
//	if(data_request[0] == ready[0])
//	  {
//		HAL_UART_Transmit_DMA(&huart6, data_acc_gyr, 12);i main
//	  }
//}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  /* This is called after the conversion is completed */
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <checking_baterry>:

void checking_baterry(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	if(adcvalue[0] <= battery_threshold)
 80004f0:	4b0a      	ldr	r3, [pc, #40]	; (800051c <checking_baterry+0x30>)
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	f640 42cc 	movw	r2, #3276	; 0xccc
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d806      	bhi.n	800050a <checking_baterry+0x1e>
	{
	  battery_aliarm(GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000502:	4807      	ldr	r0, [pc, #28]	; (8000520 <checking_baterry+0x34>)
 8000504:	f002 f81e 	bl	8002544 <HAL_GPIO_WritePin>
	}
	else
	{
	  battery_aliarm(GPIO_PIN_RESET);
	}
}
 8000508:	e005      	b.n	8000516 <checking_baterry+0x2a>
	  battery_aliarm(GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <checking_baterry+0x34>)
 8000512:	f002 f817 	bl	8002544 <HAL_GPIO_WritePin>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	200002e0 	.word	0x200002e0
 8000520:	40020c00 	.word	0x40020c00

08000524 <CDC_ReceiveCallback>:

void CDC_ReceiveCallback(uint8_t *buf, uint32_t len){
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
	Receiveflag = 1;
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <CDC_ReceiveCallback+0x30>)
 8000530:	2201      	movs	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
    memcpy(receivedData, buf, 4);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <CDC_ReceiveCallback+0x34>)
 800053c:	601a      	str	r2, [r3, #0]
    CDC_Transmit_FS(buf, len);
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	b29b      	uxth	r3, r3
 8000542:	4619      	mov	r1, r3
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f008 f83b 	bl	80085c0 <CDC_Transmit_FS>
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	2000029c 	.word	0x2000029c
 8000558:	20000000 	.word	0x20000000

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000560:	f000 fd7e 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000564:	f000 f82c 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 fa3a 	bl	80009e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800056c:	f000 fa18 	bl	80009a0 <MX_DMA_Init>
  MX_TIM4_Init();
 8000570:	f000 f96c 	bl	800084c <MX_TIM4_Init>
  MX_SPI1_Init();
 8000574:	f000 f8de 	bl	8000734 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000578:	f000 f9e8 	bl	800094c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800057c:	f007 ff5c 	bl	8008438 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000580:	f000 f886 	bl	8000690 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000584:	f000 f90c 	bl	80007a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000588:	2100      	movs	r1, #0
 800058a:	4809      	ldr	r0, [pc, #36]	; (80005b0 <main+0x54>)
 800058c:	f003 ff0e 	bl	80043ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000590:	2104      	movs	r1, #4
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <main+0x54>)
 8000594:	f003 ff0a 	bl	80043ac <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcvalue, 1);
 8000598:	2201      	movs	r2, #1
 800059a:	4906      	ldr	r1, [pc, #24]	; (80005b4 <main+0x58>)
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <main+0x5c>)
 800059e:	f000 fe37 	bl	8001210 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 80005a2:	4806      	ldr	r0, [pc, #24]	; (80005bc <main+0x60>)
 80005a4:	f003 fe7d 	bl	80042a2 <HAL_TIM_Base_Start_IT>
	  		//{
	  			//Receiveflag = 0;
	  			//Motors_Control(receivedData[0], receivedData[2]);
	  		//}
	  //Motors_Control(receivedData[0], receivedData[2]);
	  checking_baterry();
 80005a8:	f7ff ffa0 	bl	80004ec <checking_baterry>
 80005ac:	e7fc      	b.n	80005a8 <main+0x4c>
 80005ae:	bf00      	nop
 80005b0:	20000214 	.word	0x20000214
 80005b4:	200002e0 	.word	0x200002e0
 80005b8:	20000254 	.word	0x20000254
 80005bc:	2000039c 	.word	0x2000039c

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f008 fc68 	bl	8008ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b27      	ldr	r3, [pc, #156]	; (8000688 <SystemClock_Config+0xc8>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a26      	ldr	r2, [pc, #152]	; (8000688 <SystemClock_Config+0xc8>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b24      	ldr	r3, [pc, #144]	; (8000688 <SystemClock_Config+0xc8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <SystemClock_Config+0xcc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a20      	ldr	r2, [pc, #128]	; (800068c <SystemClock_Config+0xcc>)
 800060a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <SystemClock_Config+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000630:	2310      	movs	r3, #16
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000634:	23c0      	movs	r3, #192	; 0xc0
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000638:	2304      	movs	r3, #4
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f003 f93d 	bl	80038c4 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000650:	f000 fa8c 	bl	8000b6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2101      	movs	r1, #1
 800066e:	4618      	mov	r0, r3
 8000670:	f003 fb98 	bl	8003da4 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800067a:	f000 fa77 	bl	8000b6c <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000696:	463b      	mov	r3, r7
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006a2:	4b22      	ldr	r3, [pc, #136]	; (800072c <MX_ADC1_Init+0x9c>)
 80006a4:	4a22      	ldr	r2, [pc, #136]	; (8000730 <MX_ADC1_Init+0xa0>)
 80006a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <MX_ADC1_Init+0x9c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_ADC1_Init+0x9c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_ADC1_Init+0x9c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_ADC1_Init+0x9c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_ADC1_Init+0x9c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_ADC1_Init+0x9c>)
 80006ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_ADC1_Init+0x9c>)
 80006d2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80006d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_ADC1_Init+0x9c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_ADC1_Init+0x9c>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_ADC1_Init+0x9c>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_ADC1_Init+0x9c>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f2:	480e      	ldr	r0, [pc, #56]	; (800072c <MX_ADC1_Init+0x9c>)
 80006f4:	f000 fd48 	bl	8001188 <HAL_ADC_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80006fe:	f000 fa35 	bl	8000b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000702:	2301      	movs	r3, #1
 8000704:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000706:	2301      	movs	r3, #1
 8000708:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070e:	463b      	mov	r3, r7
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_ADC1_Init+0x9c>)
 8000714:	f000 fe64 	bl	80013e0 <HAL_ADC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800071e:	f000 fa25 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000254 	.word	0x20000254
 8000730:	40012000 	.word	0x40012000

08000734 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_SPI1_Init+0x64>)
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <MX_SPI1_Init+0x68>)
 800073c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_SPI1_Init+0x64>)
 8000740:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000744:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_SPI1_Init+0x64>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_SPI1_Init+0x64>)
 8000780:	220a      	movs	r2, #10
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_SPI1_Init+0x64>)
 8000786:	f003 fcfd 	bl	8004184 <HAL_SPI_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000790:	f000 f9ec 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000344 	.word	0x20000344
 800079c:	40013000 	.word	0x40013000

080007a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a6:	f107 0320 	add.w	r3, r7, #32
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
 80007be:	615a      	str	r2, [r3, #20]
 80007c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_TIM2_Init+0xa8>)
 80007c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800-1;
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_TIM2_Init+0xa8>)
 80007cc:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80007d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_TIM2_Init+0xa8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_TIM2_Init+0xa8>)
 80007da:	f242 720f 	movw	r2, #9999	; 0x270f
 80007de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_TIM2_Init+0xa8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_TIM2_Init+0xa8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80007ec:	4816      	ldr	r0, [pc, #88]	; (8000848 <MX_TIM2_Init+0xa8>)
 80007ee:	f003 fd7c 	bl	80042ea <HAL_TIM_OC_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f000 f9b8 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007fc:	2320      	movs	r3, #32
 80007fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000804:	f107 0320 	add.w	r3, r7, #32
 8000808:	4619      	mov	r1, r3
 800080a:	480f      	ldr	r0, [pc, #60]	; (8000848 <MX_TIM2_Init+0xa8>)
 800080c:	f004 faaa 	bl	8004d64 <HAL_TIMEx_MasterConfigSynchronization>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000816:	f000 f9a9 	bl	8000b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_TIM2_Init+0xa8>)
 8000832:	f003 fded 	bl	8004410 <HAL_TIM_OC_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800083c:	f000 f996 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000039c 	.word	0x2000039c

0800084c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08e      	sub	sp, #56	; 0x38
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000860:	f107 0320 	add.w	r3, r7, #32
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
 8000878:	615a      	str	r2, [r3, #20]
 800087a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800087c:	4b31      	ldr	r3, [pc, #196]	; (8000944 <MX_TIM4_Init+0xf8>)
 800087e:	4a32      	ldr	r2, [pc, #200]	; (8000948 <MX_TIM4_Init+0xfc>)
 8000880:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 8000882:	4b30      	ldr	r3, [pc, #192]	; (8000944 <MX_TIM4_Init+0xf8>)
 8000884:	2230      	movs	r2, #48	; 0x30
 8000886:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <MX_TIM4_Init+0xf8>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <MX_TIM4_Init+0xf8>)
 8000890:	2264      	movs	r2, #100	; 0x64
 8000892:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000894:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <MX_TIM4_Init+0xf8>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089a:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <MX_TIM4_Init+0xf8>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008a0:	4828      	ldr	r0, [pc, #160]	; (8000944 <MX_TIM4_Init+0xf8>)
 80008a2:	f003 fcd3 	bl	800424c <HAL_TIM_Base_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80008ac:	f000 f95e 	bl	8000b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4821      	ldr	r0, [pc, #132]	; (8000944 <MX_TIM4_Init+0xf8>)
 80008be:	f003 fecd 	bl	800465c <HAL_TIM_ConfigClockSource>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80008c8:	f000 f950 	bl	8000b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008cc:	481d      	ldr	r0, [pc, #116]	; (8000944 <MX_TIM4_Init+0xf8>)
 80008ce:	f003 fd37 	bl	8004340 <HAL_TIM_PWM_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80008d8:	f000 f948 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008e4:	f107 0320 	add.w	r3, r7, #32
 80008e8:	4619      	mov	r1, r3
 80008ea:	4816      	ldr	r0, [pc, #88]	; (8000944 <MX_TIM4_Init+0xf8>)
 80008ec:	f004 fa3a 	bl	8004d64 <HAL_TIMEx_MasterConfigSynchronization>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80008f6:	f000 f939 	bl	8000b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fa:	2360      	movs	r3, #96	; 0x60
 80008fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	4619      	mov	r1, r3
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <MX_TIM4_Init+0xf8>)
 8000912:	f003 fddd 	bl	80044d0 <HAL_TIM_PWM_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800091c:	f000 f926 	bl	8000b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2204      	movs	r2, #4
 8000924:	4619      	mov	r1, r3
 8000926:	4807      	ldr	r0, [pc, #28]	; (8000944 <MX_TIM4_Init+0xf8>)
 8000928:	f003 fdd2 	bl	80044d0 <HAL_TIM_PWM_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000932:	f000 f91b 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000936:	4803      	ldr	r0, [pc, #12]	; (8000944 <MX_TIM4_Init+0xf8>)
 8000938:	f000 fa4a 	bl	8000dd0 <HAL_TIM_MspPostInit>

}
 800093c:	bf00      	nop
 800093e:	3738      	adds	r7, #56	; 0x38
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000214 	.word	0x20000214
 8000948:	40000800 	.word	0x40000800

0800094c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <MX_USART1_UART_Init+0x50>)
 8000954:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 8000984:	f004 fa5c 	bl	8004e40 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800098e:	f000 f8ed 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200002a0 	.word	0x200002a0
 800099c:	40011000 	.word	0x40011000

080009a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_DMA_Init+0x3c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <MX_DMA_Init+0x3c>)
 80009b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_DMA_Init+0x3c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	2038      	movs	r0, #56	; 0x38
 80009c8:	f001 f895 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009cc:	2038      	movs	r0, #56	; 0x38
 80009ce:	f001 f8ae 	bl	8001b2e <HAL_NVIC_EnableIRQ>

}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b56      	ldr	r3, [pc, #344]	; (8000b54 <MX_GPIO_Init+0x174>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a55      	ldr	r2, [pc, #340]	; (8000b54 <MX_GPIO_Init+0x174>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b53      	ldr	r3, [pc, #332]	; (8000b54 <MX_GPIO_Init+0x174>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b4f      	ldr	r3, [pc, #316]	; (8000b54 <MX_GPIO_Init+0x174>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a4e      	ldr	r2, [pc, #312]	; (8000b54 <MX_GPIO_Init+0x174>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b4c      	ldr	r3, [pc, #304]	; (8000b54 <MX_GPIO_Init+0x174>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	4b48      	ldr	r3, [pc, #288]	; (8000b54 <MX_GPIO_Init+0x174>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a47      	ldr	r2, [pc, #284]	; (8000b54 <MX_GPIO_Init+0x174>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b45      	ldr	r3, [pc, #276]	; (8000b54 <MX_GPIO_Init+0x174>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b41      	ldr	r3, [pc, #260]	; (8000b54 <MX_GPIO_Init+0x174>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a40      	ldr	r2, [pc, #256]	; (8000b54 <MX_GPIO_Init+0x174>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b3e      	ldr	r3, [pc, #248]	; (8000b54 <MX_GPIO_Init+0x174>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <MX_GPIO_Init+0x174>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a39      	ldr	r2, [pc, #228]	; (8000b54 <MX_GPIO_Init+0x174>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b37      	ldr	r3, [pc, #220]	; (8000b54 <MX_GPIO_Init+0x174>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	21f0      	movs	r1, #240	; 0xf0
 8000a86:	4834      	ldr	r0, [pc, #208]	; (8000b58 <MX_GPIO_Init+0x178>)
 8000a88:	f001 fd5c 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2130      	movs	r1, #48	; 0x30
 8000a90:	4832      	ldr	r0, [pc, #200]	; (8000b5c <MX_GPIO_Init+0x17c>)
 8000a92:	f001 fd57 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin|CS_M_Pin|CS_A_G_Pin
 8000a96:	2200      	movs	r2, #0
 8000a98:	f241 6103 	movw	r1, #5635	; 0x1603
 8000a9c:	4830      	ldr	r0, [pc, #192]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000a9e:	f001 fd51 	bl	8002544 <HAL_GPIO_WritePin>
                          |DEN_A_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa8:	482e      	ldr	r0, [pc, #184]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000aaa:	f001 fd4b 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT1_Pin OUT2_Pin OUT3_Pin OUT4_Pin */
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin;
 8000aae:	23f0      	movs	r3, #240	; 0xf0
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4824      	ldr	r0, [pc, #144]	; (8000b58 <MX_GPIO_Init+0x178>)
 8000ac6:	f001 fbbb 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000aca:	2330      	movs	r3, #48	; 0x30
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	481e      	ldr	r0, [pc, #120]	; (8000b5c <MX_GPIO_Init+0x17c>)
 8000ae2:	f001 fbad 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin CS_M_Pin CS_A_G_Pin
                           DEN_A_G_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|CS_M_Pin|CS_A_G_Pin
 8000ae6:	f241 6303 	movw	r3, #5635	; 0x1603
 8000aea:	617b      	str	r3, [r7, #20]
                          |DEN_A_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4818      	ldr	r0, [pc, #96]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000b00:	f001 fb9e 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4811      	ldr	r0, [pc, #68]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000b1e:	f001 fb8f 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000b22:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_GPIO_Init+0x188>)
 8000b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	480a      	ldr	r0, [pc, #40]	; (8000b60 <MX_GPIO_Init+0x180>)
 8000b38:	f001 fb82 	bl	8002240 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2017      	movs	r0, #23
 8000b42:	f000 ffd8 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b46:	2017      	movs	r0, #23
 8000b48:	f000 fff1 	bl	8001b2e <HAL_NVIC_EnableIRQ>

}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	; 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40020400 	.word	0x40020400
 8000b64:	40020c00 	.word	0x40020c00
 8000b68:	10110000 	.word	0x10110000

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a2f      	ldr	r2, [pc, #188]	; (8000ca8 <HAL_ADC_MspInit+0xdc>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d157      	bne.n	8000c9e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <HAL_ADC_MspInit+0xe0>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	4a2d      	ldr	r2, [pc, #180]	; (8000cac <HAL_ADC_MspInit+0xe0>)
 8000bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <HAL_ADC_MspInit+0xe0>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b27      	ldr	r3, [pc, #156]	; (8000cac <HAL_ADC_MspInit+0xe0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a26      	ldr	r2, [pc, #152]	; (8000cac <HAL_ADC_MspInit+0xe0>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b24      	ldr	r3, [pc, #144]	; (8000cac <HAL_ADC_MspInit+0xe0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c26:	2302      	movs	r3, #2
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	481d      	ldr	r0, [pc, #116]	; (8000cb0 <HAL_ADC_MspInit+0xe4>)
 8000c3a:	f001 fb01 	bl	8002240 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c40:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <HAL_ADC_MspInit+0xec>)
 8000c42:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c5c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c64:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c74:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c82:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c84:	f000 ff6e 	bl	8001b64 <HAL_DMA_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000c8e:	f7ff ff6d 	bl	8000b6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c96:	639a      	str	r2, [r3, #56]	; 0x38
 8000c98:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <HAL_ADC_MspInit+0xe8>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40012000 	.word	0x40012000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	200002e4 	.word	0x200002e4
 8000cb8:	40026410 	.word	0x40026410

08000cbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <HAL_SPI_MspInit+0x84>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12b      	bne.n	8000d36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000ce8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d16:	2338      	movs	r3, #56	; 0x38
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d26:	2305      	movs	r3, #5
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <HAL_SPI_MspInit+0x8c>)
 8000d32:	f001 fa85 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40013000 	.word	0x40013000
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020400 	.word	0x40020400

08000d4c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d5c:	d10d      	bne.n	8000d7a <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_TIM_OC_MspInit+0x3c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_TIM_OC_MspInit+0x3c>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_TIM_OC_MspInit+0x3c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800

08000d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d10d      	bne.n	8000dba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_TIM_Base_MspInit+0x40>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <HAL_TIM_Base_MspInit+0x40>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <HAL_TIM_Base_MspInit+0x40>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40000800 	.word	0x40000800
 8000dcc:	40023800 	.word	0x40023800

08000dd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <HAL_TIM_MspPostInit+0x68>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d11e      	bne.n	8000e30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_TIM_MspPostInit+0x6c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a10      	ldr	r2, [pc, #64]	; (8000e3c <HAL_TIM_MspPostInit+0x6c>)
 8000dfc:	f043 0308 	orr.w	r3, r3, #8
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_TIM_MspPostInit+0x6c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e0e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <HAL_TIM_MspPostInit+0x70>)
 8000e2c:	f001 fa08 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e30:	bf00      	nop
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40000800 	.word	0x40000800
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020c00 	.word	0x40020c00

08000e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a19      	ldr	r2, [pc, #100]	; (8000ec8 <HAL_UART_MspInit+0x84>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12c      	bne.n	8000ec0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e70:	f043 0310 	orr.w	r3, r3, #16
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <HAL_UART_MspInit+0x8c>)
 8000ebc:	f001 f9c0 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40011000 	.word	0x40011000
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 f8ec 	bl	8001104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000f34:	2040      	movs	r0, #64	; 0x40
 8000f36:	f001 fb1f 	bl	8002578 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000f3a:	2080      	movs	r0, #128	; 0x80
 8000f3c:	f001 fb1c 	bl	8002578 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000f40:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f44:	f001 fb18 	bl	8002578 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <DMA2_Stream0_IRQHandler+0x10>)
 8000f52:	f000 ff0d 	bl	8001d70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200002e4 	.word	0x200002e4

08000f60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <OTG_FS_IRQHandler+0x10>)
 8000f66:	f001 fc7a 	bl	800285e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200018b0 	.word	0x200018b0

08000f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <_sbrk+0x5c>)
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <_sbrk+0x60>)
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <_sbrk+0x64>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <_sbrk+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d207      	bcs.n	8000fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa4:	f007 ff44 	bl	8008e30 <__errno>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	230c      	movs	r3, #12
 8000fac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	e009      	b.n	8000fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <_sbrk+0x64>)
 8000fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20020000 	.word	0x20020000
 8000fd4:	00004000 	.word	0x00004000
 8000fd8:	20000204 	.word	0x20000204
 8000fdc:	20001cc0 	.word	0x20001cc0

08000fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <SystemInit+0x28>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fea:	4a07      	ldr	r2, [pc, #28]	; (8001008 <SystemInit+0x28>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SystemInit+0x28>)
 8000ff6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ffa:	609a      	str	r2, [r3, #8]
#endif
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001010:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001012:	e003      	b.n	800101c <LoopCopyDataInit>

08001014 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001016:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001018:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800101a:	3104      	adds	r1, #4

0800101c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001020:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001022:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001024:	d3f6      	bcc.n	8001014 <CopyDataInit>
  ldr  r2, =_sbss
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001028:	e002      	b.n	8001030 <LoopFillZerobss>

0800102a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800102a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800102c:	f842 3b04 	str.w	r3, [r2], #4

08001030 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001032:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001034:	d3f9      	bcc.n	800102a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001036:	f7ff ffd3 	bl	8000fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103a:	f007 feff 	bl	8008e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103e:	f7ff fa8d 	bl	800055c <main>
  bx  lr    
 8001042:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001044:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001048:	080090b8 	.word	0x080090b8
  ldr  r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001050:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8001054:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8001058:	20001cbc 	.word	0x20001cbc

0800105c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <HAL_Init+0x40>)
 800106a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800106e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_Init+0x40>)
 8001076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_Init+0x40>)
 8001082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001086:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001088:	2003      	movs	r0, #3
 800108a:	f000 fd29 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108e:	2000      	movs	r0, #0
 8001090:	f000 f808 	bl	80010a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001094:	f7ff fd72 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023c00 	.word	0x40023c00

080010a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_InitTick+0x54>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x58>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80010be:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 fd41 	bl	8001b4a <HAL_SYSTICK_Config>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00e      	b.n	80010f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b0f      	cmp	r3, #15
 80010d6:	d80a      	bhi.n	80010ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d8:	2200      	movs	r2, #0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f000 fd09 	bl	8001af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e4:	4a06      	ldr	r2, [pc, #24]	; (8001100 <HAL_InitTick+0x5c>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e000      	b.n	80010f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000004 	.word	0x20000004
 80010fc:	2000000c 	.word	0x2000000c
 8001100:	20000008 	.word	0x20000008

08001104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x20>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x24>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <HAL_IncTick+0x24>)
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	2000000c 	.word	0x2000000c
 8001128:	200003dc 	.word	0x200003dc

0800112c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <HAL_GetTick+0x14>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200003dc 	.word	0x200003dc

08001144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800114c:	f7ff ffee 	bl	800112c <HAL_GetTick>
 8001150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115c:	d005      	beq.n	800116a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_Delay+0x40>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800116a:	bf00      	nop
 800116c:	f7ff ffde 	bl	800112c <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	429a      	cmp	r2, r3
 800117a:	d8f7      	bhi.n	800116c <HAL_Delay+0x28>
  {
  }
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000000c 	.word	0x2000000c

08001188 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e033      	b.n	8001206 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d109      	bne.n	80011ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff fd10 	bl	8000bcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d118      	bne.n	80011f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011ce:	f023 0302 	bic.w	r3, r3, #2
 80011d2:	f043 0202 	orr.w	r2, r3, #2
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 fa32 	bl	8001644 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f023 0303 	bic.w	r3, r3, #3
 80011ee:	f043 0201 	orr.w	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	641a      	str	r2, [r3, #64]	; 0x40
 80011f6:	e001      	b.n	80011fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001204:	7bfb      	ldrb	r3, [r7, #15]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_ADC_Start_DMA+0x1e>
 800122a:	2302      	movs	r3, #2
 800122c:	e0b1      	b.n	8001392 <HAL_ADC_Start_DMA+0x182>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	2b01      	cmp	r3, #1
 8001242:	d018      	beq.n	8001276 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 0201 	orr.w	r2, r2, #1
 8001252:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001254:	4b51      	ldr	r3, [pc, #324]	; (800139c <HAL_ADC_Start_DMA+0x18c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a51      	ldr	r2, [pc, #324]	; (80013a0 <HAL_ADC_Start_DMA+0x190>)
 800125a:	fba2 2303 	umull	r2, r3, r2, r3
 800125e:	0c9a      	lsrs	r2, r3, #18
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001268:	e002      	b.n	8001270 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	3b01      	subs	r3, #1
 800126e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f9      	bne.n	800126a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b01      	cmp	r3, #1
 8001282:	f040 8085 	bne.w	8001390 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d007      	beq.n	80012b8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012c4:	d106      	bne.n	80012d4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f023 0206 	bic.w	r2, r3, #6
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	645a      	str	r2, [r3, #68]	; 0x44
 80012d2:	e002      	b.n	80012da <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2200      	movs	r2, #0
 80012d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <HAL_ADC_Start_DMA+0x194>)
 80012e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ea:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <HAL_ADC_Start_DMA+0x198>)
 80012ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f2:	4a2e      	ldr	r2, [pc, #184]	; (80013ac <HAL_ADC_Start_DMA+0x19c>)
 80012f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fa:	4a2d      	ldr	r2, [pc, #180]	; (80013b0 <HAL_ADC_Start_DMA+0x1a0>)
 80012fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001306:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001316:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001326:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	334c      	adds	r3, #76	; 0x4c
 8001332:	4619      	mov	r1, r3
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f000 fcc2 	bl	8001cc0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10f      	bne.n	8001368 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d11c      	bne.n	8001390 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	e013      	b.n	8001390 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <HAL_ADC_Start_DMA+0x1a4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d10e      	bne.n	8001390 <HAL_ADC_Start_DMA+0x180>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d107      	bne.n	8001390 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800138e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000004 	.word	0x20000004
 80013a0:	431bde83 	.word	0x431bde83
 80013a4:	40012300 	.word	0x40012300
 80013a8:	0800183d 	.word	0x0800183d
 80013ac:	080018f7 	.word	0x080018f7
 80013b0:	08001913 	.word	0x08001913
 80013b4:	40012000 	.word	0x40012000

080013b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d101      	bne.n	80013fc <HAL_ADC_ConfigChannel+0x1c>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e113      	b.n	8001624 <HAL_ADC_ConfigChannel+0x244>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b09      	cmp	r3, #9
 800140a:	d925      	bls.n	8001458 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68d9      	ldr	r1, [r3, #12]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	3b1e      	subs	r3, #30
 8001422:	2207      	movs	r2, #7
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43da      	mvns	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	400a      	ands	r2, r1
 8001430:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68d9      	ldr	r1, [r3, #12]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	b29b      	uxth	r3, r3
 8001442:	4618      	mov	r0, r3
 8001444:	4603      	mov	r3, r0
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4403      	add	r3, r0
 800144a:	3b1e      	subs	r3, #30
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	e022      	b.n	800149e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6919      	ldr	r1, [r3, #16]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	2207      	movs	r2, #7
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	400a      	ands	r2, r1
 800147a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6919      	ldr	r1, [r3, #16]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	4603      	mov	r3, r0
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4403      	add	r3, r0
 8001494:	409a      	lsls	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d824      	bhi.n	80014f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	3b05      	subs	r3, #5
 80014b8:	221f      	movs	r2, #31
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	400a      	ands	r2, r1
 80014c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	4618      	mov	r0, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	3b05      	subs	r3, #5
 80014e2:	fa00 f203 	lsl.w	r2, r0, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	635a      	str	r2, [r3, #52]	; 0x34
 80014ee:	e04c      	b.n	800158a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b0c      	cmp	r3, #12
 80014f6:	d824      	bhi.n	8001542 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	3b23      	subs	r3, #35	; 0x23
 800150a:	221f      	movs	r2, #31
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43da      	mvns	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	400a      	ands	r2, r1
 8001518:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	b29b      	uxth	r3, r3
 8001526:	4618      	mov	r0, r3
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	3b23      	subs	r3, #35	; 0x23
 8001534:	fa00 f203 	lsl.w	r2, r0, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	631a      	str	r2, [r3, #48]	; 0x30
 8001540:	e023      	b.n	800158a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	3b41      	subs	r3, #65	; 0x41
 8001554:	221f      	movs	r2, #31
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	400a      	ands	r2, r1
 8001562:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b29b      	uxth	r3, r3
 8001570:	4618      	mov	r0, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	3b41      	subs	r3, #65	; 0x41
 800157e:	fa00 f203 	lsl.w	r2, r0, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800158a:	4b29      	ldr	r3, [pc, #164]	; (8001630 <HAL_ADC_ConfigChannel+0x250>)
 800158c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a28      	ldr	r2, [pc, #160]	; (8001634 <HAL_ADC_ConfigChannel+0x254>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d10f      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x1d8>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b12      	cmp	r3, #18
 800159e:	d10b      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a1d      	ldr	r2, [pc, #116]	; (8001634 <HAL_ADC_ConfigChannel+0x254>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d12b      	bne.n	800161a <HAL_ADC_ConfigChannel+0x23a>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <HAL_ADC_ConfigChannel+0x258>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d003      	beq.n	80015d4 <HAL_ADC_ConfigChannel+0x1f4>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b11      	cmp	r3, #17
 80015d2:	d122      	bne.n	800161a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a11      	ldr	r2, [pc, #68]	; (8001638 <HAL_ADC_ConfigChannel+0x258>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d111      	bne.n	800161a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_ADC_ConfigChannel+0x25c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a11      	ldr	r2, [pc, #68]	; (8001640 <HAL_ADC_ConfigChannel+0x260>)
 80015fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001600:	0c9a      	lsrs	r2, r3, #18
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800160c:	e002      	b.n	8001614 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	3b01      	subs	r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f9      	bne.n	800160e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40012300 	.word	0x40012300
 8001634:	40012000 	.word	0x40012000
 8001638:	10000012 	.word	0x10000012
 800163c:	20000004 	.word	0x20000004
 8001640:	431bde83 	.word	0x431bde83

08001644 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800164c:	4b79      	ldr	r3, [pc, #484]	; (8001834 <ADC_Init+0x1f0>)
 800164e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	431a      	orrs	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001678:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	021a      	lsls	r2, r3, #8
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800169c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6859      	ldr	r1, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6899      	ldr	r1, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d6:	4a58      	ldr	r2, [pc, #352]	; (8001838 <ADC_Init+0x1f4>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d022      	beq.n	8001722 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6899      	ldr	r1, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800170c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6899      	ldr	r1, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	e00f      	b.n	8001742 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001730:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001740:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0202 	bic.w	r2, r2, #2
 8001750:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6899      	ldr	r1, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	7e1b      	ldrb	r3, [r3, #24]
 800175c:	005a      	lsls	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d01b      	beq.n	80017a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800177e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800178e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6859      	ldr	r1, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	3b01      	subs	r3, #1
 800179c:	035a      	lsls	r2, r3, #13
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	e007      	b.n	80017b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	051a      	lsls	r2, r3, #20
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6899      	ldr	r1, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017fa:	025a      	lsls	r2, r3, #9
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001812:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6899      	ldr	r1, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	029a      	lsls	r2, r3, #10
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	609a      	str	r2, [r3, #8]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	40012300 	.word	0x40012300
 8001838:	0f000001 	.word	0x0f000001

0800183c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001848:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001852:	2b00      	cmp	r3, #0
 8001854:	d13c      	bne.n	80018d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d12b      	bne.n	80018c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001874:	2b00      	cmp	r3, #0
 8001876:	d127      	bne.n	80018c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001890:	2b00      	cmp	r3, #0
 8001892:	d119      	bne.n	80018c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0220 	bic.w	r2, r2, #32
 80018a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	f043 0201 	orr.w	r2, r3, #1
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f7fe fe05 	bl	80004d8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80018ce:	e00e      	b.n	80018ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f7ff fd75 	bl	80013cc <HAL_ADC_ErrorCallback>
}
 80018e2:	e004      	b.n	80018ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	4798      	blx	r3
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001902:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f7ff fd57 	bl	80013b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2240      	movs	r2, #64	; 0x40
 8001924:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f043 0204 	orr.w	r2, r3, #4
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f7ff fd4a 	bl	80013cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800196c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	; (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <__NVIC_GetPriorityGrouping+0x18>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 0307 	and.w	r3, r3, #7
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	db0b      	blt.n	80019ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	4907      	ldr	r1, [pc, #28]	; (80019dc <__NVIC_EnableIRQ+0x38>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2001      	movs	r0, #1
 80019c6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000e100 	.word	0xe000e100

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	; (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	; (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf28      	it	cs
 8001a52:	2304      	movcs	r3, #4
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
         );
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	; 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aac:	d301      	bcc.n	8001ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <SysTick_Config+0x40>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aba:	210f      	movs	r1, #15
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f7ff ff8e 	bl	80019e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <SysTick_Config+0x40>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <SysTick_Config+0x40>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff29 	bl	8001940 <__NVIC_SetPriorityGrouping>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff ff3e 	bl	8001988 <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff8e 	bl	8001a34 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5d 	bl	80019e0 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff31 	bl	80019a4 <__NVIC_EnableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffa2 	bl	8001a9c <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff fadc 	bl	800112c <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e099      	b.n	8001cb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ba0:	e00f      	b.n	8001bc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ba2:	f7ff fac3 	bl	800112c <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	d908      	bls.n	8001bc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2203      	movs	r2, #3
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e078      	b.n	8001cb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1e8      	bne.n	8001ba2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <HAL_DMA_Init+0x158>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d107      	bne.n	8001c2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	4313      	orrs	r3, r2
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f023 0307 	bic.w	r3, r3, #7
 8001c42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d117      	bne.n	8001c86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00e      	beq.n	8001c86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fa6f 	bl	800214c <DMA_CheckFifoParam>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2240      	movs	r2, #64	; 0x40
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c82:	2301      	movs	r3, #1
 8001c84:	e016      	b.n	8001cb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 fa26 	bl	80020e0 <DMA_CalcBaseAndBitshift>
 8001c94:	4603      	mov	r3, r0
 8001c96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9c:	223f      	movs	r2, #63	; 0x3f
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	f010803f 	.word	0xf010803f

08001cc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_DMA_Start_IT+0x26>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e040      	b.n	8001d68 <HAL_DMA_Start_IT+0xa8>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d12f      	bne.n	8001d5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 f9b8 	bl	8002084 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	223f      	movs	r2, #63	; 0x3f
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0216 	orr.w	r2, r2, #22
 8001d2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0208 	orr.w	r2, r2, #8
 8001d46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e005      	b.n	8001d66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d62:	2302      	movs	r3, #2
 8001d64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d7c:	4b92      	ldr	r3, [pc, #584]	; (8001fc8 <HAL_DMA_IRQHandler+0x258>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a92      	ldr	r2, [pc, #584]	; (8001fcc <HAL_DMA_IRQHandler+0x25c>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	0a9b      	lsrs	r3, r3, #10
 8001d88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d01a      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d013      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0204 	bic.w	r2, r2, #4
 8001dc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc8:	2208      	movs	r2, #8
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd4:	f043 0201 	orr.w	r2, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de0:	2201      	movs	r2, #1
 8001de2:	409a      	lsls	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d012      	beq.n	8001e12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfe:	2201      	movs	r2, #1
 8001e00:	409a      	lsls	r2, r3
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0a:	f043 0202 	orr.w	r2, r3, #2
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e16:	2204      	movs	r2, #4
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d012      	beq.n	8001e48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00b      	beq.n	8001e48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	2204      	movs	r2, #4
 8001e36:	409a      	lsls	r2, r3
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e40:	f043 0204 	orr.w	r2, r3, #4
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d043      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d03c      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6a:	2210      	movs	r2, #16
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d018      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d108      	bne.n	8001ea0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d024      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	4798      	blx	r3
 8001e9e:	e01f      	b.n	8001ee0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d01b      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	4798      	blx	r3
 8001eb0:	e016      	b.n	8001ee0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0208 	bic.w	r2, r2, #8
 8001ece:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 808e 	beq.w	800200e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 8086 	beq.w	800200e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f06:	2220      	movs	r2, #32
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b05      	cmp	r3, #5
 8001f18:	d136      	bne.n	8001f88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0216 	bic.w	r2, r2, #22
 8001f28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695a      	ldr	r2, [r3, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d103      	bne.n	8001f4a <HAL_DMA_IRQHandler+0x1da>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0208 	bic.w	r2, r2, #8
 8001f58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	223f      	movs	r2, #63	; 0x3f
 8001f60:	409a      	lsls	r2, r3
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d07d      	beq.n	800207a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	4798      	blx	r3
        }
        return;
 8001f86:	e078      	b.n	800207a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d01c      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d108      	bne.n	8001fb6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d030      	beq.n	800200e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	4798      	blx	r3
 8001fb4:	e02b      	b.n	800200e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d027      	beq.n	800200e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	4798      	blx	r3
 8001fc6:	e022      	b.n	800200e <HAL_DMA_IRQHandler+0x29e>
 8001fc8:	20000004 	.word	0x20000004
 8001fcc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10f      	bne.n	8001ffe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0210 	bic.w	r2, r2, #16
 8001fec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002012:	2b00      	cmp	r3, #0
 8002014:	d032      	beq.n	800207c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d022      	beq.n	8002068 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2205      	movs	r2, #5
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0201 	bic.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	3301      	adds	r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	429a      	cmp	r2, r3
 8002044:	d307      	bcc.n	8002056 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f2      	bne.n	800203a <HAL_DMA_IRQHandler+0x2ca>
 8002054:	e000      	b.n	8002058 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002056:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	4798      	blx	r3
 8002078:	e000      	b.n	800207c <HAL_DMA_IRQHandler+0x30c>
        return;
 800207a:	bf00      	nop
    }
  }
}
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop

08002084 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b40      	cmp	r3, #64	; 0x40
 80020b0:	d108      	bne.n	80020c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020c2:	e007      	b.n	80020d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	60da      	str	r2, [r3, #12]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	3b10      	subs	r3, #16
 80020f0:	4a14      	ldr	r2, [pc, #80]	; (8002144 <DMA_CalcBaseAndBitshift+0x64>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	091b      	lsrs	r3, r3, #4
 80020f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020fa:	4a13      	ldr	r2, [pc, #76]	; (8002148 <DMA_CalcBaseAndBitshift+0x68>)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d909      	bls.n	8002122 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002116:	f023 0303 	bic.w	r3, r3, #3
 800211a:	1d1a      	adds	r2, r3, #4
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	659a      	str	r2, [r3, #88]	; 0x58
 8002120:	e007      	b.n	8002132 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800212a:	f023 0303 	bic.w	r3, r3, #3
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	aaaaaaab 	.word	0xaaaaaaab
 8002148:	080090a0 	.word	0x080090a0

0800214c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d11f      	bne.n	80021a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d855      	bhi.n	8002218 <DMA_CheckFifoParam+0xcc>
 800216c:	a201      	add	r2, pc, #4	; (adr r2, 8002174 <DMA_CheckFifoParam+0x28>)
 800216e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002172:	bf00      	nop
 8002174:	08002185 	.word	0x08002185
 8002178:	08002197 	.word	0x08002197
 800217c:	08002185 	.word	0x08002185
 8002180:	08002219 	.word	0x08002219
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d045      	beq.n	800221c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002194:	e042      	b.n	800221c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800219e:	d13f      	bne.n	8002220 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a4:	e03c      	b.n	8002220 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ae:	d121      	bne.n	80021f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d836      	bhi.n	8002224 <DMA_CheckFifoParam+0xd8>
 80021b6:	a201      	add	r2, pc, #4	; (adr r2, 80021bc <DMA_CheckFifoParam+0x70>)
 80021b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021bc:	080021cd 	.word	0x080021cd
 80021c0:	080021d3 	.word	0x080021d3
 80021c4:	080021cd 	.word	0x080021cd
 80021c8:	080021e5 	.word	0x080021e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
      break;
 80021d0:	e02f      	b.n	8002232 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d024      	beq.n	8002228 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e2:	e021      	b.n	8002228 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021ec:	d11e      	bne.n	800222c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021f2:	e01b      	b.n	800222c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d902      	bls.n	8002200 <DMA_CheckFifoParam+0xb4>
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d003      	beq.n	8002206 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021fe:	e018      	b.n	8002232 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
      break;
 8002204:	e015      	b.n	8002232 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00e      	beq.n	8002230 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
      break;
 8002216:	e00b      	b.n	8002230 <DMA_CheckFifoParam+0xe4>
      break;
 8002218:	bf00      	nop
 800221a:	e00a      	b.n	8002232 <DMA_CheckFifoParam+0xe6>
      break;
 800221c:	bf00      	nop
 800221e:	e008      	b.n	8002232 <DMA_CheckFifoParam+0xe6>
      break;
 8002220:	bf00      	nop
 8002222:	e006      	b.n	8002232 <DMA_CheckFifoParam+0xe6>
      break;
 8002224:	bf00      	nop
 8002226:	e004      	b.n	8002232 <DMA_CheckFifoParam+0xe6>
      break;
 8002228:	bf00      	nop
 800222a:	e002      	b.n	8002232 <DMA_CheckFifoParam+0xe6>
      break;   
 800222c:	bf00      	nop
 800222e:	e000      	b.n	8002232 <DMA_CheckFifoParam+0xe6>
      break;
 8002230:	bf00      	nop
    }
  } 
  
  return status; 
 8002232:	7bfb      	ldrb	r3, [r7, #15]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	; 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	e159      	b.n	8002510 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	429a      	cmp	r2, r3
 8002276:	f040 8148 	bne.w	800250a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d00b      	beq.n	800229a <HAL_GPIO_Init+0x5a>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d007      	beq.n	800229a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800228e:	2b11      	cmp	r3, #17
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b12      	cmp	r3, #18
 8002298:	d130      	bne.n	80022fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	2203      	movs	r2, #3
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022d0:	2201      	movs	r2, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 0201 	and.w	r2, r3, #1
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0xfc>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b12      	cmp	r3, #18
 800233a:	d123      	bne.n	8002384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3208      	adds	r2, #8
 8002344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	220f      	movs	r2, #15
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	69b9      	ldr	r1, [r7, #24]
 8002380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0203 	and.w	r2, r3, #3
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80a2 	beq.w	800250a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b56      	ldr	r3, [pc, #344]	; (8002524 <HAL_GPIO_Init+0x2e4>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	4a55      	ldr	r2, [pc, #340]	; (8002524 <HAL_GPIO_Init+0x2e4>)
 80023d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d4:	6453      	str	r3, [r2, #68]	; 0x44
 80023d6:	4b53      	ldr	r3, [pc, #332]	; (8002524 <HAL_GPIO_Init+0x2e4>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023e2:	4a51      	ldr	r2, [pc, #324]	; (8002528 <HAL_GPIO_Init+0x2e8>)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3302      	adds	r3, #2
 80023ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	220f      	movs	r2, #15
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a48      	ldr	r2, [pc, #288]	; (800252c <HAL_GPIO_Init+0x2ec>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d019      	beq.n	8002442 <HAL_GPIO_Init+0x202>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a47      	ldr	r2, [pc, #284]	; (8002530 <HAL_GPIO_Init+0x2f0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d013      	beq.n	800243e <HAL_GPIO_Init+0x1fe>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a46      	ldr	r2, [pc, #280]	; (8002534 <HAL_GPIO_Init+0x2f4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00d      	beq.n	800243a <HAL_GPIO_Init+0x1fa>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a45      	ldr	r2, [pc, #276]	; (8002538 <HAL_GPIO_Init+0x2f8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d007      	beq.n	8002436 <HAL_GPIO_Init+0x1f6>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a44      	ldr	r2, [pc, #272]	; (800253c <HAL_GPIO_Init+0x2fc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_GPIO_Init+0x1f2>
 800242e:	2304      	movs	r3, #4
 8002430:	e008      	b.n	8002444 <HAL_GPIO_Init+0x204>
 8002432:	2307      	movs	r3, #7
 8002434:	e006      	b.n	8002444 <HAL_GPIO_Init+0x204>
 8002436:	2303      	movs	r3, #3
 8002438:	e004      	b.n	8002444 <HAL_GPIO_Init+0x204>
 800243a:	2302      	movs	r3, #2
 800243c:	e002      	b.n	8002444 <HAL_GPIO_Init+0x204>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_GPIO_Init+0x204>
 8002442:	2300      	movs	r3, #0
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	f002 0203 	and.w	r2, r2, #3
 800244a:	0092      	lsls	r2, r2, #2
 800244c:	4093      	lsls	r3, r2
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002454:	4934      	ldr	r1, [pc, #208]	; (8002528 <HAL_GPIO_Init+0x2e8>)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	3302      	adds	r3, #2
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002462:	4b37      	ldr	r3, [pc, #220]	; (8002540 <HAL_GPIO_Init+0x300>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002486:	4a2e      	ldr	r2, [pc, #184]	; (8002540 <HAL_GPIO_Init+0x300>)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800248c:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <HAL_GPIO_Init+0x300>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024b0:	4a23      	ldr	r2, [pc, #140]	; (8002540 <HAL_GPIO_Init+0x300>)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b6:	4b22      	ldr	r3, [pc, #136]	; (8002540 <HAL_GPIO_Init+0x300>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024da:	4a19      	ldr	r2, [pc, #100]	; (8002540 <HAL_GPIO_Init+0x300>)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e0:	4b17      	ldr	r3, [pc, #92]	; (8002540 <HAL_GPIO_Init+0x300>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002504:	4a0e      	ldr	r2, [pc, #56]	; (8002540 <HAL_GPIO_Init+0x300>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3301      	adds	r3, #1
 800250e:	61fb      	str	r3, [r7, #28]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b0f      	cmp	r3, #15
 8002514:	f67f aea2 	bls.w	800225c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002518:	bf00      	nop
 800251a:	3724      	adds	r7, #36	; 0x24
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	40023800 	.word	0x40023800
 8002528:	40013800 	.word	0x40013800
 800252c:	40020000 	.word	0x40020000
 8002530:	40020400 	.word	0x40020400
 8002534:	40020800 	.word	0x40020800
 8002538:	40020c00 	.word	0x40020c00
 800253c:	40021000 	.word	0x40021000
 8002540:	40013c00 	.word	0x40013c00

08002544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
 8002550:	4613      	mov	r3, r2
 8002552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002554:	787b      	ldrb	r3, [r7, #1]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800255a:	887a      	ldrh	r2, [r7, #2]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002560:	e003      	b.n	800256a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	041a      	lsls	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	619a      	str	r2, [r3, #24]
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d006      	beq.n	800259c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f806 	bl	80025a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40013c00 	.word	0x40013c00

080025a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c0:	b08f      	sub	sp, #60	; 0x3c
 80025c2:	af0a      	add	r7, sp, #40	; 0x28
 80025c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e10f      	b.n	80027f0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f006 f92e 	bl	800884c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2203      	movs	r2, #3
 80025f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f003 f8f5 	bl	80057fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	687e      	ldr	r6, [r7, #4]
 800261c:	466d      	mov	r5, sp
 800261e:	f106 0410 	add.w	r4, r6, #16
 8002622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800262a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800262e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002632:	1d33      	adds	r3, r6, #4
 8002634:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002636:	6838      	ldr	r0, [r7, #0]
 8002638:	f002 ffcc 	bl	80055d4 <USB_CoreInit>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2202      	movs	r2, #2
 8002646:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e0d0      	b.n	80027f0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f003 f8e3 	bl	8005820 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265a:	2300      	movs	r3, #0
 800265c:	73fb      	strb	r3, [r7, #15]
 800265e:	e04a      	b.n	80026f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	333d      	adds	r3, #61	; 0x3d
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	333c      	adds	r3, #60	; 0x3c
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	b298      	uxth	r0, r3
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	3342      	adds	r3, #66	; 0x42
 800269c:	4602      	mov	r2, r0
 800269e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	333f      	adds	r3, #63	; 0x3f
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	3344      	adds	r3, #68	; 0x44
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3348      	adds	r3, #72	; 0x48
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026dc:	7bfa      	ldrb	r2, [r7, #15]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	3350      	adds	r3, #80	; 0x50
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	3301      	adds	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d3af      	bcc.n	8002660 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]
 8002704:	e044      	b.n	8002790 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800272e:	7bfa      	ldrb	r2, [r7, #15]
 8002730:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	3301      	adds	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	d3b5      	bcc.n	8002706 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	687e      	ldr	r6, [r7, #4]
 80027a2:	466d      	mov	r5, sp
 80027a4:	f106 0410 	add.w	r4, r6, #16
 80027a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80027b8:	1d33      	adds	r3, r6, #4
 80027ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027bc:	6838      	ldr	r0, [r7, #0]
 80027be:	f003 f859 	bl	8005874 <USB_DevInit>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e00d      	b.n	80027f0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f004 f8a1 	bl	8006930 <USB_DevDisconnect>

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_PCD_Start+0x1c>
 8002810:	2302      	movs	r3, #2
 8002812:	e020      	b.n	8002856 <HAL_PCD_Start+0x5e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	2b01      	cmp	r3, #1
 8002822:	d109      	bne.n	8002838 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002828:	2b01      	cmp	r3, #1
 800282a:	d005      	beq.n	8002838 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002830:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f002 ffcd 	bl	80057dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f004 f851 	bl	80068ee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800285e:	b590      	push	{r4, r7, lr}
 8002860:	b08d      	sub	sp, #52	; 0x34
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f004 f90f 	bl	8006a98 <USB_GetMode>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	f040 839d 	bne.w	8002fbc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f004 f873 	bl	8006972 <USB_ReadInterrupts>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8393 	beq.w	8002fba <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f004 f86a 	bl	8006972 <USB_ReadInterrupts>
 800289e:	4603      	mov	r3, r0
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d107      	bne.n	80028b8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f002 0202 	and.w	r2, r2, #2
 80028b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f004 f858 	bl	8006972 <USB_ReadInterrupts>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b10      	cmp	r3, #16
 80028ca:	d161      	bne.n	8002990 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0210 	bic.w	r2, r2, #16
 80028da:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	f003 020f 	and.w	r2, r3, #15
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	4413      	add	r3, r2
 80028f8:	3304      	adds	r3, #4
 80028fa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	0c5b      	lsrs	r3, r3, #17
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	2b02      	cmp	r3, #2
 8002906:	d124      	bne.n	8002952 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d035      	beq.n	8002980 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800291e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002922:	b29b      	uxth	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	6a38      	ldr	r0, [r7, #32]
 8002928:	f003 febe 	bl	80066a8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002938:	441a      	add	r2, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800294a:	441a      	add	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	619a      	str	r2, [r3, #24]
 8002950:	e016      	b.n	8002980 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	0c5b      	lsrs	r3, r3, #17
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	2b06      	cmp	r3, #6
 800295c:	d110      	bne.n	8002980 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002964:	2208      	movs	r2, #8
 8002966:	4619      	mov	r1, r3
 8002968:	6a38      	ldr	r0, [r7, #32]
 800296a:	f003 fe9d 	bl	80066a8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800297a:	441a      	add	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0210 	orr.w	r2, r2, #16
 800298e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f003 ffec 	bl	8006972 <USB_ReadInterrupts>
 800299a:	4603      	mov	r3, r0
 800299c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029a4:	d16e      	bne.n	8002a84 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f003 fff2 	bl	8006998 <USB_ReadDevAllOutEpInterrupt>
 80029b4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80029b6:	e062      	b.n	8002a7e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d057      	beq.n	8002a72 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f004 f817 	bl	8006a00 <USB_ReadDevOutEPInterrupt>
 80029d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00c      	beq.n	80029f8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ea:	461a      	mov	r2, r3
 80029ec:	2301      	movs	r3, #1
 80029ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80029f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fdb0 	bl	8003558 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00c      	beq.n	8002a1c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2308      	movs	r3, #8
 8002a12:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 feaa 	bl	8003770 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a32:	461a      	mov	r2, r3
 8002a34:	2310      	movs	r3, #16
 8002a36:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2320      	movs	r3, #32
 8002a52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a70:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	3301      	adds	r3, #1
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	085b      	lsrs	r3, r3, #1
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d199      	bne.n	80029b8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f003 ff72 	bl	8006972 <USB_ReadInterrupts>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a98:	f040 80c0 	bne.w	8002c1c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f003 ff93 	bl	80069cc <USB_ReadDevAllInEpInterrupt>
 8002aa6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002aac:	e0b2      	b.n	8002c14 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80a7 	beq.w	8002c08 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 ffb9 	bl	8006a3c <USB_ReadDevInEPInterrupt>
 8002aca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d057      	beq.n	8002b86 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	2201      	movs	r2, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69f9      	ldr	r1, [r7, #28]
 8002af2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002af6:	4013      	ands	r3, r2
 8002af8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b06:	461a      	mov	r2, r3
 8002b08:	2301      	movs	r3, #1
 8002b0a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d132      	bne.n	8002b7a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	3348      	adds	r3, #72	; 0x48
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4403      	add	r3, r0
 8002b34:	3344      	adds	r3, #68	; 0x44
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4419      	add	r1, r3
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4403      	add	r3, r0
 8002b48:	3348      	adds	r3, #72	; 0x48
 8002b4a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d113      	bne.n	8002b7a <HAL_PCD_IRQHandler+0x31c>
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	3350      	adds	r3, #80	; 0x50
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d108      	bne.n	8002b7a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b72:	461a      	mov	r2, r3
 8002b74:	2101      	movs	r1, #1
 8002b76:	f003 ffc1 	bl	8006afc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f005 fee4 	bl	800894e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2310      	movs	r3, #16
 8002bbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	2340      	movs	r3, #64	; 0x40
 8002bd8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fc1b 	bl	800343e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	085b      	lsrs	r3, r3, #1
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f47f af49 	bne.w	8002aae <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 fea6 	bl	8006972 <USB_ReadInterrupts>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c30:	d122      	bne.n	8002c78 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c40:	f023 0301 	bic.w	r3, r3, #1
 8002c44:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d108      	bne.n	8002c62 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c58:	2100      	movs	r1, #0
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fe26 	bl	80038ac <HAL_PCDEx_LPM_Callback>
 8002c60:	e002      	b.n	8002c68 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f005 fee0 	bl	8008a28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695a      	ldr	r2, [r3, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f003 fe78 	bl	8006972 <USB_ReadInterrupts>
 8002c82:	4603      	mov	r3, r0
 8002c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c8c:	d112      	bne.n	8002cb4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d102      	bne.n	8002ca4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f005 fe9c 	bl	80089dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002cb2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 fe5a 	bl	8006972 <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc8:	f040 80c7 	bne.w	8002e5a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2110      	movs	r1, #16
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f002 ff28 	bl	8005b3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cec:	2300      	movs	r3, #0
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf0:	e056      	b.n	8002da0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d04:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d16:	0151      	lsls	r1, r2, #5
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	440a      	add	r2, r1
 8002d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d24:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d36:	0151      	lsls	r1, r2, #5
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	440a      	add	r2, r1
 8002d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d52:	461a      	mov	r2, r3
 8002d54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d58:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d6a:	0151      	lsls	r1, r2, #5
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	440a      	add	r2, r1
 8002d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d8a:	0151      	lsls	r1, r2, #5
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	440a      	add	r2, r1
 8002d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d3a3      	bcc.n	8002cf2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002db8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002dbc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d016      	beq.n	8002df4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dd6:	f043 030b 	orr.w	r3, r3, #11
 8002dda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dec:	f043 030b 	orr.w	r3, r3, #11
 8002df0:	6453      	str	r3, [r2, #68]	; 0x44
 8002df2:	e015      	b.n	8002e20 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e06:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e0a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e1a:	f043 030b 	orr.w	r3, r3, #11
 8002e1e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e32:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e44:	461a      	mov	r2, r3
 8002e46:	f003 fe59 	bl	8006afc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 fd87 	bl	8006972 <USB_ReadInterrupts>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e6e:	d124      	bne.n	8002eba <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f003 fe1d 	bl	8006ab4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f002 febd 	bl	8005bfe <USB_GetDevSpeed>
 8002e84:	4603      	mov	r3, r0
 8002e86:	461a      	mov	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681c      	ldr	r4, [r3, #0]
 8002e90:	f001 f944 	bl	800411c <HAL_RCC_GetHCLKFreq>
 8002e94:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f002 fbfa 	bl	8005698 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f005 fd7a 	bl	800899e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002eb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f003 fd57 	bl	8006972 <USB_ReadInterrupts>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d10a      	bne.n	8002ee4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f005 fd57 	bl	8008982 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f002 0208 	and.w	r2, r2, #8
 8002ee2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f003 fd42 	bl	8006972 <USB_ReadInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ef8:	d10f      	bne.n	8002f1a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	4619      	mov	r1, r3
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f005 fdaf 	bl	8008a68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f003 fd27 	bl	8006972 <USB_ReadInterrupts>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f2e:	d10f      	bne.n	8002f50 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	4619      	mov	r1, r3
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f005 fd82 	bl	8008a44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002f4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 fd0c 	bl	8006972 <USB_ReadInterrupts>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f64:	d10a      	bne.n	8002f7c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f005 fd90 	bl	8008a8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f003 fcf6 	bl	8006972 <USB_ReadInterrupts>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d115      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f005 fd80 	bl	8008aa8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6859      	ldr	r1, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	e000      	b.n	8002fbc <HAL_PCD_IRQHandler+0x75e>
      return;
 8002fba:	bf00      	nop
    }
  }
}
 8002fbc:	3734      	adds	r7, #52	; 0x34
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd90      	pop	{r4, r7, pc}

08002fc2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_PCD_SetAddress+0x1a>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e013      	b.n	8003004 <HAL_PCD_SetAddress+0x42>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f003 fc54 	bl	80068a2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	4608      	mov	r0, r1
 8003016:	4611      	mov	r1, r2
 8003018:	461a      	mov	r2, r3
 800301a:	4603      	mov	r3, r0
 800301c:	70fb      	strb	r3, [r7, #3]
 800301e:	460b      	mov	r3, r1
 8003020:	803b      	strh	r3, [r7, #0]
 8003022:	4613      	mov	r3, r2
 8003024:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800302a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800302e:	2b00      	cmp	r3, #0
 8003030:	da0f      	bge.n	8003052 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	f003 020f 	and.w	r2, r3, #15
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	3338      	adds	r3, #56	; 0x38
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	3304      	adds	r3, #4
 8003048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	705a      	strb	r2, [r3, #1]
 8003050:	e00f      	b.n	8003072 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	f003 020f 	and.w	r2, r3, #15
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	4413      	add	r3, r2
 8003068:	3304      	adds	r3, #4
 800306a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800307e:	883a      	ldrh	r2, [r7, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	78ba      	ldrb	r2, [r7, #2]
 8003088:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	785b      	ldrb	r3, [r3, #1]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d004      	beq.n	800309c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800309c:	78bb      	ldrb	r3, [r7, #2]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d102      	bne.n	80030a8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_PCD_EP_Open+0xaa>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e00e      	b.n	80030d4 <HAL_PCD_EP_Open+0xc8>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68f9      	ldr	r1, [r7, #12]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f002 fdbf 	bl	8005c48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80030d2:	7afb      	ldrb	r3, [r7, #11]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	da0f      	bge.n	8003110 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	f003 020f 	and.w	r2, r3, #15
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	3338      	adds	r3, #56	; 0x38
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	705a      	strb	r2, [r3, #1]
 800310e:	e00f      	b.n	8003130 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	f003 020f 	and.w	r2, r3, #15
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	3304      	adds	r3, #4
 8003128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	b2da      	uxtb	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_PCD_EP_Close+0x6e>
 8003146:	2302      	movs	r3, #2
 8003148:	e00e      	b.n	8003168 <HAL_PCD_EP_Close+0x8c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68f9      	ldr	r1, [r7, #12]
 8003158:	4618      	mov	r0, r3
 800315a:	f002 fdfd 	bl	8005d58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	460b      	mov	r3, r1
 800317e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003180:	7afb      	ldrb	r3, [r7, #11]
 8003182:	f003 020f 	and.w	r2, r3, #15
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4413      	add	r3, r2
 8003196:	3304      	adds	r3, #4
 8003198:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2200      	movs	r2, #0
 80031aa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2200      	movs	r2, #0
 80031b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b2:	7afb      	ldrb	r3, [r7, #11]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d102      	bne.n	80031cc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031cc:	7afb      	ldrb	r3, [r7, #11]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	6979      	ldr	r1, [r7, #20]
 80031e4:	f003 f8d8 	bl	8006398 <USB_EP0StartXfer>
 80031e8:	e008      	b.n	80031fc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	6979      	ldr	r1, [r7, #20]
 80031f8:	f002 fe8a 	bl	8005f10 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	460b      	mov	r3, r1
 8003210:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	f003 020f 	and.w	r2, r3, #15
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003228:	681b      	ldr	r3, [r3, #0]
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b086      	sub	sp, #24
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
 8003242:	460b      	mov	r3, r1
 8003244:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003246:	7afb      	ldrb	r3, [r7, #11]
 8003248:	f003 020f 	and.w	r2, r3, #15
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	3338      	adds	r3, #56	; 0x38
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4413      	add	r3, r2
 800325a:	3304      	adds	r3, #4
 800325c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2200      	movs	r2, #0
 800326e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2201      	movs	r2, #1
 8003274:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003276:	7afb      	ldrb	r3, [r7, #11]
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	b2da      	uxtb	r2, r3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d102      	bne.n	8003290 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003290:	7afb      	ldrb	r3, [r7, #11]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	6979      	ldr	r1, [r7, #20]
 80032a8:	f003 f876 	bl	8006398 <USB_EP0StartXfer>
 80032ac:	e008      	b.n	80032c0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	6979      	ldr	r1, [r7, #20]
 80032bc:	f002 fe28 	bl	8005f10 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	460b      	mov	r3, r1
 80032d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	f003 020f 	and.w	r2, r3, #15
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d901      	bls.n	80032e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e050      	b.n	800338a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	da0f      	bge.n	8003310 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	f003 020f 	and.w	r2, r3, #15
 80032f6:	4613      	mov	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	3338      	adds	r3, #56	; 0x38
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	4413      	add	r3, r2
 8003304:	3304      	adds	r3, #4
 8003306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	705a      	strb	r2, [r3, #1]
 800330e:	e00d      	b.n	800332c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	3304      	adds	r3, #4
 8003324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	b2da      	uxtb	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_PCD_EP_SetStall+0x82>
 8003348:	2302      	movs	r3, #2
 800334a:	e01e      	b.n	800338a <HAL_PCD_EP_SetStall+0xc0>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68f9      	ldr	r1, [r7, #12]
 800335a:	4618      	mov	r0, r3
 800335c:	f003 f9cd 	bl	80066fa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10a      	bne.n	8003380 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	b2d9      	uxtb	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800337a:	461a      	mov	r2, r3
 800337c:	f003 fbbe 	bl	8006afc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	460b      	mov	r3, r1
 800339c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	f003 020f 	and.w	r2, r3, #15
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d901      	bls.n	80033b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e042      	b.n	8003436 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	da0f      	bge.n	80033d8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	f003 020f 	and.w	r2, r3, #15
 80033be:	4613      	mov	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	3338      	adds	r3, #56	; 0x38
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4413      	add	r3, r2
 80033cc:	3304      	adds	r3, #4
 80033ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	705a      	strb	r2, [r3, #1]
 80033d6:	e00f      	b.n	80033f8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	f003 020f 	and.w	r2, r3, #15
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	3304      	adds	r3, #4
 80033f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033fe:	78fb      	ldrb	r3, [r7, #3]
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_PCD_EP_ClrStall+0x86>
 8003414:	2302      	movs	r3, #2
 8003416:	e00e      	b.n	8003436 <HAL_PCD_EP_ClrStall+0xa4>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68f9      	ldr	r1, [r7, #12]
 8003426:	4618      	mov	r0, r3
 8003428:	f003 f9d5 	bl	80067d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b08a      	sub	sp, #40	; 0x28
 8003442:	af02      	add	r7, sp, #8
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	3338      	adds	r3, #56	; 0x38
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	3304      	adds	r3, #4
 8003464:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	429a      	cmp	r2, r3
 8003470:	d901      	bls.n	8003476 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e06c      	b.n	8003550 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	429a      	cmp	r2, r3
 800348a:	d902      	bls.n	8003492 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3303      	adds	r3, #3
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800349a:	e02b      	b.n	80034f4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d902      	bls.n	80034b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	3303      	adds	r3, #3
 80034bc:	089b      	lsrs	r3, r3, #2
 80034be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68d9      	ldr	r1, [r3, #12]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	4603      	mov	r3, r0
 80034d6:	6978      	ldr	r0, [r7, #20]
 80034d8:	f003 f8b1 	bl	800663e <USB_WritePacket>

    ep->xfer_buff  += len;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	441a      	add	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	699a      	ldr	r2, [r3, #24]
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	441a      	add	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	b29b      	uxth	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	429a      	cmp	r2, r3
 8003508:	d809      	bhi.n	800351e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003512:	429a      	cmp	r2, r3
 8003514:	d203      	bcs.n	800351e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1be      	bne.n	800349c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	695a      	ldr	r2, [r3, #20]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	429a      	cmp	r2, r3
 8003528:	d811      	bhi.n	800354e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	2201      	movs	r2, #1
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	43db      	mvns	r3, r3
 8003544:	6939      	ldr	r1, [r7, #16]
 8003546:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800354a:	4013      	ands	r3, r2
 800354c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3720      	adds	r7, #32
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	333c      	adds	r3, #60	; 0x3c
 8003570:	3304      	adds	r3, #4
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b01      	cmp	r3, #1
 800358c:	f040 80a0 	bne.w	80036d0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d015      	beq.n	80035c6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4a72      	ldr	r2, [pc, #456]	; (8003768 <PCD_EP_OutXfrComplete_int+0x210>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	f240 80dd 	bls.w	800375e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80d7 	beq.w	800375e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035bc:	461a      	mov	r2, r3
 80035be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035c2:	6093      	str	r3, [r2, #8]
 80035c4:	e0cb      	b.n	800375e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d009      	beq.n	80035e4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035dc:	461a      	mov	r2, r3
 80035de:	2320      	movs	r3, #32
 80035e0:	6093      	str	r3, [r2, #8]
 80035e2:	e0bc      	b.n	800375e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 80b7 	bne.w	800375e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4a5d      	ldr	r2, [pc, #372]	; (8003768 <PCD_EP_OutXfrComplete_int+0x210>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d90f      	bls.n	8003618 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360e:	461a      	mov	r2, r3
 8003610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003614:	6093      	str	r3, [r2, #8]
 8003616:	e0a2      	b.n	800375e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800362a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	0159      	lsls	r1, r3, #5
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	440b      	add	r3, r1
 8003634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800363e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	4613      	mov	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4403      	add	r3, r0
 800364e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003652:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003666:	6819      	ldr	r1, [r3, #0]
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4403      	add	r3, r0
 8003676:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4419      	add	r1, r3
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4403      	add	r3, r0
 800368c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003690:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d114      	bne.n	80036c2 <PCD_EP_OutXfrComplete_int+0x16a>
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d108      	bne.n	80036c2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036ba:	461a      	mov	r2, r3
 80036bc:	2101      	movs	r1, #1
 80036be:	f003 fa1d 	bl	8006afc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	4619      	mov	r1, r3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f005 f925 	bl	8008918 <HAL_PCD_DataOutStageCallback>
 80036ce:	e046      	b.n	800375e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4a26      	ldr	r2, [pc, #152]	; (800376c <PCD_EP_OutXfrComplete_int+0x214>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d124      	bne.n	8003722 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ee:	461a      	mov	r2, r3
 80036f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f4:	6093      	str	r3, [r2, #8]
 80036f6:	e032      	b.n	800375e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370e:	461a      	mov	r2, r3
 8003710:	2320      	movs	r3, #32
 8003712:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	4619      	mov	r1, r3
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f005 f8fc 	bl	8008918 <HAL_PCD_DataOutStageCallback>
 8003720:	e01d      	b.n	800375e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d114      	bne.n	8003752 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d108      	bne.n	8003752 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800374a:	461a      	mov	r2, r3
 800374c:	2100      	movs	r1, #0
 800374e:	f003 f9d5 	bl	8006afc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	4619      	mov	r1, r3
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f005 f8dd 	bl	8008918 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	4f54300a 	.word	0x4f54300a
 800376c:	4f54310a 	.word	0x4f54310a

08003770 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	333c      	adds	r3, #60	; 0x3c
 8003788:	3304      	adds	r3, #4
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4a15      	ldr	r2, [pc, #84]	; (80037f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d90e      	bls.n	80037c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d009      	beq.n	80037c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037bc:	461a      	mov	r2, r3
 80037be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f005 f895 	bl	80088f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d90c      	bls.n	80037ec <PCD_EP_OutSetupPacket_int+0x7c>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d108      	bne.n	80037ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037e4:	461a      	mov	r2, r3
 80037e6:	2101      	movs	r1, #1
 80037e8:	f003 f988 	bl	8006afc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	4f54300a 	.word	0x4f54300a

080037fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
 8003808:	4613      	mov	r3, r2
 800380a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d107      	bne.n	800382a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800381a:	883b      	ldrh	r3, [r7, #0]
 800381c:	0419      	lsls	r1, r3, #16
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	430a      	orrs	r2, r1
 8003826:	629a      	str	r2, [r3, #40]	; 0x28
 8003828:	e028      	b.n	800387c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	0c1b      	lsrs	r3, r3, #16
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	4413      	add	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003838:	2300      	movs	r3, #0
 800383a:	73fb      	strb	r3, [r7, #15]
 800383c:	e00d      	b.n	800385a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	3340      	adds	r3, #64	; 0x40
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	0c1b      	lsrs	r3, r3, #16
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	4413      	add	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	3301      	adds	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
 800385a:	7bfa      	ldrb	r2, [r7, #15]
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	3b01      	subs	r3, #1
 8003860:	429a      	cmp	r2, r3
 8003862:	d3ec      	bcc.n	800383e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003864:	883b      	ldrh	r3, [r7, #0]
 8003866:	0418      	lsls	r0, r3, #16
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6819      	ldr	r1, [r3, #0]
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	3b01      	subs	r3, #1
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	4302      	orrs	r2, r0
 8003874:	3340      	adds	r3, #64	; 0x40
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	460b      	mov	r3, r1
 8003894:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	887a      	ldrh	r2, [r7, #2]
 800389c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e25b      	b.n	8003d8e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d075      	beq.n	80039ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038e2:	4ba3      	ldr	r3, [pc, #652]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d00c      	beq.n	8003908 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ee:	4ba0      	ldr	r3, [pc, #640]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d112      	bne.n	8003920 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fa:	4b9d      	ldr	r3, [pc, #628]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003906:	d10b      	bne.n	8003920 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	4b99      	ldr	r3, [pc, #612]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d05b      	beq.n	80039cc <HAL_RCC_OscConfig+0x108>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d157      	bne.n	80039cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e236      	b.n	8003d8e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003928:	d106      	bne.n	8003938 <HAL_RCC_OscConfig+0x74>
 800392a:	4b91      	ldr	r3, [pc, #580]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a90      	ldr	r2, [pc, #576]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e01d      	b.n	8003974 <HAL_RCC_OscConfig+0xb0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0x98>
 8003942:	4b8b      	ldr	r3, [pc, #556]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a8a      	ldr	r2, [pc, #552]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	4b88      	ldr	r3, [pc, #544]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a87      	ldr	r2, [pc, #540]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e00b      	b.n	8003974 <HAL_RCC_OscConfig+0xb0>
 800395c:	4b84      	ldr	r3, [pc, #528]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a83      	ldr	r2, [pc, #524]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	4b81      	ldr	r3, [pc, #516]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a80      	ldr	r2, [pc, #512]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 800396e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d013      	beq.n	80039a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fd fbd6 	bl	800112c <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003984:	f7fd fbd2 	bl	800112c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	; 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e1fb      	b.n	8003d8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003996:	4b76      	ldr	r3, [pc, #472]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0xc0>
 80039a2:	e014      	b.n	80039ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fd fbc2 	bl	800112c <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ac:	f7fd fbbe 	bl	800112c <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e1e7      	b.n	8003d8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039be:	4b6c      	ldr	r3, [pc, #432]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0xe8>
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d063      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039da:	4b65      	ldr	r3, [pc, #404]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e6:	4b62      	ldr	r3, [pc, #392]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d11c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039f2:	4b5f      	ldr	r3, [pc, #380]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d116      	bne.n	8003a2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fe:	4b5c      	ldr	r3, [pc, #368]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <HAL_RCC_OscConfig+0x152>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d001      	beq.n	8003a16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e1bb      	b.n	8003d8e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a16:	4b56      	ldr	r3, [pc, #344]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4952      	ldr	r1, [pc, #328]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2a:	e03a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d020      	beq.n	8003a76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a34:	4b4f      	ldr	r3, [pc, #316]	; (8003b74 <HAL_RCC_OscConfig+0x2b0>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3a:	f7fd fb77 	bl	800112c <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a42:	f7fd fb73 	bl	800112c <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e19c      	b.n	8003d8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a54:	4b46      	ldr	r3, [pc, #280]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a60:	4b43      	ldr	r3, [pc, #268]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4940      	ldr	r1, [pc, #256]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	600b      	str	r3, [r1, #0]
 8003a74:	e015      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a76:	4b3f      	ldr	r3, [pc, #252]	; (8003b74 <HAL_RCC_OscConfig+0x2b0>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fd fb56 	bl	800112c <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a84:	f7fd fb52 	bl	800112c <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e17b      	b.n	8003d8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a96:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d030      	beq.n	8003b10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d016      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab6:	4b30      	ldr	r3, [pc, #192]	; (8003b78 <HAL_RCC_OscConfig+0x2b4>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7fd fb36 	bl	800112c <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac4:	f7fd fb32 	bl	800112c <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e15b      	b.n	8003d8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad6:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x200>
 8003ae2:	e015      	b.n	8003b10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae4:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <HAL_RCC_OscConfig+0x2b4>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aea:	f7fd fb1f 	bl	800112c <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af2:	f7fd fb1b 	bl	800112c <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e144      	b.n	8003d8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f0      	bne.n	8003af2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80a0 	beq.w	8003c5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b22:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10f      	bne.n	8003b4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	4a0e      	ldr	r2, [pc, #56]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_OscConfig+0x2b8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d121      	bne.n	8003b9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b5a:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <HAL_RCC_OscConfig+0x2b8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a07      	ldr	r2, [pc, #28]	; (8003b7c <HAL_RCC_OscConfig+0x2b8>)
 8003b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b66:	f7fd fae1 	bl	800112c <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6c:	e011      	b.n	8003b92 <HAL_RCC_OscConfig+0x2ce>
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800
 8003b74:	42470000 	.word	0x42470000
 8003b78:	42470e80 	.word	0x42470e80
 8003b7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b80:	f7fd fad4 	bl	800112c <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e0fd      	b.n	8003d8e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b92:	4b81      	ldr	r3, [pc, #516]	; (8003d98 <HAL_RCC_OscConfig+0x4d4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d106      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x2f0>
 8003ba6:	4b7d      	ldr	r3, [pc, #500]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	4a7c      	ldr	r2, [pc, #496]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb2:	e01c      	b.n	8003bee <HAL_RCC_OscConfig+0x32a>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b05      	cmp	r3, #5
 8003bba:	d10c      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x312>
 8003bbc:	4b77      	ldr	r3, [pc, #476]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	4a76      	ldr	r2, [pc, #472]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003bc2:	f043 0304 	orr.w	r3, r3, #4
 8003bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc8:	4b74      	ldr	r3, [pc, #464]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	4a73      	ldr	r2, [pc, #460]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd4:	e00b      	b.n	8003bee <HAL_RCC_OscConfig+0x32a>
 8003bd6:	4b71      	ldr	r3, [pc, #452]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bda:	4a70      	ldr	r2, [pc, #448]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	6713      	str	r3, [r2, #112]	; 0x70
 8003be2:	4b6e      	ldr	r3, [pc, #440]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	4a6d      	ldr	r2, [pc, #436]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003be8:	f023 0304 	bic.w	r3, r3, #4
 8003bec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d015      	beq.n	8003c22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf6:	f7fd fa99 	bl	800112c <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bfe:	f7fd fa95 	bl	800112c <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e0bc      	b.n	8003d8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c14:	4b61      	ldr	r3, [pc, #388]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0ee      	beq.n	8003bfe <HAL_RCC_OscConfig+0x33a>
 8003c20:	e014      	b.n	8003c4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c22:	f7fd fa83 	bl	800112c <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c28:	e00a      	b.n	8003c40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c2a:	f7fd fa7f 	bl	800112c <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e0a6      	b.n	8003d8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c40:	4b56      	ldr	r3, [pc, #344]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1ee      	bne.n	8003c2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d105      	bne.n	8003c5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c52:	4b52      	ldr	r3, [pc, #328]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	4a51      	ldr	r2, [pc, #324]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8092 	beq.w	8003d8c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c68:	4b4c      	ldr	r3, [pc, #304]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 030c 	and.w	r3, r3, #12
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d05c      	beq.n	8003d2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d141      	bne.n	8003d00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7c:	4b48      	ldr	r3, [pc, #288]	; (8003da0 <HAL_RCC_OscConfig+0x4dc>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c82:	f7fd fa53 	bl	800112c <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c8a:	f7fd fa4f 	bl	800112c <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e078      	b.n	8003d8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9c:	4b3f      	ldr	r3, [pc, #252]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f0      	bne.n	8003c8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69da      	ldr	r2, [r3, #28]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	019b      	lsls	r3, r3, #6
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	085b      	lsrs	r3, r3, #1
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	041b      	lsls	r3, r3, #16
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	061b      	lsls	r3, r3, #24
 8003ccc:	4933      	ldr	r1, [pc, #204]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd2:	4b33      	ldr	r3, [pc, #204]	; (8003da0 <HAL_RCC_OscConfig+0x4dc>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd8:	f7fd fa28 	bl	800112c <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7fd fa24 	bl	800112c <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e04d      	b.n	8003d8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf2:	4b2a      	ldr	r3, [pc, #168]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x41c>
 8003cfe:	e045      	b.n	8003d8c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d00:	4b27      	ldr	r3, [pc, #156]	; (8003da0 <HAL_RCC_OscConfig+0x4dc>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d06:	f7fd fa11 	bl	800112c <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0e:	f7fd fa0d 	bl	800112c <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e036      	b.n	8003d8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d20:	4b1e      	ldr	r3, [pc, #120]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f0      	bne.n	8003d0e <HAL_RCC_OscConfig+0x44a>
 8003d2c:	e02e      	b.n	8003d8c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e029      	b.n	8003d8e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d3a:	4b18      	ldr	r3, [pc, #96]	; (8003d9c <HAL_RCC_OscConfig+0x4d8>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d11c      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d115      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d62:	4013      	ands	r3, r2
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d10d      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d106      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40007000 	.word	0x40007000
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	42470060 	.word	0x42470060

08003da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0cc      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003db8:	4b68      	ldr	r3, [pc, #416]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d90c      	bls.n	8003de0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b65      	ldr	r3, [pc, #404]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b63      	ldr	r3, [pc, #396]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0b8      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d020      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003df8:	4b59      	ldr	r3, [pc, #356]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	4a58      	ldr	r2, [pc, #352]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e10:	4b53      	ldr	r3, [pc, #332]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	4a52      	ldr	r2, [pc, #328]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e1c:	4b50      	ldr	r3, [pc, #320]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	494d      	ldr	r1, [pc, #308]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d044      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d107      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e42:	4b47      	ldr	r3, [pc, #284]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d119      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e07f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d003      	beq.n	8003e62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d107      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e62:	4b3f      	ldr	r3, [pc, #252]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e06f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e72:	4b3b      	ldr	r3, [pc, #236]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e067      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e82:	4b37      	ldr	r3, [pc, #220]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f023 0203 	bic.w	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	4934      	ldr	r1, [pc, #208]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e94:	f7fd f94a 	bl	800112c <HAL_GetTick>
 8003e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e9c:	f7fd f946 	bl	800112c <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e04f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	4b2b      	ldr	r3, [pc, #172]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 020c 	and.w	r2, r3, #12
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d1eb      	bne.n	8003e9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec4:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d20c      	bcs.n	8003eec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed2:	4b22      	ldr	r3, [pc, #136]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e032      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef8:	4b19      	ldr	r3, [pc, #100]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4916      	ldr	r1, [pc, #88]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f16:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	490e      	ldr	r1, [pc, #56]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f2a:	f000 f821 	bl	8003f70 <HAL_RCC_GetSysClockFreq>
 8003f2e:	4601      	mov	r1, r0
 8003f30:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003f3c:	5cd3      	ldrb	r3, [r2, r3]
 8003f3e:	fa21 f303 	lsr.w	r3, r1, r3
 8003f42:	4a09      	ldr	r2, [pc, #36]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f46:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <HAL_RCC_ClockConfig+0x1c8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fd f8aa 	bl	80010a4 <HAL_InitTick>

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023c00 	.word	0x40023c00
 8003f60:	40023800 	.word	0x40023800
 8003f64:	08009088 	.word	0x08009088
 8003f68:	20000004 	.word	0x20000004
 8003f6c:	20000008 	.word	0x20000008

08003f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	607b      	str	r3, [r7, #4]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f86:	4b63      	ldr	r3, [pc, #396]	; (8004114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d007      	beq.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x32>
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d008      	beq.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x38>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 80b4 	bne.w	8004104 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f9c:	4b5e      	ldr	r3, [pc, #376]	; (8004118 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f9e:	60bb      	str	r3, [r7, #8]
       break;
 8003fa0:	e0b3      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fa2:	4b5d      	ldr	r3, [pc, #372]	; (8004118 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003fa4:	60bb      	str	r3, [r7, #8]
      break;
 8003fa6:	e0b0      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa8:	4b5a      	ldr	r3, [pc, #360]	; (8004114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fb2:	4b58      	ldr	r3, [pc, #352]	; (8004114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d04a      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fbe:	4b55      	ldr	r3, [pc, #340]	; (8004114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	099b      	lsrs	r3, r3, #6
 8003fc4:	f04f 0400 	mov.w	r4, #0
 8003fc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	ea03 0501 	and.w	r5, r3, r1
 8003fd4:	ea04 0602 	and.w	r6, r4, r2
 8003fd8:	4629      	mov	r1, r5
 8003fda:	4632      	mov	r2, r6
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	f04f 0400 	mov.w	r4, #0
 8003fe4:	0154      	lsls	r4, r2, #5
 8003fe6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fea:	014b      	lsls	r3, r1, #5
 8003fec:	4619      	mov	r1, r3
 8003fee:	4622      	mov	r2, r4
 8003ff0:	1b49      	subs	r1, r1, r5
 8003ff2:	eb62 0206 	sbc.w	r2, r2, r6
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	f04f 0400 	mov.w	r4, #0
 8003ffe:	0194      	lsls	r4, r2, #6
 8004000:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004004:	018b      	lsls	r3, r1, #6
 8004006:	1a5b      	subs	r3, r3, r1
 8004008:	eb64 0402 	sbc.w	r4, r4, r2
 800400c:	f04f 0100 	mov.w	r1, #0
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	00e2      	lsls	r2, r4, #3
 8004016:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800401a:	00d9      	lsls	r1, r3, #3
 800401c:	460b      	mov	r3, r1
 800401e:	4614      	mov	r4, r2
 8004020:	195b      	adds	r3, r3, r5
 8004022:	eb44 0406 	adc.w	r4, r4, r6
 8004026:	f04f 0100 	mov.w	r1, #0
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	02a2      	lsls	r2, r4, #10
 8004030:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004034:	0299      	lsls	r1, r3, #10
 8004036:	460b      	mov	r3, r1
 8004038:	4614      	mov	r4, r2
 800403a:	4618      	mov	r0, r3
 800403c:	4621      	mov	r1, r4
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f04f 0400 	mov.w	r4, #0
 8004044:	461a      	mov	r2, r3
 8004046:	4623      	mov	r3, r4
 8004048:	f7fc f8c6 	bl	80001d8 <__aeabi_uldivmod>
 800404c:	4603      	mov	r3, r0
 800404e:	460c      	mov	r4, r1
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	e049      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004054:	4b2f      	ldr	r3, [pc, #188]	; (8004114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	099b      	lsrs	r3, r3, #6
 800405a:	f04f 0400 	mov.w	r4, #0
 800405e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	ea03 0501 	and.w	r5, r3, r1
 800406a:	ea04 0602 	and.w	r6, r4, r2
 800406e:	4629      	mov	r1, r5
 8004070:	4632      	mov	r2, r6
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	f04f 0400 	mov.w	r4, #0
 800407a:	0154      	lsls	r4, r2, #5
 800407c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004080:	014b      	lsls	r3, r1, #5
 8004082:	4619      	mov	r1, r3
 8004084:	4622      	mov	r2, r4
 8004086:	1b49      	subs	r1, r1, r5
 8004088:	eb62 0206 	sbc.w	r2, r2, r6
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	f04f 0400 	mov.w	r4, #0
 8004094:	0194      	lsls	r4, r2, #6
 8004096:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800409a:	018b      	lsls	r3, r1, #6
 800409c:	1a5b      	subs	r3, r3, r1
 800409e:	eb64 0402 	sbc.w	r4, r4, r2
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	00e2      	lsls	r2, r4, #3
 80040ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040b0:	00d9      	lsls	r1, r3, #3
 80040b2:	460b      	mov	r3, r1
 80040b4:	4614      	mov	r4, r2
 80040b6:	195b      	adds	r3, r3, r5
 80040b8:	eb44 0406 	adc.w	r4, r4, r6
 80040bc:	f04f 0100 	mov.w	r1, #0
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	02a2      	lsls	r2, r4, #10
 80040c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80040ca:	0299      	lsls	r1, r3, #10
 80040cc:	460b      	mov	r3, r1
 80040ce:	4614      	mov	r4, r2
 80040d0:	4618      	mov	r0, r3
 80040d2:	4621      	mov	r1, r4
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f04f 0400 	mov.w	r4, #0
 80040da:	461a      	mov	r2, r3
 80040dc:	4623      	mov	r3, r4
 80040de:	f7fc f87b 	bl	80001d8 <__aeabi_uldivmod>
 80040e2:	4603      	mov	r3, r0
 80040e4:	460c      	mov	r4, r1
 80040e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040e8:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	3301      	adds	r3, #1
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	60bb      	str	r3, [r7, #8]
      break;
 8004102:	e002      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004104:	4b04      	ldr	r3, [pc, #16]	; (8004118 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004106:	60bb      	str	r3, [r7, #8]
      break;
 8004108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800410a:	68bb      	ldr	r3, [r7, #8]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004114:	40023800 	.word	0x40023800
 8004118:	00f42400 	.word	0x00f42400

0800411c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004120:	4b03      	ldr	r3, [pc, #12]	; (8004130 <HAL_RCC_GetHCLKFreq+0x14>)
 8004122:	681b      	ldr	r3, [r3, #0]
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000004 	.word	0x20000004

08004134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004138:	f7ff fff0 	bl	800411c <HAL_RCC_GetHCLKFreq>
 800413c:	4601      	mov	r1, r0
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	0a9b      	lsrs	r3, r3, #10
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	4a03      	ldr	r2, [pc, #12]	; (8004158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800414a:	5cd3      	ldrb	r3, [r2, r3]
 800414c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004150:	4618      	mov	r0, r3
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40023800 	.word	0x40023800
 8004158:	08009098 	.word	0x08009098

0800415c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004160:	f7ff ffdc 	bl	800411c <HAL_RCC_GetHCLKFreq>
 8004164:	4601      	mov	r1, r0
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	0b5b      	lsrs	r3, r3, #13
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	4a03      	ldr	r2, [pc, #12]	; (8004180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004172:	5cd3      	ldrb	r3, [r2, r3]
 8004174:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40023800 	.word	0x40023800
 8004180:	08009098 	.word	0x08009098

08004184 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e056      	b.n	8004244 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7fc fd83 	bl	8000cbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2202      	movs	r2, #2
 80041ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041cc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	ea42 0103 	orr.w	r1, r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	0c1b      	lsrs	r3, r3, #16
 8004214:	f003 0104 	and.w	r1, r3, #4
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69da      	ldr	r2, [r3, #28]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004232:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e01d      	b.n	800429a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fc fd8a 	bl	8000d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3304      	adds	r3, #4
 8004288:	4619      	mov	r1, r3
 800428a:	4610      	mov	r0, r2
 800428c:	f000 fa9e 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b085      	sub	sp, #20
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b06      	cmp	r3, #6
 80042ca:	d007      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e01d      	b.n	8004338 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d106      	bne.n	8004316 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7fc fd1b 	bl	8000d4c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2202      	movs	r2, #2
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3304      	adds	r3, #4
 8004326:	4619      	mov	r1, r3
 8004328:	4610      	mov	r0, r2
 800432a:	f000 fa4f 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e01d      	b.n	800438e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f815 	bl	8004396 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3304      	adds	r3, #4
 800437c:	4619      	mov	r1, r3
 800437e:	4610      	mov	r0, r2
 8004380:	f000 fa24 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2201      	movs	r2, #1
 80043bc:	6839      	ldr	r1, [r7, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fcaa 	bl	8004d18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a10      	ldr	r2, [pc, #64]	; (800440c <HAL_TIM_PWM_Start+0x60>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d107      	bne.n	80043de <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b06      	cmp	r3, #6
 80043ee:	d007      	beq.n	8004400 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40010000 	.word	0x40010000

08004410 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_TIM_OC_ConfigChannel+0x1a>
 8004426:	2302      	movs	r3, #2
 8004428:	e04e      	b.n	80044c8 <HAL_TIM_OC_ConfigChannel+0xb8>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2202      	movs	r2, #2
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b0c      	cmp	r3, #12
 800443e:	d839      	bhi.n	80044b4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8004440:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <HAL_TIM_OC_ConfigChannel+0x38>)
 8004442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004446:	bf00      	nop
 8004448:	0800447d 	.word	0x0800447d
 800444c:	080044b5 	.word	0x080044b5
 8004450:	080044b5 	.word	0x080044b5
 8004454:	080044b5 	.word	0x080044b5
 8004458:	0800448b 	.word	0x0800448b
 800445c:	080044b5 	.word	0x080044b5
 8004460:	080044b5 	.word	0x080044b5
 8004464:	080044b5 	.word	0x080044b5
 8004468:	08004499 	.word	0x08004499
 800446c:	080044b5 	.word	0x080044b5
 8004470:	080044b5 	.word	0x080044b5
 8004474:	080044b5 	.word	0x080044b5
 8004478:	080044a7 	.word	0x080044a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fa22 	bl	80048cc <TIM_OC1_SetConfig>
      break;
 8004488:	e015      	b.n	80044b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fa81 	bl	8004998 <TIM_OC2_SetConfig>
      break;
 8004496:	e00e      	b.n	80044b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68b9      	ldr	r1, [r7, #8]
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fae6 	bl	8004a70 <TIM_OC3_SetConfig>
      break;
 80044a4:	e007      	b.n	80044b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fb49 	bl	8004b44 <TIM_OC4_SetConfig>
      break;
 80044b2:	e000      	b.n	80044b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80044b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e0b4      	b.n	8004654 <HAL_TIM_PWM_ConfigChannel+0x184>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2202      	movs	r2, #2
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b0c      	cmp	r3, #12
 80044fe:	f200 809f 	bhi.w	8004640 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004502:	a201      	add	r2, pc, #4	; (adr r2, 8004508 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004508:	0800453d 	.word	0x0800453d
 800450c:	08004641 	.word	0x08004641
 8004510:	08004641 	.word	0x08004641
 8004514:	08004641 	.word	0x08004641
 8004518:	0800457d 	.word	0x0800457d
 800451c:	08004641 	.word	0x08004641
 8004520:	08004641 	.word	0x08004641
 8004524:	08004641 	.word	0x08004641
 8004528:	080045bf 	.word	0x080045bf
 800452c:	08004641 	.word	0x08004641
 8004530:	08004641 	.word	0x08004641
 8004534:	08004641 	.word	0x08004641
 8004538:	080045ff 	.word	0x080045ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	4618      	mov	r0, r3
 8004544:	f000 f9c2 	bl	80048cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0208 	orr.w	r2, r2, #8
 8004556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0204 	bic.w	r2, r2, #4
 8004566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6999      	ldr	r1, [r3, #24]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	619a      	str	r2, [r3, #24]
      break;
 800457a:	e062      	b.n	8004642 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68b9      	ldr	r1, [r7, #8]
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fa08 	bl	8004998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6999      	ldr	r1, [r3, #24]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	021a      	lsls	r2, r3, #8
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	619a      	str	r2, [r3, #24]
      break;
 80045bc:	e041      	b.n	8004642 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fa53 	bl	8004a70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69da      	ldr	r2, [r3, #28]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0208 	orr.w	r2, r2, #8
 80045d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69da      	ldr	r2, [r3, #28]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0204 	bic.w	r2, r2, #4
 80045e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69d9      	ldr	r1, [r3, #28]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	61da      	str	r2, [r3, #28]
      break;
 80045fc:	e021      	b.n	8004642 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	4618      	mov	r0, r3
 8004606:	f000 fa9d 	bl	8004b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69d9      	ldr	r1, [r3, #28]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	021a      	lsls	r2, r3, #8
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	61da      	str	r2, [r3, #28]
      break;
 800463e:	e000      	b.n	8004642 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004640:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_TIM_ConfigClockSource+0x18>
 8004670:	2302      	movs	r3, #2
 8004672:	e0a6      	b.n	80047c2 <HAL_TIM_ConfigClockSource+0x166>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004692:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800469a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d067      	beq.n	800477c <HAL_TIM_ConfigClockSource+0x120>
 80046ac:	2b40      	cmp	r3, #64	; 0x40
 80046ae:	d80b      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x6c>
 80046b0:	2b10      	cmp	r3, #16
 80046b2:	d073      	beq.n	800479c <HAL_TIM_ConfigClockSource+0x140>
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	d802      	bhi.n	80046be <HAL_TIM_ConfigClockSource+0x62>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d06f      	beq.n	800479c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80046bc:	e078      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d06c      	beq.n	800479c <HAL_TIM_ConfigClockSource+0x140>
 80046c2:	2b30      	cmp	r3, #48	; 0x30
 80046c4:	d06a      	beq.n	800479c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80046c6:	e073      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046c8:	2b70      	cmp	r3, #112	; 0x70
 80046ca:	d00d      	beq.n	80046e8 <HAL_TIM_ConfigClockSource+0x8c>
 80046cc:	2b70      	cmp	r3, #112	; 0x70
 80046ce:	d804      	bhi.n	80046da <HAL_TIM_ConfigClockSource+0x7e>
 80046d0:	2b50      	cmp	r3, #80	; 0x50
 80046d2:	d033      	beq.n	800473c <HAL_TIM_ConfigClockSource+0xe0>
 80046d4:	2b60      	cmp	r3, #96	; 0x60
 80046d6:	d041      	beq.n	800475c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80046d8:	e06a      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046de:	d066      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0x152>
 80046e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e4:	d017      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80046e6:	e063      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	6899      	ldr	r1, [r3, #8]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f000 faee 	bl	8004cd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800470a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	609a      	str	r2, [r3, #8]
      break;
 8004714:	e04c      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6899      	ldr	r1, [r3, #8]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f000 fad7 	bl	8004cd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004738:	609a      	str	r2, [r3, #8]
      break;
 800473a:	e039      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	6859      	ldr	r1, [r3, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	461a      	mov	r2, r3
 800474a:	f000 fa4b 	bl	8004be4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2150      	movs	r1, #80	; 0x50
 8004754:	4618      	mov	r0, r3
 8004756:	f000 faa4 	bl	8004ca2 <TIM_ITRx_SetConfig>
      break;
 800475a:	e029      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	6859      	ldr	r1, [r3, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	461a      	mov	r2, r3
 800476a:	f000 fa6a 	bl	8004c42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2160      	movs	r1, #96	; 0x60
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fa94 	bl	8004ca2 <TIM_ITRx_SetConfig>
      break;
 800477a:	e019      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	6859      	ldr	r1, [r3, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	461a      	mov	r2, r3
 800478a:	f000 fa2b 	bl	8004be4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2140      	movs	r1, #64	; 0x40
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fa84 	bl	8004ca2 <TIM_ITRx_SetConfig>
      break;
 800479a:	e009      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f000 fa7b 	bl	8004ca2 <TIM_ITRx_SetConfig>
      break;
 80047ac:	e000      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80047ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a34      	ldr	r2, [pc, #208]	; (80048b0 <TIM_Base_SetConfig+0xe4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00f      	beq.n	8004804 <TIM_Base_SetConfig+0x38>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ea:	d00b      	beq.n	8004804 <TIM_Base_SetConfig+0x38>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a31      	ldr	r2, [pc, #196]	; (80048b4 <TIM_Base_SetConfig+0xe8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d007      	beq.n	8004804 <TIM_Base_SetConfig+0x38>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a30      	ldr	r2, [pc, #192]	; (80048b8 <TIM_Base_SetConfig+0xec>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d003      	beq.n	8004804 <TIM_Base_SetConfig+0x38>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a2f      	ldr	r2, [pc, #188]	; (80048bc <TIM_Base_SetConfig+0xf0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d108      	bne.n	8004816 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a25      	ldr	r2, [pc, #148]	; (80048b0 <TIM_Base_SetConfig+0xe4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d01b      	beq.n	8004856 <TIM_Base_SetConfig+0x8a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004824:	d017      	beq.n	8004856 <TIM_Base_SetConfig+0x8a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a22      	ldr	r2, [pc, #136]	; (80048b4 <TIM_Base_SetConfig+0xe8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d013      	beq.n	8004856 <TIM_Base_SetConfig+0x8a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a21      	ldr	r2, [pc, #132]	; (80048b8 <TIM_Base_SetConfig+0xec>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00f      	beq.n	8004856 <TIM_Base_SetConfig+0x8a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a20      	ldr	r2, [pc, #128]	; (80048bc <TIM_Base_SetConfig+0xf0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00b      	beq.n	8004856 <TIM_Base_SetConfig+0x8a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a1f      	ldr	r2, [pc, #124]	; (80048c0 <TIM_Base_SetConfig+0xf4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d007      	beq.n	8004856 <TIM_Base_SetConfig+0x8a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a1e      	ldr	r2, [pc, #120]	; (80048c4 <TIM_Base_SetConfig+0xf8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d003      	beq.n	8004856 <TIM_Base_SetConfig+0x8a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a1d      	ldr	r2, [pc, #116]	; (80048c8 <TIM_Base_SetConfig+0xfc>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d108      	bne.n	8004868 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4313      	orrs	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a08      	ldr	r2, [pc, #32]	; (80048b0 <TIM_Base_SetConfig+0xe4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d103      	bne.n	800489c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	615a      	str	r2, [r3, #20]
}
 80048a2:	bf00      	nop
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40010000 	.word	0x40010000
 80048b4:	40000400 	.word	0x40000400
 80048b8:	40000800 	.word	0x40000800
 80048bc:	40000c00 	.word	0x40000c00
 80048c0:	40014000 	.word	0x40014000
 80048c4:	40014400 	.word	0x40014400
 80048c8:	40014800 	.word	0x40014800

080048cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f023 0201 	bic.w	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0303 	bic.w	r3, r3, #3
 8004902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f023 0302 	bic.w	r3, r3, #2
 8004914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a1c      	ldr	r2, [pc, #112]	; (8004994 <TIM_OC1_SetConfig+0xc8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d10c      	bne.n	8004942 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0308 	bic.w	r3, r3, #8
 800492e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f023 0304 	bic.w	r3, r3, #4
 8004940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a13      	ldr	r2, [pc, #76]	; (8004994 <TIM_OC1_SetConfig+0xc8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d111      	bne.n	800496e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	621a      	str	r2, [r3, #32]
}
 8004988:	bf00      	nop
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	40010000 	.word	0x40010000

08004998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	f023 0210 	bic.w	r2, r3, #16
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f023 0320 	bic.w	r3, r3, #32
 80049e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a1e      	ldr	r2, [pc, #120]	; (8004a6c <TIM_OC2_SetConfig+0xd4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d10d      	bne.n	8004a14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <TIM_OC2_SetConfig+0xd4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d113      	bne.n	8004a44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	621a      	str	r2, [r3, #32]
}
 8004a5e:	bf00      	nop
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40010000 	.word	0x40010000

08004a70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0303 	bic.w	r3, r3, #3
 8004aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a1d      	ldr	r2, [pc, #116]	; (8004b40 <TIM_OC3_SetConfig+0xd0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d10d      	bne.n	8004aea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	021b      	lsls	r3, r3, #8
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a14      	ldr	r2, [pc, #80]	; (8004b40 <TIM_OC3_SetConfig+0xd0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d113      	bne.n	8004b1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	621a      	str	r2, [r3, #32]
}
 8004b34:	bf00      	nop
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	40010000 	.word	0x40010000

08004b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	031b      	lsls	r3, r3, #12
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a10      	ldr	r2, [pc, #64]	; (8004be0 <TIM_OC4_SetConfig+0x9c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d109      	bne.n	8004bb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	019b      	lsls	r3, r3, #6
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	621a      	str	r2, [r3, #32]
}
 8004bd2:	bf00      	nop
 8004bd4:	371c      	adds	r7, #28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	40010000 	.word	0x40010000

08004be4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f023 0201 	bic.w	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f023 030a 	bic.w	r3, r3, #10
 8004c20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	621a      	str	r2, [r3, #32]
}
 8004c36:	bf00      	nop
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b087      	sub	sp, #28
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	f023 0210 	bic.w	r2, r3, #16
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	031b      	lsls	r3, r3, #12
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	bf00      	nop
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b085      	sub	sp, #20
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f043 0307 	orr.w	r3, r3, #7
 8004cc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	609a      	str	r2, [r3, #8]
}
 8004ccc:	bf00      	nop
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	021a      	lsls	r2, r3, #8
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	609a      	str	r2, [r3, #8]
}
 8004d0c:	bf00      	nop
 8004d0e:	371c      	adds	r7, #28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a1a      	ldr	r2, [r3, #32]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	401a      	ands	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a1a      	ldr	r2, [r3, #32]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d50:	431a      	orrs	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	621a      	str	r2, [r3, #32]
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
	...

08004d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e050      	b.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d018      	beq.n	8004df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc8:	d013      	beq.n	8004df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a18      	ldr	r2, [pc, #96]	; (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00e      	beq.n	8004df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d009      	beq.n	8004df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a15      	ldr	r2, [pc, #84]	; (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d004      	beq.n	8004df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a13      	ldr	r2, [pc, #76]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d10c      	bne.n	8004e0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004df8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40010000 	.word	0x40010000
 8004e30:	40000400 	.word	0x40000400
 8004e34:	40000800 	.word	0x40000800
 8004e38:	40000c00 	.word	0x40000c00
 8004e3c:	40014000 	.word	0x40014000

08004e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e03f      	b.n	8004ed2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fb ffec 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2224      	movs	r2, #36	; 0x24
 8004e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f829 	bl	8004edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695a      	ldr	r2, [r3, #20]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004f1e:	f023 030c 	bic.w	r3, r3, #12
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f4a:	f040 818b 	bne.w	8005264 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4ac1      	ldr	r2, [pc, #772]	; (8005258 <UART_SetConfig+0x37c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d005      	beq.n	8004f64 <UART_SetConfig+0x88>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4abf      	ldr	r2, [pc, #764]	; (800525c <UART_SetConfig+0x380>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	f040 80bd 	bne.w	80050de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f64:	f7ff f8fa 	bl	800415c <HAL_RCC_GetPCLK2Freq>
 8004f68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	461d      	mov	r5, r3
 8004f6e:	f04f 0600 	mov.w	r6, #0
 8004f72:	46a8      	mov	r8, r5
 8004f74:	46b1      	mov	r9, r6
 8004f76:	eb18 0308 	adds.w	r3, r8, r8
 8004f7a:	eb49 0409 	adc.w	r4, r9, r9
 8004f7e:	4698      	mov	r8, r3
 8004f80:	46a1      	mov	r9, r4
 8004f82:	eb18 0805 	adds.w	r8, r8, r5
 8004f86:	eb49 0906 	adc.w	r9, r9, r6
 8004f8a:	f04f 0100 	mov.w	r1, #0
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f9e:	4688      	mov	r8, r1
 8004fa0:	4691      	mov	r9, r2
 8004fa2:	eb18 0005 	adds.w	r0, r8, r5
 8004fa6:	eb49 0106 	adc.w	r1, r9, r6
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	461d      	mov	r5, r3
 8004fb0:	f04f 0600 	mov.w	r6, #0
 8004fb4:	196b      	adds	r3, r5, r5
 8004fb6:	eb46 0406 	adc.w	r4, r6, r6
 8004fba:	461a      	mov	r2, r3
 8004fbc:	4623      	mov	r3, r4
 8004fbe:	f7fb f90b 	bl	80001d8 <__aeabi_uldivmod>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4ba5      	ldr	r3, [pc, #660]	; (8005260 <UART_SetConfig+0x384>)
 8004fca:	fba3 2302 	umull	r2, r3, r3, r2
 8004fce:	095b      	lsrs	r3, r3, #5
 8004fd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	461d      	mov	r5, r3
 8004fd8:	f04f 0600 	mov.w	r6, #0
 8004fdc:	46a9      	mov	r9, r5
 8004fde:	46b2      	mov	sl, r6
 8004fe0:	eb19 0309 	adds.w	r3, r9, r9
 8004fe4:	eb4a 040a 	adc.w	r4, sl, sl
 8004fe8:	4699      	mov	r9, r3
 8004fea:	46a2      	mov	sl, r4
 8004fec:	eb19 0905 	adds.w	r9, r9, r5
 8004ff0:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ff4:	f04f 0100 	mov.w	r1, #0
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005000:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005004:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005008:	4689      	mov	r9, r1
 800500a:	4692      	mov	sl, r2
 800500c:	eb19 0005 	adds.w	r0, r9, r5
 8005010:	eb4a 0106 	adc.w	r1, sl, r6
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	461d      	mov	r5, r3
 800501a:	f04f 0600 	mov.w	r6, #0
 800501e:	196b      	adds	r3, r5, r5
 8005020:	eb46 0406 	adc.w	r4, r6, r6
 8005024:	461a      	mov	r2, r3
 8005026:	4623      	mov	r3, r4
 8005028:	f7fb f8d6 	bl	80001d8 <__aeabi_uldivmod>
 800502c:	4603      	mov	r3, r0
 800502e:	460c      	mov	r4, r1
 8005030:	461a      	mov	r2, r3
 8005032:	4b8b      	ldr	r3, [pc, #556]	; (8005260 <UART_SetConfig+0x384>)
 8005034:	fba3 1302 	umull	r1, r3, r3, r2
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	2164      	movs	r1, #100	; 0x64
 800503c:	fb01 f303 	mul.w	r3, r1, r3
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	3332      	adds	r3, #50	; 0x32
 8005046:	4a86      	ldr	r2, [pc, #536]	; (8005260 <UART_SetConfig+0x384>)
 8005048:	fba2 2303 	umull	r2, r3, r2, r3
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005054:	4498      	add	r8, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	461d      	mov	r5, r3
 800505a:	f04f 0600 	mov.w	r6, #0
 800505e:	46a9      	mov	r9, r5
 8005060:	46b2      	mov	sl, r6
 8005062:	eb19 0309 	adds.w	r3, r9, r9
 8005066:	eb4a 040a 	adc.w	r4, sl, sl
 800506a:	4699      	mov	r9, r3
 800506c:	46a2      	mov	sl, r4
 800506e:	eb19 0905 	adds.w	r9, r9, r5
 8005072:	eb4a 0a06 	adc.w	sl, sl, r6
 8005076:	f04f 0100 	mov.w	r1, #0
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005082:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005086:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800508a:	4689      	mov	r9, r1
 800508c:	4692      	mov	sl, r2
 800508e:	eb19 0005 	adds.w	r0, r9, r5
 8005092:	eb4a 0106 	adc.w	r1, sl, r6
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	461d      	mov	r5, r3
 800509c:	f04f 0600 	mov.w	r6, #0
 80050a0:	196b      	adds	r3, r5, r5
 80050a2:	eb46 0406 	adc.w	r4, r6, r6
 80050a6:	461a      	mov	r2, r3
 80050a8:	4623      	mov	r3, r4
 80050aa:	f7fb f895 	bl	80001d8 <__aeabi_uldivmod>
 80050ae:	4603      	mov	r3, r0
 80050b0:	460c      	mov	r4, r1
 80050b2:	461a      	mov	r2, r3
 80050b4:	4b6a      	ldr	r3, [pc, #424]	; (8005260 <UART_SetConfig+0x384>)
 80050b6:	fba3 1302 	umull	r1, r3, r3, r2
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	2164      	movs	r1, #100	; 0x64
 80050be:	fb01 f303 	mul.w	r3, r1, r3
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	3332      	adds	r3, #50	; 0x32
 80050c8:	4a65      	ldr	r2, [pc, #404]	; (8005260 <UART_SetConfig+0x384>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	f003 0207 	and.w	r2, r3, #7
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4442      	add	r2, r8
 80050da:	609a      	str	r2, [r3, #8]
 80050dc:	e26f      	b.n	80055be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050de:	f7ff f829 	bl	8004134 <HAL_RCC_GetPCLK1Freq>
 80050e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	461d      	mov	r5, r3
 80050e8:	f04f 0600 	mov.w	r6, #0
 80050ec:	46a8      	mov	r8, r5
 80050ee:	46b1      	mov	r9, r6
 80050f0:	eb18 0308 	adds.w	r3, r8, r8
 80050f4:	eb49 0409 	adc.w	r4, r9, r9
 80050f8:	4698      	mov	r8, r3
 80050fa:	46a1      	mov	r9, r4
 80050fc:	eb18 0805 	adds.w	r8, r8, r5
 8005100:	eb49 0906 	adc.w	r9, r9, r6
 8005104:	f04f 0100 	mov.w	r1, #0
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005110:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005114:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005118:	4688      	mov	r8, r1
 800511a:	4691      	mov	r9, r2
 800511c:	eb18 0005 	adds.w	r0, r8, r5
 8005120:	eb49 0106 	adc.w	r1, r9, r6
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	461d      	mov	r5, r3
 800512a:	f04f 0600 	mov.w	r6, #0
 800512e:	196b      	adds	r3, r5, r5
 8005130:	eb46 0406 	adc.w	r4, r6, r6
 8005134:	461a      	mov	r2, r3
 8005136:	4623      	mov	r3, r4
 8005138:	f7fb f84e 	bl	80001d8 <__aeabi_uldivmod>
 800513c:	4603      	mov	r3, r0
 800513e:	460c      	mov	r4, r1
 8005140:	461a      	mov	r2, r3
 8005142:	4b47      	ldr	r3, [pc, #284]	; (8005260 <UART_SetConfig+0x384>)
 8005144:	fba3 2302 	umull	r2, r3, r3, r2
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	461d      	mov	r5, r3
 8005152:	f04f 0600 	mov.w	r6, #0
 8005156:	46a9      	mov	r9, r5
 8005158:	46b2      	mov	sl, r6
 800515a:	eb19 0309 	adds.w	r3, r9, r9
 800515e:	eb4a 040a 	adc.w	r4, sl, sl
 8005162:	4699      	mov	r9, r3
 8005164:	46a2      	mov	sl, r4
 8005166:	eb19 0905 	adds.w	r9, r9, r5
 800516a:	eb4a 0a06 	adc.w	sl, sl, r6
 800516e:	f04f 0100 	mov.w	r1, #0
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800517a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800517e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005182:	4689      	mov	r9, r1
 8005184:	4692      	mov	sl, r2
 8005186:	eb19 0005 	adds.w	r0, r9, r5
 800518a:	eb4a 0106 	adc.w	r1, sl, r6
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	461d      	mov	r5, r3
 8005194:	f04f 0600 	mov.w	r6, #0
 8005198:	196b      	adds	r3, r5, r5
 800519a:	eb46 0406 	adc.w	r4, r6, r6
 800519e:	461a      	mov	r2, r3
 80051a0:	4623      	mov	r3, r4
 80051a2:	f7fb f819 	bl	80001d8 <__aeabi_uldivmod>
 80051a6:	4603      	mov	r3, r0
 80051a8:	460c      	mov	r4, r1
 80051aa:	461a      	mov	r2, r3
 80051ac:	4b2c      	ldr	r3, [pc, #176]	; (8005260 <UART_SetConfig+0x384>)
 80051ae:	fba3 1302 	umull	r1, r3, r3, r2
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	2164      	movs	r1, #100	; 0x64
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	3332      	adds	r3, #50	; 0x32
 80051c0:	4a27      	ldr	r2, [pc, #156]	; (8005260 <UART_SetConfig+0x384>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051ce:	4498      	add	r8, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	461d      	mov	r5, r3
 80051d4:	f04f 0600 	mov.w	r6, #0
 80051d8:	46a9      	mov	r9, r5
 80051da:	46b2      	mov	sl, r6
 80051dc:	eb19 0309 	adds.w	r3, r9, r9
 80051e0:	eb4a 040a 	adc.w	r4, sl, sl
 80051e4:	4699      	mov	r9, r3
 80051e6:	46a2      	mov	sl, r4
 80051e8:	eb19 0905 	adds.w	r9, r9, r5
 80051ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80051f0:	f04f 0100 	mov.w	r1, #0
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005200:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005204:	4689      	mov	r9, r1
 8005206:	4692      	mov	sl, r2
 8005208:	eb19 0005 	adds.w	r0, r9, r5
 800520c:	eb4a 0106 	adc.w	r1, sl, r6
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	461d      	mov	r5, r3
 8005216:	f04f 0600 	mov.w	r6, #0
 800521a:	196b      	adds	r3, r5, r5
 800521c:	eb46 0406 	adc.w	r4, r6, r6
 8005220:	461a      	mov	r2, r3
 8005222:	4623      	mov	r3, r4
 8005224:	f7fa ffd8 	bl	80001d8 <__aeabi_uldivmod>
 8005228:	4603      	mov	r3, r0
 800522a:	460c      	mov	r4, r1
 800522c:	461a      	mov	r2, r3
 800522e:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <UART_SetConfig+0x384>)
 8005230:	fba3 1302 	umull	r1, r3, r3, r2
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	2164      	movs	r1, #100	; 0x64
 8005238:	fb01 f303 	mul.w	r3, r1, r3
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	3332      	adds	r3, #50	; 0x32
 8005242:	4a07      	ldr	r2, [pc, #28]	; (8005260 <UART_SetConfig+0x384>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	f003 0207 	and.w	r2, r3, #7
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4442      	add	r2, r8
 8005254:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005256:	e1b2      	b.n	80055be <UART_SetConfig+0x6e2>
 8005258:	40011000 	.word	0x40011000
 800525c:	40011400 	.word	0x40011400
 8005260:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4ad7      	ldr	r2, [pc, #860]	; (80055c8 <UART_SetConfig+0x6ec>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d005      	beq.n	800527a <UART_SetConfig+0x39e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4ad6      	ldr	r2, [pc, #856]	; (80055cc <UART_SetConfig+0x6f0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	f040 80d1 	bne.w	800541c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800527a:	f7fe ff6f 	bl	800415c <HAL_RCC_GetPCLK2Freq>
 800527e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	469a      	mov	sl, r3
 8005284:	f04f 0b00 	mov.w	fp, #0
 8005288:	46d0      	mov	r8, sl
 800528a:	46d9      	mov	r9, fp
 800528c:	eb18 0308 	adds.w	r3, r8, r8
 8005290:	eb49 0409 	adc.w	r4, r9, r9
 8005294:	4698      	mov	r8, r3
 8005296:	46a1      	mov	r9, r4
 8005298:	eb18 080a 	adds.w	r8, r8, sl
 800529c:	eb49 090b 	adc.w	r9, r9, fp
 80052a0:	f04f 0100 	mov.w	r1, #0
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052b4:	4688      	mov	r8, r1
 80052b6:	4691      	mov	r9, r2
 80052b8:	eb1a 0508 	adds.w	r5, sl, r8
 80052bc:	eb4b 0609 	adc.w	r6, fp, r9
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4619      	mov	r1, r3
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	f04f 0300 	mov.w	r3, #0
 80052ce:	f04f 0400 	mov.w	r4, #0
 80052d2:	0094      	lsls	r4, r2, #2
 80052d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052d8:	008b      	lsls	r3, r1, #2
 80052da:	461a      	mov	r2, r3
 80052dc:	4623      	mov	r3, r4
 80052de:	4628      	mov	r0, r5
 80052e0:	4631      	mov	r1, r6
 80052e2:	f7fa ff79 	bl	80001d8 <__aeabi_uldivmod>
 80052e6:	4603      	mov	r3, r0
 80052e8:	460c      	mov	r4, r1
 80052ea:	461a      	mov	r2, r3
 80052ec:	4bb8      	ldr	r3, [pc, #736]	; (80055d0 <UART_SetConfig+0x6f4>)
 80052ee:	fba3 2302 	umull	r2, r3, r3, r2
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	469b      	mov	fp, r3
 80052fc:	f04f 0c00 	mov.w	ip, #0
 8005300:	46d9      	mov	r9, fp
 8005302:	46e2      	mov	sl, ip
 8005304:	eb19 0309 	adds.w	r3, r9, r9
 8005308:	eb4a 040a 	adc.w	r4, sl, sl
 800530c:	4699      	mov	r9, r3
 800530e:	46a2      	mov	sl, r4
 8005310:	eb19 090b 	adds.w	r9, r9, fp
 8005314:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005318:	f04f 0100 	mov.w	r1, #0
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005324:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005328:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800532c:	4689      	mov	r9, r1
 800532e:	4692      	mov	sl, r2
 8005330:	eb1b 0509 	adds.w	r5, fp, r9
 8005334:	eb4c 060a 	adc.w	r6, ip, sl
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	4619      	mov	r1, r3
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	f04f 0400 	mov.w	r4, #0
 800534a:	0094      	lsls	r4, r2, #2
 800534c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005350:	008b      	lsls	r3, r1, #2
 8005352:	461a      	mov	r2, r3
 8005354:	4623      	mov	r3, r4
 8005356:	4628      	mov	r0, r5
 8005358:	4631      	mov	r1, r6
 800535a:	f7fa ff3d 	bl	80001d8 <__aeabi_uldivmod>
 800535e:	4603      	mov	r3, r0
 8005360:	460c      	mov	r4, r1
 8005362:	461a      	mov	r2, r3
 8005364:	4b9a      	ldr	r3, [pc, #616]	; (80055d0 <UART_SetConfig+0x6f4>)
 8005366:	fba3 1302 	umull	r1, r3, r3, r2
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	2164      	movs	r1, #100	; 0x64
 800536e:	fb01 f303 	mul.w	r3, r1, r3
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	3332      	adds	r3, #50	; 0x32
 8005378:	4a95      	ldr	r2, [pc, #596]	; (80055d0 <UART_SetConfig+0x6f4>)
 800537a:	fba2 2303 	umull	r2, r3, r2, r3
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005384:	4498      	add	r8, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	469b      	mov	fp, r3
 800538a:	f04f 0c00 	mov.w	ip, #0
 800538e:	46d9      	mov	r9, fp
 8005390:	46e2      	mov	sl, ip
 8005392:	eb19 0309 	adds.w	r3, r9, r9
 8005396:	eb4a 040a 	adc.w	r4, sl, sl
 800539a:	4699      	mov	r9, r3
 800539c:	46a2      	mov	sl, r4
 800539e:	eb19 090b 	adds.w	r9, r9, fp
 80053a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053a6:	f04f 0100 	mov.w	r1, #0
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053ba:	4689      	mov	r9, r1
 80053bc:	4692      	mov	sl, r2
 80053be:	eb1b 0509 	adds.w	r5, fp, r9
 80053c2:	eb4c 060a 	adc.w	r6, ip, sl
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4619      	mov	r1, r3
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	f04f 0400 	mov.w	r4, #0
 80053d8:	0094      	lsls	r4, r2, #2
 80053da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053de:	008b      	lsls	r3, r1, #2
 80053e0:	461a      	mov	r2, r3
 80053e2:	4623      	mov	r3, r4
 80053e4:	4628      	mov	r0, r5
 80053e6:	4631      	mov	r1, r6
 80053e8:	f7fa fef6 	bl	80001d8 <__aeabi_uldivmod>
 80053ec:	4603      	mov	r3, r0
 80053ee:	460c      	mov	r4, r1
 80053f0:	461a      	mov	r2, r3
 80053f2:	4b77      	ldr	r3, [pc, #476]	; (80055d0 <UART_SetConfig+0x6f4>)
 80053f4:	fba3 1302 	umull	r1, r3, r3, r2
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	2164      	movs	r1, #100	; 0x64
 80053fc:	fb01 f303 	mul.w	r3, r1, r3
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	3332      	adds	r3, #50	; 0x32
 8005406:	4a72      	ldr	r2, [pc, #456]	; (80055d0 <UART_SetConfig+0x6f4>)
 8005408:	fba2 2303 	umull	r2, r3, r2, r3
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	f003 020f 	and.w	r2, r3, #15
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4442      	add	r2, r8
 8005418:	609a      	str	r2, [r3, #8]
 800541a:	e0d0      	b.n	80055be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800541c:	f7fe fe8a 	bl	8004134 <HAL_RCC_GetPCLK1Freq>
 8005420:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	469a      	mov	sl, r3
 8005426:	f04f 0b00 	mov.w	fp, #0
 800542a:	46d0      	mov	r8, sl
 800542c:	46d9      	mov	r9, fp
 800542e:	eb18 0308 	adds.w	r3, r8, r8
 8005432:	eb49 0409 	adc.w	r4, r9, r9
 8005436:	4698      	mov	r8, r3
 8005438:	46a1      	mov	r9, r4
 800543a:	eb18 080a 	adds.w	r8, r8, sl
 800543e:	eb49 090b 	adc.w	r9, r9, fp
 8005442:	f04f 0100 	mov.w	r1, #0
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800544e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005452:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005456:	4688      	mov	r8, r1
 8005458:	4691      	mov	r9, r2
 800545a:	eb1a 0508 	adds.w	r5, sl, r8
 800545e:	eb4b 0609 	adc.w	r6, fp, r9
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	4619      	mov	r1, r3
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	f04f 0400 	mov.w	r4, #0
 8005474:	0094      	lsls	r4, r2, #2
 8005476:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800547a:	008b      	lsls	r3, r1, #2
 800547c:	461a      	mov	r2, r3
 800547e:	4623      	mov	r3, r4
 8005480:	4628      	mov	r0, r5
 8005482:	4631      	mov	r1, r6
 8005484:	f7fa fea8 	bl	80001d8 <__aeabi_uldivmod>
 8005488:	4603      	mov	r3, r0
 800548a:	460c      	mov	r4, r1
 800548c:	461a      	mov	r2, r3
 800548e:	4b50      	ldr	r3, [pc, #320]	; (80055d0 <UART_SetConfig+0x6f4>)
 8005490:	fba3 2302 	umull	r2, r3, r3, r2
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	469b      	mov	fp, r3
 800549e:	f04f 0c00 	mov.w	ip, #0
 80054a2:	46d9      	mov	r9, fp
 80054a4:	46e2      	mov	sl, ip
 80054a6:	eb19 0309 	adds.w	r3, r9, r9
 80054aa:	eb4a 040a 	adc.w	r4, sl, sl
 80054ae:	4699      	mov	r9, r3
 80054b0:	46a2      	mov	sl, r4
 80054b2:	eb19 090b 	adds.w	r9, r9, fp
 80054b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80054ba:	f04f 0100 	mov.w	r1, #0
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054ce:	4689      	mov	r9, r1
 80054d0:	4692      	mov	sl, r2
 80054d2:	eb1b 0509 	adds.w	r5, fp, r9
 80054d6:	eb4c 060a 	adc.w	r6, ip, sl
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	4619      	mov	r1, r3
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	f04f 0400 	mov.w	r4, #0
 80054ec:	0094      	lsls	r4, r2, #2
 80054ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054f2:	008b      	lsls	r3, r1, #2
 80054f4:	461a      	mov	r2, r3
 80054f6:	4623      	mov	r3, r4
 80054f8:	4628      	mov	r0, r5
 80054fa:	4631      	mov	r1, r6
 80054fc:	f7fa fe6c 	bl	80001d8 <__aeabi_uldivmod>
 8005500:	4603      	mov	r3, r0
 8005502:	460c      	mov	r4, r1
 8005504:	461a      	mov	r2, r3
 8005506:	4b32      	ldr	r3, [pc, #200]	; (80055d0 <UART_SetConfig+0x6f4>)
 8005508:	fba3 1302 	umull	r1, r3, r3, r2
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	2164      	movs	r1, #100	; 0x64
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	3332      	adds	r3, #50	; 0x32
 800551a:	4a2d      	ldr	r2, [pc, #180]	; (80055d0 <UART_SetConfig+0x6f4>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	095b      	lsrs	r3, r3, #5
 8005522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005526:	4498      	add	r8, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	469b      	mov	fp, r3
 800552c:	f04f 0c00 	mov.w	ip, #0
 8005530:	46d9      	mov	r9, fp
 8005532:	46e2      	mov	sl, ip
 8005534:	eb19 0309 	adds.w	r3, r9, r9
 8005538:	eb4a 040a 	adc.w	r4, sl, sl
 800553c:	4699      	mov	r9, r3
 800553e:	46a2      	mov	sl, r4
 8005540:	eb19 090b 	adds.w	r9, r9, fp
 8005544:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005548:	f04f 0100 	mov.w	r1, #0
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005554:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005558:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800555c:	4689      	mov	r9, r1
 800555e:	4692      	mov	sl, r2
 8005560:	eb1b 0509 	adds.w	r5, fp, r9
 8005564:	eb4c 060a 	adc.w	r6, ip, sl
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4619      	mov	r1, r3
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	f04f 0400 	mov.w	r4, #0
 800557a:	0094      	lsls	r4, r2, #2
 800557c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005580:	008b      	lsls	r3, r1, #2
 8005582:	461a      	mov	r2, r3
 8005584:	4623      	mov	r3, r4
 8005586:	4628      	mov	r0, r5
 8005588:	4631      	mov	r1, r6
 800558a:	f7fa fe25 	bl	80001d8 <__aeabi_uldivmod>
 800558e:	4603      	mov	r3, r0
 8005590:	460c      	mov	r4, r1
 8005592:	461a      	mov	r2, r3
 8005594:	4b0e      	ldr	r3, [pc, #56]	; (80055d0 <UART_SetConfig+0x6f4>)
 8005596:	fba3 1302 	umull	r1, r3, r3, r2
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	2164      	movs	r1, #100	; 0x64
 800559e:	fb01 f303 	mul.w	r3, r1, r3
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	3332      	adds	r3, #50	; 0x32
 80055a8:	4a09      	ldr	r2, [pc, #36]	; (80055d0 <UART_SetConfig+0x6f4>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	f003 020f 	and.w	r2, r3, #15
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4442      	add	r2, r8
 80055ba:	609a      	str	r2, [r3, #8]
}
 80055bc:	e7ff      	b.n	80055be <UART_SetConfig+0x6e2>
 80055be:	bf00      	nop
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c8:	40011000 	.word	0x40011000
 80055cc:	40011400 	.word	0x40011400
 80055d0:	51eb851f 	.word	0x51eb851f

080055d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055d4:	b084      	sub	sp, #16
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	f107 001c 	add.w	r0, r7, #28
 80055e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d122      	bne.n	8005632 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005616:	2b01      	cmp	r3, #1
 8005618:	d105      	bne.n	8005626 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f001 fac6 	bl	8006bb8 <USB_CoreReset>
 800562c:	4603      	mov	r3, r0
 800562e:	73fb      	strb	r3, [r7, #15]
 8005630:	e01a      	b.n	8005668 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f001 faba 	bl	8006bb8 <USB_CoreReset>
 8005644:	4603      	mov	r3, r0
 8005646:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d106      	bne.n	800565c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	639a      	str	r2, [r3, #56]	; 0x38
 800565a:	e005      	b.n	8005668 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	2b01      	cmp	r3, #1
 800566c:	d10b      	bne.n	8005686 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f043 0206 	orr.w	r2, r3, #6
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f043 0220 	orr.w	r2, r3, #32
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005686:	7bfb      	ldrb	r3, [r7, #15]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005692:	b004      	add	sp, #16
 8005694:	4770      	bx	lr
	...

08005698 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	4613      	mov	r3, r2
 80056a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d165      	bne.n	8005778 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4a41      	ldr	r2, [pc, #260]	; (80057b4 <USB_SetTurnaroundTime+0x11c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d906      	bls.n	80056c2 <USB_SetTurnaroundTime+0x2a>
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	4a40      	ldr	r2, [pc, #256]	; (80057b8 <USB_SetTurnaroundTime+0x120>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d802      	bhi.n	80056c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80056bc:	230f      	movs	r3, #15
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	e062      	b.n	8005788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	4a3c      	ldr	r2, [pc, #240]	; (80057b8 <USB_SetTurnaroundTime+0x120>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d906      	bls.n	80056d8 <USB_SetTurnaroundTime+0x40>
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	4a3b      	ldr	r2, [pc, #236]	; (80057bc <USB_SetTurnaroundTime+0x124>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d802      	bhi.n	80056d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80056d2:	230e      	movs	r3, #14
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	e057      	b.n	8005788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4a38      	ldr	r2, [pc, #224]	; (80057bc <USB_SetTurnaroundTime+0x124>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d906      	bls.n	80056ee <USB_SetTurnaroundTime+0x56>
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4a37      	ldr	r2, [pc, #220]	; (80057c0 <USB_SetTurnaroundTime+0x128>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d802      	bhi.n	80056ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80056e8:	230d      	movs	r3, #13
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	e04c      	b.n	8005788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4a33      	ldr	r2, [pc, #204]	; (80057c0 <USB_SetTurnaroundTime+0x128>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d906      	bls.n	8005704 <USB_SetTurnaroundTime+0x6c>
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	4a32      	ldr	r2, [pc, #200]	; (80057c4 <USB_SetTurnaroundTime+0x12c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d802      	bhi.n	8005704 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80056fe:	230c      	movs	r3, #12
 8005700:	617b      	str	r3, [r7, #20]
 8005702:	e041      	b.n	8005788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4a2f      	ldr	r2, [pc, #188]	; (80057c4 <USB_SetTurnaroundTime+0x12c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d906      	bls.n	800571a <USB_SetTurnaroundTime+0x82>
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	4a2e      	ldr	r2, [pc, #184]	; (80057c8 <USB_SetTurnaroundTime+0x130>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d802      	bhi.n	800571a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005714:	230b      	movs	r3, #11
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	e036      	b.n	8005788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	4a2a      	ldr	r2, [pc, #168]	; (80057c8 <USB_SetTurnaroundTime+0x130>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d906      	bls.n	8005730 <USB_SetTurnaroundTime+0x98>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	4a29      	ldr	r2, [pc, #164]	; (80057cc <USB_SetTurnaroundTime+0x134>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d802      	bhi.n	8005730 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800572a:	230a      	movs	r3, #10
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	e02b      	b.n	8005788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4a26      	ldr	r2, [pc, #152]	; (80057cc <USB_SetTurnaroundTime+0x134>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d906      	bls.n	8005746 <USB_SetTurnaroundTime+0xae>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4a25      	ldr	r2, [pc, #148]	; (80057d0 <USB_SetTurnaroundTime+0x138>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d802      	bhi.n	8005746 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005740:	2309      	movs	r3, #9
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	e020      	b.n	8005788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4a21      	ldr	r2, [pc, #132]	; (80057d0 <USB_SetTurnaroundTime+0x138>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d906      	bls.n	800575c <USB_SetTurnaroundTime+0xc4>
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	4a20      	ldr	r2, [pc, #128]	; (80057d4 <USB_SetTurnaroundTime+0x13c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d802      	bhi.n	800575c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005756:	2308      	movs	r3, #8
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	e015      	b.n	8005788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4a1d      	ldr	r2, [pc, #116]	; (80057d4 <USB_SetTurnaroundTime+0x13c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d906      	bls.n	8005772 <USB_SetTurnaroundTime+0xda>
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4a1c      	ldr	r2, [pc, #112]	; (80057d8 <USB_SetTurnaroundTime+0x140>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d802      	bhi.n	8005772 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800576c:	2307      	movs	r3, #7
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e00a      	b.n	8005788 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005772:	2306      	movs	r3, #6
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	e007      	b.n	8005788 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d102      	bne.n	8005784 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800577e:	2309      	movs	r3, #9
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	e001      	b.n	8005788 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005784:	2309      	movs	r3, #9
 8005786:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	029b      	lsls	r3, r3, #10
 800579c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80057a0:	431a      	orrs	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	00d8acbf 	.word	0x00d8acbf
 80057b8:	00e4e1bf 	.word	0x00e4e1bf
 80057bc:	00f423ff 	.word	0x00f423ff
 80057c0:	0106737f 	.word	0x0106737f
 80057c4:	011a499f 	.word	0x011a499f
 80057c8:	01312cff 	.word	0x01312cff
 80057cc:	014ca43f 	.word	0x014ca43f
 80057d0:	016e35ff 	.word	0x016e35ff
 80057d4:	01a6ab1f 	.word	0x01a6ab1f
 80057d8:	01e847ff 	.word	0x01e847ff

080057dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f043 0201 	orr.w	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f023 0201 	bic.w	r2, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d106      	bne.n	800584c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	60da      	str	r2, [r3, #12]
 800584a:	e00b      	b.n	8005864 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800584c:	78fb      	ldrb	r3, [r7, #3]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60da      	str	r2, [r3, #12]
 800585e:	e001      	b.n	8005864 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e003      	b.n	800586c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005864:	2032      	movs	r0, #50	; 0x32
 8005866:	f7fb fc6d 	bl	8001144 <HAL_Delay>

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005874:	b084      	sub	sp, #16
 8005876:	b580      	push	{r7, lr}
 8005878:	b086      	sub	sp, #24
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800588e:	2300      	movs	r3, #0
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	e009      	b.n	80058a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	3340      	adds	r3, #64	; 0x40
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	2200      	movs	r2, #0
 80058a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	3301      	adds	r3, #1
 80058a6:	613b      	str	r3, [r7, #16]
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	2b0e      	cmp	r3, #14
 80058ac:	d9f2      	bls.n	8005894 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d11c      	bne.n	80058ee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058c2:	f043 0302 	orr.w	r3, r3, #2
 80058c6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	639a      	str	r2, [r3, #56]	; 0x38
 80058ec:	e00b      	b.n	8005906 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800590c:	461a      	mov	r2, r3
 800590e:	2300      	movs	r3, #0
 8005910:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005918:	4619      	mov	r1, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005920:	461a      	mov	r2, r3
 8005922:	680b      	ldr	r3, [r1, #0]
 8005924:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005928:	2b01      	cmp	r3, #1
 800592a:	d10c      	bne.n	8005946 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592e:	2b00      	cmp	r3, #0
 8005930:	d104      	bne.n	800593c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005932:	2100      	movs	r1, #0
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f949 	bl	8005bcc <USB_SetDevSpeed>
 800593a:	e008      	b.n	800594e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800593c:	2101      	movs	r1, #1
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f944 	bl	8005bcc <USB_SetDevSpeed>
 8005944:	e003      	b.n	800594e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005946:	2103      	movs	r1, #3
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f93f 	bl	8005bcc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800594e:	2110      	movs	r1, #16
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f8f3 	bl	8005b3c <USB_FlushTxFifo>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f911 	bl	8005b88 <USB_FlushRxFifo>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005976:	461a      	mov	r2, r3
 8005978:	2300      	movs	r3, #0
 800597a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005982:	461a      	mov	r2, r3
 8005984:	2300      	movs	r3, #0
 8005986:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598e:	461a      	mov	r2, r3
 8005990:	2300      	movs	r3, #0
 8005992:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005994:	2300      	movs	r3, #0
 8005996:	613b      	str	r3, [r7, #16]
 8005998:	e043      	b.n	8005a22 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b0:	d118      	bne.n	80059e4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c4:	461a      	mov	r2, r3
 80059c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	e013      	b.n	80059f6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059da:	461a      	mov	r2, r3
 80059dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	e008      	b.n	80059f6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f0:	461a      	mov	r2, r3
 80059f2:	2300      	movs	r3, #0
 80059f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a02:	461a      	mov	r2, r3
 8005a04:	2300      	movs	r3, #0
 8005a06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a14:	461a      	mov	r2, r3
 8005a16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d3b7      	bcc.n	800599a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	613b      	str	r3, [r7, #16]
 8005a2e:	e043      	b.n	8005ab8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a46:	d118      	bne.n	8005a7a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10a      	bne.n	8005a64 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	e013      	b.n	8005a8c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a70:	461a      	mov	r2, r3
 8005a72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	e008      	b.n	8005a8c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a86:	461a      	mov	r2, r3
 8005a88:	2300      	movs	r3, #0
 8005a8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a98:	461a      	mov	r2, r3
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ab0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	613b      	str	r3, [r7, #16]
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d3b7      	bcc.n	8005a30 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ace:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ad2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ae0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d105      	bne.n	8005af4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f043 0210 	orr.w	r2, r3, #16
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	699a      	ldr	r2, [r3, #24]
 8005af8:	4b0f      	ldr	r3, [pc, #60]	; (8005b38 <USB_DevInit+0x2c4>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d005      	beq.n	8005b12 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	f043 0208 	orr.w	r2, r3, #8
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d107      	bne.n	8005b28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b20:	f043 0304 	orr.w	r3, r3, #4
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b34:	b004      	add	sp, #16
 8005b36:	4770      	bx	lr
 8005b38:	803c3800 	.word	0x803c3800

08005b3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	019b      	lsls	r3, r3, #6
 8005b4e:	f043 0220 	orr.w	r2, r3, #32
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4a09      	ldr	r2, [pc, #36]	; (8005b84 <USB_FlushTxFifo+0x48>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d901      	bls.n	8005b68 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e006      	b.n	8005b76 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d0f0      	beq.n	8005b56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	00030d40 	.word	0x00030d40

08005b88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2210      	movs	r2, #16
 8005b98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4a09      	ldr	r2, [pc, #36]	; (8005bc8 <USB_FlushRxFifo+0x40>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d901      	bls.n	8005bac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e006      	b.n	8005bba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	f003 0310 	and.w	r3, r3, #16
 8005bb4:	2b10      	cmp	r3, #16
 8005bb6:	d0f0      	beq.n	8005b9a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	00030d40 	.word	0x00030d40

08005bcc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	68f9      	ldr	r1, [r7, #12]
 8005be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bec:	4313      	orrs	r3, r2
 8005bee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b087      	sub	sp, #28
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 0306 	and.w	r3, r3, #6
 8005c16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d102      	bne.n	8005c24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	75fb      	strb	r3, [r7, #23]
 8005c22:	e00a      	b.n	8005c3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d002      	beq.n	8005c30 <USB_GetDevSpeed+0x32>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b06      	cmp	r3, #6
 8005c2e:	d102      	bne.n	8005c36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c30:	2302      	movs	r3, #2
 8005c32:	75fb      	strb	r3, [r7, #23]
 8005c34:	e001      	b.n	8005c3a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c36:	230f      	movs	r3, #15
 8005c38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	785b      	ldrb	r3, [r3, #1]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d13a      	bne.n	8005cda <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	2101      	movs	r1, #1
 8005c76:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	68f9      	ldr	r1, [r7, #12]
 8005c7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c82:	4313      	orrs	r3, r2
 8005c84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d155      	bne.n	8005d48 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	78db      	ldrb	r3, [r3, #3]
 8005cb6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cb8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	059b      	lsls	r3, r3, #22
 8005cbe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	0151      	lsls	r1, r2, #5
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	440a      	add	r2, r1
 8005cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	e036      	b.n	8005d48 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce0:	69da      	ldr	r2, [r3, #28]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	2101      	movs	r1, #1
 8005cec:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf0:	041b      	lsls	r3, r3, #16
 8005cf2:	68f9      	ldr	r1, [r7, #12]
 8005cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d11a      	bne.n	8005d48 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	78db      	ldrb	r3, [r3, #3]
 8005d2c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d2e:	430b      	orrs	r3, r1
 8005d30:	4313      	orrs	r3, r2
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	0151      	lsls	r1, r2, #5
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	440a      	add	r2, r1
 8005d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d46:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
	...

08005d58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	785b      	ldrb	r3, [r3, #1]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d161      	bne.n	8005e38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d8a:	d11f      	bne.n	8005dcc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005daa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	2101      	movs	r1, #1
 8005dde:	fa01 f303 	lsl.w	r3, r1, r3
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	43db      	mvns	r3, r3
 8005de6:	68f9      	ldr	r1, [r7, #12]
 8005de8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dec:	4013      	ands	r3, r2
 8005dee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df6:	69da      	ldr	r2, [r3, #28]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	2101      	movs	r1, #1
 8005e02:	fa01 f303 	lsl.w	r3, r1, r3
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	68f9      	ldr	r1, [r7, #12]
 8005e0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e10:	4013      	ands	r3, r2
 8005e12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	0159      	lsls	r1, r3, #5
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	440b      	add	r3, r1
 8005e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4b35      	ldr	r3, [pc, #212]	; (8005f08 <USB_DeactivateEndpoint+0x1b0>)
 8005e32:	4013      	ands	r3, r2
 8005e34:	600b      	str	r3, [r1, #0]
 8005e36:	e060      	b.n	8005efa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e4e:	d11f      	bne.n	8005e90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	0151      	lsls	r1, r2, #5
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	440a      	add	r2, r1
 8005e66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	0151      	lsls	r1, r2, #5
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	440a      	add	r2, r1
 8005e86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	f003 030f 	and.w	r3, r3, #15
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea6:	041b      	lsls	r3, r3, #16
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	68f9      	ldr	r1, [r7, #12]
 8005eac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eba:	69da      	ldr	r2, [r3, #28]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	f003 030f 	and.w	r3, r3, #15
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eca:	041b      	lsls	r3, r3, #16
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	68f9      	ldr	r1, [r7, #12]
 8005ed0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	0159      	lsls	r1, r3, #5
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	440b      	add	r3, r1
 8005eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <USB_DeactivateEndpoint+0x1b4>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	ec337800 	.word	0xec337800
 8005f0c:	eff37800 	.word	0xeff37800

08005f10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08a      	sub	sp, #40	; 0x28
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	785b      	ldrb	r3, [r3, #1]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	f040 815c 	bne.w	80061ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d132      	bne.n	8005fa0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	0151      	lsls	r1, r2, #5
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	440a      	add	r2, r1
 8005f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f98:	0cdb      	lsrs	r3, r3, #19
 8005f9a:	04db      	lsls	r3, r3, #19
 8005f9c:	6113      	str	r3, [r2, #16]
 8005f9e:	e074      	b.n	800608a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	0151      	lsls	r1, r2, #5
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	440a      	add	r2, r1
 8005fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fba:	0cdb      	lsrs	r3, r3, #19
 8005fbc:	04db      	lsls	r3, r3, #19
 8005fbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	0151      	lsls	r1, r2, #5
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fde:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fe2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	6959      	ldr	r1, [r3, #20]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	440b      	add	r3, r1
 8005ffc:	1e59      	subs	r1, r3, #1
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	fbb1 f3f3 	udiv	r3, r1, r3
 8006006:	04d9      	lsls	r1, r3, #19
 8006008:	4b9d      	ldr	r3, [pc, #628]	; (8006280 <USB_EPStartXfer+0x370>)
 800600a:	400b      	ands	r3, r1
 800600c:	69b9      	ldr	r1, [r7, #24]
 800600e:	0148      	lsls	r0, r1, #5
 8006010:	69f9      	ldr	r1, [r7, #28]
 8006012:	4401      	add	r1, r0
 8006014:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006018:	4313      	orrs	r3, r2
 800601a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006032:	69b9      	ldr	r1, [r7, #24]
 8006034:	0148      	lsls	r0, r1, #5
 8006036:	69f9      	ldr	r1, [r7, #28]
 8006038:	4401      	add	r1, r0
 800603a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800603e:	4313      	orrs	r3, r2
 8006040:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	78db      	ldrb	r3, [r3, #3]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d11f      	bne.n	800608a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	0151      	lsls	r1, r2, #5
 800605c:	69fa      	ldr	r2, [r7, #28]
 800605e:	440a      	add	r2, r1
 8006060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006064:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006068:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	0151      	lsls	r1, r2, #5
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	440a      	add	r2, r1
 8006080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006084:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006088:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d14b      	bne.n	8006128 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d009      	beq.n	80060ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a4:	461a      	mov	r2, r3
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	78db      	ldrb	r3, [r3, #3]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d128      	bne.n	8006106 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d110      	bne.n	80060e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	e00f      	b.n	8006106 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	0151      	lsls	r1, r2, #5
 80060f8:	69fa      	ldr	r2, [r7, #28]
 80060fa:	440a      	add	r2, r1
 80060fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006104:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	0151      	lsls	r1, r2, #5
 8006118:	69fa      	ldr	r2, [r7, #28]
 800611a:	440a      	add	r2, r1
 800611c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006120:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	e12f      	b.n	8006388 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	69fa      	ldr	r2, [r7, #28]
 800613c:	440a      	add	r2, r1
 800613e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006142:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006146:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	78db      	ldrb	r3, [r3, #3]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d015      	beq.n	800617c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 8117 	beq.w	8006388 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	f003 030f 	and.w	r3, r3, #15
 800616a:	2101      	movs	r1, #1
 800616c:	fa01 f303 	lsl.w	r3, r1, r3
 8006170:	69f9      	ldr	r1, [r7, #28]
 8006172:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006176:	4313      	orrs	r3, r2
 8006178:	634b      	str	r3, [r1, #52]	; 0x34
 800617a:	e105      	b.n	8006388 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006188:	2b00      	cmp	r3, #0
 800618a:	d110      	bne.n	80061ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	0151      	lsls	r1, r2, #5
 800619e:	69fa      	ldr	r2, [r7, #28]
 80061a0:	440a      	add	r2, r1
 80061a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	e00f      	b.n	80061ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	69fa      	ldr	r2, [r7, #28]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	68d9      	ldr	r1, [r3, #12]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	781a      	ldrb	r2, [r3, #0]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	b298      	uxth	r0, r3
 80061dc:	79fb      	ldrb	r3, [r7, #7]
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	4603      	mov	r3, r0
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 fa2b 	bl	800663e <USB_WritePacket>
 80061e8:	e0ce      	b.n	8006388 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	69fa      	ldr	r2, [r7, #28]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006204:	0cdb      	lsrs	r3, r3, #19
 8006206:	04db      	lsls	r3, r3, #19
 8006208:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006224:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006228:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800622c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d126      	bne.n	8006284 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800624c:	69b9      	ldr	r1, [r7, #24]
 800624e:	0148      	lsls	r0, r1, #5
 8006250:	69f9      	ldr	r1, [r7, #28]
 8006252:	4401      	add	r1, r0
 8006254:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006258:	4313      	orrs	r3, r2
 800625a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	0151      	lsls	r1, r2, #5
 800626e:	69fa      	ldr	r2, [r7, #28]
 8006270:	440a      	add	r2, r1
 8006272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006276:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800627a:	6113      	str	r3, [r2, #16]
 800627c:	e036      	b.n	80062ec <USB_EPStartXfer+0x3dc>
 800627e:	bf00      	nop
 8006280:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	695a      	ldr	r2, [r3, #20]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	4413      	add	r3, r2
 800628e:	1e5a      	subs	r2, r3, #1
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	fbb2 f3f3 	udiv	r3, r2, r3
 8006298:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	8afb      	ldrh	r3, [r7, #22]
 80062aa:	04d9      	lsls	r1, r3, #19
 80062ac:	4b39      	ldr	r3, [pc, #228]	; (8006394 <USB_EPStartXfer+0x484>)
 80062ae:	400b      	ands	r3, r1
 80062b0:	69b9      	ldr	r1, [r7, #24]
 80062b2:	0148      	lsls	r0, r1, #5
 80062b4:	69f9      	ldr	r1, [r7, #28]
 80062b6:	4401      	add	r1, r0
 80062b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062bc:	4313      	orrs	r3, r2
 80062be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062cc:	691a      	ldr	r2, [r3, #16]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	8af9      	ldrh	r1, [r7, #22]
 80062d4:	fb01 f303 	mul.w	r3, r1, r3
 80062d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062dc:	69b9      	ldr	r1, [r7, #24]
 80062de:	0148      	lsls	r0, r1, #5
 80062e0:	69f9      	ldr	r1, [r7, #28]
 80062e2:	4401      	add	r1, r0
 80062e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062e8:	4313      	orrs	r3, r2
 80062ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062ec:	79fb      	ldrb	r3, [r7, #7]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d10d      	bne.n	800630e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	68d9      	ldr	r1, [r3, #12]
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630a:	460a      	mov	r2, r1
 800630c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	78db      	ldrb	r3, [r3, #3]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d128      	bne.n	8006368 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006322:	2b00      	cmp	r3, #0
 8006324:	d110      	bne.n	8006348 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	0151      	lsls	r1, r2, #5
 8006338:	69fa      	ldr	r2, [r7, #28]
 800633a:	440a      	add	r2, r1
 800633c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006340:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	e00f      	b.n	8006368 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	0151      	lsls	r1, r2, #5
 800635a:	69fa      	ldr	r2, [r7, #28]
 800635c:	440a      	add	r2, r1
 800635e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006366:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	0151      	lsls	r1, r2, #5
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	440a      	add	r2, r1
 800637e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006382:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006386:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3720      	adds	r7, #32
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	1ff80000 	.word	0x1ff80000

08006398 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	4613      	mov	r3, r2
 80063a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	785b      	ldrb	r3, [r3, #1]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	f040 80cd 	bne.w	8006554 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d132      	bne.n	8006428 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	0151      	lsls	r1, r2, #5
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	440a      	add	r2, r1
 80063d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	0151      	lsls	r1, r2, #5
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	440a      	add	r2, r1
 80063fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006400:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006404:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	0151      	lsls	r1, r2, #5
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	440a      	add	r2, r1
 800641c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006420:	0cdb      	lsrs	r3, r3, #19
 8006422:	04db      	lsls	r3, r3, #19
 8006424:	6113      	str	r3, [r2, #16]
 8006426:	e04e      	b.n	80064c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	0151      	lsls	r1, r2, #5
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	440a      	add	r2, r1
 800643e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006442:	0cdb      	lsrs	r3, r3, #19
 8006444:	04db      	lsls	r3, r3, #19
 8006446:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	0151      	lsls	r1, r2, #5
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	440a      	add	r2, r1
 800645e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006462:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006466:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800646a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	695a      	ldr	r2, [r3, #20]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	429a      	cmp	r2, r3
 8006476:	d903      	bls.n	8006480 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	0151      	lsls	r1, r2, #5
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	440a      	add	r2, r1
 8006496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800649a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800649e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	691a      	ldr	r2, [r3, #16]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064b6:	6939      	ldr	r1, [r7, #16]
 80064b8:	0148      	lsls	r0, r1, #5
 80064ba:	6979      	ldr	r1, [r7, #20]
 80064bc:	4401      	add	r1, r0
 80064be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064c2:	4313      	orrs	r3, r2
 80064c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80064c6:	79fb      	ldrb	r3, [r7, #7]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d11e      	bne.n	800650a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d009      	beq.n	80064e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e0:	461a      	mov	r2, r3
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	0151      	lsls	r1, r2, #5
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	440a      	add	r2, r1
 80064fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006502:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	e092      	b.n	8006630 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	0151      	lsls	r1, r2, #5
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	440a      	add	r2, r1
 8006520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006524:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006528:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d07e      	beq.n	8006630 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	2101      	movs	r1, #1
 8006544:	fa01 f303 	lsl.w	r3, r1, r3
 8006548:	6979      	ldr	r1, [r7, #20]
 800654a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800654e:	4313      	orrs	r3, r2
 8006550:	634b      	str	r3, [r1, #52]	; 0x34
 8006552:	e06d      	b.n	8006630 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	0151      	lsls	r1, r2, #5
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	440a      	add	r2, r1
 800656a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800656e:	0cdb      	lsrs	r3, r3, #19
 8006570:	04db      	lsls	r3, r3, #19
 8006572:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	440a      	add	r2, r1
 800658a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800658e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006592:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006596:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	0151      	lsls	r1, r2, #5
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	440a      	add	r2, r1
 80065be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d4:	691a      	ldr	r2, [r3, #16]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065de:	6939      	ldr	r1, [r7, #16]
 80065e0:	0148      	lsls	r0, r1, #5
 80065e2:	6979      	ldr	r1, [r7, #20]
 80065e4:	4401      	add	r1, r0
 80065e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065ea:	4313      	orrs	r3, r2
 80065ec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80065ee:	79fb      	ldrb	r3, [r7, #7]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d10d      	bne.n	8006610 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d009      	beq.n	8006610 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	68d9      	ldr	r1, [r3, #12]
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660c:	460a      	mov	r2, r1
 800660e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	0151      	lsls	r1, r2, #5
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	440a      	add	r2, r1
 8006626:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800662a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800662e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800663e:	b480      	push	{r7}
 8006640:	b089      	sub	sp, #36	; 0x24
 8006642:	af00      	add	r7, sp, #0
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	4611      	mov	r1, r2
 800664a:	461a      	mov	r2, r3
 800664c:	460b      	mov	r3, r1
 800664e:	71fb      	strb	r3, [r7, #7]
 8006650:	4613      	mov	r3, r2
 8006652:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800665c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006660:	2b00      	cmp	r3, #0
 8006662:	d11a      	bne.n	800669a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006664:	88bb      	ldrh	r3, [r7, #4]
 8006666:	3303      	adds	r3, #3
 8006668:	089b      	lsrs	r3, r3, #2
 800666a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800666c:	2300      	movs	r3, #0
 800666e:	61bb      	str	r3, [r7, #24]
 8006670:	e00f      	b.n	8006692 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	031a      	lsls	r2, r3, #12
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	4413      	add	r3, r2
 800667a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800667e:	461a      	mov	r2, r3
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	3304      	adds	r3, #4
 800668a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	3301      	adds	r3, #1
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	429a      	cmp	r2, r3
 8006698:	d3eb      	bcc.n	8006672 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3724      	adds	r7, #36	; 0x24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b089      	sub	sp, #36	; 0x24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	4613      	mov	r3, r2
 80066b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	3303      	adds	r3, #3
 80066c2:	089b      	lsrs	r3, r3, #2
 80066c4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80066c6:	2300      	movs	r3, #0
 80066c8:	61bb      	str	r3, [r7, #24]
 80066ca:	e00b      	b.n	80066e4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	3304      	adds	r3, #4
 80066dc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	3301      	adds	r3, #1
 80066e2:	61bb      	str	r3, [r7, #24]
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d3ef      	bcc.n	80066cc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80066ec:	69fb      	ldr	r3, [r7, #28]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3724      	adds	r7, #36	; 0x24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b085      	sub	sp, #20
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	785b      	ldrb	r3, [r3, #1]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d12c      	bne.n	8006770 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	db12      	blt.n	800674e <USB_EPSetStall+0x54>
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00f      	beq.n	800674e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	0151      	lsls	r1, r2, #5
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	440a      	add	r2, r1
 8006744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006748:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800674c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	0151      	lsls	r1, r2, #5
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	440a      	add	r2, r1
 8006764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006768:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	e02b      	b.n	80067c8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	db12      	blt.n	80067a8 <USB_EPSetStall+0xae>
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00f      	beq.n	80067a8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	440a      	add	r2, r1
 800679e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067a6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b085      	sub	sp, #20
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	785b      	ldrb	r3, [r3, #1]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d128      	bne.n	8006844 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	0151      	lsls	r1, r2, #5
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	440a      	add	r2, r1
 8006808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800680c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006810:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	78db      	ldrb	r3, [r3, #3]
 8006816:	2b03      	cmp	r3, #3
 8006818:	d003      	beq.n	8006822 <USB_EPClearStall+0x4c>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	78db      	ldrb	r3, [r3, #3]
 800681e:	2b02      	cmp	r3, #2
 8006820:	d138      	bne.n	8006894 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	0151      	lsls	r1, r2, #5
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	440a      	add	r2, r1
 8006838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800683c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	e027      	b.n	8006894 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	0151      	lsls	r1, r2, #5
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	440a      	add	r2, r1
 800685a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800685e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006862:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	78db      	ldrb	r3, [r3, #3]
 8006868:	2b03      	cmp	r3, #3
 800686a:	d003      	beq.n	8006874 <USB_EPClearStall+0x9e>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	78db      	ldrb	r3, [r3, #3]
 8006870:	2b02      	cmp	r3, #2
 8006872:	d10f      	bne.n	8006894 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	440a      	add	r2, r1
 800688a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800688e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006892:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b085      	sub	sp, #20
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	460b      	mov	r3, r1
 80068ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80068c4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	78fb      	ldrb	r3, [r7, #3]
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80068d6:	68f9      	ldr	r1, [r7, #12]
 80068d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068dc:	4313      	orrs	r3, r2
 80068de:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b085      	sub	sp, #20
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006908:	f023 0303 	bic.w	r3, r3, #3
 800690c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800691c:	f023 0302 	bic.w	r3, r3, #2
 8006920:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800694a:	f023 0303 	bic.w	r3, r3, #3
 800694e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800695e:	f043 0302 	orr.w	r3, r3, #2
 8006962:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006972:	b480      	push	{r7}
 8006974:	b085      	sub	sp, #20
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4013      	ands	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800698a:	68fb      	ldr	r3, [r7, #12]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	4013      	ands	r3, r2
 80069ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	0c1b      	lsrs	r3, r3, #16
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	4013      	ands	r3, r2
 80069ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	b29b      	uxth	r3, r3
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6c:	01db      	lsls	r3, r3, #7
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a76:	78fb      	ldrb	r3, [r7, #3]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	4013      	ands	r3, r2
 8006a88:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	371c      	adds	r7, #28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ace:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ad2:	f023 0307 	bic.w	r3, r3, #7
 8006ad6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
	...

08006afc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	460b      	mov	r3, r1
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	333c      	adds	r3, #60	; 0x3c
 8006b12:	3304      	adds	r3, #4
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	4a26      	ldr	r2, [pc, #152]	; (8006bb4 <USB_EP0_OutStart+0xb8>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d90a      	bls.n	8006b36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b30:	d101      	bne.n	8006b36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e037      	b.n	8006ba6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	2300      	movs	r3, #0
 8006b40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b64:	f043 0318 	orr.w	r3, r3, #24
 8006b68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b78:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006b7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006b7e:	7afb      	ldrb	r3, [r7, #11]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d10f      	bne.n	8006ba4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b9e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006ba2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	4f54300a 	.word	0x4f54300a

08006bb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4a13      	ldr	r2, [pc, #76]	; (8006c1c <USB_CoreReset+0x64>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d901      	bls.n	8006bd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e01b      	b.n	8006c0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	daf2      	bge.n	8006bc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	f043 0201 	orr.w	r2, r3, #1
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	60fb      	str	r3, [r7, #12]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4a09      	ldr	r2, [pc, #36]	; (8006c1c <USB_CoreReset+0x64>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d901      	bls.n	8006c00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e006      	b.n	8006c0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d0f0      	beq.n	8006bee <USB_CoreReset+0x36>

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	00030d40 	.word	0x00030d40

08006c20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c2c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c30:	f002 f928 	bl	8008e84 <malloc>
 8006c34:	4603      	mov	r3, r0
 8006c36:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d105      	bne.n	8006c4a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006c46:	2302      	movs	r3, #2
 8006c48:	e066      	b.n	8006d18 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	7c1b      	ldrb	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d119      	bne.n	8006c8e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c5e:	2202      	movs	r2, #2
 8006c60:	2181      	movs	r1, #129	; 0x81
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 ff95 	bl	8008b92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c72:	2202      	movs	r2, #2
 8006c74:	2101      	movs	r1, #1
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f001 ff8b 	bl	8008b92 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2210      	movs	r2, #16
 8006c88:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006c8c:	e016      	b.n	8006cbc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c8e:	2340      	movs	r3, #64	; 0x40
 8006c90:	2202      	movs	r2, #2
 8006c92:	2181      	movs	r1, #129	; 0x81
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 ff7c 	bl	8008b92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ca0:	2340      	movs	r3, #64	; 0x40
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 ff73 	bl	8008b92 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2210      	movs	r2, #16
 8006cb8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006cbc:	2308      	movs	r3, #8
 8006cbe:	2203      	movs	r2, #3
 8006cc0:	2182      	movs	r1, #130	; 0x82
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 ff65 	bl	8008b92 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	7c1b      	ldrb	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d109      	bne.n	8006d06 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f002 f836 	bl	8008d70 <USBD_LL_PrepareReceive>
 8006d04:	e007      	b.n	8006d16 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d0c:	2340      	movs	r3, #64	; 0x40
 8006d0e:	2101      	movs	r1, #1
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f002 f82d 	bl	8008d70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d30:	2181      	movs	r1, #129	; 0x81
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 ff53 	bl	8008bde <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d3e:	2101      	movs	r1, #1
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 ff4c 	bl	8008bde <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d4e:	2182      	movs	r1, #130	; 0x82
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 ff44 	bl	8008bde <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00e      	beq.n	8006d8e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d80:	4618      	mov	r0, r3
 8006d82:	f002 f887 	bl	8008e94 <free>
    pdev->pClassData = NULL;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006da8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d03a      	beq.n	8006e38 <USBD_CDC_Setup+0xa0>
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	f040 8097 	bne.w	8006ef6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	88db      	ldrh	r3, [r3, #6]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d029      	beq.n	8006e24 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	b25b      	sxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	da11      	bge.n	8006dfe <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006de6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	88d2      	ldrh	r2, [r2, #6]
 8006dec:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006dee:	6939      	ldr	r1, [r7, #16]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	88db      	ldrh	r3, [r3, #6]
 8006df4:	461a      	mov	r2, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f001 fa9d 	bl	8008336 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006dfc:	e082      	b.n	8006f04 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	785a      	ldrb	r2, [r3, #1]
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	88db      	ldrh	r3, [r3, #6]
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006e14:	6939      	ldr	r1, [r7, #16]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	88db      	ldrh	r3, [r3, #6]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 fab6 	bl	800838e <USBD_CtlPrepareRx>
    break;
 8006e22:	e06f      	b.n	8006f04 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	7850      	ldrb	r0, [r2, #1]
 8006e30:	2200      	movs	r2, #0
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	4798      	blx	r3
    break;
 8006e36:	e065      	b.n	8006f04 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	785b      	ldrb	r3, [r3, #1]
 8006e3c:	2b0b      	cmp	r3, #11
 8006e3e:	d84f      	bhi.n	8006ee0 <USBD_CDC_Setup+0x148>
 8006e40:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <USBD_CDC_Setup+0xb0>)
 8006e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	08006e79 	.word	0x08006e79
 8006e4c:	08006eef 	.word	0x08006eef
 8006e50:	08006ee1 	.word	0x08006ee1
 8006e54:	08006ee1 	.word	0x08006ee1
 8006e58:	08006ee1 	.word	0x08006ee1
 8006e5c:	08006ee1 	.word	0x08006ee1
 8006e60:	08006ee1 	.word	0x08006ee1
 8006e64:	08006ee1 	.word	0x08006ee1
 8006e68:	08006ee1 	.word	0x08006ee1
 8006e6c:	08006ee1 	.word	0x08006ee1
 8006e70:	08006ea1 	.word	0x08006ea1
 8006e74:	08006ec9 	.word	0x08006ec9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d107      	bne.n	8006e92 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e82:	f107 030c 	add.w	r3, r7, #12
 8006e86:	2202      	movs	r2, #2
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 fa53 	bl	8008336 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006e90:	e030      	b.n	8006ef4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 f9dd 	bl	8008254 <USBD_CtlError>
        ret = USBD_FAIL;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e9e:	e029      	b.n	8006ef4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d107      	bne.n	8006eba <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006eaa:	f107 030f 	add.w	r3, r7, #15
 8006eae:	2201      	movs	r2, #1
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 fa3f 	bl	8008336 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006eb8:	e01c      	b.n	8006ef4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 f9c9 	bl	8008254 <USBD_CtlError>
        ret = USBD_FAIL;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec6:	e015      	b.n	8006ef4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d00f      	beq.n	8006ef2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f001 f9bd 	bl	8008254 <USBD_CtlError>
        ret = USBD_FAIL;
 8006eda:	2303      	movs	r3, #3
 8006edc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006ede:	e008      	b.n	8006ef2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 f9b6 	bl	8008254 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	75fb      	strb	r3, [r7, #23]
      break;
 8006eec:	e002      	b.n	8006ef4 <USBD_CDC_Setup+0x15c>
      break;
 8006eee:	bf00      	nop
 8006ef0:	e008      	b.n	8006f04 <USBD_CDC_Setup+0x16c>
      break;
 8006ef2:	bf00      	nop
    }
    break;
 8006ef4:	e006      	b.n	8006f04 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 f9ab 	bl	8008254 <USBD_CtlError>
    ret = USBD_FAIL;
 8006efe:	2303      	movs	r3, #3
 8006f00:	75fb      	strb	r3, [r7, #23]
    break;
 8006f02:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop

08006f10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	460b      	mov	r3, r1
 8006f1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e049      	b.n	8006fc6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f3a:	78fa      	ldrb	r2, [r7, #3]
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	440b      	add	r3, r1
 8006f48:	3318      	adds	r3, #24
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d029      	beq.n	8006fa4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f50:	78fa      	ldrb	r2, [r7, #3]
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	4613      	mov	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	440b      	add	r3, r1
 8006f5e:	3318      	adds	r3, #24
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	78f9      	ldrb	r1, [r7, #3]
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	460b      	mov	r3, r1
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	1a5b      	subs	r3, r3, r1
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4403      	add	r3, r0
 8006f70:	3344      	adds	r3, #68	; 0x44
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f78:	fb03 f301 	mul.w	r3, r3, r1
 8006f7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d110      	bne.n	8006fa4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006f82:	78fa      	ldrb	r2, [r7, #3]
 8006f84:	6879      	ldr	r1, [r7, #4]
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	440b      	add	r3, r1
 8006f90:	3318      	adds	r3, #24
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f96:	78f9      	ldrb	r1, [r7, #3]
 8006f98:	2300      	movs	r3, #0
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 fec6 	bl	8008d2e <USBD_LL_Transmit>
 8006fa2:	e00f      	b.n	8006fc4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006fc0:	78fa      	ldrb	r2, [r7, #3]
 8006fc2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fe0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e015      	b.n	800701c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ff0:	78fb      	ldrb	r3, [r7, #3]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 fedc 	bl	8008db2 <USBD_LL_GetRxDataSize>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007016:	4611      	mov	r1, r2
 8007018:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007032:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d015      	beq.n	800706a <USBD_CDC_EP0_RxReady+0x46>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007044:	2bff      	cmp	r3, #255	; 0xff
 8007046:	d010      	beq.n	800706a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007056:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800705e:	b292      	uxth	r2, r2
 8007060:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	22ff      	movs	r2, #255	; 0xff
 8007066:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2243      	movs	r2, #67	; 0x43
 8007080:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007082:	4b03      	ldr	r3, [pc, #12]	; (8007090 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	20000098 	.word	0x20000098

08007094 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2243      	movs	r2, #67	; 0x43
 80070a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80070a2:	4b03      	ldr	r3, [pc, #12]	; (80070b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	20000054 	.word	0x20000054

080070b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2243      	movs	r2, #67	; 0x43
 80070c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80070c2:	4b03      	ldr	r3, [pc, #12]	; (80070d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	200000dc 	.word	0x200000dc

080070d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	220a      	movs	r2, #10
 80070e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80070e2:	4b03      	ldr	r3, [pc, #12]	; (80070f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	20000010 	.word	0x20000010

080070f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007104:	2303      	movs	r3, #3
 8007106:	e004      	b.n	8007112 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800711e:	b480      	push	{r7}
 8007120:	b087      	sub	sp, #28
 8007122:	af00      	add	r7, sp, #0
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007130:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	371c      	adds	r7, #28
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007160:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007186:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007188:	2301      	movs	r3, #1
 800718a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007196:	2303      	movs	r3, #3
 8007198:	e01a      	b.n	80071d0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d114      	bne.n	80071ce <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80071c2:	2181      	movs	r1, #129	; 0x81
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f001 fdb2 	bl	8008d2e <USBD_LL_Transmit>

    ret = USBD_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e016      	b.n	8007224 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	7c1b      	ldrb	r3, [r3, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d109      	bne.n	8007212 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007208:	2101      	movs	r1, #1
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f001 fdb0 	bl	8008d70 <USBD_LL_PrepareReceive>
 8007210:	e007      	b.n	8007222 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007218:	2340      	movs	r3, #64	; 0x40
 800721a:	2101      	movs	r1, #1
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 fda7 	bl	8008d70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	4613      	mov	r3, r2
 8007238:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007240:	2303      	movs	r3, #3
 8007242:	e025      	b.n	8007290 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	79fa      	ldrb	r2, [r7, #7]
 8007282:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f001 fc1d 	bl	8008ac4 <USBD_LL_Init>
 800728a:	4603      	mov	r3, r0
 800728c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800728e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e010      	b.n	80072d2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c0:	f107 020e 	add.w	r2, r7, #14
 80072c4:	4610      	mov	r0, r2
 80072c6:	4798      	blx	r3
 80072c8:	4602      	mov	r2, r0
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b082      	sub	sp, #8
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 fc3a 	bl	8008b5c <USBD_LL_Start>
 80072e8:	4603      	mov	r3, r0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007314:	2303      	movs	r3, #3
 8007316:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d009      	beq.n	8007336 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	78fa      	ldrb	r2, [r7, #3]
 800732c:	4611      	mov	r1, r2
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4798      	blx	r3
 8007332:	4603      	mov	r3, r0
 8007334:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007336:	7bfb      	ldrb	r3, [r7, #15]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	460b      	mov	r3, r1
 800734a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d007      	beq.n	8007366 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	78fa      	ldrb	r2, [r7, #3]
 8007360:	4611      	mov	r1, r2
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	4798      	blx	r3
  }

  return USBD_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	4618      	mov	r0, r3
 8007384:	f000 ff2c 	bl	80081e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007396:	461a      	mov	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073a4:	f003 031f 	and.w	r3, r3, #31
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d00e      	beq.n	80073ca <USBD_LL_SetupStage+0x5a>
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d302      	bcc.n	80073b6 <USBD_LL_SetupStage+0x46>
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d014      	beq.n	80073de <USBD_LL_SetupStage+0x6e>
 80073b4:	e01d      	b.n	80073f2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa18 	bl	80077f4 <USBD_StdDevReq>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73fb      	strb	r3, [r7, #15]
      break;
 80073c8:	e020      	b.n	800740c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fa7c 	bl	80078d0 <USBD_StdItfReq>
 80073d8:	4603      	mov	r3, r0
 80073da:	73fb      	strb	r3, [r7, #15]
      break;
 80073dc:	e016      	b.n	800740c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fab8 	bl	800795c <USBD_StdEPReq>
 80073ec:	4603      	mov	r3, r0
 80073ee:	73fb      	strb	r3, [r7, #15]
      break;
 80073f0:	e00c      	b.n	800740c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 fc0b 	bl	8008c1c <USBD_LL_StallEP>
 8007406:	4603      	mov	r3, r0
 8007408:	73fb      	strb	r3, [r7, #15]
      break;
 800740a:	bf00      	nop
  }

  return ret;
 800740c:	7bfb      	ldrb	r3, [r7, #15]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b086      	sub	sp, #24
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	460b      	mov	r3, r1
 8007420:	607a      	str	r2, [r7, #4]
 8007422:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007424:	7afb      	ldrb	r3, [r7, #11]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d137      	bne.n	800749a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007430:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007438:	2b03      	cmp	r3, #3
 800743a:	d14a      	bne.n	80074d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	429a      	cmp	r2, r3
 8007446:	d913      	bls.n	8007470 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	1ad2      	subs	r2, r2, r3
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	4293      	cmp	r3, r2
 8007460:	bf28      	it	cs
 8007462:	4613      	movcs	r3, r2
 8007464:	461a      	mov	r2, r3
 8007466:	6879      	ldr	r1, [r7, #4]
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 ffad 	bl	80083c8 <USBD_CtlContinueRx>
 800746e:	e030      	b.n	80074d2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00a      	beq.n	8007492 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007482:	2b03      	cmp	r3, #3
 8007484:	d105      	bne.n	8007492 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 ffa9 	bl	80083ea <USBD_CtlSendStatus>
 8007498:	e01b      	b.n	80074d2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d013      	beq.n	80074ce <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d10e      	bne.n	80074ce <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	7afa      	ldrb	r2, [r7, #11]
 80074ba:	4611      	mov	r1, r2
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	4798      	blx	r3
 80074c0:	4603      	mov	r3, r0
 80074c2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80074ca:	7dfb      	ldrb	r3, [r7, #23]
 80074cc:	e002      	b.n	80074d4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e000      	b.n	80074d4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	460b      	mov	r3, r1
 80074e6:	607a      	str	r2, [r7, #4]
 80074e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80074ea:	7afb      	ldrb	r3, [r7, #11]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d16a      	bne.n	80075c6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3314      	adds	r3, #20
 80074f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d155      	bne.n	80075ac <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	429a      	cmp	r2, r3
 800750a:	d914      	bls.n	8007536 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	1ad2      	subs	r2, r2, r3
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	461a      	mov	r2, r3
 8007520:	6879      	ldr	r1, [r7, #4]
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 ff22 	bl	800836c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007528:	2300      	movs	r3, #0
 800752a:	2200      	movs	r2, #0
 800752c:	2100      	movs	r1, #0
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f001 fc1e 	bl	8008d70 <USBD_LL_PrepareReceive>
 8007534:	e03a      	b.n	80075ac <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	68da      	ldr	r2, [r3, #12]
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	429a      	cmp	r2, r3
 8007540:	d11c      	bne.n	800757c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800754a:	429a      	cmp	r2, r3
 800754c:	d316      	bcc.n	800757c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007558:	429a      	cmp	r2, r3
 800755a:	d20f      	bcs.n	800757c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800755c:	2200      	movs	r2, #0
 800755e:	2100      	movs	r1, #0
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 ff03 	bl	800836c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800756e:	2300      	movs	r3, #0
 8007570:	2200      	movs	r2, #0
 8007572:	2100      	movs	r1, #0
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f001 fbfb 	bl	8008d70 <USBD_LL_PrepareReceive>
 800757a:	e017      	b.n	80075ac <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00a      	beq.n	800759e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800758e:	2b03      	cmp	r3, #3
 8007590:	d105      	bne.n	800759e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800759e:	2180      	movs	r1, #128	; 0x80
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f001 fb3b 	bl	8008c1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 ff32 	bl	8008410 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d123      	bne.n	80075fe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f7ff fe9b 	bl	80072f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075c4:	e01b      	b.n	80075fe <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d013      	beq.n	80075fa <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d10e      	bne.n	80075fa <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	7afa      	ldrb	r2, [r7, #11]
 80075e6:	4611      	mov	r1, r2
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	4798      	blx	r3
 80075ec:	4603      	mov	r3, r0
 80075ee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	e002      	b.n	8007600 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e000      	b.n	8007600 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3718      	adds	r7, #24
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007634:	2b00      	cmp	r3, #0
 8007636:	d009      	beq.n	800764c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	6852      	ldr	r2, [r2, #4]
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	4611      	mov	r1, r2
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800764c:	2340      	movs	r3, #64	; 0x40
 800764e:	2200      	movs	r2, #0
 8007650:	2100      	movs	r1, #0
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f001 fa9d 	bl	8008b92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2240      	movs	r2, #64	; 0x40
 8007664:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007668:	2340      	movs	r3, #64	; 0x40
 800766a:	2200      	movs	r2, #0
 800766c:	2180      	movs	r1, #128	; 0x80
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f001 fa8f 	bl	8008b92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2240      	movs	r2, #64	; 0x40
 800767e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	460b      	mov	r3, r1
 8007694:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	78fa      	ldrb	r2, [r7, #3]
 800769a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2204      	movs	r2, #4
 80076c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d105      	bne.n	80076f2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800770e:	2b03      	cmp	r3, #3
 8007710:	d10b      	bne.n	800772a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d005      	beq.n	800772a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800774e:	b480      	push	{r7}
 8007750:	b083      	sub	sp, #12
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	460b      	mov	r3, r1
 8007758:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b082      	sub	sp, #8
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007794:	2b00      	cmp	r3, #0
 8007796:	d009      	beq.n	80077ac <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	6852      	ldr	r2, [r2, #4]
 80077a4:	b2d2      	uxtb	r2, r2
 80077a6:	4611      	mov	r1, r2
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	4798      	blx	r3
  }

  return USBD_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b087      	sub	sp, #28
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	3301      	adds	r3, #1
 80077cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077d4:	8a3b      	ldrh	r3, [r7, #16]
 80077d6:	021b      	lsls	r3, r3, #8
 80077d8:	b21a      	sxth	r2, r3
 80077da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077de:	4313      	orrs	r3, r2
 80077e0:	b21b      	sxth	r3, r3
 80077e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077e4:	89fb      	ldrh	r3, [r7, #14]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	371c      	adds	r7, #28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
	...

080077f4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800780a:	2b20      	cmp	r3, #32
 800780c:	d004      	beq.n	8007818 <USBD_StdDevReq+0x24>
 800780e:	2b40      	cmp	r3, #64	; 0x40
 8007810:	d002      	beq.n	8007818 <USBD_StdDevReq+0x24>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00a      	beq.n	800782c <USBD_StdDevReq+0x38>
 8007816:	e050      	b.n	80078ba <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	4798      	blx	r3
 8007826:	4603      	mov	r3, r0
 8007828:	73fb      	strb	r3, [r7, #15]
    break;
 800782a:	e04b      	b.n	80078c4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	785b      	ldrb	r3, [r3, #1]
 8007830:	2b09      	cmp	r3, #9
 8007832:	d83c      	bhi.n	80078ae <USBD_StdDevReq+0xba>
 8007834:	a201      	add	r2, pc, #4	; (adr r2, 800783c <USBD_StdDevReq+0x48>)
 8007836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783a:	bf00      	nop
 800783c:	08007891 	.word	0x08007891
 8007840:	080078a5 	.word	0x080078a5
 8007844:	080078af 	.word	0x080078af
 8007848:	0800789b 	.word	0x0800789b
 800784c:	080078af 	.word	0x080078af
 8007850:	0800786f 	.word	0x0800786f
 8007854:	08007865 	.word	0x08007865
 8007858:	080078af 	.word	0x080078af
 800785c:	08007887 	.word	0x08007887
 8007860:	08007879 	.word	0x08007879
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f9ce 	bl	8007c08 <USBD_GetDescriptor>
      break;
 800786c:	e024      	b.n	80078b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fb33 	bl	8007edc <USBD_SetAddress>
      break;
 8007876:	e01f      	b.n	80078b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fb70 	bl	8007f60 <USBD_SetConfig>
 8007880:	4603      	mov	r3, r0
 8007882:	73fb      	strb	r3, [r7, #15]
      break;
 8007884:	e018      	b.n	80078b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fc0d 	bl	80080a8 <USBD_GetConfig>
      break;
 800788e:	e013      	b.n	80078b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fc3c 	bl	8008110 <USBD_GetStatus>
      break;
 8007898:	e00e      	b.n	80078b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fc6a 	bl	8008176 <USBD_SetFeature>
      break;
 80078a2:	e009      	b.n	80078b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fc79 	bl	800819e <USBD_ClrFeature>
      break;
 80078ac:	e004      	b.n	80078b8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fccf 	bl	8008254 <USBD_CtlError>
      break;
 80078b6:	bf00      	nop
    }
    break;
 80078b8:	e004      	b.n	80078c4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fcc9 	bl	8008254 <USBD_CtlError>
    break;
 80078c2:	bf00      	nop
  }

  return ret;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop

080078d0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078e6:	2b20      	cmp	r3, #32
 80078e8:	d003      	beq.n	80078f2 <USBD_StdItfReq+0x22>
 80078ea:	2b40      	cmp	r3, #64	; 0x40
 80078ec:	d001      	beq.n	80078f2 <USBD_StdItfReq+0x22>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d12a      	bne.n	8007948 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f8:	3b01      	subs	r3, #1
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d81d      	bhi.n	800793a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	889b      	ldrh	r3, [r3, #4]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b01      	cmp	r3, #1
 8007906:	d813      	bhi.n	8007930 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	4798      	blx	r3
 8007916:	4603      	mov	r3, r0
 8007918:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	88db      	ldrh	r3, [r3, #6]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d110      	bne.n	8007944 <USBD_StdItfReq+0x74>
 8007922:	7bfb      	ldrb	r3, [r7, #15]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10d      	bne.n	8007944 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fd5e 	bl	80083ea <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800792e:	e009      	b.n	8007944 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fc8e 	bl	8008254 <USBD_CtlError>
      break;
 8007938:	e004      	b.n	8007944 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fc89 	bl	8008254 <USBD_CtlError>
      break;
 8007942:	e000      	b.n	8007946 <USBD_StdItfReq+0x76>
      break;
 8007944:	bf00      	nop
    }
    break;
 8007946:	e004      	b.n	8007952 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fc82 	bl	8008254 <USBD_CtlError>
    break;
 8007950:	bf00      	nop
  }

  return ret;
 8007952:	7bfb      	ldrb	r3, [r7, #15]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	889b      	ldrh	r3, [r3, #4]
 800796e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007978:	2b20      	cmp	r3, #32
 800797a:	d004      	beq.n	8007986 <USBD_StdEPReq+0x2a>
 800797c:	2b40      	cmp	r3, #64	; 0x40
 800797e:	d002      	beq.n	8007986 <USBD_StdEPReq+0x2a>
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00a      	beq.n	800799a <USBD_StdEPReq+0x3e>
 8007984:	e135      	b.n	8007bf2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	4798      	blx	r3
 8007994:	4603      	mov	r3, r0
 8007996:	73fb      	strb	r3, [r7, #15]
    break;
 8007998:	e130      	b.n	8007bfc <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	785b      	ldrb	r3, [r3, #1]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d03e      	beq.n	8007a20 <USBD_StdEPReq+0xc4>
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	d002      	beq.n	80079ac <USBD_StdEPReq+0x50>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d077      	beq.n	8007a9a <USBD_StdEPReq+0x13e>
 80079aa:	e11c      	b.n	8007be6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d002      	beq.n	80079bc <USBD_StdEPReq+0x60>
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	d015      	beq.n	80079e6 <USBD_StdEPReq+0x8a>
 80079ba:	e02b      	b.n	8007a14 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00c      	beq.n	80079dc <USBD_StdEPReq+0x80>
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
 80079c4:	2b80      	cmp	r3, #128	; 0x80
 80079c6:	d009      	beq.n	80079dc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f001 f925 	bl	8008c1c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079d2:	2180      	movs	r1, #128	; 0x80
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 f921 	bl	8008c1c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80079da:	e020      	b.n	8007a1e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fc38 	bl	8008254 <USBD_CtlError>
        break;
 80079e4:	e01b      	b.n	8007a1e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	885b      	ldrh	r3, [r3, #2]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10e      	bne.n	8007a0c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00b      	beq.n	8007a0c <USBD_StdEPReq+0xb0>
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	2b80      	cmp	r3, #128	; 0x80
 80079f8:	d008      	beq.n	8007a0c <USBD_StdEPReq+0xb0>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	88db      	ldrh	r3, [r3, #6]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d104      	bne.n	8007a0c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f001 f908 	bl	8008c1c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fcec 	bl	80083ea <USBD_CtlSendStatus>

        break;
 8007a12:	e004      	b.n	8007a1e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fc1c 	bl	8008254 <USBD_CtlError>
        break;
 8007a1c:	bf00      	nop
      }
      break;
 8007a1e:	e0e7      	b.n	8007bf0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d002      	beq.n	8007a30 <USBD_StdEPReq+0xd4>
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d015      	beq.n	8007a5a <USBD_StdEPReq+0xfe>
 8007a2e:	e02d      	b.n	8007a8c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00c      	beq.n	8007a50 <USBD_StdEPReq+0xf4>
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	2b80      	cmp	r3, #128	; 0x80
 8007a3a:	d009      	beq.n	8007a50 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 f8eb 	bl	8008c1c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a46:	2180      	movs	r1, #128	; 0x80
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 f8e7 	bl	8008c1c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007a4e:	e023      	b.n	8007a98 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fbfe 	bl	8008254 <USBD_CtlError>
        break;
 8007a58:	e01e      	b.n	8007a98 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	885b      	ldrh	r3, [r3, #2]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d119      	bne.n	8007a96 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007a62:	7bbb      	ldrb	r3, [r7, #14]
 8007a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d004      	beq.n	8007a76 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 f8f2 	bl	8008c5a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fcb7 	bl	80083ea <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	4798      	blx	r3
        }
        break;
 8007a8a:	e004      	b.n	8007a96 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fbe0 	bl	8008254 <USBD_CtlError>
        break;
 8007a94:	e000      	b.n	8007a98 <USBD_StdEPReq+0x13c>
        break;
 8007a96:	bf00      	nop
      }
      break;
 8007a98:	e0aa      	b.n	8007bf0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d002      	beq.n	8007aaa <USBD_StdEPReq+0x14e>
 8007aa4:	2b03      	cmp	r3, #3
 8007aa6:	d032      	beq.n	8007b0e <USBD_StdEPReq+0x1b2>
 8007aa8:	e097      	b.n	8007bda <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d007      	beq.n	8007ac0 <USBD_StdEPReq+0x164>
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	2b80      	cmp	r3, #128	; 0x80
 8007ab4:	d004      	beq.n	8007ac0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fbcb 	bl	8008254 <USBD_CtlError>
          break;
 8007abe:	e091      	b.n	8007be4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ac0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	da0b      	bge.n	8007ae0 <USBD_StdEPReq+0x184>
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	3310      	adds	r3, #16
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	4413      	add	r3, r2
 8007adc:	3304      	adds	r3, #4
 8007ade:	e00b      	b.n	8007af8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	4413      	add	r3, r2
 8007af6:	3304      	adds	r3, #4
 8007af8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	2200      	movs	r2, #0
 8007afe:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2202      	movs	r2, #2
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fc15 	bl	8008336 <USBD_CtlSendData>
        break;
 8007b0c:	e06a      	b.n	8007be4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007b0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	da11      	bge.n	8007b3a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	f003 020f 	and.w	r2, r3, #15
 8007b1c:	6879      	ldr	r1, [r7, #4]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	440b      	add	r3, r1
 8007b28:	3324      	adds	r3, #36	; 0x24
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d117      	bne.n	8007b60 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fb8e 	bl	8008254 <USBD_CtlError>
            break;
 8007b38:	e054      	b.n	8007be4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
 8007b3c:	f003 020f 	and.w	r2, r3, #15
 8007b40:	6879      	ldr	r1, [r7, #4]
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	440b      	add	r3, r1
 8007b4c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d104      	bne.n	8007b60 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fb7b 	bl	8008254 <USBD_CtlError>
            break;
 8007b5e:	e041      	b.n	8007be4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	da0b      	bge.n	8007b80 <USBD_StdEPReq+0x224>
 8007b68:	7bbb      	ldrb	r3, [r7, #14]
 8007b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b6e:	4613      	mov	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4413      	add	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	3310      	adds	r3, #16
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	e00b      	b.n	8007b98 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b86:	4613      	mov	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4413      	add	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	4413      	add	r3, r2
 8007b96:	3304      	adds	r3, #4
 8007b98:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b9a:	7bbb      	ldrb	r3, [r7, #14]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <USBD_StdEPReq+0x24a>
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	2b80      	cmp	r3, #128	; 0x80
 8007ba4:	d103      	bne.n	8007bae <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	e00e      	b.n	8007bcc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 f870 	bl	8008c98 <USBD_LL_IsStallEP>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	e002      	b.n	8007bcc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fbaf 	bl	8008336 <USBD_CtlSendData>
          break;
 8007bd8:	e004      	b.n	8007be4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fb39 	bl	8008254 <USBD_CtlError>
        break;
 8007be2:	bf00      	nop
      }
      break;
 8007be4:	e004      	b.n	8007bf0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fb33 	bl	8008254 <USBD_CtlError>
      break;
 8007bee:	bf00      	nop
    }
    break;
 8007bf0:	e004      	b.n	8007bfc <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fb2d 	bl	8008254 <USBD_CtlError>
    break;
 8007bfa:	bf00      	nop
  }

  return ret;
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	885b      	ldrh	r3, [r3, #2]
 8007c22:	0a1b      	lsrs	r3, r3, #8
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	3b01      	subs	r3, #1
 8007c28:	2b06      	cmp	r3, #6
 8007c2a:	f200 8128 	bhi.w	8007e7e <USBD_GetDescriptor+0x276>
 8007c2e:	a201      	add	r2, pc, #4	; (adr r2, 8007c34 <USBD_GetDescriptor+0x2c>)
 8007c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c34:	08007c51 	.word	0x08007c51
 8007c38:	08007c69 	.word	0x08007c69
 8007c3c:	08007ca9 	.word	0x08007ca9
 8007c40:	08007e7f 	.word	0x08007e7f
 8007c44:	08007e7f 	.word	0x08007e7f
 8007c48:	08007e1f 	.word	0x08007e1f
 8007c4c:	08007e4b 	.word	0x08007e4b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	7c12      	ldrb	r2, [r2, #16]
 8007c5c:	f107 0108 	add.w	r1, r7, #8
 8007c60:	4610      	mov	r0, r2
 8007c62:	4798      	blx	r3
 8007c64:	60f8      	str	r0, [r7, #12]
    break;
 8007c66:	e112      	b.n	8007e8e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	7c1b      	ldrb	r3, [r3, #16]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10d      	bne.n	8007c8c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c78:	f107 0208 	add.w	r2, r7, #8
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4798      	blx	r3
 8007c80:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3301      	adds	r3, #1
 8007c86:	2202      	movs	r2, #2
 8007c88:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007c8a:	e100      	b.n	8007e8e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c94:	f107 0208 	add.w	r2, r7, #8
 8007c98:	4610      	mov	r0, r2
 8007c9a:	4798      	blx	r3
 8007c9c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	701a      	strb	r2, [r3, #0]
    break;
 8007ca6:	e0f2      	b.n	8007e8e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	885b      	ldrh	r3, [r3, #2]
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b05      	cmp	r3, #5
 8007cb0:	f200 80ac 	bhi.w	8007e0c <USBD_GetDescriptor+0x204>
 8007cb4:	a201      	add	r2, pc, #4	; (adr r2, 8007cbc <USBD_GetDescriptor+0xb4>)
 8007cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cba:	bf00      	nop
 8007cbc:	08007cd5 	.word	0x08007cd5
 8007cc0:	08007d09 	.word	0x08007d09
 8007cc4:	08007d3d 	.word	0x08007d3d
 8007cc8:	08007d71 	.word	0x08007d71
 8007ccc:	08007da5 	.word	0x08007da5
 8007cd0:	08007dd9 	.word	0x08007dd9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00b      	beq.n	8007cf8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	7c12      	ldrb	r2, [r2, #16]
 8007cec:	f107 0108 	add.w	r1, r7, #8
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4798      	blx	r3
 8007cf4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cf6:	e091      	b.n	8007e1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 faaa 	bl	8008254 <USBD_CtlError>
        err++;
 8007d00:	7afb      	ldrb	r3, [r7, #11]
 8007d02:	3301      	adds	r3, #1
 8007d04:	72fb      	strb	r3, [r7, #11]
      break;
 8007d06:	e089      	b.n	8007e1c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00b      	beq.n	8007d2c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	7c12      	ldrb	r2, [r2, #16]
 8007d20:	f107 0108 	add.w	r1, r7, #8
 8007d24:	4610      	mov	r0, r2
 8007d26:	4798      	blx	r3
 8007d28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d2a:	e077      	b.n	8007e1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fa90 	bl	8008254 <USBD_CtlError>
        err++;
 8007d34:	7afb      	ldrb	r3, [r7, #11]
 8007d36:	3301      	adds	r3, #1
 8007d38:	72fb      	strb	r3, [r7, #11]
      break;
 8007d3a:	e06f      	b.n	8007e1c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00b      	beq.n	8007d60 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	7c12      	ldrb	r2, [r2, #16]
 8007d54:	f107 0108 	add.w	r1, r7, #8
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4798      	blx	r3
 8007d5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d5e:	e05d      	b.n	8007e1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fa76 	bl	8008254 <USBD_CtlError>
        err++;
 8007d68:	7afb      	ldrb	r3, [r7, #11]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d6e:	e055      	b.n	8007e1c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00b      	beq.n	8007d94 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	7c12      	ldrb	r2, [r2, #16]
 8007d88:	f107 0108 	add.w	r1, r7, #8
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4798      	blx	r3
 8007d90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d92:	e043      	b.n	8007e1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa5c 	bl	8008254 <USBD_CtlError>
        err++;
 8007d9c:	7afb      	ldrb	r3, [r7, #11]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	72fb      	strb	r3, [r7, #11]
      break;
 8007da2:	e03b      	b.n	8007e1c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00b      	beq.n	8007dc8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	7c12      	ldrb	r2, [r2, #16]
 8007dbc:	f107 0108 	add.w	r1, r7, #8
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	4798      	blx	r3
 8007dc4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dc6:	e029      	b.n	8007e1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007dc8:	6839      	ldr	r1, [r7, #0]
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fa42 	bl	8008254 <USBD_CtlError>
        err++;
 8007dd0:	7afb      	ldrb	r3, [r7, #11]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	72fb      	strb	r3, [r7, #11]
      break;
 8007dd6:	e021      	b.n	8007e1c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00b      	beq.n	8007dfc <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	7c12      	ldrb	r2, [r2, #16]
 8007df0:	f107 0108 	add.w	r1, r7, #8
 8007df4:	4610      	mov	r0, r2
 8007df6:	4798      	blx	r3
 8007df8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dfa:	e00f      	b.n	8007e1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fa28 	bl	8008254 <USBD_CtlError>
        err++;
 8007e04:	7afb      	ldrb	r3, [r7, #11]
 8007e06:	3301      	adds	r3, #1
 8007e08:	72fb      	strb	r3, [r7, #11]
      break;
 8007e0a:	e007      	b.n	8007e1c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fa20 	bl	8008254 <USBD_CtlError>
      err++;
 8007e14:	7afb      	ldrb	r3, [r7, #11]
 8007e16:	3301      	adds	r3, #1
 8007e18:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007e1a:	bf00      	nop
    }
    break;
 8007e1c:	e037      	b.n	8007e8e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	7c1b      	ldrb	r3, [r3, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d109      	bne.n	8007e3a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2e:	f107 0208 	add.w	r2, r7, #8
 8007e32:	4610      	mov	r0, r2
 8007e34:	4798      	blx	r3
 8007e36:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007e38:	e029      	b.n	8007e8e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fa09 	bl	8008254 <USBD_CtlError>
      err++;
 8007e42:	7afb      	ldrb	r3, [r7, #11]
 8007e44:	3301      	adds	r3, #1
 8007e46:	72fb      	strb	r3, [r7, #11]
    break;
 8007e48:	e021      	b.n	8007e8e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	7c1b      	ldrb	r3, [r3, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10d      	bne.n	8007e6e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5a:	f107 0208 	add.w	r2, r7, #8
 8007e5e:	4610      	mov	r0, r2
 8007e60:	4798      	blx	r3
 8007e62:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3301      	adds	r3, #1
 8007e68:	2207      	movs	r2, #7
 8007e6a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007e6c:	e00f      	b.n	8007e8e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f9ef 	bl	8008254 <USBD_CtlError>
      err++;
 8007e76:	7afb      	ldrb	r3, [r7, #11]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	72fb      	strb	r3, [r7, #11]
    break;
 8007e7c:	e007      	b.n	8007e8e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f9e7 	bl	8008254 <USBD_CtlError>
    err++;
 8007e86:	7afb      	ldrb	r3, [r7, #11]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	72fb      	strb	r3, [r7, #11]
    break;
 8007e8c:	bf00      	nop
  }

  if (err != 0U)
 8007e8e:	7afb      	ldrb	r3, [r7, #11]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d11e      	bne.n	8007ed2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	88db      	ldrh	r3, [r3, #6]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d016      	beq.n	8007eca <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007e9c:	893b      	ldrh	r3, [r7, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00e      	beq.n	8007ec0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	88da      	ldrh	r2, [r3, #6]
 8007ea6:	893b      	ldrh	r3, [r7, #8]
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	bf28      	it	cs
 8007eac:	4613      	movcs	r3, r2
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007eb2:	893b      	ldrh	r3, [r7, #8]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	68f9      	ldr	r1, [r7, #12]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fa3c 	bl	8008336 <USBD_CtlSendData>
 8007ebe:	e009      	b.n	8007ed4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f9c6 	bl	8008254 <USBD_CtlError>
 8007ec8:	e004      	b.n	8007ed4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fa8d 	bl	80083ea <USBD_CtlSendStatus>
 8007ed0:	e000      	b.n	8007ed4 <USBD_GetDescriptor+0x2cc>
    return;
 8007ed2:	bf00      	nop
    }
  }
}
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop

08007edc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	889b      	ldrh	r3, [r3, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d130      	bne.n	8007f50 <USBD_SetAddress+0x74>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	88db      	ldrh	r3, [r3, #6]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d12c      	bne.n	8007f50 <USBD_SetAddress+0x74>
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	885b      	ldrh	r3, [r3, #2]
 8007efa:	2b7f      	cmp	r3, #127	; 0x7f
 8007efc:	d828      	bhi.n	8007f50 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	885b      	ldrh	r3, [r3, #2]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d104      	bne.n	8007f1e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f99c 	bl	8008254 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f1c:	e01c      	b.n	8007f58 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	7bfa      	ldrb	r2, [r7, #15]
 8007f22:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fee0 	bl	8008cf0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fa5a 	bl	80083ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d004      	beq.n	8007f46 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f44:	e008      	b.n	8007f58 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f4e:	e003      	b.n	8007f58 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f97e 	bl	8008254 <USBD_CtlError>
  }
}
 8007f58:	bf00      	nop
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	885b      	ldrh	r3, [r3, #2]
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	4b4b      	ldr	r3, [pc, #300]	; (80080a4 <USBD_SetConfig+0x144>)
 8007f76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f78:	4b4a      	ldr	r3, [pc, #296]	; (80080a4 <USBD_SetConfig+0x144>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d905      	bls.n	8007f8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f966 	bl	8008254 <USBD_CtlError>
    return USBD_FAIL;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e087      	b.n	800809c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d002      	beq.n	8007f9c <USBD_SetConfig+0x3c>
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d025      	beq.n	8007fe6 <USBD_SetConfig+0x86>
 8007f9a:	e071      	b.n	8008080 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007f9c:	4b41      	ldr	r3, [pc, #260]	; (80080a4 <USBD_SetConfig+0x144>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d01c      	beq.n	8007fde <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007fa4:	4b3f      	ldr	r3, [pc, #252]	; (80080a4 <USBD_SetConfig+0x144>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fae:	4b3d      	ldr	r3, [pc, #244]	; (80080a4 <USBD_SetConfig+0x144>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff f9a7 	bl	8007308 <USBD_SetClassConfig>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d004      	beq.n	8007fce <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f944 	bl	8008254 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007fcc:	e065      	b.n	800809a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fa0b 	bl	80083ea <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2203      	movs	r2, #3
 8007fd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007fdc:	e05d      	b.n	800809a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fa03 	bl	80083ea <USBD_CtlSendStatus>
    break;
 8007fe4:	e059      	b.n	800809a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007fe6:	4b2f      	ldr	r3, [pc, #188]	; (80080a4 <USBD_SetConfig+0x144>)
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d112      	bne.n	8008014 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007ff6:	4b2b      	ldr	r3, [pc, #172]	; (80080a4 <USBD_SetConfig+0x144>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008000:	4b28      	ldr	r3, [pc, #160]	; (80080a4 <USBD_SetConfig+0x144>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	4619      	mov	r1, r3
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7ff f99a 	bl	8007340 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f9ec 	bl	80083ea <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008012:	e042      	b.n	800809a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008014:	4b23      	ldr	r3, [pc, #140]	; (80080a4 <USBD_SetConfig+0x144>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	461a      	mov	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	429a      	cmp	r2, r3
 8008020:	d02a      	beq.n	8008078 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	b2db      	uxtb	r3, r3
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff f988 	bl	8007340 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008030:	4b1c      	ldr	r3, [pc, #112]	; (80080a4 <USBD_SetConfig+0x144>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800803a:	4b1a      	ldr	r3, [pc, #104]	; (80080a4 <USBD_SetConfig+0x144>)
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff f961 	bl	8007308 <USBD_SetClassConfig>
 8008046:	4603      	mov	r3, r0
 8008048:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800804a:	7bfb      	ldrb	r3, [r7, #15]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00f      	beq.n	8008070 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f8fe 	bl	8008254 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	b2db      	uxtb	r3, r3
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7ff f96d 	bl	8007340 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2202      	movs	r2, #2
 800806a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800806e:	e014      	b.n	800809a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f9ba 	bl	80083ea <USBD_CtlSendStatus>
    break;
 8008076:	e010      	b.n	800809a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f9b6 	bl	80083ea <USBD_CtlSendStatus>
    break;
 800807e:	e00c      	b.n	800809a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f8e6 	bl	8008254 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008088:	4b06      	ldr	r3, [pc, #24]	; (80080a4 <USBD_SetConfig+0x144>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7ff f956 	bl	8007340 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008094:	2303      	movs	r3, #3
 8008096:	73fb      	strb	r3, [r7, #15]
    break;
 8008098:	bf00      	nop
  }

  return ret;
 800809a:	7bfb      	ldrb	r3, [r7, #15]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	20000208 	.word	0x20000208

080080a8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	88db      	ldrh	r3, [r3, #6]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d004      	beq.n	80080c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f8c9 	bl	8008254 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80080c2:	e021      	b.n	8008108 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	db17      	blt.n	80080fe <USBD_GetConfig+0x56>
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	dd02      	ble.n	80080d8 <USBD_GetConfig+0x30>
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d00b      	beq.n	80080ee <USBD_GetConfig+0x46>
 80080d6:	e012      	b.n	80080fe <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3308      	adds	r3, #8
 80080e2:	2201      	movs	r2, #1
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f925 	bl	8008336 <USBD_CtlSendData>
      break;
 80080ec:	e00c      	b.n	8008108 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	3304      	adds	r3, #4
 80080f2:	2201      	movs	r2, #1
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f91d 	bl	8008336 <USBD_CtlSendData>
      break;
 80080fc:	e004      	b.n	8008108 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f8a7 	bl	8008254 <USBD_CtlError>
      break;
 8008106:	bf00      	nop
}
 8008108:	bf00      	nop
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008120:	3b01      	subs	r3, #1
 8008122:	2b02      	cmp	r3, #2
 8008124:	d81e      	bhi.n	8008164 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	88db      	ldrh	r3, [r3, #6]
 800812a:	2b02      	cmp	r3, #2
 800812c:	d004      	beq.n	8008138 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f88f 	bl	8008254 <USBD_CtlError>
      break;
 8008136:	e01a      	b.n	800816e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008144:	2b00      	cmp	r3, #0
 8008146:	d005      	beq.n	8008154 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	f043 0202 	orr.w	r2, r3, #2
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	330c      	adds	r3, #12
 8008158:	2202      	movs	r2, #2
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f8ea 	bl	8008336 <USBD_CtlSendData>
    break;
 8008162:	e004      	b.n	800816e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f874 	bl	8008254 <USBD_CtlError>
    break;
 800816c:	bf00      	nop
  }
}
 800816e:	bf00      	nop
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	885b      	ldrh	r3, [r3, #2]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d106      	bne.n	8008196 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f92a 	bl	80083ea <USBD_CtlSendStatus>
  }
}
 8008196:	bf00      	nop
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ae:	3b01      	subs	r3, #1
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d80b      	bhi.n	80081cc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	885b      	ldrh	r3, [r3, #2]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d10c      	bne.n	80081d6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f910 	bl	80083ea <USBD_CtlSendStatus>
      }
      break;
 80081ca:	e004      	b.n	80081d6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f840 	bl	8008254 <USBD_CtlError>
      break;
 80081d4:	e000      	b.n	80081d8 <USBD_ClrFeature+0x3a>
      break;
 80081d6:	bf00      	nop
  }
}
 80081d8:	bf00      	nop
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	781a      	ldrb	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3301      	adds	r3, #1
 80081fa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	781a      	ldrb	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	3301      	adds	r3, #1
 8008208:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f7ff fad3 	bl	80077b6 <SWAPBYTE>
 8008210:	4603      	mov	r3, r0
 8008212:	461a      	mov	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	3301      	adds	r3, #1
 800821c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3301      	adds	r3, #1
 8008222:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7ff fac6 	bl	80077b6 <SWAPBYTE>
 800822a:	4603      	mov	r3, r0
 800822c:	461a      	mov	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3301      	adds	r3, #1
 8008236:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3301      	adds	r3, #1
 800823c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7ff fab9 	bl	80077b6 <SWAPBYTE>
 8008244:	4603      	mov	r3, r0
 8008246:	461a      	mov	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	80da      	strh	r2, [r3, #6]
}
 800824c:	bf00      	nop
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800825e:	2180      	movs	r1, #128	; 0x80
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fcdb 	bl	8008c1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008266:	2100      	movs	r1, #0
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fcd7 	bl	8008c1c <USBD_LL_StallEP>
}
 800826e:	bf00      	nop
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b086      	sub	sp, #24
 800827a:	af00      	add	r7, sp, #0
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	60b9      	str	r1, [r7, #8]
 8008280:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d036      	beq.n	80082fa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008290:	6938      	ldr	r0, [r7, #16]
 8008292:	f000 f836 	bl	8008302 <USBD_GetLen>
 8008296:	4603      	mov	r3, r0
 8008298:	3301      	adds	r3, #1
 800829a:	b29b      	uxth	r3, r3
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	b29a      	uxth	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80082a4:	7dfb      	ldrb	r3, [r7, #23]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	4413      	add	r3, r2
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	7812      	ldrb	r2, [r2, #0]
 80082ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
 80082b2:	3301      	adds	r3, #1
 80082b4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	4413      	add	r3, r2
 80082bc:	2203      	movs	r2, #3
 80082be:	701a      	strb	r2, [r3, #0]
  idx++;
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
 80082c2:	3301      	adds	r3, #1
 80082c4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082c6:	e013      	b.n	80082f0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	4413      	add	r3, r2
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	7812      	ldrb	r2, [r2, #0]
 80082d2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	3301      	adds	r3, #1
 80082d8:	613b      	str	r3, [r7, #16]
    idx++;
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	3301      	adds	r3, #1
 80082de:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	4413      	add	r3, r2
 80082e6:	2200      	movs	r2, #0
 80082e8:	701a      	strb	r2, [r3, #0]
    idx++;
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
 80082ec:	3301      	adds	r3, #1
 80082ee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1e7      	bne.n	80082c8 <USBD_GetString+0x52>
 80082f8:	e000      	b.n	80082fc <USBD_GetString+0x86>
    return;
 80082fa:	bf00      	nop
  }
}
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008302:	b480      	push	{r7}
 8008304:	b085      	sub	sp, #20
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008312:	e005      	b.n	8008320 <USBD_GetLen+0x1e>
  {
    len++;
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	3301      	adds	r3, #1
 8008318:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	3301      	adds	r3, #1
 800831e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1f5      	bne.n	8008314 <USBD_GetLen+0x12>
  }

  return len;
 8008328:	7bfb      	ldrb	r3, [r7, #15]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	60f8      	str	r0, [r7, #12]
 800833e:	60b9      	str	r1, [r7, #8]
 8008340:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2202      	movs	r2, #2
 8008346:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	2100      	movs	r1, #0
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 fce6 	bl	8008d2e <USBD_LL_Transmit>

  return USBD_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	2100      	movs	r1, #0
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 fcd5 	bl	8008d2e <USBD_LL_Transmit>

  return USBD_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b084      	sub	sp, #16
 8008392:	af00      	add	r7, sp, #0
 8008394:	60f8      	str	r0, [r7, #12]
 8008396:	60b9      	str	r1, [r7, #8]
 8008398:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2203      	movs	r2, #3
 800839e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	2100      	movs	r1, #0
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f000 fcd9 	bl	8008d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	2100      	movs	r1, #0
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 fcc8 	bl	8008d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b082      	sub	sp, #8
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2204      	movs	r2, #4
 80083f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083fa:	2300      	movs	r3, #0
 80083fc:	2200      	movs	r2, #0
 80083fe:	2100      	movs	r1, #0
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fc94 	bl	8008d2e <USBD_LL_Transmit>

  return USBD_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2205      	movs	r2, #5
 800841c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008420:	2300      	movs	r3, #0
 8008422:	2200      	movs	r2, #0
 8008424:	2100      	movs	r1, #0
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fca2 	bl	8008d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
	...

08008438 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800843c:	2200      	movs	r2, #0
 800843e:	4912      	ldr	r1, [pc, #72]	; (8008488 <MX_USB_DEVICE_Init+0x50>)
 8008440:	4812      	ldr	r0, [pc, #72]	; (800848c <MX_USB_DEVICE_Init+0x54>)
 8008442:	f7fe fef3 	bl	800722c <USBD_Init>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800844c:	f7f8 fb8e 	bl	8000b6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008450:	490f      	ldr	r1, [pc, #60]	; (8008490 <MX_USB_DEVICE_Init+0x58>)
 8008452:	480e      	ldr	r0, [pc, #56]	; (800848c <MX_USB_DEVICE_Init+0x54>)
 8008454:	f7fe ff20 	bl	8007298 <USBD_RegisterClass>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800845e:	f7f8 fb85 	bl	8000b6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008462:	490c      	ldr	r1, [pc, #48]	; (8008494 <MX_USB_DEVICE_Init+0x5c>)
 8008464:	4809      	ldr	r0, [pc, #36]	; (800848c <MX_USB_DEVICE_Init+0x54>)
 8008466:	f7fe fe45 	bl	80070f4 <USBD_CDC_RegisterInterface>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008470:	f7f8 fb7c 	bl	8000b6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008474:	4805      	ldr	r0, [pc, #20]	; (800848c <MX_USB_DEVICE_Init+0x54>)
 8008476:	f7fe ff30 	bl	80072da <USBD_Start>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008480:	f7f8 fb74 	bl	8000b6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008484:	bf00      	nop
 8008486:	bd80      	pop	{r7, pc}
 8008488:	20000134 	.word	0x20000134
 800848c:	200003e0 	.word	0x200003e0
 8008490:	2000001c 	.word	0x2000001c
 8008494:	20000120 	.word	0x20000120

08008498 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800849c:	2200      	movs	r2, #0
 800849e:	4905      	ldr	r1, [pc, #20]	; (80084b4 <CDC_Init_FS+0x1c>)
 80084a0:	4805      	ldr	r0, [pc, #20]	; (80084b8 <CDC_Init_FS+0x20>)
 80084a2:	f7fe fe3c 	bl	800711e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80084a6:	4905      	ldr	r1, [pc, #20]	; (80084bc <CDC_Init_FS+0x24>)
 80084a8:	4803      	ldr	r0, [pc, #12]	; (80084b8 <CDC_Init_FS+0x20>)
 80084aa:	f7fe fe51 	bl	8007150 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20000eb0 	.word	0x20000eb0
 80084b8:	200003e0 	.word	0x200003e0
 80084bc:	200006b0 	.word	0x200006b0

080084c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084c0:	b480      	push	{r7}
 80084c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	4603      	mov	r3, r0
 80084d8:	6039      	str	r1, [r7, #0]
 80084da:	71fb      	strb	r3, [r7, #7]
 80084dc:	4613      	mov	r3, r2
 80084de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084e0:	79fb      	ldrb	r3, [r7, #7]
 80084e2:	2b23      	cmp	r3, #35	; 0x23
 80084e4:	d84a      	bhi.n	800857c <CDC_Control_FS+0xac>
 80084e6:	a201      	add	r2, pc, #4	; (adr r2, 80084ec <CDC_Control_FS+0x1c>)
 80084e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ec:	0800857d 	.word	0x0800857d
 80084f0:	0800857d 	.word	0x0800857d
 80084f4:	0800857d 	.word	0x0800857d
 80084f8:	0800857d 	.word	0x0800857d
 80084fc:	0800857d 	.word	0x0800857d
 8008500:	0800857d 	.word	0x0800857d
 8008504:	0800857d 	.word	0x0800857d
 8008508:	0800857d 	.word	0x0800857d
 800850c:	0800857d 	.word	0x0800857d
 8008510:	0800857d 	.word	0x0800857d
 8008514:	0800857d 	.word	0x0800857d
 8008518:	0800857d 	.word	0x0800857d
 800851c:	0800857d 	.word	0x0800857d
 8008520:	0800857d 	.word	0x0800857d
 8008524:	0800857d 	.word	0x0800857d
 8008528:	0800857d 	.word	0x0800857d
 800852c:	0800857d 	.word	0x0800857d
 8008530:	0800857d 	.word	0x0800857d
 8008534:	0800857d 	.word	0x0800857d
 8008538:	0800857d 	.word	0x0800857d
 800853c:	0800857d 	.word	0x0800857d
 8008540:	0800857d 	.word	0x0800857d
 8008544:	0800857d 	.word	0x0800857d
 8008548:	0800857d 	.word	0x0800857d
 800854c:	0800857d 	.word	0x0800857d
 8008550:	0800857d 	.word	0x0800857d
 8008554:	0800857d 	.word	0x0800857d
 8008558:	0800857d 	.word	0x0800857d
 800855c:	0800857d 	.word	0x0800857d
 8008560:	0800857d 	.word	0x0800857d
 8008564:	0800857d 	.word	0x0800857d
 8008568:	0800857d 	.word	0x0800857d
 800856c:	0800857d 	.word	0x0800857d
 8008570:	0800857d 	.word	0x0800857d
 8008574:	0800857d 	.word	0x0800857d
 8008578:	0800857d 	.word	0x0800857d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800857c:	bf00      	nop
  }

  return (USBD_OK);
 800857e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008580:	4618      	mov	r0, r3
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008596:	6879      	ldr	r1, [r7, #4]
 8008598:	4808      	ldr	r0, [pc, #32]	; (80085bc <CDC_Receive_FS+0x30>)
 800859a:	f7fe fdd9 	bl	8007150 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800859e:	4807      	ldr	r0, [pc, #28]	; (80085bc <CDC_Receive_FS+0x30>)
 80085a0:	f7fe fe1a 	bl	80071d8 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, Len[0]);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7f7 ffba 	bl	8000524 <CDC_ReceiveCallback>
  return (USBD_OK);
 80085b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	200003e0 	.word	0x200003e0

080085c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085d0:	4b0d      	ldr	r3, [pc, #52]	; (8008608 <CDC_Transmit_FS+0x48>)
 80085d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e00b      	b.n	80085fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085e6:	887b      	ldrh	r3, [r7, #2]
 80085e8:	461a      	mov	r2, r3
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	4806      	ldr	r0, [pc, #24]	; (8008608 <CDC_Transmit_FS+0x48>)
 80085ee:	f7fe fd96 	bl	800711e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085f2:	4805      	ldr	r0, [pc, #20]	; (8008608 <CDC_Transmit_FS+0x48>)
 80085f4:	f7fe fdc0 	bl	8007178 <USBD_CDC_TransmitPacket>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	200003e0 	.word	0x200003e0

0800860c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	4613      	mov	r3, r2
 8008618:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800861e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008622:	4618      	mov	r0, r3
 8008624:	371c      	adds	r7, #28
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
	...

08008630 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	4603      	mov	r3, r0
 8008638:	6039      	str	r1, [r7, #0]
 800863a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2212      	movs	r2, #18
 8008640:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008642:	4b03      	ldr	r3, [pc, #12]	; (8008650 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	20000150 	.word	0x20000150

08008654 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	6039      	str	r1, [r7, #0]
 800865e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	2204      	movs	r2, #4
 8008664:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008666:	4b03      	ldr	r3, [pc, #12]	; (8008674 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008668:	4618      	mov	r0, r3
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr
 8008674:	20000164 	.word	0x20000164

08008678 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	4603      	mov	r3, r0
 8008680:	6039      	str	r1, [r7, #0]
 8008682:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008684:	79fb      	ldrb	r3, [r7, #7]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d105      	bne.n	8008696 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	4907      	ldr	r1, [pc, #28]	; (80086ac <USBD_FS_ProductStrDescriptor+0x34>)
 800868e:	4808      	ldr	r0, [pc, #32]	; (80086b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008690:	f7ff fdf1 	bl	8008276 <USBD_GetString>
 8008694:	e004      	b.n	80086a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	4904      	ldr	r1, [pc, #16]	; (80086ac <USBD_FS_ProductStrDescriptor+0x34>)
 800869a:	4805      	ldr	r0, [pc, #20]	; (80086b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800869c:	f7ff fdeb 	bl	8008276 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086a0:	4b02      	ldr	r3, [pc, #8]	; (80086ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	200016b0 	.word	0x200016b0
 80086b0:	08009040 	.word	0x08009040

080086b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	4603      	mov	r3, r0
 80086bc:	6039      	str	r1, [r7, #0]
 80086be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	4904      	ldr	r1, [pc, #16]	; (80086d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086c4:	4804      	ldr	r0, [pc, #16]	; (80086d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086c6:	f7ff fdd6 	bl	8008276 <USBD_GetString>
  return USBD_StrDesc;
 80086ca:	4b02      	ldr	r3, [pc, #8]	; (80086d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	200016b0 	.word	0x200016b0
 80086d8:	08009058 	.word	0x08009058

080086dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	4603      	mov	r3, r0
 80086e4:	6039      	str	r1, [r7, #0]
 80086e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	221a      	movs	r2, #26
 80086ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086ee:	f000 f843 	bl	8008778 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086f2:	4b02      	ldr	r3, [pc, #8]	; (80086fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	20000168 	.word	0x20000168

08008700 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	6039      	str	r1, [r7, #0]
 800870a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800870c:	79fb      	ldrb	r3, [r7, #7]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d105      	bne.n	800871e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	4907      	ldr	r1, [pc, #28]	; (8008734 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008716:	4808      	ldr	r0, [pc, #32]	; (8008738 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008718:	f7ff fdad 	bl	8008276 <USBD_GetString>
 800871c:	e004      	b.n	8008728 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	4904      	ldr	r1, [pc, #16]	; (8008734 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008722:	4805      	ldr	r0, [pc, #20]	; (8008738 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008724:	f7ff fda7 	bl	8008276 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008728:	4b02      	ldr	r3, [pc, #8]	; (8008734 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800872a:	4618      	mov	r0, r3
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	200016b0 	.word	0x200016b0
 8008738:	0800906c 	.word	0x0800906c

0800873c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	6039      	str	r1, [r7, #0]
 8008746:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008748:	79fb      	ldrb	r3, [r7, #7]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d105      	bne.n	800875a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	4907      	ldr	r1, [pc, #28]	; (8008770 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008752:	4808      	ldr	r0, [pc, #32]	; (8008774 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008754:	f7ff fd8f 	bl	8008276 <USBD_GetString>
 8008758:	e004      	b.n	8008764 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	4904      	ldr	r1, [pc, #16]	; (8008770 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800875e:	4805      	ldr	r0, [pc, #20]	; (8008774 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008760:	f7ff fd89 	bl	8008276 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008764:	4b02      	ldr	r3, [pc, #8]	; (8008770 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	200016b0 	.word	0x200016b0
 8008774:	08009078 	.word	0x08009078

08008778 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800877e:	4b0f      	ldr	r3, [pc, #60]	; (80087bc <Get_SerialNum+0x44>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008784:	4b0e      	ldr	r3, [pc, #56]	; (80087c0 <Get_SerialNum+0x48>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800878a:	4b0e      	ldr	r3, [pc, #56]	; (80087c4 <Get_SerialNum+0x4c>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4413      	add	r3, r2
 8008796:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d009      	beq.n	80087b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800879e:	2208      	movs	r2, #8
 80087a0:	4909      	ldr	r1, [pc, #36]	; (80087c8 <Get_SerialNum+0x50>)
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 f814 	bl	80087d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087a8:	2204      	movs	r2, #4
 80087aa:	4908      	ldr	r1, [pc, #32]	; (80087cc <Get_SerialNum+0x54>)
 80087ac:	68b8      	ldr	r0, [r7, #8]
 80087ae:	f000 f80f 	bl	80087d0 <IntToUnicode>
  }
}
 80087b2:	bf00      	nop
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	1fff7a10 	.word	0x1fff7a10
 80087c0:	1fff7a14 	.word	0x1fff7a14
 80087c4:	1fff7a18 	.word	0x1fff7a18
 80087c8:	2000016a 	.word	0x2000016a
 80087cc:	2000017a 	.word	0x2000017a

080087d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	4613      	mov	r3, r2
 80087dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087e2:	2300      	movs	r3, #0
 80087e4:	75fb      	strb	r3, [r7, #23]
 80087e6:	e027      	b.n	8008838 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	0f1b      	lsrs	r3, r3, #28
 80087ec:	2b09      	cmp	r3, #9
 80087ee:	d80b      	bhi.n	8008808 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	0f1b      	lsrs	r3, r3, #28
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
 80087f8:	005b      	lsls	r3, r3, #1
 80087fa:	4619      	mov	r1, r3
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	440b      	add	r3, r1
 8008800:	3230      	adds	r2, #48	; 0x30
 8008802:	b2d2      	uxtb	r2, r2
 8008804:	701a      	strb	r2, [r3, #0]
 8008806:	e00a      	b.n	800881e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	0f1b      	lsrs	r3, r3, #28
 800880c:	b2da      	uxtb	r2, r3
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	005b      	lsls	r3, r3, #1
 8008812:	4619      	mov	r1, r3
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	440b      	add	r3, r1
 8008818:	3237      	adds	r2, #55	; 0x37
 800881a:	b2d2      	uxtb	r2, r2
 800881c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	011b      	lsls	r3, r3, #4
 8008822:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008824:	7dfb      	ldrb	r3, [r7, #23]
 8008826:	005b      	lsls	r3, r3, #1
 8008828:	3301      	adds	r3, #1
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	4413      	add	r3, r2
 800882e:	2200      	movs	r2, #0
 8008830:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008832:	7dfb      	ldrb	r3, [r7, #23]
 8008834:	3301      	adds	r3, #1
 8008836:	75fb      	strb	r3, [r7, #23]
 8008838:	7dfa      	ldrb	r2, [r7, #23]
 800883a:	79fb      	ldrb	r3, [r7, #7]
 800883c:	429a      	cmp	r2, r3
 800883e:	d3d3      	bcc.n	80087e8 <IntToUnicode+0x18>
  }
}
 8008840:	bf00      	nop
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08a      	sub	sp, #40	; 0x28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008854:	f107 0314 	add.w	r3, r7, #20
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	605a      	str	r2, [r3, #4]
 800885e:	609a      	str	r2, [r3, #8]
 8008860:	60da      	str	r2, [r3, #12]
 8008862:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800886c:	d13a      	bne.n	80088e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800886e:	2300      	movs	r3, #0
 8008870:	613b      	str	r3, [r7, #16]
 8008872:	4b1e      	ldr	r3, [pc, #120]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 8008874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008876:	4a1d      	ldr	r2, [pc, #116]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 8008878:	f043 0301 	orr.w	r3, r3, #1
 800887c:	6313      	str	r3, [r2, #48]	; 0x30
 800887e:	4b1b      	ldr	r3, [pc, #108]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 8008880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	613b      	str	r3, [r7, #16]
 8008888:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800888a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800888e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008890:	2302      	movs	r3, #2
 8008892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008894:	2300      	movs	r3, #0
 8008896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008898:	2303      	movs	r3, #3
 800889a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800889c:	230a      	movs	r3, #10
 800889e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088a0:	f107 0314 	add.w	r3, r7, #20
 80088a4:	4619      	mov	r1, r3
 80088a6:	4812      	ldr	r0, [pc, #72]	; (80088f0 <HAL_PCD_MspInit+0xa4>)
 80088a8:	f7f9 fcca 	bl	8002240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088ac:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 80088ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b0:	4a0e      	ldr	r2, [pc, #56]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 80088b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088b6:	6353      	str	r3, [r2, #52]	; 0x34
 80088b8:	2300      	movs	r3, #0
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	4b0b      	ldr	r3, [pc, #44]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 80088be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c0:	4a0a      	ldr	r2, [pc, #40]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 80088c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088c6:	6453      	str	r3, [r2, #68]	; 0x44
 80088c8:	4b08      	ldr	r3, [pc, #32]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 80088ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088d0:	60fb      	str	r3, [r7, #12]
 80088d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088d4:	2200      	movs	r2, #0
 80088d6:	2100      	movs	r1, #0
 80088d8:	2043      	movs	r0, #67	; 0x43
 80088da:	f7f9 f90c 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088de:	2043      	movs	r0, #67	; 0x43
 80088e0:	f7f9 f925 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088e4:	bf00      	nop
 80088e6:	3728      	adds	r7, #40	; 0x28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	40023800 	.word	0x40023800
 80088f0:	40020000 	.word	0x40020000

080088f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008908:	4619      	mov	r1, r3
 800890a:	4610      	mov	r0, r2
 800890c:	f7fe fd30 	bl	8007370 <USBD_LL_SetupStage>
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800892a:	78fa      	ldrb	r2, [r7, #3]
 800892c:	6879      	ldr	r1, [r7, #4]
 800892e:	4613      	mov	r3, r2
 8008930:	00db      	lsls	r3, r3, #3
 8008932:	1a9b      	subs	r3, r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	440b      	add	r3, r1
 8008938:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	78fb      	ldrb	r3, [r7, #3]
 8008940:	4619      	mov	r1, r3
 8008942:	f7fe fd68 	bl	8007416 <USBD_LL_DataOutStage>
}
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b082      	sub	sp, #8
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	460b      	mov	r3, r1
 8008958:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008960:	78fa      	ldrb	r2, [r7, #3]
 8008962:	6879      	ldr	r1, [r7, #4]
 8008964:	4613      	mov	r3, r2
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	1a9b      	subs	r3, r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	440b      	add	r3, r1
 800896e:	3348      	adds	r3, #72	; 0x48
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	78fb      	ldrb	r3, [r7, #3]
 8008974:	4619      	mov	r1, r3
 8008976:	f7fe fdb1 	bl	80074dc <USBD_LL_DataInStage>
}
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008990:	4618      	mov	r0, r3
 8008992:	f7fe feb5 	bl	8007700 <USBD_LL_SOF>
}
 8008996:	bf00      	nop
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b084      	sub	sp, #16
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089a6:	2301      	movs	r3, #1
 80089a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d001      	beq.n	80089b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80089b2:	f7f8 f8db 	bl	8000b6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089bc:	7bfa      	ldrb	r2, [r7, #15]
 80089be:	4611      	mov	r1, r2
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe fe62 	bl	800768a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fe fe1b 	bl	8007608 <USBD_LL_Reset>
}
 80089d2:	bf00      	nop
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe fe5d 	bl	80076aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	6812      	ldr	r2, [r2, #0]
 80089fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a02:	f043 0301 	orr.w	r3, r3, #1
 8008a06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a1b      	ldr	r3, [r3, #32]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d005      	beq.n	8008a1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a10:	4b04      	ldr	r3, [pc, #16]	; (8008a24 <HAL_PCD_SuspendCallback+0x48>)
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	4a03      	ldr	r2, [pc, #12]	; (8008a24 <HAL_PCD_SuspendCallback+0x48>)
 8008a16:	f043 0306 	orr.w	r3, r3, #6
 8008a1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	e000ed00 	.word	0xe000ed00

08008a28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fe fe4c 	bl	80076d4 <USBD_LL_Resume>
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a56:	78fa      	ldrb	r2, [r7, #3]
 8008a58:	4611      	mov	r1, r2
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe fe77 	bl	800774e <USBD_LL_IsoOUTIncomplete>
}
 8008a60:	bf00      	nop
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	460b      	mov	r3, r1
 8008a72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a7a:	78fa      	ldrb	r2, [r7, #3]
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe fe58 	bl	8007734 <USBD_LL_IsoINIncomplete>
}
 8008a84:	bf00      	nop
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fe fe64 	bl	8007768 <USBD_LL_DevConnected>
}
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe fe61 	bl	800777e <USBD_LL_DevDisconnected>
}
 8008abc:	bf00      	nop
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d13c      	bne.n	8008b4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ad4:	4a20      	ldr	r2, [pc, #128]	; (8008b58 <USBD_LL_Init+0x94>)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a1e      	ldr	r2, [pc, #120]	; (8008b58 <USBD_LL_Init+0x94>)
 8008ae0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ae4:	4b1c      	ldr	r3, [pc, #112]	; (8008b58 <USBD_LL_Init+0x94>)
 8008ae6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008aea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008aec:	4b1a      	ldr	r3, [pc, #104]	; (8008b58 <USBD_LL_Init+0x94>)
 8008aee:	2204      	movs	r2, #4
 8008af0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008af2:	4b19      	ldr	r3, [pc, #100]	; (8008b58 <USBD_LL_Init+0x94>)
 8008af4:	2202      	movs	r2, #2
 8008af6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008af8:	4b17      	ldr	r3, [pc, #92]	; (8008b58 <USBD_LL_Init+0x94>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008afe:	4b16      	ldr	r3, [pc, #88]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b00:	2202      	movs	r2, #2
 8008b02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b04:	4b14      	ldr	r3, [pc, #80]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b0a:	4b13      	ldr	r3, [pc, #76]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b10:	4b11      	ldr	r3, [pc, #68]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008b16:	4b10      	ldr	r3, [pc, #64]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b1c:	4b0e      	ldr	r3, [pc, #56]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b22:	480d      	ldr	r0, [pc, #52]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b24:	f7f9 fd4b 	bl	80025be <HAL_PCD_Init>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d001      	beq.n	8008b32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b2e:	f7f8 f81d 	bl	8000b6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b32:	2180      	movs	r1, #128	; 0x80
 8008b34:	4808      	ldr	r0, [pc, #32]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b36:	f7fa fea8 	bl	800388a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b3a:	2240      	movs	r2, #64	; 0x40
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	4806      	ldr	r0, [pc, #24]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b40:	f7fa fe5c 	bl	80037fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b44:	2280      	movs	r2, #128	; 0x80
 8008b46:	2101      	movs	r1, #1
 8008b48:	4803      	ldr	r0, [pc, #12]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b4a:	f7fa fe57 	bl	80037fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	200018b0 	.word	0x200018b0

08008b5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7f9 fe40 	bl	80027f8 <HAL_PCD_Start>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 f92a 	bl	8008dd8 <USBD_Get_USB_Status>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	4608      	mov	r0, r1
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	70fb      	strb	r3, [r7, #3]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70bb      	strb	r3, [r7, #2]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bba:	78bb      	ldrb	r3, [r7, #2]
 8008bbc:	883a      	ldrh	r2, [r7, #0]
 8008bbe:	78f9      	ldrb	r1, [r7, #3]
 8008bc0:	f7fa fa24 	bl	800300c <HAL_PCD_EP_Open>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 f904 	bl	8008dd8 <USBD_Get_USB_Status>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
 8008be6:	460b      	mov	r3, r1
 8008be8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bf8:	78fa      	ldrb	r2, [r7, #3]
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7fa fa6d 	bl	80030dc <HAL_PCD_EP_Close>
 8008c02:	4603      	mov	r3, r0
 8008c04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 f8e5 	bl	8008dd8 <USBD_Get_USB_Status>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c36:	78fa      	ldrb	r2, [r7, #3]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fa fb45 	bl	80032ca <HAL_PCD_EP_SetStall>
 8008c40:	4603      	mov	r3, r0
 8008c42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 f8c6 	bl	8008dd8 <USBD_Get_USB_Status>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b084      	sub	sp, #16
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	460b      	mov	r3, r1
 8008c64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c74:	78fa      	ldrb	r2, [r7, #3]
 8008c76:	4611      	mov	r1, r2
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fa fb8a 	bl	8003392 <HAL_PCD_EP_ClrStall>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 f8a7 	bl	8008dd8 <USBD_Get_USB_Status>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008caa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	da0b      	bge.n	8008ccc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cb4:	78fb      	ldrb	r3, [r7, #3]
 8008cb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cba:	68f9      	ldr	r1, [r7, #12]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	1a9b      	subs	r3, r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	440b      	add	r3, r1
 8008cc6:	333e      	adds	r3, #62	; 0x3e
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	e00b      	b.n	8008ce4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ccc:	78fb      	ldrb	r3, [r7, #3]
 8008cce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cd2:	68f9      	ldr	r1, [r7, #12]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	1a9b      	subs	r3, r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	440b      	add	r3, r1
 8008cde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ce2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d0a:	78fa      	ldrb	r2, [r7, #3]
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fa f957 	bl	8002fc2 <HAL_PCD_SetAddress>
 8008d14:	4603      	mov	r3, r0
 8008d16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 f85c 	bl	8008dd8 <USBD_Get_USB_Status>
 8008d20:	4603      	mov	r3, r0
 8008d22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d24:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b086      	sub	sp, #24
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	60f8      	str	r0, [r7, #12]
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	603b      	str	r3, [r7, #0]
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d4c:	7af9      	ldrb	r1, [r7, #11]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	f7fa fa70 	bl	8003236 <HAL_PCD_EP_Transmit>
 8008d56:	4603      	mov	r3, r0
 8008d58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d5a:	7dfb      	ldrb	r3, [r7, #23]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 f83b 	bl	8008dd8 <USBD_Get_USB_Status>
 8008d62:	4603      	mov	r3, r0
 8008d64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d66:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	607a      	str	r2, [r7, #4]
 8008d7a:	603b      	str	r3, [r7, #0]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d8e:	7af9      	ldrb	r1, [r7, #11]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	f7fa f9ec 	bl	8003170 <HAL_PCD_EP_Receive>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d9c:	7dfb      	ldrb	r3, [r7, #23]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 f81a 	bl	8008dd8 <USBD_Get_USB_Status>
 8008da4:	4603      	mov	r3, r0
 8008da6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008da8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b082      	sub	sp, #8
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	460b      	mov	r3, r1
 8008dbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008dc4:	78fa      	ldrb	r2, [r7, #3]
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fa fa1c 	bl	8003206 <HAL_PCD_EP_GetRxCount>
 8008dce:	4603      	mov	r3, r0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008de6:	79fb      	ldrb	r3, [r7, #7]
 8008de8:	2b03      	cmp	r3, #3
 8008dea:	d817      	bhi.n	8008e1c <USBD_Get_USB_Status+0x44>
 8008dec:	a201      	add	r2, pc, #4	; (adr r2, 8008df4 <USBD_Get_USB_Status+0x1c>)
 8008dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df2:	bf00      	nop
 8008df4:	08008e05 	.word	0x08008e05
 8008df8:	08008e0b 	.word	0x08008e0b
 8008dfc:	08008e11 	.word	0x08008e11
 8008e00:	08008e17 	.word	0x08008e17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	73fb      	strb	r3, [r7, #15]
    break;
 8008e08:	e00b      	b.n	8008e22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e0e:	e008      	b.n	8008e22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e10:	2301      	movs	r3, #1
 8008e12:	73fb      	strb	r3, [r7, #15]
    break;
 8008e14:	e005      	b.n	8008e22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e16:	2303      	movs	r3, #3
 8008e18:	73fb      	strb	r3, [r7, #15]
    break;
 8008e1a:	e002      	b.n	8008e22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e20:	bf00      	nop
  }
  return usb_status;
 8008e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <__errno>:
 8008e30:	4b01      	ldr	r3, [pc, #4]	; (8008e38 <__errno+0x8>)
 8008e32:	6818      	ldr	r0, [r3, #0]
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	20000184 	.word	0x20000184

08008e3c <__libc_init_array>:
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	4e0d      	ldr	r6, [pc, #52]	; (8008e74 <__libc_init_array+0x38>)
 8008e40:	4c0d      	ldr	r4, [pc, #52]	; (8008e78 <__libc_init_array+0x3c>)
 8008e42:	1ba4      	subs	r4, r4, r6
 8008e44:	10a4      	asrs	r4, r4, #2
 8008e46:	2500      	movs	r5, #0
 8008e48:	42a5      	cmp	r5, r4
 8008e4a:	d109      	bne.n	8008e60 <__libc_init_array+0x24>
 8008e4c:	4e0b      	ldr	r6, [pc, #44]	; (8008e7c <__libc_init_array+0x40>)
 8008e4e:	4c0c      	ldr	r4, [pc, #48]	; (8008e80 <__libc_init_array+0x44>)
 8008e50:	f000 f8ea 	bl	8009028 <_init>
 8008e54:	1ba4      	subs	r4, r4, r6
 8008e56:	10a4      	asrs	r4, r4, #2
 8008e58:	2500      	movs	r5, #0
 8008e5a:	42a5      	cmp	r5, r4
 8008e5c:	d105      	bne.n	8008e6a <__libc_init_array+0x2e>
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e64:	4798      	blx	r3
 8008e66:	3501      	adds	r5, #1
 8008e68:	e7ee      	b.n	8008e48 <__libc_init_array+0xc>
 8008e6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e6e:	4798      	blx	r3
 8008e70:	3501      	adds	r5, #1
 8008e72:	e7f2      	b.n	8008e5a <__libc_init_array+0x1e>
 8008e74:	080090b0 	.word	0x080090b0
 8008e78:	080090b0 	.word	0x080090b0
 8008e7c:	080090b0 	.word	0x080090b0
 8008e80:	080090b4 	.word	0x080090b4

08008e84 <malloc>:
 8008e84:	4b02      	ldr	r3, [pc, #8]	; (8008e90 <malloc+0xc>)
 8008e86:	4601      	mov	r1, r0
 8008e88:	6818      	ldr	r0, [r3, #0]
 8008e8a:	f000 b861 	b.w	8008f50 <_malloc_r>
 8008e8e:	bf00      	nop
 8008e90:	20000184 	.word	0x20000184

08008e94 <free>:
 8008e94:	4b02      	ldr	r3, [pc, #8]	; (8008ea0 <free+0xc>)
 8008e96:	4601      	mov	r1, r0
 8008e98:	6818      	ldr	r0, [r3, #0]
 8008e9a:	f000 b80b 	b.w	8008eb4 <_free_r>
 8008e9e:	bf00      	nop
 8008ea0:	20000184 	.word	0x20000184

08008ea4 <memset>:
 8008ea4:	4402      	add	r2, r0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d100      	bne.n	8008eae <memset+0xa>
 8008eac:	4770      	bx	lr
 8008eae:	f803 1b01 	strb.w	r1, [r3], #1
 8008eb2:	e7f9      	b.n	8008ea8 <memset+0x4>

08008eb4 <_free_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	2900      	cmp	r1, #0
 8008eba:	d045      	beq.n	8008f48 <_free_r+0x94>
 8008ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ec0:	1f0c      	subs	r4, r1, #4
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	bfb8      	it	lt
 8008ec6:	18e4      	addlt	r4, r4, r3
 8008ec8:	f000 f8ac 	bl	8009024 <__malloc_lock>
 8008ecc:	4a1f      	ldr	r2, [pc, #124]	; (8008f4c <_free_r+0x98>)
 8008ece:	6813      	ldr	r3, [r2, #0]
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	b933      	cbnz	r3, 8008ee2 <_free_r+0x2e>
 8008ed4:	6063      	str	r3, [r4, #4]
 8008ed6:	6014      	str	r4, [r2, #0]
 8008ed8:	4628      	mov	r0, r5
 8008eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ede:	f000 b8a2 	b.w	8009026 <__malloc_unlock>
 8008ee2:	42a3      	cmp	r3, r4
 8008ee4:	d90c      	bls.n	8008f00 <_free_r+0x4c>
 8008ee6:	6821      	ldr	r1, [r4, #0]
 8008ee8:	1862      	adds	r2, r4, r1
 8008eea:	4293      	cmp	r3, r2
 8008eec:	bf04      	itt	eq
 8008eee:	681a      	ldreq	r2, [r3, #0]
 8008ef0:	685b      	ldreq	r3, [r3, #4]
 8008ef2:	6063      	str	r3, [r4, #4]
 8008ef4:	bf04      	itt	eq
 8008ef6:	1852      	addeq	r2, r2, r1
 8008ef8:	6022      	streq	r2, [r4, #0]
 8008efa:	6004      	str	r4, [r0, #0]
 8008efc:	e7ec      	b.n	8008ed8 <_free_r+0x24>
 8008efe:	4613      	mov	r3, r2
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	b10a      	cbz	r2, 8008f08 <_free_r+0x54>
 8008f04:	42a2      	cmp	r2, r4
 8008f06:	d9fa      	bls.n	8008efe <_free_r+0x4a>
 8008f08:	6819      	ldr	r1, [r3, #0]
 8008f0a:	1858      	adds	r0, r3, r1
 8008f0c:	42a0      	cmp	r0, r4
 8008f0e:	d10b      	bne.n	8008f28 <_free_r+0x74>
 8008f10:	6820      	ldr	r0, [r4, #0]
 8008f12:	4401      	add	r1, r0
 8008f14:	1858      	adds	r0, r3, r1
 8008f16:	4282      	cmp	r2, r0
 8008f18:	6019      	str	r1, [r3, #0]
 8008f1a:	d1dd      	bne.n	8008ed8 <_free_r+0x24>
 8008f1c:	6810      	ldr	r0, [r2, #0]
 8008f1e:	6852      	ldr	r2, [r2, #4]
 8008f20:	605a      	str	r2, [r3, #4]
 8008f22:	4401      	add	r1, r0
 8008f24:	6019      	str	r1, [r3, #0]
 8008f26:	e7d7      	b.n	8008ed8 <_free_r+0x24>
 8008f28:	d902      	bls.n	8008f30 <_free_r+0x7c>
 8008f2a:	230c      	movs	r3, #12
 8008f2c:	602b      	str	r3, [r5, #0]
 8008f2e:	e7d3      	b.n	8008ed8 <_free_r+0x24>
 8008f30:	6820      	ldr	r0, [r4, #0]
 8008f32:	1821      	adds	r1, r4, r0
 8008f34:	428a      	cmp	r2, r1
 8008f36:	bf04      	itt	eq
 8008f38:	6811      	ldreq	r1, [r2, #0]
 8008f3a:	6852      	ldreq	r2, [r2, #4]
 8008f3c:	6062      	str	r2, [r4, #4]
 8008f3e:	bf04      	itt	eq
 8008f40:	1809      	addeq	r1, r1, r0
 8008f42:	6021      	streq	r1, [r4, #0]
 8008f44:	605c      	str	r4, [r3, #4]
 8008f46:	e7c7      	b.n	8008ed8 <_free_r+0x24>
 8008f48:	bd38      	pop	{r3, r4, r5, pc}
 8008f4a:	bf00      	nop
 8008f4c:	2000020c 	.word	0x2000020c

08008f50 <_malloc_r>:
 8008f50:	b570      	push	{r4, r5, r6, lr}
 8008f52:	1ccd      	adds	r5, r1, #3
 8008f54:	f025 0503 	bic.w	r5, r5, #3
 8008f58:	3508      	adds	r5, #8
 8008f5a:	2d0c      	cmp	r5, #12
 8008f5c:	bf38      	it	cc
 8008f5e:	250c      	movcc	r5, #12
 8008f60:	2d00      	cmp	r5, #0
 8008f62:	4606      	mov	r6, r0
 8008f64:	db01      	blt.n	8008f6a <_malloc_r+0x1a>
 8008f66:	42a9      	cmp	r1, r5
 8008f68:	d903      	bls.n	8008f72 <_malloc_r+0x22>
 8008f6a:	230c      	movs	r3, #12
 8008f6c:	6033      	str	r3, [r6, #0]
 8008f6e:	2000      	movs	r0, #0
 8008f70:	bd70      	pop	{r4, r5, r6, pc}
 8008f72:	f000 f857 	bl	8009024 <__malloc_lock>
 8008f76:	4a21      	ldr	r2, [pc, #132]	; (8008ffc <_malloc_r+0xac>)
 8008f78:	6814      	ldr	r4, [r2, #0]
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	b991      	cbnz	r1, 8008fa4 <_malloc_r+0x54>
 8008f7e:	4c20      	ldr	r4, [pc, #128]	; (8009000 <_malloc_r+0xb0>)
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	b91b      	cbnz	r3, 8008f8c <_malloc_r+0x3c>
 8008f84:	4630      	mov	r0, r6
 8008f86:	f000 f83d 	bl	8009004 <_sbrk_r>
 8008f8a:	6020      	str	r0, [r4, #0]
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f000 f838 	bl	8009004 <_sbrk_r>
 8008f94:	1c43      	adds	r3, r0, #1
 8008f96:	d124      	bne.n	8008fe2 <_malloc_r+0x92>
 8008f98:	230c      	movs	r3, #12
 8008f9a:	6033      	str	r3, [r6, #0]
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	f000 f842 	bl	8009026 <__malloc_unlock>
 8008fa2:	e7e4      	b.n	8008f6e <_malloc_r+0x1e>
 8008fa4:	680b      	ldr	r3, [r1, #0]
 8008fa6:	1b5b      	subs	r3, r3, r5
 8008fa8:	d418      	bmi.n	8008fdc <_malloc_r+0x8c>
 8008faa:	2b0b      	cmp	r3, #11
 8008fac:	d90f      	bls.n	8008fce <_malloc_r+0x7e>
 8008fae:	600b      	str	r3, [r1, #0]
 8008fb0:	50cd      	str	r5, [r1, r3]
 8008fb2:	18cc      	adds	r4, r1, r3
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	f000 f836 	bl	8009026 <__malloc_unlock>
 8008fba:	f104 000b 	add.w	r0, r4, #11
 8008fbe:	1d23      	adds	r3, r4, #4
 8008fc0:	f020 0007 	bic.w	r0, r0, #7
 8008fc4:	1ac3      	subs	r3, r0, r3
 8008fc6:	d0d3      	beq.n	8008f70 <_malloc_r+0x20>
 8008fc8:	425a      	negs	r2, r3
 8008fca:	50e2      	str	r2, [r4, r3]
 8008fcc:	e7d0      	b.n	8008f70 <_malloc_r+0x20>
 8008fce:	428c      	cmp	r4, r1
 8008fd0:	684b      	ldr	r3, [r1, #4]
 8008fd2:	bf16      	itet	ne
 8008fd4:	6063      	strne	r3, [r4, #4]
 8008fd6:	6013      	streq	r3, [r2, #0]
 8008fd8:	460c      	movne	r4, r1
 8008fda:	e7eb      	b.n	8008fb4 <_malloc_r+0x64>
 8008fdc:	460c      	mov	r4, r1
 8008fde:	6849      	ldr	r1, [r1, #4]
 8008fe0:	e7cc      	b.n	8008f7c <_malloc_r+0x2c>
 8008fe2:	1cc4      	adds	r4, r0, #3
 8008fe4:	f024 0403 	bic.w	r4, r4, #3
 8008fe8:	42a0      	cmp	r0, r4
 8008fea:	d005      	beq.n	8008ff8 <_malloc_r+0xa8>
 8008fec:	1a21      	subs	r1, r4, r0
 8008fee:	4630      	mov	r0, r6
 8008ff0:	f000 f808 	bl	8009004 <_sbrk_r>
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	d0cf      	beq.n	8008f98 <_malloc_r+0x48>
 8008ff8:	6025      	str	r5, [r4, #0]
 8008ffa:	e7db      	b.n	8008fb4 <_malloc_r+0x64>
 8008ffc:	2000020c 	.word	0x2000020c
 8009000:	20000210 	.word	0x20000210

08009004 <_sbrk_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	4c06      	ldr	r4, [pc, #24]	; (8009020 <_sbrk_r+0x1c>)
 8009008:	2300      	movs	r3, #0
 800900a:	4605      	mov	r5, r0
 800900c:	4608      	mov	r0, r1
 800900e:	6023      	str	r3, [r4, #0]
 8009010:	f7f7 ffb0 	bl	8000f74 <_sbrk>
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	d102      	bne.n	800901e <_sbrk_r+0x1a>
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	b103      	cbz	r3, 800901e <_sbrk_r+0x1a>
 800901c:	602b      	str	r3, [r5, #0]
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	20001cb8 	.word	0x20001cb8

08009024 <__malloc_lock>:
 8009024:	4770      	bx	lr

08009026 <__malloc_unlock>:
 8009026:	4770      	bx	lr

08009028 <_init>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	bf00      	nop
 800902c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902e:	bc08      	pop	{r3}
 8009030:	469e      	mov	lr, r3
 8009032:	4770      	bx	lr

08009034 <_fini>:
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009036:	bf00      	nop
 8009038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903a:	bc08      	pop	{r3}
 800903c:	469e      	mov	lr, r3
 800903e:	4770      	bx	lr
