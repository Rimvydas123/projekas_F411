
projekas_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b70  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009d08  08009d08  00019d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d70  08009d70  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009d70  08009d70  00019d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d78  08009d78  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d78  08009d78  00019d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d7c  08009d7c  00019d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af4  200001e4  08009f64  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20001cd8  08009f64  00021cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b78b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003987  00000000  00000000  0003b99f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f8  00000000  00000000  0003f328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001450  00000000  00000000  00040920  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a973  00000000  00000000  00041d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012cb3  00000000  00000000  0005c6e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097994  00000000  00000000  0006f396  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00106d2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e08  00000000  00000000  00106da8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001e4 	.word	0x200001e4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009cf0 	.word	0x08009cf0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001e8 	.word	0x200001e8
 80001d4:	08009cf0 	.word	0x08009cf0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <reading_sensor>:
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void reading_sensor(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
	// nuskaitomi giroskopo duomenys 6 baitai
	    CS_AG_value(GPIO_PIN_RESET); // pinas CS_A/G padaromas zemo lygio
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f4:	4826      	ldr	r0, [pc, #152]	; (8000590 <reading_sensor+0xa8>)
 80004f6:	f002 f997 	bl	8002828 <HAL_GPIO_WritePin>
	    spiTXbuf[0] = 0x18|0x80;
 80004fa:	4b26      	ldr	r3, [pc, #152]	; (8000594 <reading_sensor+0xac>)
 80004fc:	2298      	movs	r2, #152	; 0x98
 80004fe:	701a      	strb	r2, [r3, #0]
	    HAL_SPI_Transmit(&hspi1,spiTXbuf,1,50); // i pirma skaitoma registra nusiunciama komanda 0x80 ijungiamas skaitymo rezimas
 8000500:	2332      	movs	r3, #50	; 0x32
 8000502:	2201      	movs	r2, #1
 8000504:	4923      	ldr	r1, [pc, #140]	; (8000594 <reading_sensor+0xac>)
 8000506:	4824      	ldr	r0, [pc, #144]	; (8000598 <reading_sensor+0xb0>)
 8000508:	f004 f808 	bl	800451c <HAL_SPI_Transmit>
	    HAL_SPI_Receive(&hspi1,data_acc_gyr, 6, 50); // nuskaitomi duomenys
 800050c:	2332      	movs	r3, #50	; 0x32
 800050e:	2206      	movs	r2, #6
 8000510:	4922      	ldr	r1, [pc, #136]	; (800059c <reading_sensor+0xb4>)
 8000512:	4821      	ldr	r0, [pc, #132]	; (8000598 <reading_sensor+0xb0>)
 8000514:	f004 f936 	bl	8004784 <HAL_SPI_Receive>
	    CS_AG_value(GPIO_PIN_SET); // pinas CS_A/G padaromas auksto lygio
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051e:	481c      	ldr	r0, [pc, #112]	; (8000590 <reading_sensor+0xa8>)
 8000520:	f002 f982 	bl	8002828 <HAL_GPIO_WritePin>

	   // nuskaitomi akselerometro duomenys 6 baitai
	    CS_AG_value(GPIO_PIN_RESET); // pinas CS_A/G padaromas zemo lygio
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052a:	4819      	ldr	r0, [pc, #100]	; (8000590 <reading_sensor+0xa8>)
 800052c:	f002 f97c 	bl	8002828 <HAL_GPIO_WritePin>
	    spiTXbuf[0] = 0x28|0x80;
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <reading_sensor+0xac>)
 8000532:	22a8      	movs	r2, #168	; 0xa8
 8000534:	701a      	strb	r2, [r3, #0]
	    HAL_SPI_Transmit(&hspi1,spiTXbuf,1,50); // i pirma skaitoma registra nusiunciama komanda 0x80 ijungiamas skaitymo rezimas
 8000536:	2332      	movs	r3, #50	; 0x32
 8000538:	2201      	movs	r2, #1
 800053a:	4916      	ldr	r1, [pc, #88]	; (8000594 <reading_sensor+0xac>)
 800053c:	4816      	ldr	r0, [pc, #88]	; (8000598 <reading_sensor+0xb0>)
 800053e:	f003 ffed 	bl	800451c <HAL_SPI_Transmit>
	    HAL_SPI_Receive(&hspi1,data_acc, 6, 50); // nuskaitomi duomenys
 8000542:	2332      	movs	r3, #50	; 0x32
 8000544:	2206      	movs	r2, #6
 8000546:	4916      	ldr	r1, [pc, #88]	; (80005a0 <reading_sensor+0xb8>)
 8000548:	4813      	ldr	r0, [pc, #76]	; (8000598 <reading_sensor+0xb0>)
 800054a:	f004 f91b 	bl	8004784 <HAL_SPI_Receive>
	    CS_AG_value(GPIO_PIN_SET); // pinas CS_A/G padaromas auksto lygio
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000554:	480e      	ldr	r0, [pc, #56]	; (8000590 <reading_sensor+0xa8>)
 8000556:	f002 f967 	bl	8002828 <HAL_GPIO_WritePin>

	    for(int i=0, j=6; i<6; i++, j++) // dumenu sudejimas i viena masyva
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	2306      	movs	r3, #6
 8000560:	603b      	str	r3, [r7, #0]
 8000562:	e00e      	b.n	8000582 <reading_sensor+0x9a>
	      data_acc_gyr[j] = data_acc[i];
 8000564:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <reading_sensor+0xb8>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4413      	add	r3, r2
 800056a:	7819      	ldrb	r1, [r3, #0]
 800056c:	4a0b      	ldr	r2, [pc, #44]	; (800059c <reading_sensor+0xb4>)
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	4413      	add	r3, r2
 8000572:	460a      	mov	r2, r1
 8000574:	701a      	strb	r2, [r3, #0]
	    for(int i=0, j=6; i<6; i++, j++) // dumenu sudejimas i viena masyva
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	3301      	adds	r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	603b      	str	r3, [r7, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b05      	cmp	r3, #5
 8000586:	dded      	ble.n	8000564 <reading_sensor+0x7c>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40020400 	.word	0x40020400
 8000594:	20000210 	.word	0x20000210
 8000598:	20000360 	.word	0x20000360
 800059c:	20000260 	.word	0x20000260
 80005a0:	20000258 	.word	0x20000258

080005a4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  DataReadingFlag = 1;
 80005ae:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <HAL_GPIO_EXTI_Callback+0x1c>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20000254 	.word	0x20000254

080005c4 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* This is called after the conversion is completed */
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <checking_baterry>:

void checking_baterry(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	if(adcvalue[0] <= battery_threshold)
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <checking_baterry+0x2c>)
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	f640 42cc 	movw	r2, #3276	; 0xccc
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d805      	bhi.n	80005f4 <checking_baterry+0x1c>
	{
	  battery_aliarm(GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2110      	movs	r1, #16
 80005ec:	4806      	ldr	r0, [pc, #24]	; (8000608 <checking_baterry+0x30>)
 80005ee:	f002 f91b 	bl	8002828 <HAL_GPIO_WritePin>
	}
	else
	{
	  battery_aliarm(GPIO_PIN_RESET);
	}
}
 80005f2:	e004      	b.n	80005fe <checking_baterry+0x26>
	  battery_aliarm(GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2110      	movs	r1, #16
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <checking_baterry+0x30>)
 80005fa:	f002 f915 	bl	8002828 <HAL_GPIO_WritePin>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200002fc 	.word	0x200002fc
 8000608:	40020800 	.word	0x40020800

0800060c <CDC_ReceiveCallback>:

void CDC_ReceiveCallback(uint8_t *buf, uint32_t len){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
	Receiveflag = 1;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <CDC_ReceiveCallback+0x38>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
    memcpy(receivedData, buf, strlen((char* )buf));
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f7ff fddb 	bl	80001d8 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	461a      	mov	r2, r3
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <CDC_ReceiveCallback+0x3c>)
 800062a:	f009 fa93 	bl	8009b54 <memcpy>
    CDC_Transmit_FS(buf, len);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b29b      	uxth	r3, r3
 8000632:	4619      	mov	r1, r3
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f008 fe1b 	bl	8009270 <CDC_Transmit_FS>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200002b4 	.word	0x200002b4
 8000648:	200002b8 	.word	0x200002b8

0800064c <Motors_Control>:

void Motors_Control(int8_t DutyCycleA, int8_t DutyCycleB) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	460a      	mov	r2, r1
 8000656:	71fb      	strb	r3, [r7, #7]
 8000658:	4613      	mov	r3, r2
 800065a:	71bb      	strb	r3, [r7, #6]
	htim4.Instance->CCR1 = abs(DutyCycleA);  // Motor A speed control
 800065c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000660:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000664:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000668:	4b34      	ldr	r3, [pc, #208]	; (800073c <Motors_Control+0xf0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = abs(DutyCycleB);  // Motor B speed control
 800066e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000672:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000676:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800067a:	4b30      	ldr	r3, [pc, #192]	; (800073c <Motors_Control+0xf0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	639a      	str	r2, [r3, #56]	; 0x38

	// moving forward
	if (DutyCycleA > 0 && DutyCycleB > 0) {
 8000680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	dd0d      	ble.n	80006a4 <Motors_Control+0x58>
 8000688:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800068c:	2b00      	cmp	r3, #0
 800068e:	dd09      	ble.n	80006a4 <Motors_Control+0x58>
		out1_out3(GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2150      	movs	r1, #80	; 0x50
 8000694:	482a      	ldr	r0, [pc, #168]	; (8000740 <Motors_Control+0xf4>)
 8000696:	f002 f8c7 	bl	8002828 <HAL_GPIO_WritePin>
		out2_out4(GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	21a0      	movs	r1, #160	; 0xa0
 800069e:	4828      	ldr	r0, [pc, #160]	; (8000740 <Motors_Control+0xf4>)
 80006a0:	f002 f8c2 	bl	8002828 <HAL_GPIO_WritePin>

	}

	// moving backward
	if (DutyCycleA < 0 && DutyCycleB < 0) {
 80006a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	da0d      	bge.n	80006c8 <Motors_Control+0x7c>
 80006ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	da09      	bge.n	80006c8 <Motors_Control+0x7c>
		out1_out3(GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2150      	movs	r1, #80	; 0x50
 80006b8:	4821      	ldr	r0, [pc, #132]	; (8000740 <Motors_Control+0xf4>)
 80006ba:	f002 f8b5 	bl	8002828 <HAL_GPIO_WritePin>
		out2_out4(GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	21a0      	movs	r1, #160	; 0xa0
 80006c2:	481f      	ldr	r0, [pc, #124]	; (8000740 <Motors_Control+0xf4>)
 80006c4:	f002 f8b0 	bl	8002828 <HAL_GPIO_WritePin>
	}

	// stop
	if (DutyCycleA == 0 && DutyCycleB == 0) {
 80006c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d10d      	bne.n	80006ec <Motors_Control+0xa0>
 80006d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d109      	bne.n	80006ec <Motors_Control+0xa0>
		out1_out3(GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2150      	movs	r1, #80	; 0x50
 80006dc:	4818      	ldr	r0, [pc, #96]	; (8000740 <Motors_Control+0xf4>)
 80006de:	f002 f8a3 	bl	8002828 <HAL_GPIO_WritePin>
		out2_out4(GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	21a0      	movs	r1, #160	; 0xa0
 80006e6:	4816      	ldr	r0, [pc, #88]	; (8000740 <Motors_Control+0xf4>)
 80006e8:	f002 f89e 	bl	8002828 <HAL_GPIO_WritePin>
	}

	// moving to left
	if(DutyCycleA < 0 && DutyCycleB > 0) {
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	da0d      	bge.n	8000710 <Motors_Control+0xc4>
 80006f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	dd09      	ble.n	8000710 <Motors_Control+0xc4>
		out1_out4(GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2190      	movs	r1, #144	; 0x90
 8000700:	480f      	ldr	r0, [pc, #60]	; (8000740 <Motors_Control+0xf4>)
 8000702:	f002 f891 	bl	8002828 <HAL_GPIO_WritePin>
		out2_out3(GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2160      	movs	r1, #96	; 0x60
 800070a:	480d      	ldr	r0, [pc, #52]	; (8000740 <Motors_Control+0xf4>)
 800070c:	f002 f88c 	bl	8002828 <HAL_GPIO_WritePin>
	}

	// moving to right
	if (DutyCycleA > 0 && DutyCycleB < 0) {
 8000710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dd0d      	ble.n	8000734 <Motors_Control+0xe8>
 8000718:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800071c:	2b00      	cmp	r3, #0
 800071e:	da09      	bge.n	8000734 <Motors_Control+0xe8>
		out1_out4(GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2190      	movs	r1, #144	; 0x90
 8000724:	4806      	ldr	r0, [pc, #24]	; (8000740 <Motors_Control+0xf4>)
 8000726:	f002 f87f 	bl	8002828 <HAL_GPIO_WritePin>
		out2_out3(GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2160      	movs	r1, #96	; 0x60
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <Motors_Control+0xf4>)
 8000730:	f002 f87a 	bl	8002828 <HAL_GPIO_WritePin>
	}
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000214 	.word	0x20000214
 8000740:	40020000 	.word	0x40020000

08000744 <checking_package>:

void checking_package(uint8_t data_request)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	if(data_request == 'M')
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b4d      	cmp	r3, #77	; 0x4d
 8000752:	d10a      	bne.n	800076a <checking_package+0x26>
		Motors_Control(receivedData[1], receivedData[2]);
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <checking_package+0x40>)
 8000756:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <checking_package+0x40>)
 800075c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000760:	4619      	mov	r1, r3
 8000762:	4610      	mov	r0, r2
 8000764:	f7ff ff72 	bl	800064c <Motors_Control>
	else
		CDC_Transmit_FS(data_acc_gyr, strlen((char *)data_acc_gyr));
}
 8000768:	e008      	b.n	800077c <checking_package+0x38>
		CDC_Transmit_FS(data_acc_gyr, strlen((char *)data_acc_gyr));
 800076a:	4807      	ldr	r0, [pc, #28]	; (8000788 <checking_package+0x44>)
 800076c:	f7ff fd34 	bl	80001d8 <strlen>
 8000770:	4603      	mov	r3, r0
 8000772:	b29b      	uxth	r3, r3
 8000774:	4619      	mov	r1, r3
 8000776:	4804      	ldr	r0, [pc, #16]	; (8000788 <checking_package+0x44>)
 8000778:	f008 fd7a 	bl	8009270 <CDC_Transmit_FS>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200002b8 	.word	0x200002b8
 8000788:	20000260 	.word	0x20000260

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f000 fdd8 	bl	8001344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f896 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f000 faa4 	bl	8000ce4 <MX_GPIO_Init>
  MX_DMA_Init();
 800079c:	f000 fa82 	bl	8000ca4 <MX_DMA_Init>
  MX_TIM4_Init();
 80007a0:	f000 f9d6 	bl	8000b50 <MX_TIM4_Init>
  MX_SPI1_Init();
 80007a4:	f000 f948 	bl	8000a38 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007a8:	f000 fa52 	bl	8000c50 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80007ac:	f008 fc9c 	bl	80090e8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80007b0:	f000 f8f0 	bl	8000994 <MX_ADC1_Init>
  MX_TIM2_Init();
 80007b4:	f000 f976 	bl	8000aa4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80007b8:	2100      	movs	r1, #0
 80007ba:	4838      	ldr	r0, [pc, #224]	; (800089c <main+0x110>)
 80007bc:	f004 fc4e 	bl	800505c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80007c0:	2104      	movs	r1, #4
 80007c2:	4836      	ldr	r0, [pc, #216]	; (800089c <main+0x110>)
 80007c4:	f004 fc4a 	bl	800505c <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcvalue, 1);
 80007c8:	2201      	movs	r2, #1
 80007ca:	4935      	ldr	r1, [pc, #212]	; (80008a0 <main+0x114>)
 80007cc:	4835      	ldr	r0, [pc, #212]	; (80008a4 <main+0x118>)
 80007ce:	f000 fe91 	bl	80014f4 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 80007d2:	4835      	ldr	r0, [pc, #212]	; (80008a8 <main+0x11c>)
 80007d4:	f004 fbbd 	bl	8004f52 <HAL_TIM_Base_Start_IT>

  //komandu rasymas i jutikllio registrus
  // CTRL_REG1_G paleidziamas giroskopas
    CS_AG_value(GPIO_PIN_RESET); // pinas CS_A/G padaromas zemo lygio
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007de:	4833      	ldr	r0, [pc, #204]	; (80008ac <main+0x120>)
 80007e0:	f002 f822 	bl	8002828 <HAL_GPIO_WritePin>
    spiTXbuf[0] = 0x10;
 80007e4:	4b32      	ldr	r3, [pc, #200]	; (80008b0 <main+0x124>)
 80007e6:	2210      	movs	r2, #16
 80007e8:	701a      	strb	r2, [r3, #0]
    spiTXbuf[1] = 0x20;
 80007ea:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <main+0x124>)
 80007ec:	2220      	movs	r2, #32
 80007ee:	705a      	strb	r2, [r3, #1]
    HAL_SPI_Transmit(&hspi1,spiTXbuf,2,50); // siunciama registras + duomenys rasomi i registra
 80007f0:	2332      	movs	r3, #50	; 0x32
 80007f2:	2202      	movs	r2, #2
 80007f4:	492e      	ldr	r1, [pc, #184]	; (80008b0 <main+0x124>)
 80007f6:	482f      	ldr	r0, [pc, #188]	; (80008b4 <main+0x128>)
 80007f8:	f003 fe90 	bl	800451c <HAL_SPI_Transmit>
    CS_AG_value(GPIO_PIN_SET); // pinas CS_A/G padaromas auksto lygio
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000802:	482a      	ldr	r0, [pc, #168]	; (80008ac <main+0x120>)
 8000804:	f002 f810 	bl	8002828 <HAL_GPIO_WritePin>

   // CTRL_REG6_XL  paleidziamas akselerometras
    CS_AG_value(GPIO_PIN_RESET); // pinas CS_A/G padaromas zemo lygio
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800080e:	4827      	ldr	r0, [pc, #156]	; (80008ac <main+0x120>)
 8000810:	f002 f80a 	bl	8002828 <HAL_GPIO_WritePin>
    spiTXbuf[0] = 0x20;
 8000814:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <main+0x124>)
 8000816:	2220      	movs	r2, #32
 8000818:	701a      	strb	r2, [r3, #0]
    spiTXbuf[1] = 0x20;
 800081a:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <main+0x124>)
 800081c:	2220      	movs	r2, #32
 800081e:	705a      	strb	r2, [r3, #1]
    HAL_SPI_Transmit(&hspi1,spiTXbuf,2,50); // siunciama registras + duomenys rasomi i registra
 8000820:	2332      	movs	r3, #50	; 0x32
 8000822:	2202      	movs	r2, #2
 8000824:	4922      	ldr	r1, [pc, #136]	; (80008b0 <main+0x124>)
 8000826:	4823      	ldr	r0, [pc, #140]	; (80008b4 <main+0x128>)
 8000828:	f003 fe78 	bl	800451c <HAL_SPI_Transmit>
    CS_AG_value(GPIO_PIN_SET); // pinas CS_A/G padaromas auksto lygio
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000832:	481e      	ldr	r0, [pc, #120]	; (80008ac <main+0x120>)
 8000834:	f001 fff8 	bl	8002828 <HAL_GPIO_WritePin>

    // INT1_CTRL paleidziama giroskopo ir akselerometro pertrauktys
    CS_AG_value(GPIO_PIN_RESET); // pinas CS_A/G padaromas zemo lygio
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800083e:	481b      	ldr	r0, [pc, #108]	; (80008ac <main+0x120>)
 8000840:	f001 fff2 	bl	8002828 <HAL_GPIO_WritePin>
    spiTXbuf[0] = 0x0C;
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <main+0x124>)
 8000846:	220c      	movs	r2, #12
 8000848:	701a      	strb	r2, [r3, #0]
    spiTXbuf[1] = 0xC3;
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <main+0x124>)
 800084c:	22c3      	movs	r2, #195	; 0xc3
 800084e:	705a      	strb	r2, [r3, #1]
    HAL_SPI_Transmit(&hspi1,spiTXbuf,2,50); // siunciama registras + duomenys rasomi i registra
 8000850:	2332      	movs	r3, #50	; 0x32
 8000852:	2202      	movs	r2, #2
 8000854:	4916      	ldr	r1, [pc, #88]	; (80008b0 <main+0x124>)
 8000856:	4817      	ldr	r0, [pc, #92]	; (80008b4 <main+0x128>)
 8000858:	f003 fe60 	bl	800451c <HAL_SPI_Transmit>
    CS_AG_value(GPIO_PIN_SET); // pinas CS_A/G padaromas auksto lygio
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000862:	4812      	ldr	r0, [pc, #72]	; (80008ac <main+0x120>)
 8000864:	f001 ffe0 	bl	8002828 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Receiveflag == 1)
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <main+0x12c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d109      	bne.n	8000884 <main+0xf8>
	  		{
	  			Receiveflag = 0;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <main+0x12c>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
	  	  	  	checking_package(receivedData[0]);
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <main+0x130>)
 8000878:	f993 3000 	ldrsb.w	r3, [r3]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ff60 	bl	8000744 <checking_package>
	  		}
	  if(DataReadingFlag == 1)
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <main+0x134>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d104      	bne.n	8000896 <main+0x10a>
	  {
		  DataReadingFlag = 0;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <main+0x134>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
		  reading_sensor();
 8000892:	f7ff fe29 	bl	80004e8 <reading_sensor>
	  }
	  checking_baterry();
 8000896:	f7ff fe9f 	bl	80005d8 <checking_baterry>
	  if(Receiveflag == 1)
 800089a:	e7e5      	b.n	8000868 <main+0xdc>
 800089c:	20000214 	.word	0x20000214
 80008a0:	200002fc 	.word	0x200002fc
 80008a4:	2000026c 	.word	0x2000026c
 80008a8:	200003b8 	.word	0x200003b8
 80008ac:	40020400 	.word	0x40020400
 80008b0:	20000210 	.word	0x20000210
 80008b4:	20000360 	.word	0x20000360
 80008b8:	200002b4 	.word	0x200002b4
 80008bc:	200002b8 	.word	0x200002b8
 80008c0:	20000254 	.word	0x20000254

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	; 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	2230      	movs	r2, #48	; 0x30
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f009 f949 	bl	8009b6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	4b27      	ldr	r3, [pc, #156]	; (800098c <SystemClock_Config+0xc8>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	4a26      	ldr	r2, [pc, #152]	; (800098c <SystemClock_Config+0xc8>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	; 0x40
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <SystemClock_Config+0xc8>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	4b21      	ldr	r3, [pc, #132]	; (8000990 <SystemClock_Config+0xcc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a20      	ldr	r2, [pc, #128]	; (8000990 <SystemClock_Config+0xcc>)
 800090e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <SystemClock_Config+0xcc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000920:	2301      	movs	r3, #1
 8000922:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000924:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092a:	2302      	movs	r3, #2
 800092c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000932:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000934:	2310      	movs	r3, #16
 8000936:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000938:	23c0      	movs	r3, #192	; 0xc0
 800093a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800093c:	2304      	movs	r3, #4
 800093e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000940:	2304      	movs	r3, #4
 8000942:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 0320 	add.w	r3, r7, #32
 8000948:	4618      	mov	r0, r3
 800094a:	f003 f923 	bl	8003b94 <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000954:	f000 fa7c 	bl	8000e50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095c:	2302      	movs	r3, #2
 800095e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2101      	movs	r1, #1
 8000972:	4618      	mov	r0, r3
 8000974:	f003 fb7e 	bl	8004074 <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800097e:	f000 fa67 	bl	8000e50 <Error_Handler>
  }
}
 8000982:	bf00      	nop
 8000984:	3750      	adds	r7, #80	; 0x50
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40007000 	.word	0x40007000

08000994 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800099a:	463b      	mov	r3, r7
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009a6:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <MX_ADC1_Init+0x9c>)
 80009a8:	4a22      	ldr	r2, [pc, #136]	; (8000a34 <MX_ADC1_Init+0xa0>)
 80009aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009ac:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <MX_ADC1_Init+0x9c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_ADC1_Init+0x9c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_ADC1_Init+0x9c>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_ADC1_Init+0x9c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_ADC1_Init+0x9c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_ADC1_Init+0x9c>)
 80009ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_ADC1_Init+0x9c>)
 80009d6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_ADC1_Init+0x9c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_ADC1_Init+0x9c>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_ADC1_Init+0x9c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_ADC1_Init+0x9c>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f6:	480e      	ldr	r0, [pc, #56]	; (8000a30 <MX_ADC1_Init+0x9c>)
 80009f8:	f000 fd38 	bl	800146c <HAL_ADC_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000a02:	f000 fa25 	bl	8000e50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a06:	2301      	movs	r3, #1
 8000a08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a12:	463b      	mov	r3, r7
 8000a14:	4619      	mov	r1, r3
 8000a16:	4806      	ldr	r0, [pc, #24]	; (8000a30 <MX_ADC1_Init+0x9c>)
 8000a18:	f000 fe54 	bl	80016c4 <HAL_ADC_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a22:	f000 fa15 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000026c 	.word	0x2000026c
 8000a34:	40012000 	.word	0x40012000

08000a38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a3e:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <MX_SPI1_Init+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a84:	220a      	movs	r2, #10
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a8a:	f003 fce3 	bl	8004454 <HAL_SPI_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a94:	f000 f9dc 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000360 	.word	0x20000360
 8000aa0:	40013000 	.word	0x40013000

08000aa4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aaa:	f107 0320 	add.w	r3, r7, #32
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]
 8000ac2:	615a      	str	r2, [r3, #20]
 8000ac4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <MX_TIM2_Init+0xa8>)
 8000ac8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000acc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800-1;
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <MX_TIM2_Init+0xa8>)
 8000ad0:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000ad4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <MX_TIM2_Init+0xa8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_TIM2_Init+0xa8>)
 8000ade:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ae2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <MX_TIM2_Init+0xa8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_TIM2_Init+0xa8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000af0:	4816      	ldr	r0, [pc, #88]	; (8000b4c <MX_TIM2_Init+0xa8>)
 8000af2:	f004 fa52 	bl	8004f9a <HAL_TIM_OC_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000afc:	f000 f9a8 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b00:	2320      	movs	r3, #32
 8000b02:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b08:	f107 0320 	add.w	r3, r7, #32
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480f      	ldr	r0, [pc, #60]	; (8000b4c <MX_TIM2_Init+0xa8>)
 8000b10:	f004 ff80 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000b1a:	f000 f999 	bl	8000e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_TIM2_Init+0xa8>)
 8000b36:	f004 fac3 	bl	80050c0 <HAL_TIM_OC_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b40:	f000 f986 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200003b8 	.word	0x200003b8

08000b50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	; 0x38
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b64:	f107 0320 	add.w	r3, r7, #32
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
 8000b7c:	615a      	str	r2, [r3, #20]
 8000b7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b80:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <MX_TIM4_Init+0xf8>)
 8000b82:	4a32      	ldr	r2, [pc, #200]	; (8000c4c <MX_TIM4_Init+0xfc>)
 8000b84:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 8000b86:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <MX_TIM4_Init+0xf8>)
 8000b88:	2230      	movs	r2, #48	; 0x30
 8000b8a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <MX_TIM4_Init+0xf8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000b92:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <MX_TIM4_Init+0xf8>)
 8000b94:	2264      	movs	r2, #100	; 0x64
 8000b96:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b98:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <MX_TIM4_Init+0xf8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <MX_TIM4_Init+0xf8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ba4:	4828      	ldr	r0, [pc, #160]	; (8000c48 <MX_TIM4_Init+0xf8>)
 8000ba6:	f004 f9a9 	bl	8004efc <HAL_TIM_Base_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000bb0:	f000 f94e 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4821      	ldr	r0, [pc, #132]	; (8000c48 <MX_TIM4_Init+0xf8>)
 8000bc2:	f004 fba3 	bl	800530c <HAL_TIM_ConfigClockSource>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000bcc:	f000 f940 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bd0:	481d      	ldr	r0, [pc, #116]	; (8000c48 <MX_TIM4_Init+0xf8>)
 8000bd2:	f004 fa0d 	bl	8004ff0 <HAL_TIM_PWM_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000bdc:	f000 f938 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000be8:	f107 0320 	add.w	r3, r7, #32
 8000bec:	4619      	mov	r1, r3
 8000bee:	4816      	ldr	r0, [pc, #88]	; (8000c48 <MX_TIM4_Init+0xf8>)
 8000bf0:	f004 ff10 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000bfa:	f000 f929 	bl	8000e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bfe:	2360      	movs	r3, #96	; 0x60
 8000c00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2200      	movs	r2, #0
 8000c12:	4619      	mov	r1, r3
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <MX_TIM4_Init+0xf8>)
 8000c16:	f004 fab3 	bl	8005180 <HAL_TIM_PWM_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000c20:	f000 f916 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2204      	movs	r2, #4
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4807      	ldr	r0, [pc, #28]	; (8000c48 <MX_TIM4_Init+0xf8>)
 8000c2c:	f004 faa8 	bl	8005180 <HAL_TIM_PWM_ConfigChannel>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000c36:	f000 f90b 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c3a:	4803      	ldr	r0, [pc, #12]	; (8000c48 <MX_TIM4_Init+0xf8>)
 8000c3c:	f000 fa3a 	bl	80010b4 <HAL_TIM_MspPostInit>

}
 8000c40:	bf00      	nop
 8000c42:	3738      	adds	r7, #56	; 0x38
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000214 	.word	0x20000214
 8000c4c:	40000800 	.word	0x40000800

08000c50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <MX_USART1_UART_Init+0x50>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c88:	f004 ff32 	bl	8005af0 <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c92:	f000 f8dd 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200002bc 	.word	0x200002bc
 8000ca0:	40011000 	.word	0x40011000

08000ca4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_DMA_Init+0x3c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <MX_DMA_Init+0x3c>)
 8000cb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_DMA_Init+0x3c>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2038      	movs	r0, #56	; 0x38
 8000ccc:	f001 f885 	bl	8001dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cd0:	2038      	movs	r0, #56	; 0x38
 8000cd2:	f001 f89e 	bl	8001e12 <HAL_NVIC_EnableIRQ>

}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	4b4f      	ldr	r3, [pc, #316]	; (8000e3c <MX_GPIO_Init+0x158>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a4e      	ldr	r2, [pc, #312]	; (8000e3c <MX_GPIO_Init+0x158>)
 8000d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <MX_GPIO_Init+0x158>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b48      	ldr	r3, [pc, #288]	; (8000e3c <MX_GPIO_Init+0x158>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a47      	ldr	r2, [pc, #284]	; (8000e3c <MX_GPIO_Init+0x158>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b45      	ldr	r3, [pc, #276]	; (8000e3c <MX_GPIO_Init+0x158>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	4b41      	ldr	r3, [pc, #260]	; (8000e3c <MX_GPIO_Init+0x158>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a40      	ldr	r2, [pc, #256]	; (8000e3c <MX_GPIO_Init+0x158>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b3e      	ldr	r3, [pc, #248]	; (8000e3c <MX_GPIO_Init+0x158>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <MX_GPIO_Init+0x158>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a39      	ldr	r2, [pc, #228]	; (8000e3c <MX_GPIO_Init+0x158>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b37      	ldr	r3, [pc, #220]	; (8000e3c <MX_GPIO_Init+0x158>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	4b33      	ldr	r3, [pc, #204]	; (8000e3c <MX_GPIO_Init+0x158>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a32      	ldr	r2, [pc, #200]	; (8000e3c <MX_GPIO_Init+0x158>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b30      	ldr	r3, [pc, #192]	; (8000e3c <MX_GPIO_Init+0x158>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	21f0      	movs	r1, #240	; 0xf0
 8000d8a:	482d      	ldr	r0, [pc, #180]	; (8000e40 <MX_GPIO_Init+0x15c>)
 8000d8c:	f001 fd4c 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2130      	movs	r1, #48	; 0x30
 8000d94:	482b      	ldr	r0, [pc, #172]	; (8000e44 <MX_GPIO_Init+0x160>)
 8000d96:	f001 fd47 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin|CS_M_Pin|DEN_A_G_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f240 6103 	movw	r1, #1539	; 0x603
 8000da0:	4829      	ldr	r0, [pc, #164]	; (8000e48 <MX_GPIO_Init+0x164>)
 8000da2:	f001 fd41 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_A_G_GPIO_Port, CS_A_G_Pin, GPIO_PIN_SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dac:	4826      	ldr	r0, [pc, #152]	; (8000e48 <MX_GPIO_Init+0x164>)
 8000dae:	f001 fd3b 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT1_Pin OUT2_Pin OUT3_Pin OUT4_Pin */
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin;
 8000db2:	23f0      	movs	r3, #240	; 0xf0
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	481d      	ldr	r0, [pc, #116]	; (8000e40 <MX_GPIO_Init+0x15c>)
 8000dca:	f001 fbab 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000dce:	2330      	movs	r3, #48	; 0x30
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4817      	ldr	r0, [pc, #92]	; (8000e44 <MX_GPIO_Init+0x160>)
 8000de6:	f001 fb9d 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin CS_M_Pin CS_A_G_Pin
                           DEN_A_G_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|CS_M_Pin|CS_A_G_Pin
 8000dea:	f241 6303 	movw	r3, #5635	; 0x1603
 8000dee:	617b      	str	r3, [r7, #20]
                          |DEN_A_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4811      	ldr	r0, [pc, #68]	; (8000e48 <MX_GPIO_Init+0x164>)
 8000e04:	f001 fb8e 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000e08:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_GPIO_Init+0x168>)
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480a      	ldr	r0, [pc, #40]	; (8000e48 <MX_GPIO_Init+0x164>)
 8000e1e:	f001 fb81 	bl	8002524 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	2017      	movs	r0, #23
 8000e28:	f000 ffd7 	bl	8001dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e2c:	2017      	movs	r0, #23
 8000e2e:	f000 fff0 	bl	8001e12 <HAL_NVIC_EnableIRQ>

}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40020800 	.word	0x40020800
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	10110000 	.word	0x10110000

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_MspInit+0x4c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <HAL_MspInit+0x4c>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <HAL_MspInit+0x4c>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_MspInit+0x4c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <HAL_MspInit+0x4c>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_MspInit+0x4c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a2f      	ldr	r2, [pc, #188]	; (8000f8c <HAL_ADC_MspInit+0xdc>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d157      	bne.n	8000f82 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b2e      	ldr	r3, [pc, #184]	; (8000f90 <HAL_ADC_MspInit+0xe0>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	4a2d      	ldr	r2, [pc, #180]	; (8000f90 <HAL_ADC_MspInit+0xe0>)
 8000edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee2:	4b2b      	ldr	r3, [pc, #172]	; (8000f90 <HAL_ADC_MspInit+0xe0>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <HAL_ADC_MspInit+0xe0>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a26      	ldr	r2, [pc, #152]	; (8000f90 <HAL_ADC_MspInit+0xe0>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <HAL_ADC_MspInit+0xe0>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	481d      	ldr	r0, [pc, #116]	; (8000f94 <HAL_ADC_MspInit+0xe4>)
 8000f1e:	f001 fb01 	bl	8002524 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <HAL_ADC_MspInit+0xe8>)
 8000f24:	4a1d      	ldr	r2, [pc, #116]	; (8000f9c <HAL_ADC_MspInit+0xec>)
 8000f26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <HAL_ADC_MspInit+0xe8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <HAL_ADC_MspInit+0xe8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <HAL_ADC_MspInit+0xe8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HAL_ADC_MspInit+0xe8>)
 8000f3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f40:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_ADC_MspInit+0xe8>)
 8000f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f48:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <HAL_ADC_MspInit+0xe8>)
 8000f4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_ADC_MspInit+0xe8>)
 8000f54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f58:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <HAL_ADC_MspInit+0xe8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f60:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <HAL_ADC_MspInit+0xe8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f66:	480c      	ldr	r0, [pc, #48]	; (8000f98 <HAL_ADC_MspInit+0xe8>)
 8000f68:	f000 ff6e 	bl	8001e48 <HAL_DMA_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000f72:	f7ff ff6d 	bl	8000e50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_ADC_MspInit+0xe8>)
 8000f7a:	639a      	str	r2, [r3, #56]	; 0x38
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <HAL_ADC_MspInit+0xe8>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40012000 	.word	0x40012000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	20000300 	.word	0x20000300
 8000f9c:	40026410 	.word	0x40026410

08000fa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a19      	ldr	r2, [pc, #100]	; (8001024 <HAL_SPI_MspInit+0x84>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d12b      	bne.n	800101a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a17      	ldr	r2, [pc, #92]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a10      	ldr	r2, [pc, #64]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ffa:	2338      	movs	r3, #56	; 0x38
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800100a:	2305      	movs	r3, #5
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <HAL_SPI_MspInit+0x8c>)
 8001016:	f001 fa85 	bl	8002524 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800101a:	bf00      	nop
 800101c:	3728      	adds	r7, #40	; 0x28
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40013000 	.word	0x40013000
 8001028:	40023800 	.word	0x40023800
 800102c:	40020400 	.word	0x40020400

08001030 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001040:	d10d      	bne.n	800105e <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_TIM_OC_MspInit+0x3c>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_TIM_OC_MspInit+0x3c>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6413      	str	r3, [r2, #64]	; 0x40
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_TIM_OC_MspInit+0x3c>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800

08001070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <HAL_TIM_Base_MspInit+0x3c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d10d      	bne.n	800109e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_TIM_Base_MspInit+0x40>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <HAL_TIM_Base_MspInit+0x40>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <HAL_TIM_Base_MspInit+0x40>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40000800 	.word	0x40000800
 80010b0:	40023800 	.word	0x40023800

080010b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a12      	ldr	r2, [pc, #72]	; (800111c <HAL_TIM_MspPostInit+0x68>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d11e      	bne.n	8001114 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <HAL_TIM_MspPostInit+0x6c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a10      	ldr	r2, [pc, #64]	; (8001120 <HAL_TIM_MspPostInit+0x6c>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <HAL_TIM_MspPostInit+0x6c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80010f2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001104:	2302      	movs	r3, #2
 8001106:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4619      	mov	r1, r3
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <HAL_TIM_MspPostInit+0x70>)
 8001110:	f001 fa08 	bl	8002524 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001114:	bf00      	nop
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40000800 	.word	0x40000800
 8001120:	40023800 	.word	0x40023800
 8001124:	40020c00 	.word	0x40020c00

08001128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a19      	ldr	r2, [pc, #100]	; (80011ac <HAL_UART_MspInit+0x84>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d12c      	bne.n	80011a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_UART_MspInit+0x88>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a17      	ldr	r2, [pc, #92]	; (80011b0 <HAL_UART_MspInit+0x88>)
 8001154:	f043 0310 	orr.w	r3, r3, #16
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_UART_MspInit+0x88>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_UART_MspInit+0x88>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <HAL_UART_MspInit+0x88>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_UART_MspInit+0x88>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001182:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001194:	2307      	movs	r3, #7
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_UART_MspInit+0x8c>)
 80011a0:	f001 f9c0 	bl	8002524 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	; 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40011000 	.word	0x40011000
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020000 	.word	0x40020000

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler+0x4>

080011d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <UsageFault_Handler+0x4>

080011de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120c:	f000 f8ec 	bl	80013e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001218:	2040      	movs	r0, #64	; 0x40
 800121a:	f001 fb1f 	bl	800285c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800121e:	2080      	movs	r0, #128	; 0x80
 8001220:	f001 fb1c 	bl	800285c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001224:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001228:	f001 fb18 	bl	800285c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <DMA2_Stream0_IRQHandler+0x10>)
 8001236:	f000 ff0d 	bl	8002054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000300 	.word	0x20000300

08001244 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <OTG_FS_IRQHandler+0x10>)
 800124a:	f001 fc6f 	bl	8002b2c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200018cc 	.word	0x200018cc

08001258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001260:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <_sbrk+0x5c>)
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <_sbrk+0x60>)
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d102      	bne.n	800127a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <_sbrk+0x64>)
 8001276:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <_sbrk+0x68>)
 8001278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	429a      	cmp	r2, r3
 8001286:	d207      	bcs.n	8001298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001288:	f008 fc2a 	bl	8009ae0 <__errno>
 800128c:	4602      	mov	r2, r0
 800128e:	230c      	movs	r3, #12
 8001290:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	e009      	b.n	80012ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <_sbrk+0x64>)
 80012a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20020000 	.word	0x20020000
 80012b8:	00004000 	.word	0x00004000
 80012bc:	20000200 	.word	0x20000200
 80012c0:	20001cd8 	.word	0x20001cd8

080012c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <SystemInit+0x28>)
 80012ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ce:	4a07      	ldr	r2, [pc, #28]	; (80012ec <SystemInit+0x28>)
 80012d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <SystemInit+0x28>)
 80012da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012de:	609a      	str	r2, [r3, #8]
#endif
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001328 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012f6:	e003      	b.n	8001300 <LoopCopyDataInit>

080012f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012fe:	3104      	adds	r1, #4

08001300 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001300:	480b      	ldr	r0, [pc, #44]	; (8001330 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001304:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001306:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001308:	d3f6      	bcc.n	80012f8 <CopyDataInit>
  ldr  r2, =_sbss
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800130c:	e002      	b.n	8001314 <LoopFillZerobss>

0800130e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800130e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001310:	f842 3b04 	str.w	r3, [r2], #4

08001314 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001316:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001318:	d3f9      	bcc.n	800130e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800131a:	f7ff ffd3 	bl	80012c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131e:	f008 fbe5 	bl	8009aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001322:	f7ff fa33 	bl	800078c <main>
  bx  lr    
 8001326:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001328:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800132c:	08009d80 	.word	0x08009d80
  ldr  r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001334:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001338:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 800133c:	20001cd8 	.word	0x20001cd8

08001340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC_IRQHandler>
	...

08001344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <HAL_Init+0x40>)
 800134e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001352:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <HAL_Init+0x40>)
 800135a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a07      	ldr	r2, [pc, #28]	; (8001384 <HAL_Init+0x40>)
 8001366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136c:	2003      	movs	r0, #3
 800136e:	f000 fd29 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001372:	2000      	movs	r0, #0
 8001374:	f000 f808 	bl	8001388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001378:	f7ff fd72 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023c00 	.word	0x40023c00

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x54>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_InitTick+0x58>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fd41 	bl	8001e2e <HAL_SYSTICK_Config>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00e      	b.n	80013d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b0f      	cmp	r3, #15
 80013ba:	d80a      	bhi.n	80013d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013bc:	2200      	movs	r2, #0
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f000 fd09 	bl	8001dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_InitTick+0x5c>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000008 	.word	0x20000008
 80013e4:	20000004 	.word	0x20000004

080013e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x20>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x24>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_IncTick+0x24>)
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000008 	.word	0x20000008
 800140c:	200003f8 	.word	0x200003f8

08001410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	200003f8 	.word	0x200003f8

08001428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff ffee 	bl	8001410 <HAL_GetTick>
 8001434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001440:	d005      	beq.n	800144e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_Delay+0x40>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800144e:	bf00      	nop
 8001450:	f7ff ffde 	bl	8001410 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	429a      	cmp	r2, r3
 800145e:	d8f7      	bhi.n	8001450 <HAL_Delay+0x28>
  {
  }
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000008 	.word	0x20000008

0800146c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e033      	b.n	80014ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	2b00      	cmp	r3, #0
 8001488:	d109      	bne.n	800149e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fd10 	bl	8000eb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d118      	bne.n	80014dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014b2:	f023 0302 	bic.w	r3, r3, #2
 80014b6:	f043 0202 	orr.w	r2, r3, #2
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 fa32 	bl	8001928 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f023 0303 	bic.w	r3, r3, #3
 80014d2:	f043 0201 	orr.w	r2, r3, #1
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
 80014da:	e001      	b.n	80014e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800150a:	2b01      	cmp	r3, #1
 800150c:	d101      	bne.n	8001512 <HAL_ADC_Start_DMA+0x1e>
 800150e:	2302      	movs	r3, #2
 8001510:	e0b1      	b.n	8001676 <HAL_ADC_Start_DMA+0x182>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b01      	cmp	r3, #1
 8001526:	d018      	beq.n	800155a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0201 	orr.w	r2, r2, #1
 8001536:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001538:	4b51      	ldr	r3, [pc, #324]	; (8001680 <HAL_ADC_Start_DMA+0x18c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a51      	ldr	r2, [pc, #324]	; (8001684 <HAL_ADC_Start_DMA+0x190>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	0c9a      	lsrs	r2, r3, #18
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800154c:	e002      	b.n	8001554 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	3b01      	subs	r3, #1
 8001552:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f9      	bne.n	800154e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b01      	cmp	r3, #1
 8001566:	f040 8085 	bne.w	8001674 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001588:	2b00      	cmp	r3, #0
 800158a:	d007      	beq.n	800159c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001594:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015a8:	d106      	bne.n	80015b8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f023 0206 	bic.w	r2, r3, #6
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	645a      	str	r2, [r3, #68]	; 0x44
 80015b6:	e002      	b.n	80015be <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015c6:	4b30      	ldr	r3, [pc, #192]	; (8001688 <HAL_ADC_Start_DMA+0x194>)
 80015c8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ce:	4a2f      	ldr	r2, [pc, #188]	; (800168c <HAL_ADC_Start_DMA+0x198>)
 80015d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d6:	4a2e      	ldr	r2, [pc, #184]	; (8001690 <HAL_ADC_Start_DMA+0x19c>)
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015de:	4a2d      	ldr	r2, [pc, #180]	; (8001694 <HAL_ADC_Start_DMA+0x1a0>)
 80015e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80015fa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800160a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	334c      	adds	r3, #76	; 0x4c
 8001616:	4619      	mov	r1, r3
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f000 fcc2 	bl	8001fa4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10f      	bne.n	800164c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d11c      	bne.n	8001674 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	e013      	b.n	8001674 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a11      	ldr	r2, [pc, #68]	; (8001698 <HAL_ADC_Start_DMA+0x1a4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d10e      	bne.n	8001674 <HAL_ADC_Start_DMA+0x180>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d107      	bne.n	8001674 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001672:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000000 	.word	0x20000000
 8001684:	431bde83 	.word	0x431bde83
 8001688:	40012300 	.word	0x40012300
 800168c:	08001b21 	.word	0x08001b21
 8001690:	08001bdb 	.word	0x08001bdb
 8001694:	08001bf7 	.word	0x08001bf7
 8001698:	40012000 	.word	0x40012000

0800169c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x1c>
 80016dc:	2302      	movs	r3, #2
 80016de:	e113      	b.n	8001908 <HAL_ADC_ConfigChannel+0x244>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b09      	cmp	r3, #9
 80016ee:	d925      	bls.n	800173c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68d9      	ldr	r1, [r3, #12]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	3b1e      	subs	r3, #30
 8001706:	2207      	movs	r2, #7
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43da      	mvns	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	400a      	ands	r2, r1
 8001714:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68d9      	ldr	r1, [r3, #12]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	b29b      	uxth	r3, r3
 8001726:	4618      	mov	r0, r3
 8001728:	4603      	mov	r3, r0
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4403      	add	r3, r0
 800172e:	3b1e      	subs	r3, #30
 8001730:	409a      	lsls	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	e022      	b.n	8001782 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6919      	ldr	r1, [r3, #16]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	4613      	mov	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	2207      	movs	r2, #7
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	400a      	ands	r2, r1
 800175e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6919      	ldr	r1, [r3, #16]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	b29b      	uxth	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	4603      	mov	r3, r0
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4403      	add	r3, r0
 8001778:	409a      	lsls	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b06      	cmp	r3, #6
 8001788:	d824      	bhi.n	80017d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	3b05      	subs	r3, #5
 800179c:	221f      	movs	r2, #31
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	400a      	ands	r2, r1
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	3b05      	subs	r3, #5
 80017c6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	635a      	str	r2, [r3, #52]	; 0x34
 80017d2:	e04c      	b.n	800186e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b0c      	cmp	r3, #12
 80017da:	d824      	bhi.n	8001826 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	3b23      	subs	r3, #35	; 0x23
 80017ee:	221f      	movs	r2, #31
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43da      	mvns	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	400a      	ands	r2, r1
 80017fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	b29b      	uxth	r3, r3
 800180a:	4618      	mov	r0, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	3b23      	subs	r3, #35	; 0x23
 8001818:	fa00 f203 	lsl.w	r2, r0, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	631a      	str	r2, [r3, #48]	; 0x30
 8001824:	e023      	b.n	800186e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	3b41      	subs	r3, #65	; 0x41
 8001838:	221f      	movs	r2, #31
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	400a      	ands	r2, r1
 8001846:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	b29b      	uxth	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	3b41      	subs	r3, #65	; 0x41
 8001862:	fa00 f203 	lsl.w	r2, r0, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800186e:	4b29      	ldr	r3, [pc, #164]	; (8001914 <HAL_ADC_ConfigChannel+0x250>)
 8001870:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a28      	ldr	r2, [pc, #160]	; (8001918 <HAL_ADC_ConfigChannel+0x254>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d10f      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1d8>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b12      	cmp	r3, #18
 8001882:	d10b      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a1d      	ldr	r2, [pc, #116]	; (8001918 <HAL_ADC_ConfigChannel+0x254>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d12b      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x23a>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a1c      	ldr	r2, [pc, #112]	; (800191c <HAL_ADC_ConfigChannel+0x258>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d003      	beq.n	80018b8 <HAL_ADC_ConfigChannel+0x1f4>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b11      	cmp	r3, #17
 80018b6:	d122      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a11      	ldr	r2, [pc, #68]	; (800191c <HAL_ADC_ConfigChannel+0x258>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d111      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_ADC_ConfigChannel+0x25c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a11      	ldr	r2, [pc, #68]	; (8001924 <HAL_ADC_ConfigChannel+0x260>)
 80018e0:	fba2 2303 	umull	r2, r3, r2, r3
 80018e4:	0c9a      	lsrs	r2, r3, #18
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018f0:	e002      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f9      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	40012300 	.word	0x40012300
 8001918:	40012000 	.word	0x40012000
 800191c:	10000012 	.word	0x10000012
 8001920:	20000000 	.word	0x20000000
 8001924:	431bde83 	.word	0x431bde83

08001928 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001930:	4b79      	ldr	r3, [pc, #484]	; (8001b18 <ADC_Init+0x1f0>)
 8001932:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	431a      	orrs	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800195c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6859      	ldr	r1, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	021a      	lsls	r2, r3, #8
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001980:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6859      	ldr	r1, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6899      	ldr	r1, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ba:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <ADC_Init+0x1f4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d022      	beq.n	8001a06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6899      	ldr	r1, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6899      	ldr	r1, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	e00f      	b.n	8001a26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0202 	bic.w	r2, r2, #2
 8001a34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6899      	ldr	r1, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7e1b      	ldrb	r3, [r3, #24]
 8001a40:	005a      	lsls	r2, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d01b      	beq.n	8001a8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6859      	ldr	r1, [r3, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	035a      	lsls	r2, r3, #13
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	e007      	b.n	8001a9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	051a      	lsls	r2, r3, #20
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ad0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6899      	ldr	r1, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ade:	025a      	lsls	r2, r3, #9
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001af6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6899      	ldr	r1, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	029a      	lsls	r2, r3, #10
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	609a      	str	r2, [r3, #8]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	40012300 	.word	0x40012300
 8001b1c:	0f000001 	.word	0x0f000001

08001b20 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d13c      	bne.n	8001bb4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d12b      	bne.n	8001bac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d127      	bne.n	8001bac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d006      	beq.n	8001b78 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d119      	bne.n	8001bac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0220 	bic.w	r2, r2, #32
 8001b86:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d105      	bne.n	8001bac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f043 0201 	orr.w	r2, r3, #1
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f7fe fd09 	bl	80005c4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001bb2:	e00e      	b.n	8001bd2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f7ff fd75 	bl	80016b0 <HAL_ADC_ErrorCallback>
}
 8001bc6:	e004      	b.n	8001bd2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	4798      	blx	r3
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f7ff fd57 	bl	800169c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c02:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2240      	movs	r2, #64	; 0x40
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f043 0204 	orr.w	r2, r3, #4
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f7ff fd4a 	bl	80016b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c40:	4013      	ands	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c56:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	60d3      	str	r3, [r2, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <__NVIC_GetPriorityGrouping+0x18>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	f003 0307 	and.w	r3, r3, #7
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db0b      	blt.n	8001cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <__NVIC_EnableIRQ+0x38>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2001      	movs	r0, #1
 8001caa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	490c      	ldr	r1, [pc, #48]	; (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4908      	ldr	r1, [pc, #32]	; (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	bf28      	it	cs
 8001d36:	2304      	movcs	r3, #4
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b03      	subs	r3, #3
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4313      	orrs	r3, r2
         );
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	210f      	movs	r1, #15
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f7ff ff8e 	bl	8001cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff29 	bl	8001c24 <__NVIC_SetPriorityGrouping>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dec:	f7ff ff3e 	bl	8001c6c <__NVIC_GetPriorityGrouping>
 8001df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	6978      	ldr	r0, [r7, #20]
 8001df8:	f7ff ff8e 	bl	8001d18 <NVIC_EncodePriority>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff5d 	bl	8001cc4 <__NVIC_SetPriority>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff31 	bl	8001c88 <__NVIC_EnableIRQ>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffa2 	bl	8001d80 <SysTick_Config>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff fadc 	bl	8001410 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e099      	b.n	8001f98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e84:	e00f      	b.n	8001ea6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e86:	f7ff fac3 	bl	8001410 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d908      	bls.n	8001ea6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2220      	movs	r2, #32
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e078      	b.n	8001f98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1e8      	bne.n	8001e86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <HAL_DMA_Init+0x158>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d107      	bne.n	8001f10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f023 0307 	bic.w	r3, r3, #7
 8001f26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d117      	bne.n	8001f6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00e      	beq.n	8001f6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fa6f 	bl	8002430 <DMA_CheckFifoParam>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2240      	movs	r2, #64	; 0x40
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f66:	2301      	movs	r3, #1
 8001f68:	e016      	b.n	8001f98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 fa26 	bl	80023c4 <DMA_CalcBaseAndBitshift>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	223f      	movs	r2, #63	; 0x3f
 8001f82:	409a      	lsls	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	f010803f 	.word	0xf010803f

08001fa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_DMA_Start_IT+0x26>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e040      	b.n	800204c <HAL_DMA_Start_IT+0xa8>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d12f      	bne.n	800203e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f9b8 	bl	8002368 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffc:	223f      	movs	r2, #63	; 0x3f
 8001ffe:	409a      	lsls	r2, r3
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0216 	orr.w	r2, r2, #22
 8002012:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	2b00      	cmp	r3, #0
 800201a:	d007      	beq.n	800202c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0208 	orr.w	r2, r2, #8
 800202a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e005      	b.n	800204a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002046:	2302      	movs	r3, #2
 8002048:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800204a:	7dfb      	ldrb	r3, [r7, #23]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002060:	4b92      	ldr	r3, [pc, #584]	; (80022ac <HAL_DMA_IRQHandler+0x258>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a92      	ldr	r2, [pc, #584]	; (80022b0 <HAL_DMA_IRQHandler+0x25c>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	0a9b      	lsrs	r3, r3, #10
 800206c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002072:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207e:	2208      	movs	r2, #8
 8002080:	409a      	lsls	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d01a      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d013      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0204 	bic.w	r2, r2, #4
 80020a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	2208      	movs	r2, #8
 80020ae:	409a      	lsls	r2, r3
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b8:	f043 0201 	orr.w	r2, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c4:	2201      	movs	r2, #1
 80020c6:	409a      	lsls	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d012      	beq.n	80020f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00b      	beq.n	80020f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e2:	2201      	movs	r2, #1
 80020e4:	409a      	lsls	r2, r3
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	f043 0202 	orr.w	r2, r3, #2
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fa:	2204      	movs	r2, #4
 80020fc:	409a      	lsls	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4013      	ands	r3, r2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d012      	beq.n	800212c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00b      	beq.n	800212c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002118:	2204      	movs	r2, #4
 800211a:	409a      	lsls	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002124:	f043 0204 	orr.w	r2, r3, #4
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002130:	2210      	movs	r2, #16
 8002132:	409a      	lsls	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d043      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d03c      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214e:	2210      	movs	r2, #16
 8002150:	409a      	lsls	r2, r3
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d018      	beq.n	8002196 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d108      	bne.n	8002184 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	2b00      	cmp	r3, #0
 8002178:	d024      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4798      	blx	r3
 8002182:	e01f      	b.n	80021c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002188:	2b00      	cmp	r3, #0
 800218a:	d01b      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	4798      	blx	r3
 8002194:	e016      	b.n	80021c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d107      	bne.n	80021b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0208 	bic.w	r2, r2, #8
 80021b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c8:	2220      	movs	r2, #32
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 808e 	beq.w	80022f2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 8086 	beq.w	80022f2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	2220      	movs	r2, #32
 80021ec:	409a      	lsls	r2, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b05      	cmp	r3, #5
 80021fc:	d136      	bne.n	800226c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0216 	bic.w	r2, r2, #22
 800220c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800221c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d103      	bne.n	800222e <HAL_DMA_IRQHandler+0x1da>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800222a:	2b00      	cmp	r3, #0
 800222c:	d007      	beq.n	800223e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0208 	bic.w	r2, r2, #8
 800223c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002242:	223f      	movs	r2, #63	; 0x3f
 8002244:	409a      	lsls	r2, r3
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225e:	2b00      	cmp	r3, #0
 8002260:	d07d      	beq.n	800235e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
        }
        return;
 800226a:	e078      	b.n	800235e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d01c      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d108      	bne.n	800229a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	2b00      	cmp	r3, #0
 800228e:	d030      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	4798      	blx	r3
 8002298:	e02b      	b.n	80022f2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d027      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
 80022aa:	e022      	b.n	80022f2 <HAL_DMA_IRQHandler+0x29e>
 80022ac:	20000000 	.word	0x20000000
 80022b0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10f      	bne.n	80022e2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0210 	bic.w	r2, r2, #16
 80022d0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d032      	beq.n	8002360 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d022      	beq.n	800234c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2205      	movs	r2, #5
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	3301      	adds	r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	429a      	cmp	r2, r3
 8002328:	d307      	bcc.n	800233a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f2      	bne.n	800231e <HAL_DMA_IRQHandler+0x2ca>
 8002338:	e000      	b.n	800233c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800233a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4798      	blx	r3
 800235c:	e000      	b.n	8002360 <HAL_DMA_IRQHandler+0x30c>
        return;
 800235e:	bf00      	nop
    }
  }
}
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop

08002368 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002384:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b40      	cmp	r3, #64	; 0x40
 8002394:	d108      	bne.n	80023a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023a6:	e007      	b.n	80023b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	60da      	str	r2, [r3, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	3b10      	subs	r3, #16
 80023d4:	4a14      	ldr	r2, [pc, #80]	; (8002428 <DMA_CalcBaseAndBitshift+0x64>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023de:	4a13      	ldr	r2, [pc, #76]	; (800242c <DMA_CalcBaseAndBitshift+0x68>)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d909      	bls.n	8002406 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023fa:	f023 0303 	bic.w	r3, r3, #3
 80023fe:	1d1a      	adds	r2, r3, #4
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	659a      	str	r2, [r3, #88]	; 0x58
 8002404:	e007      	b.n	8002416 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800240e:	f023 0303 	bic.w	r3, r3, #3
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	aaaaaaab 	.word	0xaaaaaaab
 800242c:	08009d68 	.word	0x08009d68

08002430 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d11f      	bne.n	800248a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d855      	bhi.n	80024fc <DMA_CheckFifoParam+0xcc>
 8002450:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <DMA_CheckFifoParam+0x28>)
 8002452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002456:	bf00      	nop
 8002458:	08002469 	.word	0x08002469
 800245c:	0800247b 	.word	0x0800247b
 8002460:	08002469 	.word	0x08002469
 8002464:	080024fd 	.word	0x080024fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d045      	beq.n	8002500 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002478:	e042      	b.n	8002500 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002482:	d13f      	bne.n	8002504 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002488:	e03c      	b.n	8002504 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002492:	d121      	bne.n	80024d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d836      	bhi.n	8002508 <DMA_CheckFifoParam+0xd8>
 800249a:	a201      	add	r2, pc, #4	; (adr r2, 80024a0 <DMA_CheckFifoParam+0x70>)
 800249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a0:	080024b1 	.word	0x080024b1
 80024a4:	080024b7 	.word	0x080024b7
 80024a8:	080024b1 	.word	0x080024b1
 80024ac:	080024c9 	.word	0x080024c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
      break;
 80024b4:	e02f      	b.n	8002516 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d024      	beq.n	800250c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c6:	e021      	b.n	800250c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024d0:	d11e      	bne.n	8002510 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024d6:	e01b      	b.n	8002510 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d902      	bls.n	80024e4 <DMA_CheckFifoParam+0xb4>
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d003      	beq.n	80024ea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024e2:	e018      	b.n	8002516 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
      break;
 80024e8:	e015      	b.n	8002516 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00e      	beq.n	8002514 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
      break;
 80024fa:	e00b      	b.n	8002514 <DMA_CheckFifoParam+0xe4>
      break;
 80024fc:	bf00      	nop
 80024fe:	e00a      	b.n	8002516 <DMA_CheckFifoParam+0xe6>
      break;
 8002500:	bf00      	nop
 8002502:	e008      	b.n	8002516 <DMA_CheckFifoParam+0xe6>
      break;
 8002504:	bf00      	nop
 8002506:	e006      	b.n	8002516 <DMA_CheckFifoParam+0xe6>
      break;
 8002508:	bf00      	nop
 800250a:	e004      	b.n	8002516 <DMA_CheckFifoParam+0xe6>
      break;
 800250c:	bf00      	nop
 800250e:	e002      	b.n	8002516 <DMA_CheckFifoParam+0xe6>
      break;   
 8002510:	bf00      	nop
 8002512:	e000      	b.n	8002516 <DMA_CheckFifoParam+0xe6>
      break;
 8002514:	bf00      	nop
    }
  } 
  
  return status; 
 8002516:	7bfb      	ldrb	r3, [r7, #15]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	; 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	e159      	b.n	80027f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002540:	2201      	movs	r2, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	429a      	cmp	r2, r3
 800255a:	f040 8148 	bne.w	80027ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d00b      	beq.n	800257e <HAL_GPIO_Init+0x5a>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d007      	beq.n	800257e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002572:	2b11      	cmp	r3, #17
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b12      	cmp	r3, #18
 800257c:	d130      	bne.n	80025e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	2203      	movs	r2, #3
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b4:	2201      	movs	r2, #1
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 0201 	and.w	r2, r3, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0xfc>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b12      	cmp	r3, #18
 800261e:	d123      	bne.n	8002668 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	08da      	lsrs	r2, r3, #3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3208      	adds	r2, #8
 8002628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800262c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	220f      	movs	r2, #15
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	08da      	lsrs	r2, r3, #3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3208      	adds	r2, #8
 8002662:	69b9      	ldr	r1, [r7, #24]
 8002664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	2203      	movs	r2, #3
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0203 	and.w	r2, r3, #3
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80a2 	beq.w	80027ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	4b56      	ldr	r3, [pc, #344]	; (8002808 <HAL_GPIO_Init+0x2e4>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	4a55      	ldr	r2, [pc, #340]	; (8002808 <HAL_GPIO_Init+0x2e4>)
 80026b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ba:	4b53      	ldr	r3, [pc, #332]	; (8002808 <HAL_GPIO_Init+0x2e4>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026c6:	4a51      	ldr	r2, [pc, #324]	; (800280c <HAL_GPIO_Init+0x2e8>)
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	089b      	lsrs	r3, r3, #2
 80026cc:	3302      	adds	r3, #2
 80026ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	220f      	movs	r2, #15
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a48      	ldr	r2, [pc, #288]	; (8002810 <HAL_GPIO_Init+0x2ec>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d019      	beq.n	8002726 <HAL_GPIO_Init+0x202>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a47      	ldr	r2, [pc, #284]	; (8002814 <HAL_GPIO_Init+0x2f0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <HAL_GPIO_Init+0x1fe>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a46      	ldr	r2, [pc, #280]	; (8002818 <HAL_GPIO_Init+0x2f4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00d      	beq.n	800271e <HAL_GPIO_Init+0x1fa>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a45      	ldr	r2, [pc, #276]	; (800281c <HAL_GPIO_Init+0x2f8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d007      	beq.n	800271a <HAL_GPIO_Init+0x1f6>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a44      	ldr	r2, [pc, #272]	; (8002820 <HAL_GPIO_Init+0x2fc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d101      	bne.n	8002716 <HAL_GPIO_Init+0x1f2>
 8002712:	2304      	movs	r3, #4
 8002714:	e008      	b.n	8002728 <HAL_GPIO_Init+0x204>
 8002716:	2307      	movs	r3, #7
 8002718:	e006      	b.n	8002728 <HAL_GPIO_Init+0x204>
 800271a:	2303      	movs	r3, #3
 800271c:	e004      	b.n	8002728 <HAL_GPIO_Init+0x204>
 800271e:	2302      	movs	r3, #2
 8002720:	e002      	b.n	8002728 <HAL_GPIO_Init+0x204>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_GPIO_Init+0x204>
 8002726:	2300      	movs	r3, #0
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	f002 0203 	and.w	r2, r2, #3
 800272e:	0092      	lsls	r2, r2, #2
 8002730:	4093      	lsls	r3, r2
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002738:	4934      	ldr	r1, [pc, #208]	; (800280c <HAL_GPIO_Init+0x2e8>)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	3302      	adds	r3, #2
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002746:	4b37      	ldr	r3, [pc, #220]	; (8002824 <HAL_GPIO_Init+0x300>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	43db      	mvns	r3, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800276a:	4a2e      	ldr	r2, [pc, #184]	; (8002824 <HAL_GPIO_Init+0x300>)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002770:	4b2c      	ldr	r3, [pc, #176]	; (8002824 <HAL_GPIO_Init+0x300>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002794:	4a23      	ldr	r2, [pc, #140]	; (8002824 <HAL_GPIO_Init+0x300>)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800279a:	4b22      	ldr	r3, [pc, #136]	; (8002824 <HAL_GPIO_Init+0x300>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027be:	4a19      	ldr	r2, [pc, #100]	; (8002824 <HAL_GPIO_Init+0x300>)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c4:	4b17      	ldr	r3, [pc, #92]	; (8002824 <HAL_GPIO_Init+0x300>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e8:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <HAL_GPIO_Init+0x300>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3301      	adds	r3, #1
 80027f2:	61fb      	str	r3, [r7, #28]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	2b0f      	cmp	r3, #15
 80027f8:	f67f aea2 	bls.w	8002540 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027fc:	bf00      	nop
 80027fe:	3724      	adds	r7, #36	; 0x24
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	40023800 	.word	0x40023800
 800280c:	40013800 	.word	0x40013800
 8002810:	40020000 	.word	0x40020000
 8002814:	40020400 	.word	0x40020400
 8002818:	40020800 	.word	0x40020800
 800281c:	40020c00 	.word	0x40020c00
 8002820:	40021000 	.word	0x40021000
 8002824:	40013c00 	.word	0x40013c00

08002828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	807b      	strh	r3, [r7, #2]
 8002834:	4613      	mov	r3, r2
 8002836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002838:	787b      	ldrb	r3, [r7, #1]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800283e:	887a      	ldrh	r2, [r7, #2]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002844:	e003      	b.n	800284e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002846:	887b      	ldrh	r3, [r7, #2]
 8002848:	041a      	lsls	r2, r3, #16
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	619a      	str	r2, [r3, #24]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d006      	beq.n	8002880 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002872:	4a05      	ldr	r2, [pc, #20]	; (8002888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002874:	88fb      	ldrh	r3, [r7, #6]
 8002876:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fd fe92 	bl	80005a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800288c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288e:	b08f      	sub	sp, #60	; 0x3c
 8002890:	af0a      	add	r7, sp, #40	; 0x28
 8002892:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e10f      	b.n	8002abe <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d106      	bne.n	80028be <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f006 fe1f 	bl	80094fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2203      	movs	r2, #3
 80028c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d102      	bne.n	80028d8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f003 fde6 	bl	80064ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	687e      	ldr	r6, [r7, #4]
 80028ea:	466d      	mov	r5, sp
 80028ec:	f106 0410 	add.w	r4, r6, #16
 80028f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002900:	1d33      	adds	r3, r6, #4
 8002902:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002904:	6838      	ldr	r0, [r7, #0]
 8002906:	f003 fcbd 	bl	8006284 <USB_CoreInit>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0d0      	b.n	8002abe <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2100      	movs	r1, #0
 8002922:	4618      	mov	r0, r3
 8002924:	f003 fdd4 	bl	80064d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	e04a      	b.n	80029c4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	333d      	adds	r3, #61	; 0x3d
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	333c      	adds	r3, #60	; 0x3c
 8002952:	7bfa      	ldrb	r2, [r7, #15]
 8002954:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	b298      	uxth	r0, r3
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	3342      	adds	r3, #66	; 0x42
 800296a:	4602      	mov	r2, r0
 800296c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	333f      	adds	r3, #63	; 0x3f
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3344      	adds	r3, #68	; 0x44
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	3348      	adds	r3, #72	; 0x48
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029aa:	7bfa      	ldrb	r2, [r7, #15]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	3350      	adds	r3, #80	; 0x50
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	3301      	adds	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d3af      	bcc.n	800292e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ce:	2300      	movs	r3, #0
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	e044      	b.n	8002a5e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d3b5      	bcc.n	80029d4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	687e      	ldr	r6, [r7, #4]
 8002a70:	466d      	mov	r5, sp
 8002a72:	f106 0410 	add.w	r4, r6, #16
 8002a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a82:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a86:	1d33      	adds	r3, r6, #4
 8002a88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a8a:	6838      	ldr	r0, [r7, #0]
 8002a8c:	f003 fd4a 	bl	8006524 <USB_DevInit>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e00d      	b.n	8002abe <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f004 fd92 	bl	80075e0 <USB_DevDisconnect>

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ac6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_PCD_Start+0x1c>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e020      	b.n	8002b24 <HAL_PCD_Start+0x5e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d109      	bne.n	8002b06 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d005      	beq.n	8002b06 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 fcbe 	bl	800648c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f004 fd42 	bl	800759e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b08d      	sub	sp, #52	; 0x34
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f004 fe00 	bl	8007748 <USB_GetMode>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f040 839d 	bne.w	800328a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f004 fd64 	bl	8007622 <USB_ReadInterrupts>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 8393 	beq.w	8003288 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f004 fd5b 	bl	8007622 <USB_ReadInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d107      	bne.n	8002b86 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f002 0202 	and.w	r2, r2, #2
 8002b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f004 fd49 	bl	8007622 <USB_ReadInterrupts>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b10      	cmp	r3, #16
 8002b98:	d161      	bne.n	8002c5e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699a      	ldr	r2, [r3, #24]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0210 	bic.w	r2, r2, #16
 8002ba8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f003 020f 	and.w	r2, r3, #15
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	0c5b      	lsrs	r3, r3, #17
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d124      	bne.n	8002c20 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d035      	beq.n	8002c4e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	6a38      	ldr	r0, [r7, #32]
 8002bf6:	f004 fbaf 	bl	8007358 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c06:	441a      	add	r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	699a      	ldr	r2, [r3, #24]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c18:	441a      	add	r2, r3
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	619a      	str	r2, [r3, #24]
 8002c1e:	e016      	b.n	8002c4e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	0c5b      	lsrs	r3, r3, #17
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	2b06      	cmp	r3, #6
 8002c2a:	d110      	bne.n	8002c4e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c32:	2208      	movs	r2, #8
 8002c34:	4619      	mov	r1, r3
 8002c36:	6a38      	ldr	r0, [r7, #32]
 8002c38:	f004 fb8e 	bl	8007358 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c48:	441a      	add	r2, r3
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0210 	orr.w	r2, r2, #16
 8002c5c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f004 fcdd 	bl	8007622 <USB_ReadInterrupts>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c72:	d16e      	bne.n	8002d52 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f004 fce3 	bl	8007648 <USB_ReadDevAllOutEpInterrupt>
 8002c82:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c84:	e062      	b.n	8002d4c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d057      	beq.n	8002d40 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f004 fd08 	bl	80076b0 <USB_ReadDevOutEPInterrupt>
 8002ca0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00c      	beq.n	8002cc6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2301      	movs	r3, #1
 8002cbc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002cbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 fdb1 	bl	8003828 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00c      	beq.n	8002cea <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2308      	movs	r3, #8
 8002ce0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ce2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 feab 	bl	8003a40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d00:	461a      	mov	r2, r3
 8002d02:	2310      	movs	r3, #16
 8002d04:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f003 0320 	and.w	r3, r3, #32
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2320      	movs	r3, #32
 8002d20:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d009      	beq.n	8002d40 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d3e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	3301      	adds	r3, #1
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d199      	bne.n	8002c86 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f004 fc63 	bl	8007622 <USB_ReadInterrupts>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d66:	f040 80c0 	bne.w	8002eea <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f004 fc84 	bl	800767c <USB_ReadDevAllInEpInterrupt>
 8002d74:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002d7a:	e0b2      	b.n	8002ee2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 80a7 	beq.w	8002ed6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f004 fcaa 	bl	80076ec <USB_ReadDevInEPInterrupt>
 8002d98:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d057      	beq.n	8002e54 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	2201      	movs	r2, #1
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69f9      	ldr	r1, [r7, #28]
 8002dc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d132      	bne.n	8002e48 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de6:	4613      	mov	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	3348      	adds	r3, #72	; 0x48
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4403      	add	r3, r0
 8002e02:	3344      	adds	r3, #68	; 0x44
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4419      	add	r1, r3
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4403      	add	r3, r0
 8002e16:	3348      	adds	r3, #72	; 0x48
 8002e18:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d113      	bne.n	8002e48 <HAL_PCD_IRQHandler+0x31c>
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3350      	adds	r3, #80	; 0x50
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d108      	bne.n	8002e48 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e40:	461a      	mov	r2, r3
 8002e42:	2101      	movs	r1, #1
 8002e44:	f004 fcb2 	bl	80077ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f006 fbd5 	bl	80095fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d008      	beq.n	8002e70 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2308      	movs	r3, #8
 8002e6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d008      	beq.n	8002e8c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e86:	461a      	mov	r2, r3
 8002e88:	2310      	movs	r3, #16
 8002e8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d008      	beq.n	8002ea8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2340      	movs	r3, #64	; 0x40
 8002ea6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ece:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fc1b 	bl	800370c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	3301      	adds	r3, #1
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	085b      	lsrs	r3, r3, #1
 8002ee0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f47f af49 	bne.w	8002d7c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f004 fb97 	bl	8007622 <USB_ReadInterrupts>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002efa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002efe:	d122      	bne.n	8002f46 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d108      	bne.n	8002f30 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f26:	2100      	movs	r1, #0
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fe27 	bl	8003b7c <HAL_PCDEx_LPM_Callback>
 8002f2e:	e002      	b.n	8002f36 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f006 fbd1 	bl	80096d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f004 fb69 	bl	8007622 <USB_ReadInterrupts>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f5a:	d112      	bne.n	8002f82 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d102      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f006 fb8d 	bl	800968c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695a      	ldr	r2, [r3, #20]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f80:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f004 fb4b 	bl	8007622 <USB_ReadInterrupts>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f96:	f040 80c7 	bne.w	8003128 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2110      	movs	r1, #16
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f003 fc19 	bl	80067ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fbe:	e056      	b.n	800306e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fd2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fe4:	0151      	lsls	r1, r2, #5
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	440a      	add	r2, r1
 8002fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002fee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ff2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003004:	0151      	lsls	r1, r2, #5
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	440a      	add	r2, r1
 800300a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800300e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003012:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	4413      	add	r3, r2
 800301c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003020:	461a      	mov	r2, r3
 8003022:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003026:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	4413      	add	r3, r2
 8003030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003038:	0151      	lsls	r1, r2, #5
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	440a      	add	r2, r1
 800303e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003042:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003046:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	4413      	add	r3, r2
 8003050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003058:	0151      	lsls	r1, r2, #5
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	440a      	add	r2, r1
 800305e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003062:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003066:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306a:	3301      	adds	r3, #1
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003074:	429a      	cmp	r2, r3
 8003076:	d3a3      	bcc.n	8002fc0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	69fa      	ldr	r2, [r7, #28]
 8003082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003086:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800308a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	2b00      	cmp	r3, #0
 8003092:	d016      	beq.n	80030c2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030a4:	f043 030b 	orr.w	r3, r3, #11
 80030a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ba:	f043 030b 	orr.w	r3, r3, #11
 80030be:	6453      	str	r3, [r2, #68]	; 0x44
 80030c0:	e015      	b.n	80030ee <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030d4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80030d8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e8:	f043 030b 	orr.w	r3, r3, #11
 80030ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003100:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003112:	461a      	mov	r2, r3
 8003114:	f004 fb4a 	bl	80077ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003126:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f004 fa78 	bl	8007622 <USB_ReadInterrupts>
 8003132:	4603      	mov	r3, r0
 8003134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800313c:	d124      	bne.n	8003188 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f004 fb0e 	bl	8007764 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f003 fbae 	bl	80068ae <USB_GetDevSpeed>
 8003152:	4603      	mov	r3, r0
 8003154:	461a      	mov	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681c      	ldr	r4, [r3, #0]
 800315e:	f001 f945 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 8003162:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003168:	b2db      	uxtb	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	4620      	mov	r0, r4
 800316e:	f003 f8eb 	bl	8006348 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f006 fa6b 	bl	800964e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003186:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f004 fa48 	bl	8007622 <USB_ReadInterrupts>
 8003192:	4603      	mov	r3, r0
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b08      	cmp	r3, #8
 800319a:	d10a      	bne.n	80031b2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f006 fa48 	bl	8009632 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f002 0208 	and.w	r2, r2, #8
 80031b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f004 fa33 	bl	8007622 <USB_ReadInterrupts>
 80031bc:	4603      	mov	r3, r0
 80031be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c6:	d10f      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	4619      	mov	r1, r3
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f006 faa0 	bl	8009718 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80031e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f004 fa18 	bl	8007622 <USB_ReadInterrupts>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031fc:	d10f      	bne.n	800321e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	b2db      	uxtb	r3, r3
 8003206:	4619      	mov	r1, r3
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f006 fa73 	bl	80096f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800321c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f004 f9fd 	bl	8007622 <USB_ReadInterrupts>
 8003228:	4603      	mov	r3, r0
 800322a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800322e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003232:	d10a      	bne.n	800324a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f006 fa81 	bl	800973c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003248:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f004 f9e7 	bl	8007622 <USB_ReadInterrupts>
 8003254:	4603      	mov	r3, r0
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b04      	cmp	r3, #4
 800325c:	d115      	bne.n	800328a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f006 fa71 	bl	8009758 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6859      	ldr	r1, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	e000      	b.n	800328a <HAL_PCD_IRQHandler+0x75e>
      return;
 8003288:	bf00      	nop
    }
  }
}
 800328a:	3734      	adds	r7, #52	; 0x34
 800328c:	46bd      	mov	sp, r7
 800328e:	bd90      	pop	{r4, r7, pc}

08003290 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_PCD_SetAddress+0x1a>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e013      	b.n	80032d2 <HAL_PCD_SetAddress+0x42>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f004 f945 	bl	8007552 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	4608      	mov	r0, r1
 80032e4:	4611      	mov	r1, r2
 80032e6:	461a      	mov	r2, r3
 80032e8:	4603      	mov	r3, r0
 80032ea:	70fb      	strb	r3, [r7, #3]
 80032ec:	460b      	mov	r3, r1
 80032ee:	803b      	strh	r3, [r7, #0]
 80032f0:	4613      	mov	r3, r2
 80032f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	da0f      	bge.n	8003320 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	f003 020f 	and.w	r2, r3, #15
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	3338      	adds	r3, #56	; 0x38
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	3304      	adds	r3, #4
 8003316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	705a      	strb	r2, [r3, #1]
 800331e:	e00f      	b.n	8003340 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	f003 020f 	and.w	r2, r3, #15
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4413      	add	r3, r2
 8003336:	3304      	adds	r3, #4
 8003338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	b2da      	uxtb	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800334c:	883a      	ldrh	r2, [r7, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	78ba      	ldrb	r2, [r7, #2]
 8003356:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	785b      	ldrb	r3, [r3, #1]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d004      	beq.n	800336a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800336a:	78bb      	ldrb	r3, [r7, #2]
 800336c:	2b02      	cmp	r3, #2
 800336e:	d102      	bne.n	8003376 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_PCD_EP_Open+0xaa>
 8003380:	2302      	movs	r3, #2
 8003382:	e00e      	b.n	80033a2 <HAL_PCD_EP_Open+0xc8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68f9      	ldr	r1, [r7, #12]
 8003392:	4618      	mov	r0, r3
 8003394:	f003 fab0 	bl	80068f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80033a0:	7afb      	ldrb	r3, [r7, #11]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b084      	sub	sp, #16
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	460b      	mov	r3, r1
 80033b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	da0f      	bge.n	80033de <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	f003 020f 	and.w	r2, r3, #15
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	3338      	adds	r3, #56	; 0x38
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4413      	add	r3, r2
 80033d2:	3304      	adds	r3, #4
 80033d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	705a      	strb	r2, [r3, #1]
 80033dc:	e00f      	b.n	80033fe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	f003 020f 	and.w	r2, r3, #15
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	4413      	add	r3, r2
 80033f4:	3304      	adds	r3, #4
 80033f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80033fe:	78fb      	ldrb	r3, [r7, #3]
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_PCD_EP_Close+0x6e>
 8003414:	2302      	movs	r3, #2
 8003416:	e00e      	b.n	8003436 <HAL_PCD_EP_Close+0x8c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68f9      	ldr	r1, [r7, #12]
 8003426:	4618      	mov	r0, r3
 8003428:	f003 faee 	bl	8006a08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b086      	sub	sp, #24
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
 800344a:	460b      	mov	r3, r1
 800344c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800344e:	7afb      	ldrb	r3, [r7, #11]
 8003450:	f003 020f 	and.w	r2, r3, #15
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	3304      	adds	r3, #4
 8003466:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2200      	movs	r2, #0
 8003478:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2200      	movs	r2, #0
 800347e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003480:	7afb      	ldrb	r3, [r7, #11]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	b2da      	uxtb	r2, r3
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d102      	bne.n	800349a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800349a:	7afb      	ldrb	r3, [r7, #11]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	6979      	ldr	r1, [r7, #20]
 80034b2:	f003 fdc9 	bl	8007048 <USB_EP0StartXfer>
 80034b6:	e008      	b.n	80034ca <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	6979      	ldr	r1, [r7, #20]
 80034c6:	f003 fb7b 	bl	8006bc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	f003 020f 	and.w	r2, r3, #15
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	460b      	mov	r3, r1
 8003512:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003514:	7afb      	ldrb	r3, [r7, #11]
 8003516:	f003 020f 	and.w	r2, r3, #15
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	3338      	adds	r3, #56	; 0x38
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4413      	add	r3, r2
 8003528:	3304      	adds	r3, #4
 800352a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2200      	movs	r2, #0
 800353c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2201      	movs	r2, #1
 8003542:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003544:	7afb      	ldrb	r3, [r7, #11]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	b2da      	uxtb	r2, r3
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d102      	bne.n	800355e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800355e:	7afb      	ldrb	r3, [r7, #11]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	2b00      	cmp	r3, #0
 8003566:	d109      	bne.n	800357c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	6979      	ldr	r1, [r7, #20]
 8003576:	f003 fd67 	bl	8007048 <USB_EP0StartXfer>
 800357a:	e008      	b.n	800358e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	6979      	ldr	r1, [r7, #20]
 800358a:	f003 fb19 	bl	8006bc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	f003 020f 	and.w	r2, r3, #15
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d901      	bls.n	80035b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e050      	b.n	8003658 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	da0f      	bge.n	80035de <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	f003 020f 	and.w	r2, r3, #15
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	3338      	adds	r3, #56	; 0x38
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4413      	add	r3, r2
 80035d2:	3304      	adds	r3, #4
 80035d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	705a      	strb	r2, [r3, #1]
 80035dc:	e00d      	b.n	80035fa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4413      	add	r3, r2
 80035f0:	3304      	adds	r3, #4
 80035f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	b2da      	uxtb	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_PCD_EP_SetStall+0x82>
 8003616:	2302      	movs	r3, #2
 8003618:	e01e      	b.n	8003658 <HAL_PCD_EP_SetStall+0xc0>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68f9      	ldr	r1, [r7, #12]
 8003628:	4618      	mov	r0, r3
 800362a:	f003 febe 	bl	80073aa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	f003 030f 	and.w	r3, r3, #15
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	b2d9      	uxtb	r1, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003648:	461a      	mov	r2, r3
 800364a:	f004 f8af 	bl	80077ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800366c:	78fb      	ldrb	r3, [r7, #3]
 800366e:	f003 020f 	and.w	r2, r3, #15
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	429a      	cmp	r2, r3
 8003678:	d901      	bls.n	800367e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e042      	b.n	8003704 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800367e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003682:	2b00      	cmp	r3, #0
 8003684:	da0f      	bge.n	80036a6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003686:	78fb      	ldrb	r3, [r7, #3]
 8003688:	f003 020f 	and.w	r2, r3, #15
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	3338      	adds	r3, #56	; 0x38
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	3304      	adds	r3, #4
 800369c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	705a      	strb	r2, [r3, #1]
 80036a4:	e00f      	b.n	80036c6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	f003 020f 	and.w	r2, r3, #15
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	4413      	add	r3, r2
 80036bc:	3304      	adds	r3, #4
 80036be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_PCD_EP_ClrStall+0x86>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e00e      	b.n	8003704 <HAL_PCD_EP_ClrStall+0xa4>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68f9      	ldr	r1, [r7, #12]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f003 fec6 	bl	8007486 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08a      	sub	sp, #40	; 0x28
 8003710:	af02      	add	r7, sp, #8
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	4613      	mov	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	3338      	adds	r3, #56	; 0x38
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	4413      	add	r3, r2
 8003730:	3304      	adds	r3, #4
 8003732:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	699a      	ldr	r2, [r3, #24]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	429a      	cmp	r2, r3
 800373e:	d901      	bls.n	8003744 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e06c      	b.n	800381e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	429a      	cmp	r2, r3
 8003758:	d902      	bls.n	8003760 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	3303      	adds	r3, #3
 8003764:	089b      	lsrs	r3, r3, #2
 8003766:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003768:	e02b      	b.n	80037c2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	429a      	cmp	r2, r3
 800377e:	d902      	bls.n	8003786 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3303      	adds	r3, #3
 800378a:	089b      	lsrs	r3, r3, #2
 800378c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	68d9      	ldr	r1, [r3, #12]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	4603      	mov	r3, r0
 80037a4:	6978      	ldr	r0, [r7, #20]
 80037a6:	f003 fda2 	bl	80072ee <USB_WritePacket>

    ep->xfer_buff  += len;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	441a      	add	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	441a      	add	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d809      	bhi.n	80037ec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	699a      	ldr	r2, [r3, #24]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d203      	bcs.n	80037ec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1be      	bne.n	800376a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d811      	bhi.n	800381c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	2201      	movs	r2, #1
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	43db      	mvns	r3, r3
 8003812:	6939      	ldr	r1, [r7, #16]
 8003814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003818:	4013      	ands	r3, r2
 800381a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3720      	adds	r7, #32
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	333c      	adds	r3, #60	; 0x3c
 8003840:	3304      	adds	r3, #4
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b01      	cmp	r3, #1
 800385c:	f040 80a0 	bne.w	80039a0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d015      	beq.n	8003896 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a72      	ldr	r2, [pc, #456]	; (8003a38 <PCD_EP_OutXfrComplete_int+0x210>)
 800386e:	4293      	cmp	r3, r2
 8003870:	f240 80dd 	bls.w	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80d7 	beq.w	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388c:	461a      	mov	r2, r3
 800388e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003892:	6093      	str	r3, [r2, #8]
 8003894:	e0cb      	b.n	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b00      	cmp	r3, #0
 800389e:	d009      	beq.n	80038b4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ac:	461a      	mov	r2, r3
 80038ae:	2320      	movs	r3, #32
 80038b0:	6093      	str	r3, [r2, #8]
 80038b2:	e0bc      	b.n	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f040 80b7 	bne.w	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a5d      	ldr	r2, [pc, #372]	; (8003a38 <PCD_EP_OutXfrComplete_int+0x210>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d90f      	bls.n	80038e8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038de:	461a      	mov	r2, r3
 80038e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038e4:	6093      	str	r3, [r2, #8]
 80038e6:	e0a2      	b.n	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038fa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	0159      	lsls	r1, r3, #5
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	440b      	add	r3, r1
 8003904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800390e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4403      	add	r3, r0
 800391e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003922:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003936:	6819      	ldr	r1, [r3, #0]
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4403      	add	r3, r0
 8003946:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4419      	add	r1, r3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	4613      	mov	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4403      	add	r3, r0
 800395c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003960:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d114      	bne.n	8003992 <PCD_EP_OutXfrComplete_int+0x16a>
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d108      	bne.n	8003992 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800398a:	461a      	mov	r2, r3
 800398c:	2101      	movs	r1, #1
 800398e:	f003 ff0d 	bl	80077ac <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	4619      	mov	r1, r3
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f005 fe15 	bl	80095c8 <HAL_PCD_DataOutStageCallback>
 800399e:	e046      	b.n	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4a26      	ldr	r2, [pc, #152]	; (8003a3c <PCD_EP_OutXfrComplete_int+0x214>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d124      	bne.n	80039f2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039be:	461a      	mov	r2, r3
 80039c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039c4:	6093      	str	r3, [r2, #8]
 80039c6:	e032      	b.n	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039de:	461a      	mov	r2, r3
 80039e0:	2320      	movs	r3, #32
 80039e2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	4619      	mov	r1, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f005 fdec 	bl	80095c8 <HAL_PCD_DataOutStageCallback>
 80039f0:	e01d      	b.n	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d114      	bne.n	8003a22 <PCD_EP_OutXfrComplete_int+0x1fa>
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d108      	bne.n	8003a22 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	f003 fec5 	bl	80077ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	4619      	mov	r1, r3
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f005 fdcd 	bl	80095c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	4f54300a 	.word	0x4f54300a
 8003a3c:	4f54310a 	.word	0x4f54310a

08003a40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	333c      	adds	r3, #60	; 0x3c
 8003a58:	3304      	adds	r3, #4
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d90e      	bls.n	8003a94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d009      	beq.n	8003a94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f005 fd85 	bl	80095a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4a0a      	ldr	r2, [pc, #40]	; (8003ac8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d90c      	bls.n	8003abc <PCD_EP_OutSetupPacket_int+0x7c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d108      	bne.n	8003abc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	f003 fe78 	bl	80077ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	4f54300a 	.word	0x4f54300a

08003acc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	70fb      	strb	r3, [r7, #3]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d107      	bne.n	8003afa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003aea:	883b      	ldrh	r3, [r7, #0]
 8003aec:	0419      	lsls	r1, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28
 8003af8:	e028      	b.n	8003b4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	0c1b      	lsrs	r3, r3, #16
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	4413      	add	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]
 8003b0c:	e00d      	b.n	8003b2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	3340      	adds	r3, #64	; 0x40
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	0c1b      	lsrs	r3, r3, #16
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	4413      	add	r3, r2
 8003b22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	3301      	adds	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d3ec      	bcc.n	8003b0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b34:	883b      	ldrh	r3, [r7, #0]
 8003b36:	0418      	lsls	r0, r3, #16
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6819      	ldr	r1, [r3, #0]
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	4302      	orrs	r2, r0
 8003b44:	3340      	adds	r3, #64	; 0x40
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	460b      	mov	r3, r1
 8003b64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	887a      	ldrh	r2, [r7, #2]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e25b      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d075      	beq.n	8003c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bb2:	4ba3      	ldr	r3, [pc, #652]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d00c      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bbe:	4ba0      	ldr	r3, [pc, #640]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d112      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bca:	4b9d      	ldr	r3, [pc, #628]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	4b99      	ldr	r3, [pc, #612]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d05b      	beq.n	8003c9c <HAL_RCC_OscConfig+0x108>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d157      	bne.n	8003c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e236      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0x74>
 8003bfa:	4b91      	ldr	r3, [pc, #580]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a90      	ldr	r2, [pc, #576]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e01d      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x98>
 8003c12:	4b8b      	ldr	r3, [pc, #556]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a8a      	ldr	r2, [pc, #552]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b88      	ldr	r3, [pc, #544]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a87      	ldr	r2, [pc, #540]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e00b      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c2c:	4b84      	ldr	r3, [pc, #528]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a83      	ldr	r2, [pc, #524]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4b81      	ldr	r3, [pc, #516]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a80      	ldr	r2, [pc, #512]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d013      	beq.n	8003c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fd fbe0 	bl	8001410 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fd fbdc 	bl	8001410 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e1fb      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	4b76      	ldr	r3, [pc, #472]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0xc0>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fd fbcc 	bl	8001410 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fd fbc8 	bl	8001410 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e1e7      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8e:	4b6c      	ldr	r3, [pc, #432]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0xe8>
 8003c9a:	e000      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d063      	beq.n	8003d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003caa:	4b65      	ldr	r3, [pc, #404]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb6:	4b62      	ldr	r3, [pc, #392]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d11c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc2:	4b5f      	ldr	r3, [pc, #380]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d116      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cce:	4b5c      	ldr	r3, [pc, #368]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e1bb      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce6:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4952      	ldr	r1, [pc, #328]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	e03a      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d020      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d04:	4b4f      	ldr	r3, [pc, #316]	; (8003e44 <HAL_RCC_OscConfig+0x2b0>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fd fb81 	bl	8001410 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d12:	f7fd fb7d 	bl	8001410 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e19c      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d24:	4b46      	ldr	r3, [pc, #280]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d30:	4b43      	ldr	r3, [pc, #268]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4940      	ldr	r1, [pc, #256]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]
 8003d44:	e015      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d46:	4b3f      	ldr	r3, [pc, #252]	; (8003e44 <HAL_RCC_OscConfig+0x2b0>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fd fb60 	bl	8001410 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d54:	f7fd fb5c 	bl	8001410 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e17b      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d66:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d030      	beq.n	8003de0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d86:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <HAL_RCC_OscConfig+0x2b4>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fd fb40 	bl	8001410 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d94:	f7fd fb3c 	bl	8001410 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e15b      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da6:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x200>
 8003db2:	e015      	b.n	8003de0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db4:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <HAL_RCC_OscConfig+0x2b4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dba:	f7fd fb29 	bl	8001410 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc2:	f7fd fb25 	bl	8001410 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e144      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80a0 	beq.w	8003f2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dee:	2300      	movs	r3, #0
 8003df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df2:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10f      	bne.n	8003e1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	4a0e      	ldr	r2, [pc, #56]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d121      	bne.n	8003e6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2a:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a07      	ldr	r2, [pc, #28]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e36:	f7fd faeb 	bl	8001410 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	e011      	b.n	8003e62 <HAL_RCC_OscConfig+0x2ce>
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800
 8003e44:	42470000 	.word	0x42470000
 8003e48:	42470e80 	.word	0x42470e80
 8003e4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e50:	f7fd fade 	bl	8001410 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e0fd      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e62:	4b81      	ldr	r3, [pc, #516]	; (8004068 <HAL_RCC_OscConfig+0x4d4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d106      	bne.n	8003e84 <HAL_RCC_OscConfig+0x2f0>
 8003e76:	4b7d      	ldr	r3, [pc, #500]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a7c      	ldr	r2, [pc, #496]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	e01c      	b.n	8003ebe <HAL_RCC_OscConfig+0x32a>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x312>
 8003e8c:	4b77      	ldr	r3, [pc, #476]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a76      	ldr	r2, [pc, #472]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e92:	f043 0304 	orr.w	r3, r3, #4
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
 8003e98:	4b74      	ldr	r3, [pc, #464]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4a73      	ldr	r2, [pc, #460]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea4:	e00b      	b.n	8003ebe <HAL_RCC_OscConfig+0x32a>
 8003ea6:	4b71      	ldr	r3, [pc, #452]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a70      	ldr	r2, [pc, #448]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	4b6e      	ldr	r3, [pc, #440]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a6d      	ldr	r2, [pc, #436]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003eb8:	f023 0304 	bic.w	r3, r3, #4
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d015      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fd faa3 	bl	8001410 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fd fa9f 	bl	8001410 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e0bc      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee4:	4b61      	ldr	r3, [pc, #388]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0ee      	beq.n	8003ece <HAL_RCC_OscConfig+0x33a>
 8003ef0:	e014      	b.n	8003f1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef2:	f7fd fa8d 	bl	8001410 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef8:	e00a      	b.n	8003f10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7fd fa89 	bl	8001410 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e0a6      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f10:	4b56      	ldr	r3, [pc, #344]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ee      	bne.n	8003efa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d105      	bne.n	8003f2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f22:	4b52      	ldr	r3, [pc, #328]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	4a51      	ldr	r2, [pc, #324]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8092 	beq.w	800405c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f38:	4b4c      	ldr	r3, [pc, #304]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 030c 	and.w	r3, r3, #12
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d05c      	beq.n	8003ffe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d141      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4c:	4b48      	ldr	r3, [pc, #288]	; (8004070 <HAL_RCC_OscConfig+0x4dc>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f52:	f7fd fa5d 	bl	8001410 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fd fa59 	bl	8001410 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e078      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6c:	4b3f      	ldr	r3, [pc, #252]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	019b      	lsls	r3, r3, #6
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	3b01      	subs	r3, #1
 8003f92:	041b      	lsls	r3, r3, #16
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	061b      	lsls	r3, r3, #24
 8003f9c:	4933      	ldr	r1, [pc, #204]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa2:	4b33      	ldr	r3, [pc, #204]	; (8004070 <HAL_RCC_OscConfig+0x4dc>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7fd fa32 	bl	8001410 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fd fa2e 	bl	8001410 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e04d      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc2:	4b2a      	ldr	r3, [pc, #168]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x41c>
 8003fce:	e045      	b.n	800405c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd0:	4b27      	ldr	r3, [pc, #156]	; (8004070 <HAL_RCC_OscConfig+0x4dc>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fd fa1b 	bl	8001410 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fd fa17 	bl	8001410 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e036      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff0:	4b1e      	ldr	r3, [pc, #120]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f0      	bne.n	8003fde <HAL_RCC_OscConfig+0x44a>
 8003ffc:	e02e      	b.n	800405c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e029      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800400a:	4b18      	ldr	r3, [pc, #96]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	429a      	cmp	r2, r3
 800401c:	d11c      	bne.n	8004058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d115      	bne.n	8004058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004032:	4013      	ands	r3, r2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004038:	4293      	cmp	r3, r2
 800403a:	d10d      	bne.n	8004058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d106      	bne.n	8004058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40007000 	.word	0x40007000
 800406c:	40023800 	.word	0x40023800
 8004070:	42470060 	.word	0x42470060

08004074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0cc      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004088:	4b68      	ldr	r3, [pc, #416]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d90c      	bls.n	80040b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409e:	4b63      	ldr	r3, [pc, #396]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0b8      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d020      	beq.n	80040fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c8:	4b59      	ldr	r3, [pc, #356]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a58      	ldr	r2, [pc, #352]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e0:	4b53      	ldr	r3, [pc, #332]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a52      	ldr	r2, [pc, #328]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ec:	4b50      	ldr	r3, [pc, #320]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	494d      	ldr	r1, [pc, #308]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d044      	beq.n	8004194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d107      	bne.n	8004122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004112:	4b47      	ldr	r3, [pc, #284]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d119      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e07f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d003      	beq.n	8004132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412e:	2b03      	cmp	r3, #3
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004132:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e06f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004142:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e067      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004152:	4b37      	ldr	r3, [pc, #220]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f023 0203 	bic.w	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4934      	ldr	r1, [pc, #208]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	4313      	orrs	r3, r2
 8004162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004164:	f7fd f954 	bl	8001410 <HAL_GetTick>
 8004168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	e00a      	b.n	8004182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416c:	f7fd f950 	bl	8001410 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e04f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 020c 	and.w	r2, r3, #12
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	429a      	cmp	r2, r3
 8004192:	d1eb      	bne.n	800416c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004194:	4b25      	ldr	r3, [pc, #148]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d20c      	bcs.n	80041bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a2:	4b22      	ldr	r3, [pc, #136]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e032      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4916      	ldr	r1, [pc, #88]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d009      	beq.n	80041fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041e6:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	490e      	ldr	r1, [pc, #56]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041fa:	f000 f821 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 80041fe:	4601      	mov	r1, r0
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	091b      	lsrs	r3, r3, #4
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 800420c:	5cd3      	ldrb	r3, [r2, r3]
 800420e:	fa21 f303 	lsr.w	r3, r1, r3
 8004212:	4a09      	ldr	r2, [pc, #36]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <HAL_RCC_ClockConfig+0x1c8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fd f8b4 	bl	8001388 <HAL_InitTick>

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40023c00 	.word	0x40023c00
 8004230:	40023800 	.word	0x40023800
 8004234:	08009d50 	.word	0x08009d50
 8004238:	20000000 	.word	0x20000000
 800423c:	20000004 	.word	0x20000004

08004240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	2300      	movs	r3, #0
 8004250:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004256:	4b63      	ldr	r3, [pc, #396]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	2b04      	cmp	r3, #4
 8004260:	d007      	beq.n	8004272 <HAL_RCC_GetSysClockFreq+0x32>
 8004262:	2b08      	cmp	r3, #8
 8004264:	d008      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x38>
 8004266:	2b00      	cmp	r3, #0
 8004268:	f040 80b4 	bne.w	80043d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800426c:	4b5e      	ldr	r3, [pc, #376]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800426e:	60bb      	str	r3, [r7, #8]
       break;
 8004270:	e0b3      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004272:	4b5d      	ldr	r3, [pc, #372]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004274:	60bb      	str	r3, [r7, #8]
      break;
 8004276:	e0b0      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004278:	4b5a      	ldr	r3, [pc, #360]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004280:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004282:	4b58      	ldr	r3, [pc, #352]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d04a      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428e:	4b55      	ldr	r3, [pc, #340]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	f04f 0400 	mov.w	r4, #0
 8004298:	f240 11ff 	movw	r1, #511	; 0x1ff
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	ea03 0501 	and.w	r5, r3, r1
 80042a4:	ea04 0602 	and.w	r6, r4, r2
 80042a8:	4629      	mov	r1, r5
 80042aa:	4632      	mov	r2, r6
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	f04f 0400 	mov.w	r4, #0
 80042b4:	0154      	lsls	r4, r2, #5
 80042b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042ba:	014b      	lsls	r3, r1, #5
 80042bc:	4619      	mov	r1, r3
 80042be:	4622      	mov	r2, r4
 80042c0:	1b49      	subs	r1, r1, r5
 80042c2:	eb62 0206 	sbc.w	r2, r2, r6
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	f04f 0400 	mov.w	r4, #0
 80042ce:	0194      	lsls	r4, r2, #6
 80042d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042d4:	018b      	lsls	r3, r1, #6
 80042d6:	1a5b      	subs	r3, r3, r1
 80042d8:	eb64 0402 	sbc.w	r4, r4, r2
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	00e2      	lsls	r2, r4, #3
 80042e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042ea:	00d9      	lsls	r1, r3, #3
 80042ec:	460b      	mov	r3, r1
 80042ee:	4614      	mov	r4, r2
 80042f0:	195b      	adds	r3, r3, r5
 80042f2:	eb44 0406 	adc.w	r4, r4, r6
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	02a2      	lsls	r2, r4, #10
 8004300:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004304:	0299      	lsls	r1, r3, #10
 8004306:	460b      	mov	r3, r1
 8004308:	4614      	mov	r4, r2
 800430a:	4618      	mov	r0, r3
 800430c:	4621      	mov	r1, r4
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f04f 0400 	mov.w	r4, #0
 8004314:	461a      	mov	r2, r3
 8004316:	4623      	mov	r3, r4
 8004318:	f7fb ff66 	bl	80001e8 <__aeabi_uldivmod>
 800431c:	4603      	mov	r3, r0
 800431e:	460c      	mov	r4, r1
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	e049      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004324:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	099b      	lsrs	r3, r3, #6
 800432a:	f04f 0400 	mov.w	r4, #0
 800432e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	ea03 0501 	and.w	r5, r3, r1
 800433a:	ea04 0602 	and.w	r6, r4, r2
 800433e:	4629      	mov	r1, r5
 8004340:	4632      	mov	r2, r6
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	f04f 0400 	mov.w	r4, #0
 800434a:	0154      	lsls	r4, r2, #5
 800434c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004350:	014b      	lsls	r3, r1, #5
 8004352:	4619      	mov	r1, r3
 8004354:	4622      	mov	r2, r4
 8004356:	1b49      	subs	r1, r1, r5
 8004358:	eb62 0206 	sbc.w	r2, r2, r6
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	f04f 0400 	mov.w	r4, #0
 8004364:	0194      	lsls	r4, r2, #6
 8004366:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800436a:	018b      	lsls	r3, r1, #6
 800436c:	1a5b      	subs	r3, r3, r1
 800436e:	eb64 0402 	sbc.w	r4, r4, r2
 8004372:	f04f 0100 	mov.w	r1, #0
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	00e2      	lsls	r2, r4, #3
 800437c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004380:	00d9      	lsls	r1, r3, #3
 8004382:	460b      	mov	r3, r1
 8004384:	4614      	mov	r4, r2
 8004386:	195b      	adds	r3, r3, r5
 8004388:	eb44 0406 	adc.w	r4, r4, r6
 800438c:	f04f 0100 	mov.w	r1, #0
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	02a2      	lsls	r2, r4, #10
 8004396:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800439a:	0299      	lsls	r1, r3, #10
 800439c:	460b      	mov	r3, r1
 800439e:	4614      	mov	r4, r2
 80043a0:	4618      	mov	r0, r3
 80043a2:	4621      	mov	r1, r4
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f04f 0400 	mov.w	r4, #0
 80043aa:	461a      	mov	r2, r3
 80043ac:	4623      	mov	r3, r4
 80043ae:	f7fb ff1b 	bl	80001e8 <__aeabi_uldivmod>
 80043b2:	4603      	mov	r3, r0
 80043b4:	460c      	mov	r4, r1
 80043b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043b8:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	3301      	adds	r3, #1
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	60bb      	str	r3, [r7, #8]
      break;
 80043d2:	e002      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043d4:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043d6:	60bb      	str	r3, [r7, #8]
      break;
 80043d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043da:	68bb      	ldr	r3, [r7, #8]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	00f42400 	.word	0x00f42400

080043ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f0:	4b03      	ldr	r3, [pc, #12]	; (8004400 <HAL_RCC_GetHCLKFreq+0x14>)
 80043f2:	681b      	ldr	r3, [r3, #0]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000000 	.word	0x20000000

08004404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004408:	f7ff fff0 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 800440c:	4601      	mov	r1, r0
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0a9b      	lsrs	r3, r3, #10
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4a03      	ldr	r2, [pc, #12]	; (8004428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800441a:	5cd3      	ldrb	r3, [r2, r3]
 800441c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40023800 	.word	0x40023800
 8004428:	08009d60 	.word	0x08009d60

0800442c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004430:	f7ff ffdc 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 8004434:	4601      	mov	r1, r0
 8004436:	4b05      	ldr	r3, [pc, #20]	; (800444c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	0b5b      	lsrs	r3, r3, #13
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	4a03      	ldr	r2, [pc, #12]	; (8004450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004442:	5cd3      	ldrb	r3, [r2, r3]
 8004444:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004448:	4618      	mov	r0, r3
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40023800 	.word	0x40023800
 8004450:	08009d60 	.word	0x08009d60

08004454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e056      	b.n	8004514 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7fc fd8d 	bl	8000fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800449c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	ea42 0103 	orr.w	r1, r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	0c1b      	lsrs	r3, r3, #16
 80044e4:	f003 0104 	and.w	r1, r3, #4
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69da      	ldr	r2, [r3, #28]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004502:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	4613      	mov	r3, r2
 800452a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_SPI_Transmit+0x22>
 800453a:	2302      	movs	r3, #2
 800453c:	e11e      	b.n	800477c <HAL_SPI_Transmit+0x260>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004546:	f7fc ff63 	bl	8001410 <HAL_GetTick>
 800454a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800454c:	88fb      	ldrh	r3, [r7, #6]
 800454e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b01      	cmp	r3, #1
 800455a:	d002      	beq.n	8004562 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800455c:	2302      	movs	r3, #2
 800455e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004560:	e103      	b.n	800476a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <HAL_SPI_Transmit+0x52>
 8004568:	88fb      	ldrh	r3, [r7, #6]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d102      	bne.n	8004574 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004572:	e0fa      	b.n	800476a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2203      	movs	r2, #3
 8004578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	88fa      	ldrh	r2, [r7, #6]
 800458c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	88fa      	ldrh	r2, [r7, #6]
 8004592:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ba:	d107      	bne.n	80045cc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d6:	2b40      	cmp	r3, #64	; 0x40
 80045d8:	d007      	beq.n	80045ea <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f2:	d14b      	bne.n	800468c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <HAL_SPI_Transmit+0xe6>
 80045fc:	8afb      	ldrh	r3, [r7, #22]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d13e      	bne.n	8004680 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	881a      	ldrh	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	1c9a      	adds	r2, r3, #2
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004626:	e02b      	b.n	8004680 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b02      	cmp	r3, #2
 8004634:	d112      	bne.n	800465c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	881a      	ldrh	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	1c9a      	adds	r2, r3, #2
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	86da      	strh	r2, [r3, #54]	; 0x36
 800465a:	e011      	b.n	8004680 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800465c:	f7fc fed8 	bl	8001410 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d803      	bhi.n	8004674 <HAL_SPI_Transmit+0x158>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004672:	d102      	bne.n	800467a <HAL_SPI_Transmit+0x15e>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d102      	bne.n	8004680 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800467e:	e074      	b.n	800476a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1ce      	bne.n	8004628 <HAL_SPI_Transmit+0x10c>
 800468a:	e04c      	b.n	8004726 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <HAL_SPI_Transmit+0x17e>
 8004694:	8afb      	ldrh	r3, [r7, #22]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d140      	bne.n	800471c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	330c      	adds	r3, #12
 80046a4:	7812      	ldrb	r2, [r2, #0]
 80046a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046c0:	e02c      	b.n	800471c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d113      	bne.n	80046f8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	330c      	adds	r3, #12
 80046da:	7812      	ldrb	r2, [r2, #0]
 80046dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80046f6:	e011      	b.n	800471c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046f8:	f7fc fe8a 	bl	8001410 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d803      	bhi.n	8004710 <HAL_SPI_Transmit+0x1f4>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470e:	d102      	bne.n	8004716 <HAL_SPI_Transmit+0x1fa>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d102      	bne.n	800471c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	77fb      	strb	r3, [r7, #31]
          goto error;
 800471a:	e026      	b.n	800476a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1cd      	bne.n	80046c2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	6839      	ldr	r1, [r7, #0]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fba4 	bl	8004e78 <SPI_EndRxTxTransaction>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004744:	2300      	movs	r3, #0
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	77fb      	strb	r3, [r7, #31]
 8004766:	e000      	b.n	800476a <HAL_SPI_Transmit+0x24e>
  }

error:
 8004768:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800477a:	7ffb      	ldrb	r3, [r7, #31]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3720      	adds	r7, #32
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	4613      	mov	r3, r2
 8004792:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047a0:	d112      	bne.n	80047c8 <HAL_SPI_Receive+0x44>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10e      	bne.n	80047c8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2204      	movs	r2, #4
 80047ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80047b2:	88fa      	ldrh	r2, [r7, #6]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	4613      	mov	r3, r2
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	68b9      	ldr	r1, [r7, #8]
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 f8e9 	bl	8004996 <HAL_SPI_TransmitReceive>
 80047c4:	4603      	mov	r3, r0
 80047c6:	e0e2      	b.n	800498e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_SPI_Receive+0x52>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e0db      	b.n	800498e <HAL_SPI_Receive+0x20a>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047de:	f7fc fe17 	bl	8001410 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d002      	beq.n	80047f6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80047f0:	2302      	movs	r3, #2
 80047f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047f4:	e0c2      	b.n	800497c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_SPI_Receive+0x7e>
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004806:	e0b9      	b.n	800497c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2204      	movs	r2, #4
 800480c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	88fa      	ldrh	r2, [r7, #6]
 8004820:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	88fa      	ldrh	r2, [r7, #6]
 8004826:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800484e:	d107      	bne.n	8004860 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800485e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486a:	2b40      	cmp	r3, #64	; 0x40
 800486c:	d007      	beq.n	800487e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800487c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d162      	bne.n	800494c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004886:	e02e      	b.n	80048e6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b01      	cmp	r3, #1
 8004894:	d115      	bne.n	80048c2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f103 020c 	add.w	r2, r3, #12
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	7812      	ldrb	r2, [r2, #0]
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048c0:	e011      	b.n	80048e6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048c2:	f7fc fda5 	bl	8001410 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d803      	bhi.n	80048da <HAL_SPI_Receive+0x156>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d102      	bne.n	80048e0 <HAL_SPI_Receive+0x15c>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d102      	bne.n	80048e6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048e4:	e04a      	b.n	800497c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1cb      	bne.n	8004888 <HAL_SPI_Receive+0x104>
 80048f0:	e031      	b.n	8004956 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d113      	bne.n	8004928 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	b292      	uxth	r2, r2
 800490c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004912:	1c9a      	adds	r2, r3, #2
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004926:	e011      	b.n	800494c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004928:	f7fc fd72 	bl	8001410 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d803      	bhi.n	8004940 <HAL_SPI_Receive+0x1bc>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d102      	bne.n	8004946 <HAL_SPI_Receive+0x1c2>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d102      	bne.n	800494c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	75fb      	strb	r3, [r7, #23]
          goto error;
 800494a:	e017      	b.n	800497c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1cd      	bne.n	80048f2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	6839      	ldr	r1, [r7, #0]
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 fa27 	bl	8004dae <SPI_EndRxTransaction>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2220      	movs	r2, #32
 800496a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	75fb      	strb	r3, [r7, #23]
 8004978:	e000      	b.n	800497c <HAL_SPI_Receive+0x1f8>
  }

error :
 800497a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800498c:	7dfb      	ldrb	r3, [r7, #23]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b08c      	sub	sp, #48	; 0x30
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049a4:	2301      	movs	r3, #1
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x26>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e18a      	b.n	8004cd2 <HAL_SPI_TransmitReceive+0x33c>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049c4:	f7fc fd24 	bl	8001410 <HAL_GetTick>
 80049c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80049da:	887b      	ldrh	r3, [r7, #2]
 80049dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d00f      	beq.n	8004a06 <HAL_SPI_TransmitReceive+0x70>
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ec:	d107      	bne.n	80049fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <HAL_SPI_TransmitReceive+0x68>
 80049f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d003      	beq.n	8004a06 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80049fe:	2302      	movs	r3, #2
 8004a00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a04:	e15b      	b.n	8004cbe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_SPI_TransmitReceive+0x82>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_SPI_TransmitReceive+0x82>
 8004a12:	887b      	ldrh	r3, [r7, #2]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d103      	bne.n	8004a20 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a1e:	e14e      	b.n	8004cbe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d003      	beq.n	8004a34 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2205      	movs	r2, #5
 8004a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	887a      	ldrh	r2, [r7, #2]
 8004a44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	887a      	ldrh	r2, [r7, #2]
 8004a4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	887a      	ldrh	r2, [r7, #2]
 8004a56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	887a      	ldrh	r2, [r7, #2]
 8004a5c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a74:	2b40      	cmp	r3, #64	; 0x40
 8004a76:	d007      	beq.n	8004a88 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a90:	d178      	bne.n	8004b84 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_SPI_TransmitReceive+0x10a>
 8004a9a:	8b7b      	ldrh	r3, [r7, #26]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d166      	bne.n	8004b6e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa4:	881a      	ldrh	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	1c9a      	adds	r2, r3, #2
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ac4:	e053      	b.n	8004b6e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d11b      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x176>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d016      	beq.n	8004b0c <HAL_SPI_TransmitReceive+0x176>
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d113      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	881a      	ldrh	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	1c9a      	adds	r2, r3, #2
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d119      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x1b8>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d014      	beq.n	8004b4e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	b292      	uxth	r2, r2
 8004b30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	1c9a      	adds	r2, r3, #2
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b4e:	f7fc fc5f 	bl	8001410 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d807      	bhi.n	8004b6e <HAL_SPI_TransmitReceive+0x1d8>
 8004b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b64:	d003      	beq.n	8004b6e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b6c:	e0a7      	b.n	8004cbe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1a6      	bne.n	8004ac6 <HAL_SPI_TransmitReceive+0x130>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1a1      	bne.n	8004ac6 <HAL_SPI_TransmitReceive+0x130>
 8004b82:	e07c      	b.n	8004c7e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <HAL_SPI_TransmitReceive+0x1fc>
 8004b8c:	8b7b      	ldrh	r3, [r7, #26]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d16b      	bne.n	8004c6a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	330c      	adds	r3, #12
 8004b9c:	7812      	ldrb	r2, [r2, #0]
 8004b9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bb8:	e057      	b.n	8004c6a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d11c      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x26c>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d017      	beq.n	8004c02 <HAL_SPI_TransmitReceive+0x26c>
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d114      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	330c      	adds	r3, #12
 8004be2:	7812      	ldrb	r2, [r2, #0]
 8004be4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d119      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x2ae>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d014      	beq.n	8004c44 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c40:	2301      	movs	r3, #1
 8004c42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c44:	f7fc fbe4 	bl	8001410 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d803      	bhi.n	8004c5c <HAL_SPI_TransmitReceive+0x2c6>
 8004c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5a:	d102      	bne.n	8004c62 <HAL_SPI_TransmitReceive+0x2cc>
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c68:	e029      	b.n	8004cbe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1a2      	bne.n	8004bba <HAL_SPI_TransmitReceive+0x224>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d19d      	bne.n	8004bba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 f8f8 	bl	8004e78 <SPI_EndRxTxTransaction>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d006      	beq.n	8004c9c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2220      	movs	r2, #32
 8004c98:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c9a:	e010      	b.n	8004cbe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10b      	bne.n	8004cbc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	e000      	b.n	8004cbe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004cbc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3730      	adds	r7, #48	; 0x30
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	603b      	str	r3, [r7, #0]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cea:	e04c      	b.n	8004d86 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d048      	beq.n	8004d86 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004cf4:	f7fc fb8c 	bl	8001410 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d902      	bls.n	8004d0a <SPI_WaitFlagStateUntilTimeout+0x30>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d13d      	bne.n	8004d86 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d22:	d111      	bne.n	8004d48 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2c:	d004      	beq.n	8004d38 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d36:	d107      	bne.n	8004d48 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d50:	d10f      	bne.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e00f      	b.n	8004da6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	bf0c      	ite	eq
 8004d96:	2301      	moveq	r3, #1
 8004d98:	2300      	movne	r3, #0
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d1a3      	bne.n	8004cec <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b086      	sub	sp, #24
 8004db2:	af02      	add	r7, sp, #8
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc2:	d111      	bne.n	8004de8 <SPI_EndRxTransaction+0x3a>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dcc:	d004      	beq.n	8004dd8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd6:	d107      	bne.n	8004de8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004df0:	d12a      	bne.n	8004e48 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dfa:	d012      	beq.n	8004e22 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2200      	movs	r2, #0
 8004e04:	2180      	movs	r1, #128	; 0x80
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f7ff ff67 	bl	8004cda <SPI_WaitFlagStateUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d02d      	beq.n	8004e6e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	f043 0220 	orr.w	r2, r3, #32
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e026      	b.n	8004e70 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f7ff ff54 	bl	8004cda <SPI_WaitFlagStateUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01a      	beq.n	8004e6e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3c:	f043 0220 	orr.w	r2, r3, #32
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e013      	b.n	8004e70 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2101      	movs	r1, #1
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f7ff ff41 	bl	8004cda <SPI_WaitFlagStateUntilTimeout>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d007      	beq.n	8004e6e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e62:	f043 0220 	orr.w	r2, r3, #32
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e000      	b.n	8004e70 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e84:	4b1b      	ldr	r3, [pc, #108]	; (8004ef4 <SPI_EndRxTxTransaction+0x7c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a1b      	ldr	r2, [pc, #108]	; (8004ef8 <SPI_EndRxTxTransaction+0x80>)
 8004e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8e:	0d5b      	lsrs	r3, r3, #21
 8004e90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e94:	fb02 f303 	mul.w	r3, r2, r3
 8004e98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ea2:	d112      	bne.n	8004eca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2180      	movs	r1, #128	; 0x80
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f7ff ff13 	bl	8004cda <SPI_WaitFlagStateUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d016      	beq.n	8004ee8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebe:	f043 0220 	orr.w	r2, r3, #32
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e00f      	b.n	8004eea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee0:	2b80      	cmp	r3, #128	; 0x80
 8004ee2:	d0f2      	beq.n	8004eca <SPI_EndRxTxTransaction+0x52>
 8004ee4:	e000      	b.n	8004ee8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ee6:	bf00      	nop
  }

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000000 	.word	0x20000000
 8004ef8:	165e9f81 	.word	0x165e9f81

08004efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e01d      	b.n	8004f4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fc f8a4 	bl	8001070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f000 fa9e 	bl	800547c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b085      	sub	sp, #20
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0201 	orr.w	r2, r2, #1
 8004f68:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b06      	cmp	r3, #6
 8004f7a:	d007      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b082      	sub	sp, #8
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e01d      	b.n	8004fe8 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d106      	bne.n	8004fc6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7fc f835 	bl	8001030 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2202      	movs	r2, #2
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4610      	mov	r0, r2
 8004fda:	f000 fa4f 	bl	800547c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e01d      	b.n	800503e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f815 	bl	8005046 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3304      	adds	r3, #4
 800502c:	4619      	mov	r1, r3
 800502e:	4610      	mov	r0, r2
 8005030:	f000 fa24 	bl	800547c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
	...

0800505c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2201      	movs	r2, #1
 800506c:	6839      	ldr	r1, [r7, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fcaa 	bl	80059c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a10      	ldr	r2, [pc, #64]	; (80050bc <HAL_TIM_PWM_Start+0x60>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d107      	bne.n	800508e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800508c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b06      	cmp	r3, #6
 800509e:	d007      	beq.n	80050b0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40010000 	.word	0x40010000

080050c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_TIM_OC_ConfigChannel+0x1a>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e04e      	b.n	8005178 <HAL_TIM_OC_ConfigChannel+0xb8>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2202      	movs	r2, #2
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b0c      	cmp	r3, #12
 80050ee:	d839      	bhi.n	8005164 <HAL_TIM_OC_ConfigChannel+0xa4>
 80050f0:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <HAL_TIM_OC_ConfigChannel+0x38>)
 80050f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f6:	bf00      	nop
 80050f8:	0800512d 	.word	0x0800512d
 80050fc:	08005165 	.word	0x08005165
 8005100:	08005165 	.word	0x08005165
 8005104:	08005165 	.word	0x08005165
 8005108:	0800513b 	.word	0x0800513b
 800510c:	08005165 	.word	0x08005165
 8005110:	08005165 	.word	0x08005165
 8005114:	08005165 	.word	0x08005165
 8005118:	08005149 	.word	0x08005149
 800511c:	08005165 	.word	0x08005165
 8005120:	08005165 	.word	0x08005165
 8005124:	08005165 	.word	0x08005165
 8005128:	08005157 	.word	0x08005157
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fa22 	bl	800557c <TIM_OC1_SetConfig>
      break;
 8005138:	e015      	b.n	8005166 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68b9      	ldr	r1, [r7, #8]
 8005140:	4618      	mov	r0, r3
 8005142:	f000 fa81 	bl	8005648 <TIM_OC2_SetConfig>
      break;
 8005146:	e00e      	b.n	8005166 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fae6 	bl	8005720 <TIM_OC3_SetConfig>
      break;
 8005154:	e007      	b.n	8005166 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68b9      	ldr	r1, [r7, #8]
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fb49 	bl	80057f4 <TIM_OC4_SetConfig>
      break;
 8005162:	e000      	b.n	8005166 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8005164:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005196:	2302      	movs	r3, #2
 8005198:	e0b4      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x184>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b0c      	cmp	r3, #12
 80051ae:	f200 809f 	bhi.w	80052f0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80051b2:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80051b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b8:	080051ed 	.word	0x080051ed
 80051bc:	080052f1 	.word	0x080052f1
 80051c0:	080052f1 	.word	0x080052f1
 80051c4:	080052f1 	.word	0x080052f1
 80051c8:	0800522d 	.word	0x0800522d
 80051cc:	080052f1 	.word	0x080052f1
 80051d0:	080052f1 	.word	0x080052f1
 80051d4:	080052f1 	.word	0x080052f1
 80051d8:	0800526f 	.word	0x0800526f
 80051dc:	080052f1 	.word	0x080052f1
 80051e0:	080052f1 	.word	0x080052f1
 80051e4:	080052f1 	.word	0x080052f1
 80051e8:	080052af 	.word	0x080052af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f9c2 	bl	800557c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699a      	ldr	r2, [r3, #24]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0208 	orr.w	r2, r2, #8
 8005206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0204 	bic.w	r2, r2, #4
 8005216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6999      	ldr	r1, [r3, #24]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	619a      	str	r2, [r3, #24]
      break;
 800522a:	e062      	b.n	80052f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fa08 	bl	8005648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6999      	ldr	r1, [r3, #24]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	021a      	lsls	r2, r3, #8
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	619a      	str	r2, [r3, #24]
      break;
 800526c:	e041      	b.n	80052f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fa53 	bl	8005720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0208 	orr.w	r2, r2, #8
 8005288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0204 	bic.w	r2, r2, #4
 8005298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69d9      	ldr	r1, [r3, #28]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	61da      	str	r2, [r3, #28]
      break;
 80052ac:	e021      	b.n	80052f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68b9      	ldr	r1, [r7, #8]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fa9d 	bl	80057f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69da      	ldr	r2, [r3, #28]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69d9      	ldr	r1, [r3, #28]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	021a      	lsls	r2, r3, #8
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	61da      	str	r2, [r3, #28]
      break;
 80052ee:	e000      	b.n	80052f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80052f0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <HAL_TIM_ConfigClockSource+0x18>
 8005320:	2302      	movs	r3, #2
 8005322:	e0a6      	b.n	8005472 <HAL_TIM_ConfigClockSource+0x166>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005342:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800534a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b40      	cmp	r3, #64	; 0x40
 800535a:	d067      	beq.n	800542c <HAL_TIM_ConfigClockSource+0x120>
 800535c:	2b40      	cmp	r3, #64	; 0x40
 800535e:	d80b      	bhi.n	8005378 <HAL_TIM_ConfigClockSource+0x6c>
 8005360:	2b10      	cmp	r3, #16
 8005362:	d073      	beq.n	800544c <HAL_TIM_ConfigClockSource+0x140>
 8005364:	2b10      	cmp	r3, #16
 8005366:	d802      	bhi.n	800536e <HAL_TIM_ConfigClockSource+0x62>
 8005368:	2b00      	cmp	r3, #0
 800536a:	d06f      	beq.n	800544c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800536c:	e078      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800536e:	2b20      	cmp	r3, #32
 8005370:	d06c      	beq.n	800544c <HAL_TIM_ConfigClockSource+0x140>
 8005372:	2b30      	cmp	r3, #48	; 0x30
 8005374:	d06a      	beq.n	800544c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005376:	e073      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005378:	2b70      	cmp	r3, #112	; 0x70
 800537a:	d00d      	beq.n	8005398 <HAL_TIM_ConfigClockSource+0x8c>
 800537c:	2b70      	cmp	r3, #112	; 0x70
 800537e:	d804      	bhi.n	800538a <HAL_TIM_ConfigClockSource+0x7e>
 8005380:	2b50      	cmp	r3, #80	; 0x50
 8005382:	d033      	beq.n	80053ec <HAL_TIM_ConfigClockSource+0xe0>
 8005384:	2b60      	cmp	r3, #96	; 0x60
 8005386:	d041      	beq.n	800540c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005388:	e06a      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800538a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800538e:	d066      	beq.n	800545e <HAL_TIM_ConfigClockSource+0x152>
 8005390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005394:	d017      	beq.n	80053c6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005396:	e063      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6818      	ldr	r0, [r3, #0]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	6899      	ldr	r1, [r3, #8]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f000 faee 	bl	8005988 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	609a      	str	r2, [r3, #8]
      break;
 80053c4:	e04c      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6818      	ldr	r0, [r3, #0]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	6899      	ldr	r1, [r3, #8]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f000 fad7 	bl	8005988 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053e8:	609a      	str	r2, [r3, #8]
      break;
 80053ea:	e039      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	6859      	ldr	r1, [r3, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	461a      	mov	r2, r3
 80053fa:	f000 fa4b 	bl	8005894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2150      	movs	r1, #80	; 0x50
 8005404:	4618      	mov	r0, r3
 8005406:	f000 faa4 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 800540a:	e029      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	6859      	ldr	r1, [r3, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	461a      	mov	r2, r3
 800541a:	f000 fa6a 	bl	80058f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2160      	movs	r1, #96	; 0x60
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fa94 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 800542a:	e019      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6818      	ldr	r0, [r3, #0]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	6859      	ldr	r1, [r3, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	461a      	mov	r2, r3
 800543a:	f000 fa2b 	bl	8005894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2140      	movs	r1, #64	; 0x40
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fa84 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 800544a:	e009      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f000 fa7b 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 800545c:	e000      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800545e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
	...

0800547c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a34      	ldr	r2, [pc, #208]	; (8005560 <TIM_Base_SetConfig+0xe4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00f      	beq.n	80054b4 <TIM_Base_SetConfig+0x38>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549a:	d00b      	beq.n	80054b4 <TIM_Base_SetConfig+0x38>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a31      	ldr	r2, [pc, #196]	; (8005564 <TIM_Base_SetConfig+0xe8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d007      	beq.n	80054b4 <TIM_Base_SetConfig+0x38>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a30      	ldr	r2, [pc, #192]	; (8005568 <TIM_Base_SetConfig+0xec>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_Base_SetConfig+0x38>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a2f      	ldr	r2, [pc, #188]	; (800556c <TIM_Base_SetConfig+0xf0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d108      	bne.n	80054c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a25      	ldr	r2, [pc, #148]	; (8005560 <TIM_Base_SetConfig+0xe4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d01b      	beq.n	8005506 <TIM_Base_SetConfig+0x8a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d4:	d017      	beq.n	8005506 <TIM_Base_SetConfig+0x8a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a22      	ldr	r2, [pc, #136]	; (8005564 <TIM_Base_SetConfig+0xe8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d013      	beq.n	8005506 <TIM_Base_SetConfig+0x8a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a21      	ldr	r2, [pc, #132]	; (8005568 <TIM_Base_SetConfig+0xec>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00f      	beq.n	8005506 <TIM_Base_SetConfig+0x8a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a20      	ldr	r2, [pc, #128]	; (800556c <TIM_Base_SetConfig+0xf0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00b      	beq.n	8005506 <TIM_Base_SetConfig+0x8a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a1f      	ldr	r2, [pc, #124]	; (8005570 <TIM_Base_SetConfig+0xf4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d007      	beq.n	8005506 <TIM_Base_SetConfig+0x8a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a1e      	ldr	r2, [pc, #120]	; (8005574 <TIM_Base_SetConfig+0xf8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d003      	beq.n	8005506 <TIM_Base_SetConfig+0x8a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a1d      	ldr	r2, [pc, #116]	; (8005578 <TIM_Base_SetConfig+0xfc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d108      	bne.n	8005518 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4313      	orrs	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a08      	ldr	r2, [pc, #32]	; (8005560 <TIM_Base_SetConfig+0xe4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d103      	bne.n	800554c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	615a      	str	r2, [r3, #20]
}
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40010000 	.word	0x40010000
 8005564:	40000400 	.word	0x40000400
 8005568:	40000800 	.word	0x40000800
 800556c:	40000c00 	.word	0x40000c00
 8005570:	40014000 	.word	0x40014000
 8005574:	40014400 	.word	0x40014400
 8005578:	40014800 	.word	0x40014800

0800557c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	f023 0201 	bic.w	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0303 	bic.w	r3, r3, #3
 80055b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f023 0302 	bic.w	r3, r3, #2
 80055c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a1c      	ldr	r2, [pc, #112]	; (8005644 <TIM_OC1_SetConfig+0xc8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d10c      	bne.n	80055f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f023 0308 	bic.w	r3, r3, #8
 80055de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f023 0304 	bic.w	r3, r3, #4
 80055f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a13      	ldr	r2, [pc, #76]	; (8005644 <TIM_OC1_SetConfig+0xc8>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d111      	bne.n	800561e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	621a      	str	r2, [r3, #32]
}
 8005638:	bf00      	nop
 800563a:	371c      	adds	r7, #28
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	40010000 	.word	0x40010000

08005648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f023 0210 	bic.w	r2, r3, #16
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f023 0320 	bic.w	r3, r3, #32
 8005692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a1e      	ldr	r2, [pc, #120]	; (800571c <TIM_OC2_SetConfig+0xd4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d10d      	bne.n	80056c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a15      	ldr	r2, [pc, #84]	; (800571c <TIM_OC2_SetConfig+0xd4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d113      	bne.n	80056f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40010000 	.word	0x40010000

08005720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0303 	bic.w	r3, r3, #3
 8005756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	021b      	lsls	r3, r3, #8
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a1d      	ldr	r2, [pc, #116]	; (80057f0 <TIM_OC3_SetConfig+0xd0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d10d      	bne.n	800579a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a14      	ldr	r2, [pc, #80]	; (80057f0 <TIM_OC3_SetConfig+0xd0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d113      	bne.n	80057ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	621a      	str	r2, [r3, #32]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	40010000 	.word	0x40010000

080057f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800582a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4313      	orrs	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800583e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	031b      	lsls	r3, r3, #12
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a10      	ldr	r2, [pc, #64]	; (8005890 <TIM_OC4_SetConfig+0x9c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d109      	bne.n	8005868 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800585a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	019b      	lsls	r3, r3, #6
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	621a      	str	r2, [r3, #32]
}
 8005882:	bf00      	nop
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40010000 	.word	0x40010000

08005894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f023 0201 	bic.w	r2, r3, #1
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f023 030a 	bic.w	r3, r3, #10
 80058d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	621a      	str	r2, [r3, #32]
}
 80058e6:	bf00      	nop
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b087      	sub	sp, #28
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	f023 0210 	bic.w	r2, r3, #16
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800591c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	031b      	lsls	r3, r3, #12
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4313      	orrs	r3, r2
 8005926:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800592e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	621a      	str	r2, [r3, #32]
}
 8005946:	bf00      	nop
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005952:	b480      	push	{r7}
 8005954:	b085      	sub	sp, #20
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	f043 0307 	orr.w	r3, r3, #7
 8005974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	609a      	str	r2, [r3, #8]
}
 800597c:	bf00      	nop
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	021a      	lsls	r2, r3, #8
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	609a      	str	r2, [r3, #8]
}
 80059bc:	bf00      	nop
 80059be:	371c      	adds	r7, #28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 031f 	and.w	r3, r3, #31
 80059da:	2201      	movs	r2, #1
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a1a      	ldr	r2, [r3, #32]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	43db      	mvns	r3, r3
 80059ea:	401a      	ands	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a1a      	ldr	r2, [r3, #32]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005a00:	431a      	orrs	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	621a      	str	r2, [r3, #32]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
	...

08005a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e050      	b.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1c      	ldr	r2, [pc, #112]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d018      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a78:	d013      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a18      	ldr	r2, [pc, #96]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00e      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a16      	ldr	r2, [pc, #88]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a15      	ldr	r2, [pc, #84]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a13      	ldr	r2, [pc, #76]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d10c      	bne.n	8005abc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40000400 	.word	0x40000400
 8005ae4:	40000800 	.word	0x40000800
 8005ae8:	40000c00 	.word	0x40000c00
 8005aec:	40014000 	.word	0x40014000

08005af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e03f      	b.n	8005b82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fb fb06 	bl	8001128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2224      	movs	r2, #36	; 0x24
 8005b20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f829 	bl	8005b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695a      	ldr	r2, [r3, #20]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005bce:	f023 030c 	bic.w	r3, r3, #12
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	68f9      	ldr	r1, [r7, #12]
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699a      	ldr	r2, [r3, #24]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bfa:	f040 818b 	bne.w	8005f14 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4ac1      	ldr	r2, [pc, #772]	; (8005f08 <UART_SetConfig+0x37c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d005      	beq.n	8005c14 <UART_SetConfig+0x88>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4abf      	ldr	r2, [pc, #764]	; (8005f0c <UART_SetConfig+0x380>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	f040 80bd 	bne.w	8005d8e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c14:	f7fe fc0a 	bl	800442c <HAL_RCC_GetPCLK2Freq>
 8005c18:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	461d      	mov	r5, r3
 8005c1e:	f04f 0600 	mov.w	r6, #0
 8005c22:	46a8      	mov	r8, r5
 8005c24:	46b1      	mov	r9, r6
 8005c26:	eb18 0308 	adds.w	r3, r8, r8
 8005c2a:	eb49 0409 	adc.w	r4, r9, r9
 8005c2e:	4698      	mov	r8, r3
 8005c30:	46a1      	mov	r9, r4
 8005c32:	eb18 0805 	adds.w	r8, r8, r5
 8005c36:	eb49 0906 	adc.w	r9, r9, r6
 8005c3a:	f04f 0100 	mov.w	r1, #0
 8005c3e:	f04f 0200 	mov.w	r2, #0
 8005c42:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c46:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c4a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c4e:	4688      	mov	r8, r1
 8005c50:	4691      	mov	r9, r2
 8005c52:	eb18 0005 	adds.w	r0, r8, r5
 8005c56:	eb49 0106 	adc.w	r1, r9, r6
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	461d      	mov	r5, r3
 8005c60:	f04f 0600 	mov.w	r6, #0
 8005c64:	196b      	adds	r3, r5, r5
 8005c66:	eb46 0406 	adc.w	r4, r6, r6
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	4623      	mov	r3, r4
 8005c6e:	f7fa fabb 	bl	80001e8 <__aeabi_uldivmod>
 8005c72:	4603      	mov	r3, r0
 8005c74:	460c      	mov	r4, r1
 8005c76:	461a      	mov	r2, r3
 8005c78:	4ba5      	ldr	r3, [pc, #660]	; (8005f10 <UART_SetConfig+0x384>)
 8005c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	461d      	mov	r5, r3
 8005c88:	f04f 0600 	mov.w	r6, #0
 8005c8c:	46a9      	mov	r9, r5
 8005c8e:	46b2      	mov	sl, r6
 8005c90:	eb19 0309 	adds.w	r3, r9, r9
 8005c94:	eb4a 040a 	adc.w	r4, sl, sl
 8005c98:	4699      	mov	r9, r3
 8005c9a:	46a2      	mov	sl, r4
 8005c9c:	eb19 0905 	adds.w	r9, r9, r5
 8005ca0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ca4:	f04f 0100 	mov.w	r1, #0
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cb8:	4689      	mov	r9, r1
 8005cba:	4692      	mov	sl, r2
 8005cbc:	eb19 0005 	adds.w	r0, r9, r5
 8005cc0:	eb4a 0106 	adc.w	r1, sl, r6
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	461d      	mov	r5, r3
 8005cca:	f04f 0600 	mov.w	r6, #0
 8005cce:	196b      	adds	r3, r5, r5
 8005cd0:	eb46 0406 	adc.w	r4, r6, r6
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	4623      	mov	r3, r4
 8005cd8:	f7fa fa86 	bl	80001e8 <__aeabi_uldivmod>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	4b8b      	ldr	r3, [pc, #556]	; (8005f10 <UART_SetConfig+0x384>)
 8005ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	2164      	movs	r1, #100	; 0x64
 8005cec:	fb01 f303 	mul.w	r3, r1, r3
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	3332      	adds	r3, #50	; 0x32
 8005cf6:	4a86      	ldr	r2, [pc, #536]	; (8005f10 <UART_SetConfig+0x384>)
 8005cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfc:	095b      	lsrs	r3, r3, #5
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d04:	4498      	add	r8, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	461d      	mov	r5, r3
 8005d0a:	f04f 0600 	mov.w	r6, #0
 8005d0e:	46a9      	mov	r9, r5
 8005d10:	46b2      	mov	sl, r6
 8005d12:	eb19 0309 	adds.w	r3, r9, r9
 8005d16:	eb4a 040a 	adc.w	r4, sl, sl
 8005d1a:	4699      	mov	r9, r3
 8005d1c:	46a2      	mov	sl, r4
 8005d1e:	eb19 0905 	adds.w	r9, r9, r5
 8005d22:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d26:	f04f 0100 	mov.w	r1, #0
 8005d2a:	f04f 0200 	mov.w	r2, #0
 8005d2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d3a:	4689      	mov	r9, r1
 8005d3c:	4692      	mov	sl, r2
 8005d3e:	eb19 0005 	adds.w	r0, r9, r5
 8005d42:	eb4a 0106 	adc.w	r1, sl, r6
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	461d      	mov	r5, r3
 8005d4c:	f04f 0600 	mov.w	r6, #0
 8005d50:	196b      	adds	r3, r5, r5
 8005d52:	eb46 0406 	adc.w	r4, r6, r6
 8005d56:	461a      	mov	r2, r3
 8005d58:	4623      	mov	r3, r4
 8005d5a:	f7fa fa45 	bl	80001e8 <__aeabi_uldivmod>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	460c      	mov	r4, r1
 8005d62:	461a      	mov	r2, r3
 8005d64:	4b6a      	ldr	r3, [pc, #424]	; (8005f10 <UART_SetConfig+0x384>)
 8005d66:	fba3 1302 	umull	r1, r3, r3, r2
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	2164      	movs	r1, #100	; 0x64
 8005d6e:	fb01 f303 	mul.w	r3, r1, r3
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	3332      	adds	r3, #50	; 0x32
 8005d78:	4a65      	ldr	r2, [pc, #404]	; (8005f10 <UART_SetConfig+0x384>)
 8005d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	f003 0207 	and.w	r2, r3, #7
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4442      	add	r2, r8
 8005d8a:	609a      	str	r2, [r3, #8]
 8005d8c:	e26f      	b.n	800626e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d8e:	f7fe fb39 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 8005d92:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	461d      	mov	r5, r3
 8005d98:	f04f 0600 	mov.w	r6, #0
 8005d9c:	46a8      	mov	r8, r5
 8005d9e:	46b1      	mov	r9, r6
 8005da0:	eb18 0308 	adds.w	r3, r8, r8
 8005da4:	eb49 0409 	adc.w	r4, r9, r9
 8005da8:	4698      	mov	r8, r3
 8005daa:	46a1      	mov	r9, r4
 8005dac:	eb18 0805 	adds.w	r8, r8, r5
 8005db0:	eb49 0906 	adc.w	r9, r9, r6
 8005db4:	f04f 0100 	mov.w	r1, #0
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005dc0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005dc4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005dc8:	4688      	mov	r8, r1
 8005dca:	4691      	mov	r9, r2
 8005dcc:	eb18 0005 	adds.w	r0, r8, r5
 8005dd0:	eb49 0106 	adc.w	r1, r9, r6
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	461d      	mov	r5, r3
 8005dda:	f04f 0600 	mov.w	r6, #0
 8005dde:	196b      	adds	r3, r5, r5
 8005de0:	eb46 0406 	adc.w	r4, r6, r6
 8005de4:	461a      	mov	r2, r3
 8005de6:	4623      	mov	r3, r4
 8005de8:	f7fa f9fe 	bl	80001e8 <__aeabi_uldivmod>
 8005dec:	4603      	mov	r3, r0
 8005dee:	460c      	mov	r4, r1
 8005df0:	461a      	mov	r2, r3
 8005df2:	4b47      	ldr	r3, [pc, #284]	; (8005f10 <UART_SetConfig+0x384>)
 8005df4:	fba3 2302 	umull	r2, r3, r3, r2
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	461d      	mov	r5, r3
 8005e02:	f04f 0600 	mov.w	r6, #0
 8005e06:	46a9      	mov	r9, r5
 8005e08:	46b2      	mov	sl, r6
 8005e0a:	eb19 0309 	adds.w	r3, r9, r9
 8005e0e:	eb4a 040a 	adc.w	r4, sl, sl
 8005e12:	4699      	mov	r9, r3
 8005e14:	46a2      	mov	sl, r4
 8005e16:	eb19 0905 	adds.w	r9, r9, r5
 8005e1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e1e:	f04f 0100 	mov.w	r1, #0
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e32:	4689      	mov	r9, r1
 8005e34:	4692      	mov	sl, r2
 8005e36:	eb19 0005 	adds.w	r0, r9, r5
 8005e3a:	eb4a 0106 	adc.w	r1, sl, r6
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	461d      	mov	r5, r3
 8005e44:	f04f 0600 	mov.w	r6, #0
 8005e48:	196b      	adds	r3, r5, r5
 8005e4a:	eb46 0406 	adc.w	r4, r6, r6
 8005e4e:	461a      	mov	r2, r3
 8005e50:	4623      	mov	r3, r4
 8005e52:	f7fa f9c9 	bl	80001e8 <__aeabi_uldivmod>
 8005e56:	4603      	mov	r3, r0
 8005e58:	460c      	mov	r4, r1
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	4b2c      	ldr	r3, [pc, #176]	; (8005f10 <UART_SetConfig+0x384>)
 8005e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	2164      	movs	r1, #100	; 0x64
 8005e66:	fb01 f303 	mul.w	r3, r1, r3
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	3332      	adds	r3, #50	; 0x32
 8005e70:	4a27      	ldr	r2, [pc, #156]	; (8005f10 <UART_SetConfig+0x384>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	095b      	lsrs	r3, r3, #5
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e7e:	4498      	add	r8, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	461d      	mov	r5, r3
 8005e84:	f04f 0600 	mov.w	r6, #0
 8005e88:	46a9      	mov	r9, r5
 8005e8a:	46b2      	mov	sl, r6
 8005e8c:	eb19 0309 	adds.w	r3, r9, r9
 8005e90:	eb4a 040a 	adc.w	r4, sl, sl
 8005e94:	4699      	mov	r9, r3
 8005e96:	46a2      	mov	sl, r4
 8005e98:	eb19 0905 	adds.w	r9, r9, r5
 8005e9c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ea0:	f04f 0100 	mov.w	r1, #0
 8005ea4:	f04f 0200 	mov.w	r2, #0
 8005ea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005eb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005eb4:	4689      	mov	r9, r1
 8005eb6:	4692      	mov	sl, r2
 8005eb8:	eb19 0005 	adds.w	r0, r9, r5
 8005ebc:	eb4a 0106 	adc.w	r1, sl, r6
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	461d      	mov	r5, r3
 8005ec6:	f04f 0600 	mov.w	r6, #0
 8005eca:	196b      	adds	r3, r5, r5
 8005ecc:	eb46 0406 	adc.w	r4, r6, r6
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4623      	mov	r3, r4
 8005ed4:	f7fa f988 	bl	80001e8 <__aeabi_uldivmod>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	460c      	mov	r4, r1
 8005edc:	461a      	mov	r2, r3
 8005ede:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <UART_SetConfig+0x384>)
 8005ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	2164      	movs	r1, #100	; 0x64
 8005ee8:	fb01 f303 	mul.w	r3, r1, r3
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	3332      	adds	r3, #50	; 0x32
 8005ef2:	4a07      	ldr	r2, [pc, #28]	; (8005f10 <UART_SetConfig+0x384>)
 8005ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	f003 0207 	and.w	r2, r3, #7
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4442      	add	r2, r8
 8005f04:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005f06:	e1b2      	b.n	800626e <UART_SetConfig+0x6e2>
 8005f08:	40011000 	.word	0x40011000
 8005f0c:	40011400 	.word	0x40011400
 8005f10:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4ad7      	ldr	r2, [pc, #860]	; (8006278 <UART_SetConfig+0x6ec>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d005      	beq.n	8005f2a <UART_SetConfig+0x39e>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4ad6      	ldr	r2, [pc, #856]	; (800627c <UART_SetConfig+0x6f0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	f040 80d1 	bne.w	80060cc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f2a:	f7fe fa7f 	bl	800442c <HAL_RCC_GetPCLK2Freq>
 8005f2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	469a      	mov	sl, r3
 8005f34:	f04f 0b00 	mov.w	fp, #0
 8005f38:	46d0      	mov	r8, sl
 8005f3a:	46d9      	mov	r9, fp
 8005f3c:	eb18 0308 	adds.w	r3, r8, r8
 8005f40:	eb49 0409 	adc.w	r4, r9, r9
 8005f44:	4698      	mov	r8, r3
 8005f46:	46a1      	mov	r9, r4
 8005f48:	eb18 080a 	adds.w	r8, r8, sl
 8005f4c:	eb49 090b 	adc.w	r9, r9, fp
 8005f50:	f04f 0100 	mov.w	r1, #0
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f64:	4688      	mov	r8, r1
 8005f66:	4691      	mov	r9, r2
 8005f68:	eb1a 0508 	adds.w	r5, sl, r8
 8005f6c:	eb4b 0609 	adc.w	r6, fp, r9
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	4619      	mov	r1, r3
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	f04f 0400 	mov.w	r4, #0
 8005f82:	0094      	lsls	r4, r2, #2
 8005f84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f88:	008b      	lsls	r3, r1, #2
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	4623      	mov	r3, r4
 8005f8e:	4628      	mov	r0, r5
 8005f90:	4631      	mov	r1, r6
 8005f92:	f7fa f929 	bl	80001e8 <__aeabi_uldivmod>
 8005f96:	4603      	mov	r3, r0
 8005f98:	460c      	mov	r4, r1
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	4bb8      	ldr	r3, [pc, #736]	; (8006280 <UART_SetConfig+0x6f4>)
 8005f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	469b      	mov	fp, r3
 8005fac:	f04f 0c00 	mov.w	ip, #0
 8005fb0:	46d9      	mov	r9, fp
 8005fb2:	46e2      	mov	sl, ip
 8005fb4:	eb19 0309 	adds.w	r3, r9, r9
 8005fb8:	eb4a 040a 	adc.w	r4, sl, sl
 8005fbc:	4699      	mov	r9, r3
 8005fbe:	46a2      	mov	sl, r4
 8005fc0:	eb19 090b 	adds.w	r9, r9, fp
 8005fc4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005fc8:	f04f 0100 	mov.w	r1, #0
 8005fcc:	f04f 0200 	mov.w	r2, #0
 8005fd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fdc:	4689      	mov	r9, r1
 8005fde:	4692      	mov	sl, r2
 8005fe0:	eb1b 0509 	adds.w	r5, fp, r9
 8005fe4:	eb4c 060a 	adc.w	r6, ip, sl
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	4619      	mov	r1, r3
 8005fee:	f04f 0200 	mov.w	r2, #0
 8005ff2:	f04f 0300 	mov.w	r3, #0
 8005ff6:	f04f 0400 	mov.w	r4, #0
 8005ffa:	0094      	lsls	r4, r2, #2
 8005ffc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006000:	008b      	lsls	r3, r1, #2
 8006002:	461a      	mov	r2, r3
 8006004:	4623      	mov	r3, r4
 8006006:	4628      	mov	r0, r5
 8006008:	4631      	mov	r1, r6
 800600a:	f7fa f8ed 	bl	80001e8 <__aeabi_uldivmod>
 800600e:	4603      	mov	r3, r0
 8006010:	460c      	mov	r4, r1
 8006012:	461a      	mov	r2, r3
 8006014:	4b9a      	ldr	r3, [pc, #616]	; (8006280 <UART_SetConfig+0x6f4>)
 8006016:	fba3 1302 	umull	r1, r3, r3, r2
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	2164      	movs	r1, #100	; 0x64
 800601e:	fb01 f303 	mul.w	r3, r1, r3
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	3332      	adds	r3, #50	; 0x32
 8006028:	4a95      	ldr	r2, [pc, #596]	; (8006280 <UART_SetConfig+0x6f4>)
 800602a:	fba2 2303 	umull	r2, r3, r2, r3
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006034:	4498      	add	r8, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	469b      	mov	fp, r3
 800603a:	f04f 0c00 	mov.w	ip, #0
 800603e:	46d9      	mov	r9, fp
 8006040:	46e2      	mov	sl, ip
 8006042:	eb19 0309 	adds.w	r3, r9, r9
 8006046:	eb4a 040a 	adc.w	r4, sl, sl
 800604a:	4699      	mov	r9, r3
 800604c:	46a2      	mov	sl, r4
 800604e:	eb19 090b 	adds.w	r9, r9, fp
 8006052:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006056:	f04f 0100 	mov.w	r1, #0
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006062:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006066:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800606a:	4689      	mov	r9, r1
 800606c:	4692      	mov	sl, r2
 800606e:	eb1b 0509 	adds.w	r5, fp, r9
 8006072:	eb4c 060a 	adc.w	r6, ip, sl
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	4619      	mov	r1, r3
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	f04f 0400 	mov.w	r4, #0
 8006088:	0094      	lsls	r4, r2, #2
 800608a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800608e:	008b      	lsls	r3, r1, #2
 8006090:	461a      	mov	r2, r3
 8006092:	4623      	mov	r3, r4
 8006094:	4628      	mov	r0, r5
 8006096:	4631      	mov	r1, r6
 8006098:	f7fa f8a6 	bl	80001e8 <__aeabi_uldivmod>
 800609c:	4603      	mov	r3, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	461a      	mov	r2, r3
 80060a2:	4b77      	ldr	r3, [pc, #476]	; (8006280 <UART_SetConfig+0x6f4>)
 80060a4:	fba3 1302 	umull	r1, r3, r3, r2
 80060a8:	095b      	lsrs	r3, r3, #5
 80060aa:	2164      	movs	r1, #100	; 0x64
 80060ac:	fb01 f303 	mul.w	r3, r1, r3
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	3332      	adds	r3, #50	; 0x32
 80060b6:	4a72      	ldr	r2, [pc, #456]	; (8006280 <UART_SetConfig+0x6f4>)
 80060b8:	fba2 2303 	umull	r2, r3, r2, r3
 80060bc:	095b      	lsrs	r3, r3, #5
 80060be:	f003 020f 	and.w	r2, r3, #15
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4442      	add	r2, r8
 80060c8:	609a      	str	r2, [r3, #8]
 80060ca:	e0d0      	b.n	800626e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80060cc:	f7fe f99a 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 80060d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	469a      	mov	sl, r3
 80060d6:	f04f 0b00 	mov.w	fp, #0
 80060da:	46d0      	mov	r8, sl
 80060dc:	46d9      	mov	r9, fp
 80060de:	eb18 0308 	adds.w	r3, r8, r8
 80060e2:	eb49 0409 	adc.w	r4, r9, r9
 80060e6:	4698      	mov	r8, r3
 80060e8:	46a1      	mov	r9, r4
 80060ea:	eb18 080a 	adds.w	r8, r8, sl
 80060ee:	eb49 090b 	adc.w	r9, r9, fp
 80060f2:	f04f 0100 	mov.w	r1, #0
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006102:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006106:	4688      	mov	r8, r1
 8006108:	4691      	mov	r9, r2
 800610a:	eb1a 0508 	adds.w	r5, sl, r8
 800610e:	eb4b 0609 	adc.w	r6, fp, r9
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	4619      	mov	r1, r3
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	f04f 0400 	mov.w	r4, #0
 8006124:	0094      	lsls	r4, r2, #2
 8006126:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800612a:	008b      	lsls	r3, r1, #2
 800612c:	461a      	mov	r2, r3
 800612e:	4623      	mov	r3, r4
 8006130:	4628      	mov	r0, r5
 8006132:	4631      	mov	r1, r6
 8006134:	f7fa f858 	bl	80001e8 <__aeabi_uldivmod>
 8006138:	4603      	mov	r3, r0
 800613a:	460c      	mov	r4, r1
 800613c:	461a      	mov	r2, r3
 800613e:	4b50      	ldr	r3, [pc, #320]	; (8006280 <UART_SetConfig+0x6f4>)
 8006140:	fba3 2302 	umull	r2, r3, r3, r2
 8006144:	095b      	lsrs	r3, r3, #5
 8006146:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	469b      	mov	fp, r3
 800614e:	f04f 0c00 	mov.w	ip, #0
 8006152:	46d9      	mov	r9, fp
 8006154:	46e2      	mov	sl, ip
 8006156:	eb19 0309 	adds.w	r3, r9, r9
 800615a:	eb4a 040a 	adc.w	r4, sl, sl
 800615e:	4699      	mov	r9, r3
 8006160:	46a2      	mov	sl, r4
 8006162:	eb19 090b 	adds.w	r9, r9, fp
 8006166:	eb4a 0a0c 	adc.w	sl, sl, ip
 800616a:	f04f 0100 	mov.w	r1, #0
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006176:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800617a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800617e:	4689      	mov	r9, r1
 8006180:	4692      	mov	sl, r2
 8006182:	eb1b 0509 	adds.w	r5, fp, r9
 8006186:	eb4c 060a 	adc.w	r6, ip, sl
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	4619      	mov	r1, r3
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	f04f 0300 	mov.w	r3, #0
 8006198:	f04f 0400 	mov.w	r4, #0
 800619c:	0094      	lsls	r4, r2, #2
 800619e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061a2:	008b      	lsls	r3, r1, #2
 80061a4:	461a      	mov	r2, r3
 80061a6:	4623      	mov	r3, r4
 80061a8:	4628      	mov	r0, r5
 80061aa:	4631      	mov	r1, r6
 80061ac:	f7fa f81c 	bl	80001e8 <__aeabi_uldivmod>
 80061b0:	4603      	mov	r3, r0
 80061b2:	460c      	mov	r4, r1
 80061b4:	461a      	mov	r2, r3
 80061b6:	4b32      	ldr	r3, [pc, #200]	; (8006280 <UART_SetConfig+0x6f4>)
 80061b8:	fba3 1302 	umull	r1, r3, r3, r2
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	2164      	movs	r1, #100	; 0x64
 80061c0:	fb01 f303 	mul.w	r3, r1, r3
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	3332      	adds	r3, #50	; 0x32
 80061ca:	4a2d      	ldr	r2, [pc, #180]	; (8006280 <UART_SetConfig+0x6f4>)
 80061cc:	fba2 2303 	umull	r2, r3, r2, r3
 80061d0:	095b      	lsrs	r3, r3, #5
 80061d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061d6:	4498      	add	r8, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	469b      	mov	fp, r3
 80061dc:	f04f 0c00 	mov.w	ip, #0
 80061e0:	46d9      	mov	r9, fp
 80061e2:	46e2      	mov	sl, ip
 80061e4:	eb19 0309 	adds.w	r3, r9, r9
 80061e8:	eb4a 040a 	adc.w	r4, sl, sl
 80061ec:	4699      	mov	r9, r3
 80061ee:	46a2      	mov	sl, r4
 80061f0:	eb19 090b 	adds.w	r9, r9, fp
 80061f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061f8:	f04f 0100 	mov.w	r1, #0
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006204:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006208:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800620c:	4689      	mov	r9, r1
 800620e:	4692      	mov	sl, r2
 8006210:	eb1b 0509 	adds.w	r5, fp, r9
 8006214:	eb4c 060a 	adc.w	r6, ip, sl
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	4619      	mov	r1, r3
 800621e:	f04f 0200 	mov.w	r2, #0
 8006222:	f04f 0300 	mov.w	r3, #0
 8006226:	f04f 0400 	mov.w	r4, #0
 800622a:	0094      	lsls	r4, r2, #2
 800622c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006230:	008b      	lsls	r3, r1, #2
 8006232:	461a      	mov	r2, r3
 8006234:	4623      	mov	r3, r4
 8006236:	4628      	mov	r0, r5
 8006238:	4631      	mov	r1, r6
 800623a:	f7f9 ffd5 	bl	80001e8 <__aeabi_uldivmod>
 800623e:	4603      	mov	r3, r0
 8006240:	460c      	mov	r4, r1
 8006242:	461a      	mov	r2, r3
 8006244:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <UART_SetConfig+0x6f4>)
 8006246:	fba3 1302 	umull	r1, r3, r3, r2
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	2164      	movs	r1, #100	; 0x64
 800624e:	fb01 f303 	mul.w	r3, r1, r3
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	3332      	adds	r3, #50	; 0x32
 8006258:	4a09      	ldr	r2, [pc, #36]	; (8006280 <UART_SetConfig+0x6f4>)
 800625a:	fba2 2303 	umull	r2, r3, r2, r3
 800625e:	095b      	lsrs	r3, r3, #5
 8006260:	f003 020f 	and.w	r2, r3, #15
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4442      	add	r2, r8
 800626a:	609a      	str	r2, [r3, #8]
}
 800626c:	e7ff      	b.n	800626e <UART_SetConfig+0x6e2>
 800626e:	bf00      	nop
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006278:	40011000 	.word	0x40011000
 800627c:	40011400 	.word	0x40011400
 8006280:	51eb851f 	.word	0x51eb851f

08006284 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006284:	b084      	sub	sp, #16
 8006286:	b580      	push	{r7, lr}
 8006288:	b084      	sub	sp, #16
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	f107 001c 	add.w	r0, r7, #28
 8006292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	2b01      	cmp	r3, #1
 800629a:	d122      	bne.n	80062e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80062b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80062c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d105      	bne.n	80062d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f001 fac6 	bl	8007868 <USB_CoreReset>
 80062dc:	4603      	mov	r3, r0
 80062de:	73fb      	strb	r3, [r7, #15]
 80062e0:	e01a      	b.n	8006318 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f001 faba 	bl	8007868 <USB_CoreReset>
 80062f4:	4603      	mov	r3, r0
 80062f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006302:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	639a      	str	r2, [r3, #56]	; 0x38
 800630a:	e005      	b.n	8006318 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	2b01      	cmp	r3, #1
 800631c:	d10b      	bne.n	8006336 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f043 0206 	orr.w	r2, r3, #6
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f043 0220 	orr.w	r2, r3, #32
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006336:	7bfb      	ldrb	r3, [r7, #15]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006342:	b004      	add	sp, #16
 8006344:	4770      	bx	lr
	...

08006348 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	4613      	mov	r3, r2
 8006354:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006356:	79fb      	ldrb	r3, [r7, #7]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d165      	bne.n	8006428 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4a41      	ldr	r2, [pc, #260]	; (8006464 <USB_SetTurnaroundTime+0x11c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d906      	bls.n	8006372 <USB_SetTurnaroundTime+0x2a>
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4a40      	ldr	r2, [pc, #256]	; (8006468 <USB_SetTurnaroundTime+0x120>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d802      	bhi.n	8006372 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800636c:	230f      	movs	r3, #15
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	e062      	b.n	8006438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	4a3c      	ldr	r2, [pc, #240]	; (8006468 <USB_SetTurnaroundTime+0x120>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d906      	bls.n	8006388 <USB_SetTurnaroundTime+0x40>
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	4a3b      	ldr	r2, [pc, #236]	; (800646c <USB_SetTurnaroundTime+0x124>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d802      	bhi.n	8006388 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006382:	230e      	movs	r3, #14
 8006384:	617b      	str	r3, [r7, #20]
 8006386:	e057      	b.n	8006438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	4a38      	ldr	r2, [pc, #224]	; (800646c <USB_SetTurnaroundTime+0x124>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d906      	bls.n	800639e <USB_SetTurnaroundTime+0x56>
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4a37      	ldr	r2, [pc, #220]	; (8006470 <USB_SetTurnaroundTime+0x128>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d802      	bhi.n	800639e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006398:	230d      	movs	r3, #13
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	e04c      	b.n	8006438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	4a33      	ldr	r2, [pc, #204]	; (8006470 <USB_SetTurnaroundTime+0x128>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d906      	bls.n	80063b4 <USB_SetTurnaroundTime+0x6c>
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	4a32      	ldr	r2, [pc, #200]	; (8006474 <USB_SetTurnaroundTime+0x12c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d802      	bhi.n	80063b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80063ae:	230c      	movs	r3, #12
 80063b0:	617b      	str	r3, [r7, #20]
 80063b2:	e041      	b.n	8006438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4a2f      	ldr	r2, [pc, #188]	; (8006474 <USB_SetTurnaroundTime+0x12c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d906      	bls.n	80063ca <USB_SetTurnaroundTime+0x82>
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4a2e      	ldr	r2, [pc, #184]	; (8006478 <USB_SetTurnaroundTime+0x130>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d802      	bhi.n	80063ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80063c4:	230b      	movs	r3, #11
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	e036      	b.n	8006438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	4a2a      	ldr	r2, [pc, #168]	; (8006478 <USB_SetTurnaroundTime+0x130>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d906      	bls.n	80063e0 <USB_SetTurnaroundTime+0x98>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4a29      	ldr	r2, [pc, #164]	; (800647c <USB_SetTurnaroundTime+0x134>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d802      	bhi.n	80063e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80063da:	230a      	movs	r3, #10
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	e02b      	b.n	8006438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4a26      	ldr	r2, [pc, #152]	; (800647c <USB_SetTurnaroundTime+0x134>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d906      	bls.n	80063f6 <USB_SetTurnaroundTime+0xae>
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4a25      	ldr	r2, [pc, #148]	; (8006480 <USB_SetTurnaroundTime+0x138>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d802      	bhi.n	80063f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80063f0:	2309      	movs	r3, #9
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	e020      	b.n	8006438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	4a21      	ldr	r2, [pc, #132]	; (8006480 <USB_SetTurnaroundTime+0x138>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d906      	bls.n	800640c <USB_SetTurnaroundTime+0xc4>
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	4a20      	ldr	r2, [pc, #128]	; (8006484 <USB_SetTurnaroundTime+0x13c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d802      	bhi.n	800640c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006406:	2308      	movs	r3, #8
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	e015      	b.n	8006438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4a1d      	ldr	r2, [pc, #116]	; (8006484 <USB_SetTurnaroundTime+0x13c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d906      	bls.n	8006422 <USB_SetTurnaroundTime+0xda>
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4a1c      	ldr	r2, [pc, #112]	; (8006488 <USB_SetTurnaroundTime+0x140>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d802      	bhi.n	8006422 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800641c:	2307      	movs	r3, #7
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	e00a      	b.n	8006438 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006422:	2306      	movs	r3, #6
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	e007      	b.n	8006438 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d102      	bne.n	8006434 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800642e:	2309      	movs	r3, #9
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	e001      	b.n	8006438 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006434:	2309      	movs	r3, #9
 8006436:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	029b      	lsls	r3, r3, #10
 800644c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006450:	431a      	orrs	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	371c      	adds	r7, #28
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	00d8acbf 	.word	0x00d8acbf
 8006468:	00e4e1bf 	.word	0x00e4e1bf
 800646c:	00f423ff 	.word	0x00f423ff
 8006470:	0106737f 	.word	0x0106737f
 8006474:	011a499f 	.word	0x011a499f
 8006478:	01312cff 	.word	0x01312cff
 800647c:	014ca43f 	.word	0x014ca43f
 8006480:	016e35ff 	.word	0x016e35ff
 8006484:	01a6ab1f 	.word	0x01a6ab1f
 8006488:	01e847ff 	.word	0x01e847ff

0800648c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f043 0201 	orr.w	r2, r3, #1
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f023 0201 	bic.w	r2, r3, #1
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d106      	bne.n	80064fc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60da      	str	r2, [r3, #12]
 80064fa:	e00b      	b.n	8006514 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d106      	bne.n	8006510 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	60da      	str	r2, [r3, #12]
 800650e:	e001      	b.n	8006514 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e003      	b.n	800651c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006514:	2032      	movs	r0, #50	; 0x32
 8006516:	f7fa ff87 	bl	8001428 <HAL_Delay>

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006524:	b084      	sub	sp, #16
 8006526:	b580      	push	{r7, lr}
 8006528:	b086      	sub	sp, #24
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800653e:	2300      	movs	r3, #0
 8006540:	613b      	str	r3, [r7, #16]
 8006542:	e009      	b.n	8006558 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	3340      	adds	r3, #64	; 0x40
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	2200      	movs	r2, #0
 8006550:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	3301      	adds	r3, #1
 8006556:	613b      	str	r3, [r7, #16]
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	2b0e      	cmp	r3, #14
 800655c:	d9f2      	bls.n	8006544 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800655e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006560:	2b00      	cmp	r3, #0
 8006562:	d11c      	bne.n	800659e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006572:	f043 0302 	orr.w	r3, r3, #2
 8006576:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006594:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	639a      	str	r2, [r3, #56]	; 0x38
 800659c:	e00b      	b.n	80065b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065bc:	461a      	mov	r2, r3
 80065be:	2300      	movs	r3, #0
 80065c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c8:	4619      	mov	r1, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d0:	461a      	mov	r2, r3
 80065d2:	680b      	ldr	r3, [r1, #0]
 80065d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d10c      	bne.n	80065f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065e2:	2100      	movs	r1, #0
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f949 	bl	800687c <USB_SetDevSpeed>
 80065ea:	e008      	b.n	80065fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065ec:	2101      	movs	r1, #1
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f944 	bl	800687c <USB_SetDevSpeed>
 80065f4:	e003      	b.n	80065fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065f6:	2103      	movs	r1, #3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f93f 	bl	800687c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065fe:	2110      	movs	r1, #16
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f8f3 	bl	80067ec <USB_FlushTxFifo>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f911 	bl	8006838 <USB_FlushRxFifo>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006626:	461a      	mov	r2, r3
 8006628:	2300      	movs	r3, #0
 800662a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006632:	461a      	mov	r2, r3
 8006634:	2300      	movs	r3, #0
 8006636:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663e:	461a      	mov	r2, r3
 8006640:	2300      	movs	r3, #0
 8006642:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]
 8006648:	e043      	b.n	80066d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800665c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006660:	d118      	bne.n	8006694 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10a      	bne.n	800667e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006674:	461a      	mov	r2, r3
 8006676:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800667a:	6013      	str	r3, [r2, #0]
 800667c:	e013      	b.n	80066a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668a:	461a      	mov	r2, r3
 800668c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	e008      	b.n	80066a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a0:	461a      	mov	r2, r3
 80066a2:	2300      	movs	r3, #0
 80066a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b2:	461a      	mov	r2, r3
 80066b4:	2300      	movs	r3, #0
 80066b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c4:	461a      	mov	r2, r3
 80066c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	3301      	adds	r3, #1
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d3b7      	bcc.n	800664a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066da:	2300      	movs	r3, #0
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	e043      	b.n	8006768 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066f6:	d118      	bne.n	800672a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670a:	461a      	mov	r2, r3
 800670c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	e013      	b.n	800673c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006720:	461a      	mov	r2, r3
 8006722:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	e008      	b.n	800673c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006736:	461a      	mov	r2, r3
 8006738:	2300      	movs	r3, #0
 800673a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006748:	461a      	mov	r2, r3
 800674a:	2300      	movs	r3, #0
 800674c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675a:	461a      	mov	r2, r3
 800675c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006760:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	3301      	adds	r3, #1
 8006766:	613b      	str	r3, [r7, #16]
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	429a      	cmp	r2, r3
 800676e:	d3b7      	bcc.n	80066e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800677e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006782:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006790:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	2b00      	cmp	r3, #0
 8006796:	d105      	bne.n	80067a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	f043 0210 	orr.w	r2, r3, #16
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	699a      	ldr	r2, [r3, #24]
 80067a8:	4b0f      	ldr	r3, [pc, #60]	; (80067e8 <USB_DevInit+0x2c4>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d005      	beq.n	80067c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	f043 0208 	orr.w	r2, r3, #8
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d107      	bne.n	80067d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067d0:	f043 0304 	orr.w	r3, r3, #4
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067e4:	b004      	add	sp, #16
 80067e6:	4770      	bx	lr
 80067e8:	803c3800 	.word	0x803c3800

080067ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	019b      	lsls	r3, r3, #6
 80067fe:	f043 0220 	orr.w	r2, r3, #32
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3301      	adds	r3, #1
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4a09      	ldr	r2, [pc, #36]	; (8006834 <USB_FlushTxFifo+0x48>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d901      	bls.n	8006818 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e006      	b.n	8006826 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	f003 0320 	and.w	r3, r3, #32
 8006820:	2b20      	cmp	r3, #32
 8006822:	d0f0      	beq.n	8006806 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	00030d40 	.word	0x00030d40

08006838 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2210      	movs	r2, #16
 8006848:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3301      	adds	r3, #1
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4a09      	ldr	r2, [pc, #36]	; (8006878 <USB_FlushRxFifo+0x40>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d901      	bls.n	800685c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e006      	b.n	800686a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f003 0310 	and.w	r3, r3, #16
 8006864:	2b10      	cmp	r3, #16
 8006866:	d0f0      	beq.n	800684a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	00030d40 	.word	0x00030d40

0800687c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	68f9      	ldr	r1, [r7, #12]
 8006898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800689c:	4313      	orrs	r3, r2
 800689e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b087      	sub	sp, #28
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f003 0306 	and.w	r3, r3, #6
 80068c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d102      	bne.n	80068d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80068ce:	2300      	movs	r3, #0
 80068d0:	75fb      	strb	r3, [r7, #23]
 80068d2:	e00a      	b.n	80068ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d002      	beq.n	80068e0 <USB_GetDevSpeed+0x32>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b06      	cmp	r3, #6
 80068de:	d102      	bne.n	80068e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80068e0:	2302      	movs	r3, #2
 80068e2:	75fb      	strb	r3, [r7, #23]
 80068e4:	e001      	b.n	80068ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80068e6:	230f      	movs	r3, #15
 80068e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80068ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d13a      	bne.n	800698a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691a:	69da      	ldr	r2, [r3, #28]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	f003 030f 	and.w	r3, r3, #15
 8006924:	2101      	movs	r1, #1
 8006926:	fa01 f303 	lsl.w	r3, r1, r3
 800692a:	b29b      	uxth	r3, r3
 800692c:	68f9      	ldr	r1, [r7, #12]
 800692e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006932:	4313      	orrs	r3, r2
 8006934:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d155      	bne.n	80069f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	78db      	ldrb	r3, [r3, #3]
 8006966:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006968:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	059b      	lsls	r3, r3, #22
 800696e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006970:	4313      	orrs	r3, r2
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	0151      	lsls	r1, r2, #5
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	440a      	add	r2, r1
 800697a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800697e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	e036      	b.n	80069f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006990:	69da      	ldr	r2, [r3, #28]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	f003 030f 	and.w	r3, r3, #15
 800699a:	2101      	movs	r1, #1
 800699c:	fa01 f303 	lsl.w	r3, r1, r3
 80069a0:	041b      	lsls	r3, r3, #16
 80069a2:	68f9      	ldr	r1, [r7, #12]
 80069a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069a8:	4313      	orrs	r3, r2
 80069aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d11a      	bne.n	80069f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	78db      	ldrb	r3, [r3, #3]
 80069dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069de:	430b      	orrs	r3, r1
 80069e0:	4313      	orrs	r3, r2
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	0151      	lsls	r1, r2, #5
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	440a      	add	r2, r1
 80069ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
	...

08006a08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	785b      	ldrb	r3, [r3, #1]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d161      	bne.n	8006ae8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a3a:	d11f      	bne.n	8006a7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	0151      	lsls	r1, r2, #5
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	440a      	add	r2, r1
 8006a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	0151      	lsls	r1, r2, #5
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	440a      	add	r2, r1
 8006a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	43db      	mvns	r3, r3
 8006a96:	68f9      	ldr	r1, [r7, #12]
 8006a98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa6:	69da      	ldr	r2, [r3, #28]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	f003 030f 	and.w	r3, r3, #15
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	43db      	mvns	r3, r3
 8006aba:	68f9      	ldr	r1, [r7, #12]
 8006abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	0159      	lsls	r1, r3, #5
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	440b      	add	r3, r1
 8006ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ade:	4619      	mov	r1, r3
 8006ae0:	4b35      	ldr	r3, [pc, #212]	; (8006bb8 <USB_DeactivateEndpoint+0x1b0>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	600b      	str	r3, [r1, #0]
 8006ae6:	e060      	b.n	8006baa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	015a      	lsls	r2, r3, #5
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006afe:	d11f      	bne.n	8006b40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	0151      	lsls	r1, r2, #5
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	440a      	add	r2, r1
 8006b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	0151      	lsls	r1, r2, #5
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	440a      	add	r2, r1
 8006b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	f003 030f 	and.w	r3, r3, #15
 8006b50:	2101      	movs	r1, #1
 8006b52:	fa01 f303 	lsl.w	r3, r1, r3
 8006b56:	041b      	lsls	r3, r3, #16
 8006b58:	43db      	mvns	r3, r3
 8006b5a:	68f9      	ldr	r1, [r7, #12]
 8006b5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b60:	4013      	ands	r3, r2
 8006b62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b6a:	69da      	ldr	r2, [r3, #28]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	2101      	movs	r1, #1
 8006b76:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7a:	041b      	lsls	r3, r3, #16
 8006b7c:	43db      	mvns	r3, r3
 8006b7e:	68f9      	ldr	r1, [r7, #12]
 8006b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b84:	4013      	ands	r3, r2
 8006b86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	0159      	lsls	r1, r3, #5
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	440b      	add	r3, r1
 8006b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <USB_DeactivateEndpoint+0x1b4>)
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	ec337800 	.word	0xec337800
 8006bbc:	eff37800 	.word	0xeff37800

08006bc0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08a      	sub	sp, #40	; 0x28
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	785b      	ldrb	r3, [r3, #1]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	f040 815c 	bne.w	8006e9a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d132      	bne.n	8006c50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	0151      	lsls	r1, r2, #5
 8006bfc:	69fa      	ldr	r2, [r7, #28]
 8006bfe:	440a      	add	r2, r1
 8006c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	0151      	lsls	r1, r2, #5
 8006c20:	69fa      	ldr	r2, [r7, #28]
 8006c22:	440a      	add	r2, r1
 8006c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c48:	0cdb      	lsrs	r3, r3, #19
 8006c4a:	04db      	lsls	r3, r3, #19
 8006c4c:	6113      	str	r3, [r2, #16]
 8006c4e:	e074      	b.n	8006d3a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	0151      	lsls	r1, r2, #5
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	440a      	add	r2, r1
 8006c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6a:	0cdb      	lsrs	r3, r3, #19
 8006c6c:	04db      	lsls	r3, r3, #19
 8006c6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	0151      	lsls	r1, r2, #5
 8006c82:	69fa      	ldr	r2, [r7, #28]
 8006c84:	440a      	add	r2, r1
 8006c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca0:	691a      	ldr	r2, [r3, #16]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	6959      	ldr	r1, [r3, #20]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	440b      	add	r3, r1
 8006cac:	1e59      	subs	r1, r3, #1
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cb6:	04d9      	lsls	r1, r3, #19
 8006cb8:	4b9d      	ldr	r3, [pc, #628]	; (8006f30 <USB_EPStartXfer+0x370>)
 8006cba:	400b      	ands	r3, r1
 8006cbc:	69b9      	ldr	r1, [r7, #24]
 8006cbe:	0148      	lsls	r0, r1, #5
 8006cc0:	69f9      	ldr	r1, [r7, #28]
 8006cc2:	4401      	add	r1, r0
 8006cc4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd8:	691a      	ldr	r2, [r3, #16]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ce2:	69b9      	ldr	r1, [r7, #24]
 8006ce4:	0148      	lsls	r0, r1, #5
 8006ce6:	69f9      	ldr	r1, [r7, #28]
 8006ce8:	4401      	add	r1, r0
 8006cea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	78db      	ldrb	r3, [r3, #3]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d11f      	bne.n	8006d3a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d14:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006d18:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	69ba      	ldr	r2, [r7, #24]
 8006d2a:	0151      	lsls	r1, r2, #5
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	440a      	add	r2, r1
 8006d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d38:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006d3a:	79fb      	ldrb	r3, [r7, #7]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d14b      	bne.n	8006dd8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d009      	beq.n	8006d5c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d54:	461a      	mov	r2, r3
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	78db      	ldrb	r3, [r3, #3]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d128      	bne.n	8006db6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d110      	bne.n	8006d96 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	0151      	lsls	r1, r2, #5
 8006d86:	69fa      	ldr	r2, [r7, #28]
 8006d88:	440a      	add	r2, r1
 8006d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	e00f      	b.n	8006db6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	0151      	lsls	r1, r2, #5
 8006da8:	69fa      	ldr	r2, [r7, #28]
 8006daa:	440a      	add	r2, r1
 8006dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	0151      	lsls	r1, r2, #5
 8006dc8:	69fa      	ldr	r2, [r7, #28]
 8006dca:	440a      	add	r2, r1
 8006dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dd4:	6013      	str	r3, [r2, #0]
 8006dd6:	e12f      	b.n	8007038 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	69fa      	ldr	r2, [r7, #28]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006df6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	78db      	ldrb	r3, [r3, #3]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d015      	beq.n	8006e2c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 8117 	beq.w	8007038 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	f003 030f 	and.w	r3, r3, #15
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e20:	69f9      	ldr	r1, [r7, #28]
 8006e22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e26:	4313      	orrs	r3, r2
 8006e28:	634b      	str	r3, [r1, #52]	; 0x34
 8006e2a:	e105      	b.n	8007038 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d110      	bne.n	8006e5e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	0151      	lsls	r1, r2, #5
 8006e4e:	69fa      	ldr	r2, [r7, #28]
 8006e50:	440a      	add	r2, r1
 8006e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	e00f      	b.n	8006e7e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	0151      	lsls	r1, r2, #5
 8006e70:	69fa      	ldr	r2, [r7, #28]
 8006e72:	440a      	add	r2, r1
 8006e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e7c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	68d9      	ldr	r1, [r3, #12]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	781a      	ldrb	r2, [r3, #0]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	b298      	uxth	r0, r3
 8006e8c:	79fb      	ldrb	r3, [r7, #7]
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	4603      	mov	r3, r0
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 fa2b 	bl	80072ee <USB_WritePacket>
 8006e98:	e0ce      	b.n	8007038 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	0151      	lsls	r1, r2, #5
 8006eac:	69fa      	ldr	r2, [r7, #28]
 8006eae:	440a      	add	r2, r1
 8006eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eb4:	0cdb      	lsrs	r3, r3, #19
 8006eb6:	04db      	lsls	r3, r3, #19
 8006eb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	0151      	lsls	r1, r2, #5
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	440a      	add	r2, r1
 8006ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ed8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006edc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d126      	bne.n	8006f34 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef2:	691a      	ldr	r2, [r3, #16]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006efc:	69b9      	ldr	r1, [r7, #24]
 8006efe:	0148      	lsls	r0, r1, #5
 8006f00:	69f9      	ldr	r1, [r7, #28]
 8006f02:	4401      	add	r1, r0
 8006f04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	0151      	lsls	r1, r2, #5
 8006f1e:	69fa      	ldr	r2, [r7, #28]
 8006f20:	440a      	add	r2, r1
 8006f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f2a:	6113      	str	r3, [r2, #16]
 8006f2c:	e036      	b.n	8006f9c <USB_EPStartXfer+0x3dc>
 8006f2e:	bf00      	nop
 8006f30:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	695a      	ldr	r2, [r3, #20]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	1e5a      	subs	r2, r3, #1
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f48:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f56:	691a      	ldr	r2, [r3, #16]
 8006f58:	8afb      	ldrh	r3, [r7, #22]
 8006f5a:	04d9      	lsls	r1, r3, #19
 8006f5c:	4b39      	ldr	r3, [pc, #228]	; (8007044 <USB_EPStartXfer+0x484>)
 8006f5e:	400b      	ands	r3, r1
 8006f60:	69b9      	ldr	r1, [r7, #24]
 8006f62:	0148      	lsls	r0, r1, #5
 8006f64:	69f9      	ldr	r1, [r7, #28]
 8006f66:	4401      	add	r1, r0
 8006f68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f7c:	691a      	ldr	r2, [r3, #16]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	8af9      	ldrh	r1, [r7, #22]
 8006f84:	fb01 f303 	mul.w	r3, r1, r3
 8006f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f8c:	69b9      	ldr	r1, [r7, #24]
 8006f8e:	0148      	lsls	r0, r1, #5
 8006f90:	69f9      	ldr	r1, [r7, #28]
 8006f92:	4401      	add	r1, r0
 8006f94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f9c:	79fb      	ldrb	r3, [r7, #7]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d10d      	bne.n	8006fbe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d009      	beq.n	8006fbe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	68d9      	ldr	r1, [r3, #12]
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fba:	460a      	mov	r2, r1
 8006fbc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	78db      	ldrb	r3, [r3, #3]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d128      	bne.n	8007018 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d110      	bne.n	8006ff8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	0151      	lsls	r1, r2, #5
 8006fe8:	69fa      	ldr	r2, [r7, #28]
 8006fea:	440a      	add	r2, r1
 8006fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	e00f      	b.n	8007018 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	0151      	lsls	r1, r2, #5
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	440a      	add	r2, r1
 800700e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007016:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	440a      	add	r2, r1
 800702e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007032:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007036:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3720      	adds	r7, #32
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	1ff80000 	.word	0x1ff80000

08007048 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	4613      	mov	r3, r2
 8007054:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	785b      	ldrb	r3, [r3, #1]
 8007064:	2b01      	cmp	r3, #1
 8007066:	f040 80cd 	bne.w	8007204 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d132      	bne.n	80070d8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	0151      	lsls	r1, r2, #5
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	440a      	add	r2, r1
 8007088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800708c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007090:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007094:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	4413      	add	r3, r2
 800709e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	0151      	lsls	r1, r2, #5
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	440a      	add	r2, r1
 80070ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	0151      	lsls	r1, r2, #5
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	440a      	add	r2, r1
 80070cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d0:	0cdb      	lsrs	r3, r3, #19
 80070d2:	04db      	lsls	r3, r3, #19
 80070d4:	6113      	str	r3, [r2, #16]
 80070d6:	e04e      	b.n	8007176 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	0151      	lsls	r1, r2, #5
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	440a      	add	r2, r1
 80070ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f2:	0cdb      	lsrs	r3, r3, #19
 80070f4:	04db      	lsls	r3, r3, #19
 80070f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	0151      	lsls	r1, r2, #5
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	440a      	add	r2, r1
 800710e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007112:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007116:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800711a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	695a      	ldr	r2, [r3, #20]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	429a      	cmp	r2, r3
 8007126:	d903      	bls.n	8007130 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	4413      	add	r3, r2
 8007138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	0151      	lsls	r1, r2, #5
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	440a      	add	r2, r1
 8007146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800714a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800714e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715c:	691a      	ldr	r2, [r3, #16]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007166:	6939      	ldr	r1, [r7, #16]
 8007168:	0148      	lsls	r0, r1, #5
 800716a:	6979      	ldr	r1, [r7, #20]
 800716c:	4401      	add	r1, r0
 800716e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007172:	4313      	orrs	r3, r2
 8007174:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007176:	79fb      	ldrb	r3, [r7, #7]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d11e      	bne.n	80071ba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d009      	beq.n	8007198 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007190:	461a      	mov	r2, r3
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	0151      	lsls	r1, r2, #5
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	440a      	add	r2, r1
 80071ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	e092      	b.n	80072e0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	0151      	lsls	r1, r2, #5
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	440a      	add	r2, r1
 80071d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071d8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d07e      	beq.n	80072e0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	f003 030f 	and.w	r3, r3, #15
 80071f2:	2101      	movs	r1, #1
 80071f4:	fa01 f303 	lsl.w	r3, r1, r3
 80071f8:	6979      	ldr	r1, [r7, #20]
 80071fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071fe:	4313      	orrs	r3, r2
 8007200:	634b      	str	r3, [r1, #52]	; 0x34
 8007202:	e06d      	b.n	80072e0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	0151      	lsls	r1, r2, #5
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	440a      	add	r2, r1
 800721a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800721e:	0cdb      	lsrs	r3, r3, #19
 8007220:	04db      	lsls	r3, r3, #19
 8007222:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	0151      	lsls	r1, r2, #5
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	440a      	add	r2, r1
 800723a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800723e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007242:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007246:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	4413      	add	r3, r2
 8007260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	0151      	lsls	r1, r2, #5
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	440a      	add	r2, r1
 800726e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007272:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007276:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007284:	691a      	ldr	r2, [r3, #16]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800728e:	6939      	ldr	r1, [r7, #16]
 8007290:	0148      	lsls	r0, r1, #5
 8007292:	6979      	ldr	r1, [r7, #20]
 8007294:	4401      	add	r1, r0
 8007296:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800729a:	4313      	orrs	r3, r2
 800729c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800729e:	79fb      	ldrb	r3, [r7, #7]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d10d      	bne.n	80072c0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d009      	beq.n	80072c0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	68d9      	ldr	r1, [r3, #12]
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072bc:	460a      	mov	r2, r1
 80072be:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	0151      	lsls	r1, r2, #5
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	440a      	add	r2, r1
 80072d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	371c      	adds	r7, #28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b089      	sub	sp, #36	; 0x24
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	4611      	mov	r1, r2
 80072fa:	461a      	mov	r2, r3
 80072fc:	460b      	mov	r3, r1
 80072fe:	71fb      	strb	r3, [r7, #7]
 8007300:	4613      	mov	r3, r2
 8007302:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800730c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007310:	2b00      	cmp	r3, #0
 8007312:	d11a      	bne.n	800734a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007314:	88bb      	ldrh	r3, [r7, #4]
 8007316:	3303      	adds	r3, #3
 8007318:	089b      	lsrs	r3, r3, #2
 800731a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800731c:	2300      	movs	r3, #0
 800731e:	61bb      	str	r3, [r7, #24]
 8007320:	e00f      	b.n	8007342 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007322:	79fb      	ldrb	r3, [r7, #7]
 8007324:	031a      	lsls	r2, r3, #12
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	4413      	add	r3, r2
 800732a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800732e:	461a      	mov	r2, r3
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	3304      	adds	r3, #4
 800733a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	3301      	adds	r3, #1
 8007340:	61bb      	str	r3, [r7, #24]
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	429a      	cmp	r2, r3
 8007348:	d3eb      	bcc.n	8007322 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3724      	adds	r7, #36	; 0x24
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007358:	b480      	push	{r7}
 800735a:	b089      	sub	sp, #36	; 0x24
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	4613      	mov	r3, r2
 8007364:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800736e:	88fb      	ldrh	r3, [r7, #6]
 8007370:	3303      	adds	r3, #3
 8007372:	089b      	lsrs	r3, r3, #2
 8007374:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007376:	2300      	movs	r3, #0
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	e00b      	b.n	8007394 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	601a      	str	r2, [r3, #0]
    pDest++;
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	3304      	adds	r3, #4
 800738c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	3301      	adds	r3, #1
 8007392:	61bb      	str	r3, [r7, #24]
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	429a      	cmp	r2, r3
 800739a:	d3ef      	bcc.n	800737c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800739c:	69fb      	ldr	r3, [r7, #28]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3724      	adds	r7, #36	; 0x24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b085      	sub	sp, #20
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	785b      	ldrb	r3, [r3, #1]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d12c      	bne.n	8007420 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	db12      	blt.n	80073fe <USB_EPSetStall+0x54>
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00f      	beq.n	80073fe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	0151      	lsls	r1, r2, #5
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	440a      	add	r2, r1
 80073f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073fc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	015a      	lsls	r2, r3, #5
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	4413      	add	r3, r2
 8007406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	0151      	lsls	r1, r2, #5
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	440a      	add	r2, r1
 8007414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007418:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800741c:	6013      	str	r3, [r2, #0]
 800741e:	e02b      	b.n	8007478 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	db12      	blt.n	8007458 <USB_EPSetStall+0xae>
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00f      	beq.n	8007458 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	0151      	lsls	r1, r2, #5
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	440a      	add	r2, r1
 800744e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007452:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007456:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	0151      	lsls	r1, r2, #5
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	440a      	add	r2, r1
 800746e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007472:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007476:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007486:	b480      	push	{r7}
 8007488:	b085      	sub	sp, #20
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	785b      	ldrb	r3, [r3, #1]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d128      	bne.n	80074f4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	0151      	lsls	r1, r2, #5
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	440a      	add	r2, r1
 80074b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	78db      	ldrb	r3, [r3, #3]
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d003      	beq.n	80074d2 <USB_EPClearStall+0x4c>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	78db      	ldrb	r3, [r3, #3]
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d138      	bne.n	8007544 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	0151      	lsls	r1, r2, #5
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	440a      	add	r2, r1
 80074e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	e027      	b.n	8007544 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	0151      	lsls	r1, r2, #5
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	440a      	add	r2, r1
 800750a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800750e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007512:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	78db      	ldrb	r3, [r3, #3]
 8007518:	2b03      	cmp	r3, #3
 800751a:	d003      	beq.n	8007524 <USB_EPClearStall+0x9e>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	78db      	ldrb	r3, [r3, #3]
 8007520:	2b02      	cmp	r3, #2
 8007522:	d10f      	bne.n	8007544 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	0151      	lsls	r1, r2, #5
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	440a      	add	r2, r1
 800753a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800753e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007542:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007552:	b480      	push	{r7}
 8007554:	b085      	sub	sp, #20
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	460b      	mov	r3, r1
 800755c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007570:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007574:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	78fb      	ldrb	r3, [r7, #3]
 8007580:	011b      	lsls	r3, r3, #4
 8007582:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007586:	68f9      	ldr	r1, [r7, #12]
 8007588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800758c:	4313      	orrs	r3, r2
 800758e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800759e:	b480      	push	{r7}
 80075a0:	b085      	sub	sp, #20
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075b8:	f023 0303 	bic.w	r3, r3, #3
 80075bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075cc:	f023 0302 	bic.w	r3, r3, #2
 80075d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075fa:	f023 0303 	bic.w	r3, r3, #3
 80075fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800760e:	f043 0302 	orr.w	r3, r3, #2
 8007612:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007622:	b480      	push	{r7}
 8007624:	b085      	sub	sp, #20
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	4013      	ands	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800763a:	68fb      	ldr	r3, [r7, #12]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	4013      	ands	r3, r2
 800766a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	0c1b      	lsrs	r3, r3, #16
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768e:	699b      	ldr	r3, [r3, #24]
 8007690:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	4013      	ands	r3, r2
 800769e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	b29b      	uxth	r3, r3
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	4013      	ands	r3, r2
 80076dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076de:	68bb      	ldr	r3, [r7, #8]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	460b      	mov	r3, r1
 80076f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	f003 030f 	and.w	r3, r3, #15
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	fa22 f303 	lsr.w	r3, r2, r3
 800771c:	01db      	lsls	r3, r3, #7
 800771e:	b2db      	uxtb	r3, r3
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	4313      	orrs	r3, r2
 8007724:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007726:	78fb      	ldrb	r3, [r7, #3]
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	4413      	add	r3, r2
 800772e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	4013      	ands	r3, r2
 8007738:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800773a:	68bb      	ldr	r3, [r7, #8]
}
 800773c:	4618      	mov	r0, r3
 800773e:	371c      	adds	r7, #28
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	f003 0301 	and.w	r3, r3, #1
}
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800777e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007782:	f023 0307 	bic.w	r3, r3, #7
 8007786:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800779a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
	...

080077ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	460b      	mov	r3, r1
 80077b6:	607a      	str	r2, [r7, #4]
 80077b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	333c      	adds	r3, #60	; 0x3c
 80077c2:	3304      	adds	r3, #4
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	4a26      	ldr	r2, [pc, #152]	; (8007864 <USB_EP0_OutStart+0xb8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d90a      	bls.n	80077e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077e0:	d101      	bne.n	80077e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	e037      	b.n	8007856 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ec:	461a      	mov	r2, r3
 80077ee:	2300      	movs	r3, #0
 80077f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007800:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007804:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007814:	f043 0318 	orr.w	r3, r3, #24
 8007818:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007828:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800782c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800782e:	7afb      	ldrb	r3, [r7, #11]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d10f      	bne.n	8007854 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783a:	461a      	mov	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800784e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007852:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	371c      	adds	r7, #28
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	4f54300a 	.word	0x4f54300a

08007868 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3301      	adds	r3, #1
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4a13      	ldr	r2, [pc, #76]	; (80078cc <USB_CoreReset+0x64>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d901      	bls.n	8007886 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e01b      	b.n	80078be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	daf2      	bge.n	8007874 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	f043 0201 	orr.w	r2, r3, #1
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3301      	adds	r3, #1
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4a09      	ldr	r2, [pc, #36]	; (80078cc <USB_CoreReset+0x64>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d901      	bls.n	80078b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e006      	b.n	80078be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d0f0      	beq.n	800789e <USB_CoreReset+0x36>

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	00030d40 	.word	0x00030d40

080078d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80078e0:	f002 f928 	bl	8009b34 <malloc>
 80078e4:	4603      	mov	r3, r0
 80078e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d105      	bne.n	80078fa <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80078f6:	2302      	movs	r3, #2
 80078f8:	e066      	b.n	80079c8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	7c1b      	ldrb	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d119      	bne.n	800793e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800790a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800790e:	2202      	movs	r2, #2
 8007910:	2181      	movs	r1, #129	; 0x81
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f001 ff95 	bl	8009842 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800791e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007922:	2202      	movs	r2, #2
 8007924:	2101      	movs	r1, #1
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f001 ff8b 	bl	8009842 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2210      	movs	r2, #16
 8007938:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800793c:	e016      	b.n	800796c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800793e:	2340      	movs	r3, #64	; 0x40
 8007940:	2202      	movs	r2, #2
 8007942:	2181      	movs	r1, #129	; 0x81
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 ff7c 	bl	8009842 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007950:	2340      	movs	r3, #64	; 0x40
 8007952:	2202      	movs	r2, #2
 8007954:	2101      	movs	r1, #1
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 ff73 	bl	8009842 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2210      	movs	r2, #16
 8007968:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800796c:	2308      	movs	r3, #8
 800796e:	2203      	movs	r2, #3
 8007970:	2182      	movs	r1, #130	; 0x82
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f001 ff65 	bl	8009842 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	7c1b      	ldrb	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d109      	bne.n	80079b6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079ac:	2101      	movs	r1, #1
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f002 f836 	bl	8009a20 <USBD_LL_PrepareReceive>
 80079b4:	e007      	b.n	80079c6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079bc:	2340      	movs	r3, #64	; 0x40
 80079be:	2101      	movs	r1, #1
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f002 f82d 	bl	8009a20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	460b      	mov	r3, r1
 80079da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80079dc:	2300      	movs	r3, #0
 80079de:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80079e0:	2181      	movs	r1, #129	; 0x81
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f001 ff53 	bl	800988e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80079ee:	2101      	movs	r1, #1
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 ff4c 	bl	800988e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80079fe:	2182      	movs	r1, #130	; 0x82
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f001 ff44 	bl	800988e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00e      	beq.n	8007a3e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a30:	4618      	mov	r0, r3
 8007a32:	f002 f887 	bl	8009b44 <free>
    pdev->pClassData = NULL;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a58:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d03a      	beq.n	8007ae8 <USBD_CDC_Setup+0xa0>
 8007a72:	2b20      	cmp	r3, #32
 8007a74:	f040 8097 	bne.w	8007ba6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	88db      	ldrh	r3, [r3, #6]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d029      	beq.n	8007ad4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	b25b      	sxtb	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	da11      	bge.n	8007aae <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007a96:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	88d2      	ldrh	r2, [r2, #6]
 8007a9c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a9e:	6939      	ldr	r1, [r7, #16]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	88db      	ldrh	r3, [r3, #6]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 fa9d 	bl	8008fe6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007aac:	e082      	b.n	8007bb4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	785a      	ldrb	r2, [r3, #1]
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	88db      	ldrh	r3, [r3, #6]
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007ac4:	6939      	ldr	r1, [r7, #16]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	88db      	ldrh	r3, [r3, #6]
 8007aca:	461a      	mov	r2, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 fab6 	bl	800903e <USBD_CtlPrepareRx>
    break;
 8007ad2:	e06f      	b.n	8007bb4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	7850      	ldrb	r0, [r2, #1]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	4798      	blx	r3
    break;
 8007ae6:	e065      	b.n	8007bb4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	785b      	ldrb	r3, [r3, #1]
 8007aec:	2b0b      	cmp	r3, #11
 8007aee:	d84f      	bhi.n	8007b90 <USBD_CDC_Setup+0x148>
 8007af0:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <USBD_CDC_Setup+0xb0>)
 8007af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af6:	bf00      	nop
 8007af8:	08007b29 	.word	0x08007b29
 8007afc:	08007b9f 	.word	0x08007b9f
 8007b00:	08007b91 	.word	0x08007b91
 8007b04:	08007b91 	.word	0x08007b91
 8007b08:	08007b91 	.word	0x08007b91
 8007b0c:	08007b91 	.word	0x08007b91
 8007b10:	08007b91 	.word	0x08007b91
 8007b14:	08007b91 	.word	0x08007b91
 8007b18:	08007b91 	.word	0x08007b91
 8007b1c:	08007b91 	.word	0x08007b91
 8007b20:	08007b51 	.word	0x08007b51
 8007b24:	08007b79 	.word	0x08007b79
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d107      	bne.n	8007b42 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b32:	f107 030c 	add.w	r3, r7, #12
 8007b36:	2202      	movs	r2, #2
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f001 fa53 	bl	8008fe6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007b40:	e030      	b.n	8007ba4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 f9dd 	bl	8008f04 <USBD_CtlError>
        ret = USBD_FAIL;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b4e:	e029      	b.n	8007ba4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	d107      	bne.n	8007b6a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b5a:	f107 030f 	add.w	r3, r7, #15
 8007b5e:	2201      	movs	r2, #1
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f001 fa3f 	bl	8008fe6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007b68:	e01c      	b.n	8007ba4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f001 f9c9 	bl	8008f04 <USBD_CtlError>
        ret = USBD_FAIL;
 8007b72:	2303      	movs	r3, #3
 8007b74:	75fb      	strb	r3, [r7, #23]
      break;
 8007b76:	e015      	b.n	8007ba4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	d00f      	beq.n	8007ba2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f001 f9bd 	bl	8008f04 <USBD_CtlError>
        ret = USBD_FAIL;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007b8e:	e008      	b.n	8007ba2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f001 f9b6 	bl	8008f04 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b9c:	e002      	b.n	8007ba4 <USBD_CDC_Setup+0x15c>
      break;
 8007b9e:	bf00      	nop
 8007ba0:	e008      	b.n	8007bb4 <USBD_CDC_Setup+0x16c>
      break;
 8007ba2:	bf00      	nop
    }
    break;
 8007ba4:	e006      	b.n	8007bb4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 f9ab 	bl	8008f04 <USBD_CtlError>
    ret = USBD_FAIL;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	75fb      	strb	r3, [r7, #23]
    break;
 8007bb2:	bf00      	nop
  }

  return (uint8_t)ret;
 8007bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3718      	adds	r7, #24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop

08007bc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e049      	b.n	8007c76 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007be8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007bea:	78fa      	ldrb	r2, [r7, #3]
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	3318      	adds	r3, #24
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d029      	beq.n	8007c54 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c00:	78fa      	ldrb	r2, [r7, #3]
 8007c02:	6879      	ldr	r1, [r7, #4]
 8007c04:	4613      	mov	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	440b      	add	r3, r1
 8007c0e:	3318      	adds	r3, #24
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	78f9      	ldrb	r1, [r7, #3]
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	460b      	mov	r3, r1
 8007c18:	00db      	lsls	r3, r3, #3
 8007c1a:	1a5b      	subs	r3, r3, r1
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4403      	add	r3, r0
 8007c20:	3344      	adds	r3, #68	; 0x44
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c28:	fb03 f301 	mul.w	r3, r3, r1
 8007c2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d110      	bne.n	8007c54 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007c32:	78fa      	ldrb	r2, [r7, #3]
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	440b      	add	r3, r1
 8007c40:	3318      	adds	r3, #24
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c46:	78f9      	ldrb	r1, [r7, #3]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 fec6 	bl	80099de <USBD_LL_Transmit>
 8007c52:	e00f      	b.n	8007c74 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007c70:	78fa      	ldrb	r2, [r7, #3]
 8007c72:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	460b      	mov	r3, r1
 8007c88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e015      	b.n	8007ccc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f001 fedc 	bl	8009a62 <USBD_LL_GetRxDataSize>
 8007caa:	4602      	mov	r2, r0
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ce2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d015      	beq.n	8007d1a <USBD_CDC_EP0_RxReady+0x46>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007cf4:	2bff      	cmp	r3, #255	; 0xff
 8007cf6:	d010      	beq.n	8007d1a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007d06:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d0e:	b292      	uxth	r2, r2
 8007d10:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	22ff      	movs	r2, #255	; 0xff
 8007d16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2243      	movs	r2, #67	; 0x43
 8007d30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007d32:	4b03      	ldr	r3, [pc, #12]	; (8007d40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	20000094 	.word	0x20000094

08007d44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2243      	movs	r2, #67	; 0x43
 8007d50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007d52:	4b03      	ldr	r3, [pc, #12]	; (8007d60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	20000050 	.word	0x20000050

08007d64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2243      	movs	r2, #67	; 0x43
 8007d70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007d72:	4b03      	ldr	r3, [pc, #12]	; (8007d80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	200000d8 	.word	0x200000d8

08007d84 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	220a      	movs	r2, #10
 8007d90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d92:	4b03      	ldr	r3, [pc, #12]	; (8007da0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	2000000c 	.word	0x2000000c

08007da4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e004      	b.n	8007dc2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b087      	sub	sp, #28
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	60f8      	str	r0, [r7, #12]
 8007dd6:	60b9      	str	r1, [r7, #8]
 8007dd8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007de0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	371c      	adds	r7, #28
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e10:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e36:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e01a      	b.n	8007e80 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d114      	bne.n	8007e7e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007e72:	2181      	movs	r1, #129	; 0x81
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f001 fdb2 	bl	80099de <USBD_LL_Transmit>

    ret = USBD_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e016      	b.n	8007ed4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	7c1b      	ldrb	r3, [r3, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d109      	bne.n	8007ec2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eb8:	2101      	movs	r1, #1
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f001 fdb0 	bl	8009a20 <USBD_LL_PrepareReceive>
 8007ec0:	e007      	b.n	8007ed2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ec8:	2340      	movs	r3, #64	; 0x40
 8007eca:	2101      	movs	r1, #1
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f001 fda7 	bl	8009a20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e025      	b.n	8007f40 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	79fa      	ldrb	r2, [r7, #7]
 8007f32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f001 fc1d 	bl	8009774 <USBD_LL_Init>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e010      	b.n	8007f82 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	683a      	ldr	r2, [r7, #0]
 8007f64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f70:	f107 020e 	add.w	r2, r7, #14
 8007f74:	4610      	mov	r0, r2
 8007f76:	4798      	blx	r3
 8007f78:	4602      	mov	r2, r0
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f001 fc3a 	bl	800980c <USBD_LL_Start>
 8007f98:	4603      	mov	r3, r0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d009      	beq.n	8007fe6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	78fa      	ldrb	r2, [r7, #3]
 8007fdc:	4611      	mov	r1, r2
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	4798      	blx	r3
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008002:	2b00      	cmp	r3, #0
 8008004:	d007      	beq.n	8008016 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	78fa      	ldrb	r2, [r7, #3]
 8008010:	4611      	mov	r1, r2
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	4798      	blx	r3
  }

  return USBD_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	4618      	mov	r0, r3
 8008034:	f000 ff2c 	bl	8008e90 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008046:	461a      	mov	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008054:	f003 031f 	and.w	r3, r3, #31
 8008058:	2b01      	cmp	r3, #1
 800805a:	d00e      	beq.n	800807a <USBD_LL_SetupStage+0x5a>
 800805c:	2b01      	cmp	r3, #1
 800805e:	d302      	bcc.n	8008066 <USBD_LL_SetupStage+0x46>
 8008060:	2b02      	cmp	r3, #2
 8008062:	d014      	beq.n	800808e <USBD_LL_SetupStage+0x6e>
 8008064:	e01d      	b.n	80080a2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fa18 	bl	80084a4 <USBD_StdDevReq>
 8008074:	4603      	mov	r3, r0
 8008076:	73fb      	strb	r3, [r7, #15]
      break;
 8008078:	e020      	b.n	80080bc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fa7c 	bl	8008580 <USBD_StdItfReq>
 8008088:	4603      	mov	r3, r0
 800808a:	73fb      	strb	r3, [r7, #15]
      break;
 800808c:	e016      	b.n	80080bc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fab8 	bl	800860c <USBD_StdEPReq>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]
      break;
 80080a0:	e00c      	b.n	80080bc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 fc0b 	bl	80098cc <USBD_LL_StallEP>
 80080b6:	4603      	mov	r3, r0
 80080b8:	73fb      	strb	r3, [r7, #15]
      break;
 80080ba:	bf00      	nop
  }

  return ret;
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b086      	sub	sp, #24
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	60f8      	str	r0, [r7, #12]
 80080ce:	460b      	mov	r3, r1
 80080d0:	607a      	str	r2, [r7, #4]
 80080d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080d4:	7afb      	ldrb	r3, [r7, #11]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d137      	bne.n	800814a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80080e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080e8:	2b03      	cmp	r3, #3
 80080ea:	d14a      	bne.n	8008182 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d913      	bls.n	8008120 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	1ad2      	subs	r2, r2, r3
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	68da      	ldr	r2, [r3, #12]
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	4293      	cmp	r3, r2
 8008110:	bf28      	it	cs
 8008112:	4613      	movcs	r3, r2
 8008114:	461a      	mov	r2, r3
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 ffad 	bl	8009078 <USBD_CtlContinueRx>
 800811e:	e030      	b.n	8008182 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008132:	2b03      	cmp	r3, #3
 8008134:	d105      	bne.n	8008142 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f000 ffa9 	bl	800909a <USBD_CtlSendStatus>
 8008148:	e01b      	b.n	8008182 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d013      	beq.n	800817e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800815c:	2b03      	cmp	r3, #3
 800815e:	d10e      	bne.n	800817e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	7afa      	ldrb	r2, [r7, #11]
 800816a:	4611      	mov	r1, r2
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	4798      	blx	r3
 8008170:	4603      	mov	r3, r0
 8008172:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800817a:	7dfb      	ldrb	r3, [r7, #23]
 800817c:	e002      	b.n	8008184 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800817e:	2303      	movs	r3, #3
 8008180:	e000      	b.n	8008184 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3718      	adds	r7, #24
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	460b      	mov	r3, r1
 8008196:	607a      	str	r2, [r7, #4]
 8008198:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800819a:	7afb      	ldrb	r3, [r7, #11]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d16a      	bne.n	8008276 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	3314      	adds	r3, #20
 80081a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d155      	bne.n	800825c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d914      	bls.n	80081e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	689a      	ldr	r2, [r3, #8]
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	1ad2      	subs	r2, r2, r3
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	461a      	mov	r2, r3
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 ff22 	bl	800901c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081d8:	2300      	movs	r3, #0
 80081da:	2200      	movs	r2, #0
 80081dc:	2100      	movs	r1, #0
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f001 fc1e 	bl	8009a20 <USBD_LL_PrepareReceive>
 80081e4:	e03a      	b.n	800825c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d11c      	bne.n	800822c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d316      	bcc.n	800822c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008208:	429a      	cmp	r2, r3
 800820a:	d20f      	bcs.n	800822c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800820c:	2200      	movs	r2, #0
 800820e:	2100      	movs	r1, #0
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f000 ff03 	bl	800901c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800821e:	2300      	movs	r3, #0
 8008220:	2200      	movs	r2, #0
 8008222:	2100      	movs	r1, #0
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f001 fbfb 	bl	8009a20 <USBD_LL_PrepareReceive>
 800822a:	e017      	b.n	800825c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00a      	beq.n	800824e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800823e:	2b03      	cmp	r3, #3
 8008240:	d105      	bne.n	800824e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800824e:	2180      	movs	r1, #128	; 0x80
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f001 fb3b 	bl	80098cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 ff32 	bl	80090c0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008262:	2b01      	cmp	r3, #1
 8008264:	d123      	bne.n	80082ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f7ff fe9b 	bl	8007fa2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008274:	e01b      	b.n	80082ae <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d013      	beq.n	80082aa <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008288:	2b03      	cmp	r3, #3
 800828a:	d10e      	bne.n	80082aa <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	7afa      	ldrb	r2, [r7, #11]
 8008296:	4611      	mov	r1, r2
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	4798      	blx	r3
 800829c:	4603      	mov	r3, r0
 800829e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
 80082a8:	e002      	b.n	80082b0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e000      	b.n	80082b0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d009      	beq.n	80082fc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	6852      	ldr	r2, [r2, #4]
 80082f4:	b2d2      	uxtb	r2, r2
 80082f6:	4611      	mov	r1, r2
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082fc:	2340      	movs	r3, #64	; 0x40
 80082fe:	2200      	movs	r2, #0
 8008300:	2100      	movs	r1, #0
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f001 fa9d 	bl	8009842 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2240      	movs	r2, #64	; 0x40
 8008314:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008318:	2340      	movs	r3, #64	; 0x40
 800831a:	2200      	movs	r2, #0
 800831c:	2180      	movs	r1, #128	; 0x80
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f001 fa8f 	bl	8009842 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2240      	movs	r2, #64	; 0x40
 800832e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	460b      	mov	r3, r1
 8008344:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	78fa      	ldrb	r2, [r7, #3]
 800834a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800835a:	b480      	push	{r7}
 800835c:	b083      	sub	sp, #12
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2204      	movs	r2, #4
 8008372:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008392:	2b04      	cmp	r3, #4
 8008394:	d105      	bne.n	80083a2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d10b      	bne.n	80083da <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d005      	beq.n	80083da <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	460b      	mov	r3, r1
 80083ee:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	460b      	mov	r3, r1
 8008408:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b082      	sub	sp, #8
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008444:	2b00      	cmp	r3, #0
 8008446:	d009      	beq.n	800845c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	6852      	ldr	r2, [r2, #4]
 8008454:	b2d2      	uxtb	r2, r2
 8008456:	4611      	mov	r1, r2
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	4798      	blx	r3
  }

  return USBD_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008466:	b480      	push	{r7}
 8008468:	b087      	sub	sp, #28
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	3301      	adds	r3, #1
 800847c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008484:	8a3b      	ldrh	r3, [r7, #16]
 8008486:	021b      	lsls	r3, r3, #8
 8008488:	b21a      	sxth	r2, r3
 800848a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800848e:	4313      	orrs	r3, r2
 8008490:	b21b      	sxth	r3, r3
 8008492:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008494:	89fb      	ldrh	r3, [r7, #14]
}
 8008496:	4618      	mov	r0, r3
 8008498:	371c      	adds	r7, #28
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
	...

080084a4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084ba:	2b20      	cmp	r3, #32
 80084bc:	d004      	beq.n	80084c8 <USBD_StdDevReq+0x24>
 80084be:	2b40      	cmp	r3, #64	; 0x40
 80084c0:	d002      	beq.n	80084c8 <USBD_StdDevReq+0x24>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00a      	beq.n	80084dc <USBD_StdDevReq+0x38>
 80084c6:	e050      	b.n	800856a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	4798      	blx	r3
 80084d6:	4603      	mov	r3, r0
 80084d8:	73fb      	strb	r3, [r7, #15]
    break;
 80084da:	e04b      	b.n	8008574 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	785b      	ldrb	r3, [r3, #1]
 80084e0:	2b09      	cmp	r3, #9
 80084e2:	d83c      	bhi.n	800855e <USBD_StdDevReq+0xba>
 80084e4:	a201      	add	r2, pc, #4	; (adr r2, 80084ec <USBD_StdDevReq+0x48>)
 80084e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ea:	bf00      	nop
 80084ec:	08008541 	.word	0x08008541
 80084f0:	08008555 	.word	0x08008555
 80084f4:	0800855f 	.word	0x0800855f
 80084f8:	0800854b 	.word	0x0800854b
 80084fc:	0800855f 	.word	0x0800855f
 8008500:	0800851f 	.word	0x0800851f
 8008504:	08008515 	.word	0x08008515
 8008508:	0800855f 	.word	0x0800855f
 800850c:	08008537 	.word	0x08008537
 8008510:	08008529 	.word	0x08008529
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008514:	6839      	ldr	r1, [r7, #0]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f9ce 	bl	80088b8 <USBD_GetDescriptor>
      break;
 800851c:	e024      	b.n	8008568 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fb33 	bl	8008b8c <USBD_SetAddress>
      break;
 8008526:	e01f      	b.n	8008568 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fb70 	bl	8008c10 <USBD_SetConfig>
 8008530:	4603      	mov	r3, r0
 8008532:	73fb      	strb	r3, [r7, #15]
      break;
 8008534:	e018      	b.n	8008568 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fc0d 	bl	8008d58 <USBD_GetConfig>
      break;
 800853e:	e013      	b.n	8008568 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fc3c 	bl	8008dc0 <USBD_GetStatus>
      break;
 8008548:	e00e      	b.n	8008568 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fc6a 	bl	8008e26 <USBD_SetFeature>
      break;
 8008552:	e009      	b.n	8008568 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fc79 	bl	8008e4e <USBD_ClrFeature>
      break;
 800855c:	e004      	b.n	8008568 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fccf 	bl	8008f04 <USBD_CtlError>
      break;
 8008566:	bf00      	nop
    }
    break;
 8008568:	e004      	b.n	8008574 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800856a:	6839      	ldr	r1, [r7, #0]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fcc9 	bl	8008f04 <USBD_CtlError>
    break;
 8008572:	bf00      	nop
  }

  return ret;
 8008574:	7bfb      	ldrb	r3, [r7, #15]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop

08008580 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008596:	2b20      	cmp	r3, #32
 8008598:	d003      	beq.n	80085a2 <USBD_StdItfReq+0x22>
 800859a:	2b40      	cmp	r3, #64	; 0x40
 800859c:	d001      	beq.n	80085a2 <USBD_StdItfReq+0x22>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d12a      	bne.n	80085f8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a8:	3b01      	subs	r3, #1
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d81d      	bhi.n	80085ea <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	889b      	ldrh	r3, [r3, #4]
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d813      	bhi.n	80085e0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	4798      	blx	r3
 80085c6:	4603      	mov	r3, r0
 80085c8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	88db      	ldrh	r3, [r3, #6]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d110      	bne.n	80085f4 <USBD_StdItfReq+0x74>
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10d      	bne.n	80085f4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fd5e 	bl	800909a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80085de:	e009      	b.n	80085f4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fc8e 	bl	8008f04 <USBD_CtlError>
      break;
 80085e8:	e004      	b.n	80085f4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fc89 	bl	8008f04 <USBD_CtlError>
      break;
 80085f2:	e000      	b.n	80085f6 <USBD_StdItfReq+0x76>
      break;
 80085f4:	bf00      	nop
    }
    break;
 80085f6:	e004      	b.n	8008602 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fc82 	bl	8008f04 <USBD_CtlError>
    break;
 8008600:	bf00      	nop
  }

  return ret;
 8008602:	7bfb      	ldrb	r3, [r7, #15]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	889b      	ldrh	r3, [r3, #4]
 800861e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008628:	2b20      	cmp	r3, #32
 800862a:	d004      	beq.n	8008636 <USBD_StdEPReq+0x2a>
 800862c:	2b40      	cmp	r3, #64	; 0x40
 800862e:	d002      	beq.n	8008636 <USBD_StdEPReq+0x2a>
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00a      	beq.n	800864a <USBD_StdEPReq+0x3e>
 8008634:	e135      	b.n	80088a2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	4798      	blx	r3
 8008644:	4603      	mov	r3, r0
 8008646:	73fb      	strb	r3, [r7, #15]
    break;
 8008648:	e130      	b.n	80088ac <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	785b      	ldrb	r3, [r3, #1]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d03e      	beq.n	80086d0 <USBD_StdEPReq+0xc4>
 8008652:	2b03      	cmp	r3, #3
 8008654:	d002      	beq.n	800865c <USBD_StdEPReq+0x50>
 8008656:	2b00      	cmp	r3, #0
 8008658:	d077      	beq.n	800874a <USBD_StdEPReq+0x13e>
 800865a:	e11c      	b.n	8008896 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008662:	2b02      	cmp	r3, #2
 8008664:	d002      	beq.n	800866c <USBD_StdEPReq+0x60>
 8008666:	2b03      	cmp	r3, #3
 8008668:	d015      	beq.n	8008696 <USBD_StdEPReq+0x8a>
 800866a:	e02b      	b.n	80086c4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00c      	beq.n	800868c <USBD_StdEPReq+0x80>
 8008672:	7bbb      	ldrb	r3, [r7, #14]
 8008674:	2b80      	cmp	r3, #128	; 0x80
 8008676:	d009      	beq.n	800868c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f001 f925 	bl	80098cc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008682:	2180      	movs	r1, #128	; 0x80
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f001 f921 	bl	80098cc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800868a:	e020      	b.n	80086ce <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fc38 	bl	8008f04 <USBD_CtlError>
        break;
 8008694:	e01b      	b.n	80086ce <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	885b      	ldrh	r3, [r3, #2]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10e      	bne.n	80086bc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00b      	beq.n	80086bc <USBD_StdEPReq+0xb0>
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	2b80      	cmp	r3, #128	; 0x80
 80086a8:	d008      	beq.n	80086bc <USBD_StdEPReq+0xb0>
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	88db      	ldrh	r3, [r3, #6]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d104      	bne.n	80086bc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f001 f908 	bl	80098cc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fcec 	bl	800909a <USBD_CtlSendStatus>

        break;
 80086c2:	e004      	b.n	80086ce <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fc1c 	bl	8008f04 <USBD_CtlError>
        break;
 80086cc:	bf00      	nop
      }
      break;
 80086ce:	e0e7      	b.n	80088a0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d002      	beq.n	80086e0 <USBD_StdEPReq+0xd4>
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d015      	beq.n	800870a <USBD_StdEPReq+0xfe>
 80086de:	e02d      	b.n	800873c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00c      	beq.n	8008700 <USBD_StdEPReq+0xf4>
 80086e6:	7bbb      	ldrb	r3, [r7, #14]
 80086e8:	2b80      	cmp	r3, #128	; 0x80
 80086ea:	d009      	beq.n	8008700 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 f8eb 	bl	80098cc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086f6:	2180      	movs	r1, #128	; 0x80
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f001 f8e7 	bl	80098cc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80086fe:	e023      	b.n	8008748 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fbfe 	bl	8008f04 <USBD_CtlError>
        break;
 8008708:	e01e      	b.n	8008748 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	885b      	ldrh	r3, [r3, #2]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d119      	bne.n	8008746 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008718:	2b00      	cmp	r3, #0
 800871a:	d004      	beq.n	8008726 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 f8f2 	bl	800990a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fcb7 	bl	800909a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	4798      	blx	r3
        }
        break;
 800873a:	e004      	b.n	8008746 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fbe0 	bl	8008f04 <USBD_CtlError>
        break;
 8008744:	e000      	b.n	8008748 <USBD_StdEPReq+0x13c>
        break;
 8008746:	bf00      	nop
      }
      break;
 8008748:	e0aa      	b.n	80088a0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008750:	2b02      	cmp	r3, #2
 8008752:	d002      	beq.n	800875a <USBD_StdEPReq+0x14e>
 8008754:	2b03      	cmp	r3, #3
 8008756:	d032      	beq.n	80087be <USBD_StdEPReq+0x1b2>
 8008758:	e097      	b.n	800888a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d007      	beq.n	8008770 <USBD_StdEPReq+0x164>
 8008760:	7bbb      	ldrb	r3, [r7, #14]
 8008762:	2b80      	cmp	r3, #128	; 0x80
 8008764:	d004      	beq.n	8008770 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008766:	6839      	ldr	r1, [r7, #0]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fbcb 	bl	8008f04 <USBD_CtlError>
          break;
 800876e:	e091      	b.n	8008894 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008774:	2b00      	cmp	r3, #0
 8008776:	da0b      	bge.n	8008790 <USBD_StdEPReq+0x184>
 8008778:	7bbb      	ldrb	r3, [r7, #14]
 800877a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800877e:	4613      	mov	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	3310      	adds	r3, #16
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	4413      	add	r3, r2
 800878c:	3304      	adds	r3, #4
 800878e:	e00b      	b.n	80087a8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008796:	4613      	mov	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	4413      	add	r3, r2
 80087a6:	3304      	adds	r3, #4
 80087a8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2202      	movs	r2, #2
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fc15 	bl	8008fe6 <USBD_CtlSendData>
        break;
 80087bc:	e06a      	b.n	8008894 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80087be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	da11      	bge.n	80087ea <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087c6:	7bbb      	ldrb	r3, [r7, #14]
 80087c8:	f003 020f 	and.w	r2, r3, #15
 80087cc:	6879      	ldr	r1, [r7, #4]
 80087ce:	4613      	mov	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4413      	add	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	440b      	add	r3, r1
 80087d8:	3324      	adds	r3, #36	; 0x24
 80087da:	881b      	ldrh	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d117      	bne.n	8008810 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fb8e 	bl	8008f04 <USBD_CtlError>
            break;
 80087e8:	e054      	b.n	8008894 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	f003 020f 	and.w	r2, r3, #15
 80087f0:	6879      	ldr	r1, [r7, #4]
 80087f2:	4613      	mov	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	440b      	add	r3, r1
 80087fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d104      	bne.n	8008810 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fb7b 	bl	8008f04 <USBD_CtlError>
            break;
 800880e:	e041      	b.n	8008894 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008810:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008814:	2b00      	cmp	r3, #0
 8008816:	da0b      	bge.n	8008830 <USBD_StdEPReq+0x224>
 8008818:	7bbb      	ldrb	r3, [r7, #14]
 800881a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800881e:	4613      	mov	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	3310      	adds	r3, #16
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	4413      	add	r3, r2
 800882c:	3304      	adds	r3, #4
 800882e:	e00b      	b.n	8008848 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	4413      	add	r3, r2
 8008846:	3304      	adds	r3, #4
 8008848:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800884a:	7bbb      	ldrb	r3, [r7, #14]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <USBD_StdEPReq+0x24a>
 8008850:	7bbb      	ldrb	r3, [r7, #14]
 8008852:	2b80      	cmp	r3, #128	; 0x80
 8008854:	d103      	bne.n	800885e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	e00e      	b.n	800887c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800885e:	7bbb      	ldrb	r3, [r7, #14]
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 f870 	bl	8009948 <USBD_LL_IsStallEP>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	2201      	movs	r2, #1
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	e002      	b.n	800887c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	2202      	movs	r2, #2
 8008880:	4619      	mov	r1, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fbaf 	bl	8008fe6 <USBD_CtlSendData>
          break;
 8008888:	e004      	b.n	8008894 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fb39 	bl	8008f04 <USBD_CtlError>
        break;
 8008892:	bf00      	nop
      }
      break;
 8008894:	e004      	b.n	80088a0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fb33 	bl	8008f04 <USBD_CtlError>
      break;
 800889e:	bf00      	nop
    }
    break;
 80088a0:	e004      	b.n	80088ac <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fb2d 	bl	8008f04 <USBD_CtlError>
    break;
 80088aa:	bf00      	nop
  }

  return ret;
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
	...

080088b8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088c2:	2300      	movs	r3, #0
 80088c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	885b      	ldrh	r3, [r3, #2]
 80088d2:	0a1b      	lsrs	r3, r3, #8
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	3b01      	subs	r3, #1
 80088d8:	2b06      	cmp	r3, #6
 80088da:	f200 8128 	bhi.w	8008b2e <USBD_GetDescriptor+0x276>
 80088de:	a201      	add	r2, pc, #4	; (adr r2, 80088e4 <USBD_GetDescriptor+0x2c>)
 80088e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e4:	08008901 	.word	0x08008901
 80088e8:	08008919 	.word	0x08008919
 80088ec:	08008959 	.word	0x08008959
 80088f0:	08008b2f 	.word	0x08008b2f
 80088f4:	08008b2f 	.word	0x08008b2f
 80088f8:	08008acf 	.word	0x08008acf
 80088fc:	08008afb 	.word	0x08008afb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	7c12      	ldrb	r2, [r2, #16]
 800890c:	f107 0108 	add.w	r1, r7, #8
 8008910:	4610      	mov	r0, r2
 8008912:	4798      	blx	r3
 8008914:	60f8      	str	r0, [r7, #12]
    break;
 8008916:	e112      	b.n	8008b3e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	7c1b      	ldrb	r3, [r3, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10d      	bne.n	800893c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008928:	f107 0208 	add.w	r2, r7, #8
 800892c:	4610      	mov	r0, r2
 800892e:	4798      	blx	r3
 8008930:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	3301      	adds	r3, #1
 8008936:	2202      	movs	r2, #2
 8008938:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800893a:	e100      	b.n	8008b3e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008944:	f107 0208 	add.w	r2, r7, #8
 8008948:	4610      	mov	r0, r2
 800894a:	4798      	blx	r3
 800894c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3301      	adds	r3, #1
 8008952:	2202      	movs	r2, #2
 8008954:	701a      	strb	r2, [r3, #0]
    break;
 8008956:	e0f2      	b.n	8008b3e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	885b      	ldrh	r3, [r3, #2]
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b05      	cmp	r3, #5
 8008960:	f200 80ac 	bhi.w	8008abc <USBD_GetDescriptor+0x204>
 8008964:	a201      	add	r2, pc, #4	; (adr r2, 800896c <USBD_GetDescriptor+0xb4>)
 8008966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896a:	bf00      	nop
 800896c:	08008985 	.word	0x08008985
 8008970:	080089b9 	.word	0x080089b9
 8008974:	080089ed 	.word	0x080089ed
 8008978:	08008a21 	.word	0x08008a21
 800897c:	08008a55 	.word	0x08008a55
 8008980:	08008a89 	.word	0x08008a89
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	7c12      	ldrb	r2, [r2, #16]
 800899c:	f107 0108 	add.w	r1, r7, #8
 80089a0:	4610      	mov	r0, r2
 80089a2:	4798      	blx	r3
 80089a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089a6:	e091      	b.n	8008acc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 faaa 	bl	8008f04 <USBD_CtlError>
        err++;
 80089b0:	7afb      	ldrb	r3, [r7, #11]
 80089b2:	3301      	adds	r3, #1
 80089b4:	72fb      	strb	r3, [r7, #11]
      break;
 80089b6:	e089      	b.n	8008acc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00b      	beq.n	80089dc <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	7c12      	ldrb	r2, [r2, #16]
 80089d0:	f107 0108 	add.w	r1, r7, #8
 80089d4:	4610      	mov	r0, r2
 80089d6:	4798      	blx	r3
 80089d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089da:	e077      	b.n	8008acc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fa90 	bl	8008f04 <USBD_CtlError>
        err++;
 80089e4:	7afb      	ldrb	r3, [r7, #11]
 80089e6:	3301      	adds	r3, #1
 80089e8:	72fb      	strb	r3, [r7, #11]
      break;
 80089ea:	e06f      	b.n	8008acc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00b      	beq.n	8008a10 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	7c12      	ldrb	r2, [r2, #16]
 8008a04:	f107 0108 	add.w	r1, r7, #8
 8008a08:	4610      	mov	r0, r2
 8008a0a:	4798      	blx	r3
 8008a0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a0e:	e05d      	b.n	8008acc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fa76 	bl	8008f04 <USBD_CtlError>
        err++;
 8008a18:	7afb      	ldrb	r3, [r7, #11]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a1e:	e055      	b.n	8008acc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00b      	beq.n	8008a44 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	7c12      	ldrb	r2, [r2, #16]
 8008a38:	f107 0108 	add.w	r1, r7, #8
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4798      	blx	r3
 8008a40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a42:	e043      	b.n	8008acc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa5c 	bl	8008f04 <USBD_CtlError>
        err++;
 8008a4c:	7afb      	ldrb	r3, [r7, #11]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	72fb      	strb	r3, [r7, #11]
      break;
 8008a52:	e03b      	b.n	8008acc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5a:	695b      	ldr	r3, [r3, #20]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00b      	beq.n	8008a78 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	7c12      	ldrb	r2, [r2, #16]
 8008a6c:	f107 0108 	add.w	r1, r7, #8
 8008a70:	4610      	mov	r0, r2
 8008a72:	4798      	blx	r3
 8008a74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a76:	e029      	b.n	8008acc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fa42 	bl	8008f04 <USBD_CtlError>
        err++;
 8008a80:	7afb      	ldrb	r3, [r7, #11]
 8008a82:	3301      	adds	r3, #1
 8008a84:	72fb      	strb	r3, [r7, #11]
      break;
 8008a86:	e021      	b.n	8008acc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00b      	beq.n	8008aac <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	7c12      	ldrb	r2, [r2, #16]
 8008aa0:	f107 0108 	add.w	r1, r7, #8
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	4798      	blx	r3
 8008aa8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008aaa:	e00f      	b.n	8008acc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fa28 	bl	8008f04 <USBD_CtlError>
        err++;
 8008ab4:	7afb      	ldrb	r3, [r7, #11]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	72fb      	strb	r3, [r7, #11]
      break;
 8008aba:	e007      	b.n	8008acc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fa20 	bl	8008f04 <USBD_CtlError>
      err++;
 8008ac4:	7afb      	ldrb	r3, [r7, #11]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008aca:	bf00      	nop
    }
    break;
 8008acc:	e037      	b.n	8008b3e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	7c1b      	ldrb	r3, [r3, #16]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d109      	bne.n	8008aea <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ade:	f107 0208 	add.w	r2, r7, #8
 8008ae2:	4610      	mov	r0, r2
 8008ae4:	4798      	blx	r3
 8008ae6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008ae8:	e029      	b.n	8008b3e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fa09 	bl	8008f04 <USBD_CtlError>
      err++;
 8008af2:	7afb      	ldrb	r3, [r7, #11]
 8008af4:	3301      	adds	r3, #1
 8008af6:	72fb      	strb	r3, [r7, #11]
    break;
 8008af8:	e021      	b.n	8008b3e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	7c1b      	ldrb	r3, [r3, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10d      	bne.n	8008b1e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0a:	f107 0208 	add.w	r2, r7, #8
 8008b0e:	4610      	mov	r0, r2
 8008b10:	4798      	blx	r3
 8008b12:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3301      	adds	r3, #1
 8008b18:	2207      	movs	r2, #7
 8008b1a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b1c:	e00f      	b.n	8008b3e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f9ef 	bl	8008f04 <USBD_CtlError>
      err++;
 8008b26:	7afb      	ldrb	r3, [r7, #11]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	72fb      	strb	r3, [r7, #11]
    break;
 8008b2c:	e007      	b.n	8008b3e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f9e7 	bl	8008f04 <USBD_CtlError>
    err++;
 8008b36:	7afb      	ldrb	r3, [r7, #11]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	72fb      	strb	r3, [r7, #11]
    break;
 8008b3c:	bf00      	nop
  }

  if (err != 0U)
 8008b3e:	7afb      	ldrb	r3, [r7, #11]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d11e      	bne.n	8008b82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	88db      	ldrh	r3, [r3, #6]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d016      	beq.n	8008b7a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008b4c:	893b      	ldrh	r3, [r7, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00e      	beq.n	8008b70 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	88da      	ldrh	r2, [r3, #6]
 8008b56:	893b      	ldrh	r3, [r7, #8]
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	bf28      	it	cs
 8008b5c:	4613      	movcs	r3, r2
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b62:	893b      	ldrh	r3, [r7, #8]
 8008b64:	461a      	mov	r2, r3
 8008b66:	68f9      	ldr	r1, [r7, #12]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fa3c 	bl	8008fe6 <USBD_CtlSendData>
 8008b6e:	e009      	b.n	8008b84 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008b70:	6839      	ldr	r1, [r7, #0]
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f9c6 	bl	8008f04 <USBD_CtlError>
 8008b78:	e004      	b.n	8008b84 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fa8d 	bl	800909a <USBD_CtlSendStatus>
 8008b80:	e000      	b.n	8008b84 <USBD_GetDescriptor+0x2cc>
    return;
 8008b82:	bf00      	nop
    }
  }
}
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop

08008b8c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	889b      	ldrh	r3, [r3, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d130      	bne.n	8008c00 <USBD_SetAddress+0x74>
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	88db      	ldrh	r3, [r3, #6]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d12c      	bne.n	8008c00 <USBD_SetAddress+0x74>
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	885b      	ldrh	r3, [r3, #2]
 8008baa:	2b7f      	cmp	r3, #127	; 0x7f
 8008bac:	d828      	bhi.n	8008c00 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	885b      	ldrh	r3, [r3, #2]
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc0:	2b03      	cmp	r3, #3
 8008bc2:	d104      	bne.n	8008bce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f99c 	bl	8008f04 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bcc:	e01c      	b.n	8008c08 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	7bfa      	ldrb	r2, [r7, #15]
 8008bd2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
 8008bd8:	4619      	mov	r1, r3
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fee0 	bl	80099a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 fa5a 	bl	800909a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d004      	beq.n	8008bf6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf4:	e008      	b.n	8008c08 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bfe:	e003      	b.n	8008c08 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f97e 	bl	8008f04 <USBD_CtlError>
  }
}
 8008c08:	bf00      	nop
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	885b      	ldrh	r3, [r3, #2]
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	4b4b      	ldr	r3, [pc, #300]	; (8008d54 <USBD_SetConfig+0x144>)
 8008c26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c28:	4b4a      	ldr	r3, [pc, #296]	; (8008d54 <USBD_SetConfig+0x144>)
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d905      	bls.n	8008c3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f966 	bl	8008f04 <USBD_CtlError>
    return USBD_FAIL;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e087      	b.n	8008d4c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d002      	beq.n	8008c4c <USBD_SetConfig+0x3c>
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d025      	beq.n	8008c96 <USBD_SetConfig+0x86>
 8008c4a:	e071      	b.n	8008d30 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008c4c:	4b41      	ldr	r3, [pc, #260]	; (8008d54 <USBD_SetConfig+0x144>)
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d01c      	beq.n	8008c8e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008c54:	4b3f      	ldr	r3, [pc, #252]	; (8008d54 <USBD_SetConfig+0x144>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c5e:	4b3d      	ldr	r3, [pc, #244]	; (8008d54 <USBD_SetConfig+0x144>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7ff f9a7 	bl	8007fb8 <USBD_SetClassConfig>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d004      	beq.n	8008c7e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f944 	bl	8008f04 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c7c:	e065      	b.n	8008d4a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fa0b 	bl	800909a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2203      	movs	r2, #3
 8008c88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008c8c:	e05d      	b.n	8008d4a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fa03 	bl	800909a <USBD_CtlSendStatus>
    break;
 8008c94:	e059      	b.n	8008d4a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008c96:	4b2f      	ldr	r3, [pc, #188]	; (8008d54 <USBD_SetConfig+0x144>)
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d112      	bne.n	8008cc4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008ca6:	4b2b      	ldr	r3, [pc, #172]	; (8008d54 <USBD_SetConfig+0x144>)
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	461a      	mov	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cb0:	4b28      	ldr	r3, [pc, #160]	; (8008d54 <USBD_SetConfig+0x144>)
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f7ff f99a 	bl	8007ff0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f9ec 	bl	800909a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008cc2:	e042      	b.n	8008d4a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008cc4:	4b23      	ldr	r3, [pc, #140]	; (8008d54 <USBD_SetConfig+0x144>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d02a      	beq.n	8008d28 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7ff f988 	bl	8007ff0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008ce0:	4b1c      	ldr	r3, [pc, #112]	; (8008d54 <USBD_SetConfig+0x144>)
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cea:	4b1a      	ldr	r3, [pc, #104]	; (8008d54 <USBD_SetConfig+0x144>)
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f7ff f961 	bl	8007fb8 <USBD_SetClassConfig>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00f      	beq.n	8008d20 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008d00:	6839      	ldr	r1, [r7, #0]
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f8fe 	bl	8008f04 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff f96d 	bl	8007ff0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2202      	movs	r2, #2
 8008d1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008d1e:	e014      	b.n	8008d4a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f9ba 	bl	800909a <USBD_CtlSendStatus>
    break;
 8008d26:	e010      	b.n	8008d4a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f9b6 	bl	800909a <USBD_CtlSendStatus>
    break;
 8008d2e:	e00c      	b.n	8008d4a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f8e6 	bl	8008f04 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d38:	4b06      	ldr	r3, [pc, #24]	; (8008d54 <USBD_SetConfig+0x144>)
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7ff f956 	bl	8007ff0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008d44:	2303      	movs	r3, #3
 8008d46:	73fb      	strb	r3, [r7, #15]
    break;
 8008d48:	bf00      	nop
  }

  return ret;
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20000204 	.word	0x20000204

08008d58 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	88db      	ldrh	r3, [r3, #6]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d004      	beq.n	8008d74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f8c9 	bl	8008f04 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008d72:	e021      	b.n	8008db8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	db17      	blt.n	8008dae <USBD_GetConfig+0x56>
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	dd02      	ble.n	8008d88 <USBD_GetConfig+0x30>
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	d00b      	beq.n	8008d9e <USBD_GetConfig+0x46>
 8008d86:	e012      	b.n	8008dae <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	3308      	adds	r3, #8
 8008d92:	2201      	movs	r2, #1
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f925 	bl	8008fe6 <USBD_CtlSendData>
      break;
 8008d9c:	e00c      	b.n	8008db8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	3304      	adds	r3, #4
 8008da2:	2201      	movs	r2, #1
 8008da4:	4619      	mov	r1, r3
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f91d 	bl	8008fe6 <USBD_CtlSendData>
      break;
 8008dac:	e004      	b.n	8008db8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f8a7 	bl	8008f04 <USBD_CtlError>
      break;
 8008db6:	bf00      	nop
}
 8008db8:	bf00      	nop
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d81e      	bhi.n	8008e14 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	88db      	ldrh	r3, [r3, #6]
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d004      	beq.n	8008de8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f88f 	bl	8008f04 <USBD_CtlError>
      break;
 8008de6:	e01a      	b.n	8008e1e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d005      	beq.n	8008e04 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	f043 0202 	orr.w	r2, r3, #2
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	330c      	adds	r3, #12
 8008e08:	2202      	movs	r2, #2
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f8ea 	bl	8008fe6 <USBD_CtlSendData>
    break;
 8008e12:	e004      	b.n	8008e1e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f874 	bl	8008f04 <USBD_CtlError>
    break;
 8008e1c:	bf00      	nop
  }
}
 8008e1e:	bf00      	nop
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b082      	sub	sp, #8
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	885b      	ldrh	r3, [r3, #2]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d106      	bne.n	8008e46 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f92a 	bl	800909a <USBD_CtlSendStatus>
  }
}
 8008e46:	bf00      	nop
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b082      	sub	sp, #8
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d80b      	bhi.n	8008e7c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	885b      	ldrh	r3, [r3, #2]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d10c      	bne.n	8008e86 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f910 	bl	800909a <USBD_CtlSendStatus>
      }
      break;
 8008e7a:	e004      	b.n	8008e86 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f840 	bl	8008f04 <USBD_CtlError>
      break;
 8008e84:	e000      	b.n	8008e88 <USBD_ClrFeature+0x3a>
      break;
 8008e86:	bf00      	nop
  }
}
 8008e88:	bf00      	nop
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	781a      	ldrb	r2, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	781a      	ldrb	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f7ff fad3 	bl	8008466 <SWAPBYTE>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7ff fac6 	bl	8008466 <SWAPBYTE>
 8008eda:	4603      	mov	r3, r0
 8008edc:	461a      	mov	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	3301      	adds	r3, #1
 8008eec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f7ff fab9 	bl	8008466 <SWAPBYTE>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	80da      	strh	r2, [r3, #6]
}
 8008efc:	bf00      	nop
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f0e:	2180      	movs	r1, #128	; 0x80
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fcdb 	bl	80098cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f16:	2100      	movs	r1, #0
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fcd7 	bl	80098cc <USBD_LL_StallEP>
}
 8008f1e:	bf00      	nop
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b086      	sub	sp, #24
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f32:	2300      	movs	r3, #0
 8008f34:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d036      	beq.n	8008faa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f40:	6938      	ldr	r0, [r7, #16]
 8008f42:	f000 f836 	bl	8008fb2 <USBD_GetLen>
 8008f46:	4603      	mov	r3, r0
 8008f48:	3301      	adds	r3, #1
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	005b      	lsls	r3, r3, #1
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f54:	7dfb      	ldrb	r3, [r7, #23]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	4413      	add	r3, r2
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	7812      	ldrb	r2, [r2, #0]
 8008f5e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f60:	7dfb      	ldrb	r3, [r7, #23]
 8008f62:	3301      	adds	r3, #1
 8008f64:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	2203      	movs	r2, #3
 8008f6e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	3301      	adds	r3, #1
 8008f74:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f76:	e013      	b.n	8008fa0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	7812      	ldrb	r2, [r2, #0]
 8008f82:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	3301      	adds	r3, #1
 8008f88:	613b      	str	r3, [r7, #16]
    idx++;
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	4413      	add	r3, r2
 8008f96:	2200      	movs	r2, #0
 8008f98:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f9a:	7dfb      	ldrb	r3, [r7, #23]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e7      	bne.n	8008f78 <USBD_GetString+0x52>
 8008fa8:	e000      	b.n	8008fac <USBD_GetString+0x86>
    return;
 8008faa:	bf00      	nop
  }
}
 8008fac:	3718      	adds	r7, #24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b085      	sub	sp, #20
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fc2:	e005      	b.n	8008fd0 <USBD_GetLen+0x1e>
  {
    len++;
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1f5      	bne.n	8008fc4 <USBD_GetLen+0x12>
  }

  return len;
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3714      	adds	r7, #20
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr

08008fe6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	60f8      	str	r0, [r7, #12]
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2202      	movs	r2, #2
 8008ff6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	2100      	movs	r1, #0
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f000 fce6 	bl	80099de <USBD_LL_Transmit>

  return USBD_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	2100      	movs	r1, #0
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f000 fcd5 	bl	80099de <USBD_LL_Transmit>

  return USBD_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b084      	sub	sp, #16
 8009042:	af00      	add	r7, sp, #0
 8009044:	60f8      	str	r0, [r7, #12]
 8009046:	60b9      	str	r1, [r7, #8]
 8009048:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2203      	movs	r2, #3
 800904e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	2100      	movs	r1, #0
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 fcd9 	bl	8009a20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	2100      	movs	r1, #0
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 fcc8 	bl	8009a20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b082      	sub	sp, #8
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2204      	movs	r2, #4
 80090a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090aa:	2300      	movs	r3, #0
 80090ac:	2200      	movs	r2, #0
 80090ae:	2100      	movs	r1, #0
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 fc94 	bl	80099de <USBD_LL_Transmit>

  return USBD_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2205      	movs	r2, #5
 80090cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090d0:	2300      	movs	r3, #0
 80090d2:	2200      	movs	r2, #0
 80090d4:	2100      	movs	r1, #0
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fca2 	bl	8009a20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
	...

080090e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090ec:	2200      	movs	r2, #0
 80090ee:	4912      	ldr	r1, [pc, #72]	; (8009138 <MX_USB_DEVICE_Init+0x50>)
 80090f0:	4812      	ldr	r0, [pc, #72]	; (800913c <MX_USB_DEVICE_Init+0x54>)
 80090f2:	f7fe fef3 	bl	8007edc <USBD_Init>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090fc:	f7f7 fea8 	bl	8000e50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009100:	490f      	ldr	r1, [pc, #60]	; (8009140 <MX_USB_DEVICE_Init+0x58>)
 8009102:	480e      	ldr	r0, [pc, #56]	; (800913c <MX_USB_DEVICE_Init+0x54>)
 8009104:	f7fe ff20 	bl	8007f48 <USBD_RegisterClass>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d001      	beq.n	8009112 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800910e:	f7f7 fe9f 	bl	8000e50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009112:	490c      	ldr	r1, [pc, #48]	; (8009144 <MX_USB_DEVICE_Init+0x5c>)
 8009114:	4809      	ldr	r0, [pc, #36]	; (800913c <MX_USB_DEVICE_Init+0x54>)
 8009116:	f7fe fe45 	bl	8007da4 <USBD_CDC_RegisterInterface>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009120:	f7f7 fe96 	bl	8000e50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009124:	4805      	ldr	r0, [pc, #20]	; (800913c <MX_USB_DEVICE_Init+0x54>)
 8009126:	f7fe ff30 	bl	8007f8a <USBD_Start>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009130:	f7f7 fe8e 	bl	8000e50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009134:	bf00      	nop
 8009136:	bd80      	pop	{r7, pc}
 8009138:	20000130 	.word	0x20000130
 800913c:	200003fc 	.word	0x200003fc
 8009140:	20000018 	.word	0x20000018
 8009144:	2000011c 	.word	0x2000011c

08009148 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800914c:	2200      	movs	r2, #0
 800914e:	4905      	ldr	r1, [pc, #20]	; (8009164 <CDC_Init_FS+0x1c>)
 8009150:	4805      	ldr	r0, [pc, #20]	; (8009168 <CDC_Init_FS+0x20>)
 8009152:	f7fe fe3c 	bl	8007dce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009156:	4905      	ldr	r1, [pc, #20]	; (800916c <CDC_Init_FS+0x24>)
 8009158:	4803      	ldr	r0, [pc, #12]	; (8009168 <CDC_Init_FS+0x20>)
 800915a:	f7fe fe51 	bl	8007e00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800915e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009160:	4618      	mov	r0, r3
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20000ecc 	.word	0x20000ecc
 8009168:	200003fc 	.word	0x200003fc
 800916c:	200006cc 	.word	0x200006cc

08009170 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009174:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009176:	4618      	mov	r0, r3
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	6039      	str	r1, [r7, #0]
 800918a:	71fb      	strb	r3, [r7, #7]
 800918c:	4613      	mov	r3, r2
 800918e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009190:	79fb      	ldrb	r3, [r7, #7]
 8009192:	2b23      	cmp	r3, #35	; 0x23
 8009194:	d84a      	bhi.n	800922c <CDC_Control_FS+0xac>
 8009196:	a201      	add	r2, pc, #4	; (adr r2, 800919c <CDC_Control_FS+0x1c>)
 8009198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919c:	0800922d 	.word	0x0800922d
 80091a0:	0800922d 	.word	0x0800922d
 80091a4:	0800922d 	.word	0x0800922d
 80091a8:	0800922d 	.word	0x0800922d
 80091ac:	0800922d 	.word	0x0800922d
 80091b0:	0800922d 	.word	0x0800922d
 80091b4:	0800922d 	.word	0x0800922d
 80091b8:	0800922d 	.word	0x0800922d
 80091bc:	0800922d 	.word	0x0800922d
 80091c0:	0800922d 	.word	0x0800922d
 80091c4:	0800922d 	.word	0x0800922d
 80091c8:	0800922d 	.word	0x0800922d
 80091cc:	0800922d 	.word	0x0800922d
 80091d0:	0800922d 	.word	0x0800922d
 80091d4:	0800922d 	.word	0x0800922d
 80091d8:	0800922d 	.word	0x0800922d
 80091dc:	0800922d 	.word	0x0800922d
 80091e0:	0800922d 	.word	0x0800922d
 80091e4:	0800922d 	.word	0x0800922d
 80091e8:	0800922d 	.word	0x0800922d
 80091ec:	0800922d 	.word	0x0800922d
 80091f0:	0800922d 	.word	0x0800922d
 80091f4:	0800922d 	.word	0x0800922d
 80091f8:	0800922d 	.word	0x0800922d
 80091fc:	0800922d 	.word	0x0800922d
 8009200:	0800922d 	.word	0x0800922d
 8009204:	0800922d 	.word	0x0800922d
 8009208:	0800922d 	.word	0x0800922d
 800920c:	0800922d 	.word	0x0800922d
 8009210:	0800922d 	.word	0x0800922d
 8009214:	0800922d 	.word	0x0800922d
 8009218:	0800922d 	.word	0x0800922d
 800921c:	0800922d 	.word	0x0800922d
 8009220:	0800922d 	.word	0x0800922d
 8009224:	0800922d 	.word	0x0800922d
 8009228:	0800922d 	.word	0x0800922d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800922c:	bf00      	nop
  }

  return (USBD_OK);
 800922e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009230:	4618      	mov	r0, r3
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009246:	6879      	ldr	r1, [r7, #4]
 8009248:	4808      	ldr	r0, [pc, #32]	; (800926c <CDC_Receive_FS+0x30>)
 800924a:	f7fe fdd9 	bl	8007e00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800924e:	4807      	ldr	r0, [pc, #28]	; (800926c <CDC_Receive_FS+0x30>)
 8009250:	f7fe fe1a 	bl	8007e88 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, Len[0]);
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4619      	mov	r1, r3
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7f7 f9d6 	bl	800060c <CDC_ReceiveCallback>
  return (USBD_OK);
 8009260:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	200003fc 	.word	0x200003fc

08009270 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009280:	4b0d      	ldr	r3, [pc, #52]	; (80092b8 <CDC_Transmit_FS+0x48>)
 8009282:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009286:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009292:	2301      	movs	r3, #1
 8009294:	e00b      	b.n	80092ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009296:	887b      	ldrh	r3, [r7, #2]
 8009298:	461a      	mov	r2, r3
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	4806      	ldr	r0, [pc, #24]	; (80092b8 <CDC_Transmit_FS+0x48>)
 800929e:	f7fe fd96 	bl	8007dce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80092a2:	4805      	ldr	r0, [pc, #20]	; (80092b8 <CDC_Transmit_FS+0x48>)
 80092a4:	f7fe fdc0 	bl	8007e28 <USBD_CDC_TransmitPacket>
 80092a8:	4603      	mov	r3, r0
 80092aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	200003fc 	.word	0x200003fc

080092bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	4613      	mov	r3, r2
 80092c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80092ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	371c      	adds	r7, #28
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
	...

080092e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	6039      	str	r1, [r7, #0]
 80092ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	2212      	movs	r2, #18
 80092f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80092f2:	4b03      	ldr	r3, [pc, #12]	; (8009300 <USBD_FS_DeviceDescriptor+0x20>)
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	2000014c 	.word	0x2000014c

08009304 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	4603      	mov	r3, r0
 800930c:	6039      	str	r1, [r7, #0]
 800930e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	2204      	movs	r2, #4
 8009314:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009316:	4b03      	ldr	r3, [pc, #12]	; (8009324 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009318:	4618      	mov	r0, r3
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr
 8009324:	20000160 	.word	0x20000160

08009328 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	6039      	str	r1, [r7, #0]
 8009332:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009334:	79fb      	ldrb	r3, [r7, #7]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d105      	bne.n	8009346 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	4907      	ldr	r1, [pc, #28]	; (800935c <USBD_FS_ProductStrDescriptor+0x34>)
 800933e:	4808      	ldr	r0, [pc, #32]	; (8009360 <USBD_FS_ProductStrDescriptor+0x38>)
 8009340:	f7ff fdf1 	bl	8008f26 <USBD_GetString>
 8009344:	e004      	b.n	8009350 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	4904      	ldr	r1, [pc, #16]	; (800935c <USBD_FS_ProductStrDescriptor+0x34>)
 800934a:	4805      	ldr	r0, [pc, #20]	; (8009360 <USBD_FS_ProductStrDescriptor+0x38>)
 800934c:	f7ff fdeb 	bl	8008f26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009350:	4b02      	ldr	r3, [pc, #8]	; (800935c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009352:	4618      	mov	r0, r3
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	200016cc 	.word	0x200016cc
 8009360:	08009d08 	.word	0x08009d08

08009364 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	6039      	str	r1, [r7, #0]
 800936e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009370:	683a      	ldr	r2, [r7, #0]
 8009372:	4904      	ldr	r1, [pc, #16]	; (8009384 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009374:	4804      	ldr	r0, [pc, #16]	; (8009388 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009376:	f7ff fdd6 	bl	8008f26 <USBD_GetString>
  return USBD_StrDesc;
 800937a:	4b02      	ldr	r3, [pc, #8]	; (8009384 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800937c:	4618      	mov	r0, r3
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	200016cc 	.word	0x200016cc
 8009388:	08009d20 	.word	0x08009d20

0800938c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	4603      	mov	r3, r0
 8009394:	6039      	str	r1, [r7, #0]
 8009396:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	221a      	movs	r2, #26
 800939c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800939e:	f000 f843 	bl	8009428 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80093a2:	4b02      	ldr	r3, [pc, #8]	; (80093ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	20000164 	.word	0x20000164

080093b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	4603      	mov	r3, r0
 80093b8:	6039      	str	r1, [r7, #0]
 80093ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093bc:	79fb      	ldrb	r3, [r7, #7]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d105      	bne.n	80093ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	4907      	ldr	r1, [pc, #28]	; (80093e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80093c6:	4808      	ldr	r0, [pc, #32]	; (80093e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093c8:	f7ff fdad 	bl	8008f26 <USBD_GetString>
 80093cc:	e004      	b.n	80093d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	4904      	ldr	r1, [pc, #16]	; (80093e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80093d2:	4805      	ldr	r0, [pc, #20]	; (80093e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093d4:	f7ff fda7 	bl	8008f26 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093d8:	4b02      	ldr	r3, [pc, #8]	; (80093e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	200016cc 	.word	0x200016cc
 80093e8:	08009d34 	.word	0x08009d34

080093ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	4603      	mov	r3, r0
 80093f4:	6039      	str	r1, [r7, #0]
 80093f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093f8:	79fb      	ldrb	r3, [r7, #7]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d105      	bne.n	800940a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	4907      	ldr	r1, [pc, #28]	; (8009420 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009402:	4808      	ldr	r0, [pc, #32]	; (8009424 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009404:	f7ff fd8f 	bl	8008f26 <USBD_GetString>
 8009408:	e004      	b.n	8009414 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	4904      	ldr	r1, [pc, #16]	; (8009420 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800940e:	4805      	ldr	r0, [pc, #20]	; (8009424 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009410:	f7ff fd89 	bl	8008f26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009414:	4b02      	ldr	r3, [pc, #8]	; (8009420 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009416:	4618      	mov	r0, r3
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	200016cc 	.word	0x200016cc
 8009424:	08009d40 	.word	0x08009d40

08009428 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800942e:	4b0f      	ldr	r3, [pc, #60]	; (800946c <Get_SerialNum+0x44>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009434:	4b0e      	ldr	r3, [pc, #56]	; (8009470 <Get_SerialNum+0x48>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800943a:	4b0e      	ldr	r3, [pc, #56]	; (8009474 <Get_SerialNum+0x4c>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4413      	add	r3, r2
 8009446:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d009      	beq.n	8009462 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800944e:	2208      	movs	r2, #8
 8009450:	4909      	ldr	r1, [pc, #36]	; (8009478 <Get_SerialNum+0x50>)
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f000 f814 	bl	8009480 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009458:	2204      	movs	r2, #4
 800945a:	4908      	ldr	r1, [pc, #32]	; (800947c <Get_SerialNum+0x54>)
 800945c:	68b8      	ldr	r0, [r7, #8]
 800945e:	f000 f80f 	bl	8009480 <IntToUnicode>
  }
}
 8009462:	bf00      	nop
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	1fff7a10 	.word	0x1fff7a10
 8009470:	1fff7a14 	.word	0x1fff7a14
 8009474:	1fff7a18 	.word	0x1fff7a18
 8009478:	20000166 	.word	0x20000166
 800947c:	20000176 	.word	0x20000176

08009480 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009480:	b480      	push	{r7}
 8009482:	b087      	sub	sp, #28
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	4613      	mov	r3, r2
 800948c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800948e:	2300      	movs	r3, #0
 8009490:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009492:	2300      	movs	r3, #0
 8009494:	75fb      	strb	r3, [r7, #23]
 8009496:	e027      	b.n	80094e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	0f1b      	lsrs	r3, r3, #28
 800949c:	2b09      	cmp	r3, #9
 800949e:	d80b      	bhi.n	80094b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	0f1b      	lsrs	r3, r3, #28
 80094a4:	b2da      	uxtb	r2, r3
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
 80094a8:	005b      	lsls	r3, r3, #1
 80094aa:	4619      	mov	r1, r3
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	440b      	add	r3, r1
 80094b0:	3230      	adds	r2, #48	; 0x30
 80094b2:	b2d2      	uxtb	r2, r2
 80094b4:	701a      	strb	r2, [r3, #0]
 80094b6:	e00a      	b.n	80094ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	0f1b      	lsrs	r3, r3, #28
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	7dfb      	ldrb	r3, [r7, #23]
 80094c0:	005b      	lsls	r3, r3, #1
 80094c2:	4619      	mov	r1, r3
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	440b      	add	r3, r1
 80094c8:	3237      	adds	r2, #55	; 0x37
 80094ca:	b2d2      	uxtb	r2, r2
 80094cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	011b      	lsls	r3, r3, #4
 80094d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
 80094d6:	005b      	lsls	r3, r3, #1
 80094d8:	3301      	adds	r3, #1
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	4413      	add	r3, r2
 80094de:	2200      	movs	r2, #0
 80094e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094e2:	7dfb      	ldrb	r3, [r7, #23]
 80094e4:	3301      	adds	r3, #1
 80094e6:	75fb      	strb	r3, [r7, #23]
 80094e8:	7dfa      	ldrb	r2, [r7, #23]
 80094ea:	79fb      	ldrb	r3, [r7, #7]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d3d3      	bcc.n	8009498 <IntToUnicode+0x18>
  }
}
 80094f0:	bf00      	nop
 80094f2:	371c      	adds	r7, #28
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b08a      	sub	sp, #40	; 0x28
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009504:	f107 0314 	add.w	r3, r7, #20
 8009508:	2200      	movs	r2, #0
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	605a      	str	r2, [r3, #4]
 800950e:	609a      	str	r2, [r3, #8]
 8009510:	60da      	str	r2, [r3, #12]
 8009512:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800951c:	d13a      	bne.n	8009594 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800951e:	2300      	movs	r3, #0
 8009520:	613b      	str	r3, [r7, #16]
 8009522:	4b1e      	ldr	r3, [pc, #120]	; (800959c <HAL_PCD_MspInit+0xa0>)
 8009524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009526:	4a1d      	ldr	r2, [pc, #116]	; (800959c <HAL_PCD_MspInit+0xa0>)
 8009528:	f043 0301 	orr.w	r3, r3, #1
 800952c:	6313      	str	r3, [r2, #48]	; 0x30
 800952e:	4b1b      	ldr	r3, [pc, #108]	; (800959c <HAL_PCD_MspInit+0xa0>)
 8009530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	613b      	str	r3, [r7, #16]
 8009538:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800953a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800953e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009540:	2302      	movs	r3, #2
 8009542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009544:	2300      	movs	r3, #0
 8009546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009548:	2303      	movs	r3, #3
 800954a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800954c:	230a      	movs	r3, #10
 800954e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009550:	f107 0314 	add.w	r3, r7, #20
 8009554:	4619      	mov	r1, r3
 8009556:	4812      	ldr	r0, [pc, #72]	; (80095a0 <HAL_PCD_MspInit+0xa4>)
 8009558:	f7f8 ffe4 	bl	8002524 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800955c:	4b0f      	ldr	r3, [pc, #60]	; (800959c <HAL_PCD_MspInit+0xa0>)
 800955e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009560:	4a0e      	ldr	r2, [pc, #56]	; (800959c <HAL_PCD_MspInit+0xa0>)
 8009562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009566:	6353      	str	r3, [r2, #52]	; 0x34
 8009568:	2300      	movs	r3, #0
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	4b0b      	ldr	r3, [pc, #44]	; (800959c <HAL_PCD_MspInit+0xa0>)
 800956e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009570:	4a0a      	ldr	r2, [pc, #40]	; (800959c <HAL_PCD_MspInit+0xa0>)
 8009572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009576:	6453      	str	r3, [r2, #68]	; 0x44
 8009578:	4b08      	ldr	r3, [pc, #32]	; (800959c <HAL_PCD_MspInit+0xa0>)
 800957a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800957c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009580:	60fb      	str	r3, [r7, #12]
 8009582:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009584:	2200      	movs	r2, #0
 8009586:	2100      	movs	r1, #0
 8009588:	2043      	movs	r0, #67	; 0x43
 800958a:	f7f8 fc26 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800958e:	2043      	movs	r0, #67	; 0x43
 8009590:	f7f8 fc3f 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009594:	bf00      	nop
 8009596:	3728      	adds	r7, #40	; 0x28
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	40023800 	.word	0x40023800
 80095a0:	40020000 	.word	0x40020000

080095a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80095b8:	4619      	mov	r1, r3
 80095ba:	4610      	mov	r0, r2
 80095bc:	f7fe fd30 	bl	8008020 <USBD_LL_SetupStage>
}
 80095c0:	bf00      	nop
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80095da:	78fa      	ldrb	r2, [r7, #3]
 80095dc:	6879      	ldr	r1, [r7, #4]
 80095de:	4613      	mov	r3, r2
 80095e0:	00db      	lsls	r3, r3, #3
 80095e2:	1a9b      	subs	r3, r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	440b      	add	r3, r1
 80095e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	78fb      	ldrb	r3, [r7, #3]
 80095f0:	4619      	mov	r1, r3
 80095f2:	f7fe fd68 	bl	80080c6 <USBD_LL_DataOutStage>
}
 80095f6:	bf00      	nop
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b082      	sub	sp, #8
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	460b      	mov	r3, r1
 8009608:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009610:	78fa      	ldrb	r2, [r7, #3]
 8009612:	6879      	ldr	r1, [r7, #4]
 8009614:	4613      	mov	r3, r2
 8009616:	00db      	lsls	r3, r3, #3
 8009618:	1a9b      	subs	r3, r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	440b      	add	r3, r1
 800961e:	3348      	adds	r3, #72	; 0x48
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	78fb      	ldrb	r3, [r7, #3]
 8009624:	4619      	mov	r1, r3
 8009626:	f7fe fdb1 	bl	800818c <USBD_LL_DataInStage>
}
 800962a:	bf00      	nop
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b082      	sub	sp, #8
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009640:	4618      	mov	r0, r3
 8009642:	f7fe feb5 	bl	80083b0 <USBD_LL_SOF>
}
 8009646:	bf00      	nop
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009656:	2301      	movs	r3, #1
 8009658:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	2b02      	cmp	r3, #2
 8009660:	d001      	beq.n	8009666 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009662:	f7f7 fbf5 	bl	8000e50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800966c:	7bfa      	ldrb	r2, [r7, #15]
 800966e:	4611      	mov	r1, r2
 8009670:	4618      	mov	r0, r3
 8009672:	f7fe fe62 	bl	800833a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800967c:	4618      	mov	r0, r3
 800967e:	f7fe fe1b 	bl	80082b8 <USBD_LL_Reset>
}
 8009682:	bf00      	nop
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
	...

0800968c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe fe5d 	bl	800835a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	6812      	ldr	r2, [r2, #0]
 80096ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80096b2:	f043 0301 	orr.w	r3, r3, #1
 80096b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a1b      	ldr	r3, [r3, #32]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d005      	beq.n	80096cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096c0:	4b04      	ldr	r3, [pc, #16]	; (80096d4 <HAL_PCD_SuspendCallback+0x48>)
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	4a03      	ldr	r2, [pc, #12]	; (80096d4 <HAL_PCD_SuspendCallback+0x48>)
 80096c6:	f043 0306 	orr.w	r3, r3, #6
 80096ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80096cc:	bf00      	nop
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	e000ed00 	.word	0xe000ed00

080096d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fe fe4c 	bl	8008384 <USBD_LL_Resume>
}
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	460b      	mov	r3, r1
 80096fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009706:	78fa      	ldrb	r2, [r7, #3]
 8009708:	4611      	mov	r1, r2
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe fe77 	bl	80083fe <USBD_LL_IsoOUTIncomplete>
}
 8009710:	bf00      	nop
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800972a:	78fa      	ldrb	r2, [r7, #3]
 800972c:	4611      	mov	r1, r2
 800972e:	4618      	mov	r0, r3
 8009730:	f7fe fe58 	bl	80083e4 <USBD_LL_IsoINIncomplete>
}
 8009734:	bf00      	nop
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe fe64 	bl	8008418 <USBD_LL_DevConnected>
}
 8009750:	bf00      	nop
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009766:	4618      	mov	r0, r3
 8009768:	f7fe fe61 	bl	800842e <USBD_LL_DevDisconnected>
}
 800976c:	bf00      	nop
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d13c      	bne.n	80097fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009784:	4a20      	ldr	r2, [pc, #128]	; (8009808 <USBD_LL_Init+0x94>)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a1e      	ldr	r2, [pc, #120]	; (8009808 <USBD_LL_Init+0x94>)
 8009790:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009794:	4b1c      	ldr	r3, [pc, #112]	; (8009808 <USBD_LL_Init+0x94>)
 8009796:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800979a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800979c:	4b1a      	ldr	r3, [pc, #104]	; (8009808 <USBD_LL_Init+0x94>)
 800979e:	2204      	movs	r2, #4
 80097a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80097a2:	4b19      	ldr	r3, [pc, #100]	; (8009808 <USBD_LL_Init+0x94>)
 80097a4:	2202      	movs	r2, #2
 80097a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80097a8:	4b17      	ldr	r3, [pc, #92]	; (8009808 <USBD_LL_Init+0x94>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80097ae:	4b16      	ldr	r3, [pc, #88]	; (8009808 <USBD_LL_Init+0x94>)
 80097b0:	2202      	movs	r2, #2
 80097b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80097b4:	4b14      	ldr	r3, [pc, #80]	; (8009808 <USBD_LL_Init+0x94>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80097ba:	4b13      	ldr	r3, [pc, #76]	; (8009808 <USBD_LL_Init+0x94>)
 80097bc:	2200      	movs	r2, #0
 80097be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80097c0:	4b11      	ldr	r3, [pc, #68]	; (8009808 <USBD_LL_Init+0x94>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80097c6:	4b10      	ldr	r3, [pc, #64]	; (8009808 <USBD_LL_Init+0x94>)
 80097c8:	2200      	movs	r2, #0
 80097ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80097cc:	4b0e      	ldr	r3, [pc, #56]	; (8009808 <USBD_LL_Init+0x94>)
 80097ce:	2200      	movs	r2, #0
 80097d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80097d2:	480d      	ldr	r0, [pc, #52]	; (8009808 <USBD_LL_Init+0x94>)
 80097d4:	f7f9 f85a 	bl	800288c <HAL_PCD_Init>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80097de:	f7f7 fb37 	bl	8000e50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80097e2:	2180      	movs	r1, #128	; 0x80
 80097e4:	4808      	ldr	r0, [pc, #32]	; (8009808 <USBD_LL_Init+0x94>)
 80097e6:	f7fa f9b8 	bl	8003b5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80097ea:	2240      	movs	r2, #64	; 0x40
 80097ec:	2100      	movs	r1, #0
 80097ee:	4806      	ldr	r0, [pc, #24]	; (8009808 <USBD_LL_Init+0x94>)
 80097f0:	f7fa f96c 	bl	8003acc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80097f4:	2280      	movs	r2, #128	; 0x80
 80097f6:	2101      	movs	r1, #1
 80097f8:	4803      	ldr	r0, [pc, #12]	; (8009808 <USBD_LL_Init+0x94>)
 80097fa:	f7fa f967 	bl	8003acc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	200018cc 	.word	0x200018cc

0800980c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009822:	4618      	mov	r0, r3
 8009824:	f7f9 f94f 	bl	8002ac6 <HAL_PCD_Start>
 8009828:	4603      	mov	r3, r0
 800982a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	4618      	mov	r0, r3
 8009830:	f000 f92a 	bl	8009a88 <USBD_Get_USB_Status>
 8009834:	4603      	mov	r3, r0
 8009836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009838:	7bbb      	ldrb	r3, [r7, #14]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	4608      	mov	r0, r1
 800984c:	4611      	mov	r1, r2
 800984e:	461a      	mov	r2, r3
 8009850:	4603      	mov	r3, r0
 8009852:	70fb      	strb	r3, [r7, #3]
 8009854:	460b      	mov	r3, r1
 8009856:	70bb      	strb	r3, [r7, #2]
 8009858:	4613      	mov	r3, r2
 800985a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009860:	2300      	movs	r3, #0
 8009862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800986a:	78bb      	ldrb	r3, [r7, #2]
 800986c:	883a      	ldrh	r2, [r7, #0]
 800986e:	78f9      	ldrb	r1, [r7, #3]
 8009870:	f7f9 fd33 	bl	80032da <HAL_PCD_EP_Open>
 8009874:	4603      	mov	r3, r0
 8009876:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009878:	7bfb      	ldrb	r3, [r7, #15]
 800987a:	4618      	mov	r0, r3
 800987c:	f000 f904 	bl	8009a88 <USBD_Get_USB_Status>
 8009880:	4603      	mov	r3, r0
 8009882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009884:	7bbb      	ldrb	r3, [r7, #14]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	460b      	mov	r3, r1
 8009898:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098a8:	78fa      	ldrb	r2, [r7, #3]
 80098aa:	4611      	mov	r1, r2
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7f9 fd7c 	bl	80033aa <HAL_PCD_EP_Close>
 80098b2:	4603      	mov	r3, r0
 80098b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 f8e5 	bl	8009a88 <USBD_Get_USB_Status>
 80098be:	4603      	mov	r3, r0
 80098c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	460b      	mov	r3, r1
 80098d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098e6:	78fa      	ldrb	r2, [r7, #3]
 80098e8:	4611      	mov	r1, r2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7f9 fe54 	bl	8003598 <HAL_PCD_EP_SetStall>
 80098f0:	4603      	mov	r3, r0
 80098f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 f8c6 	bl	8009a88 <USBD_Get_USB_Status>
 80098fc:	4603      	mov	r3, r0
 80098fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009900:	7bbb      	ldrb	r3, [r7, #14]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b084      	sub	sp, #16
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	460b      	mov	r3, r1
 8009914:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009924:	78fa      	ldrb	r2, [r7, #3]
 8009926:	4611      	mov	r1, r2
 8009928:	4618      	mov	r0, r3
 800992a:	f7f9 fe99 	bl	8003660 <HAL_PCD_EP_ClrStall>
 800992e:	4603      	mov	r3, r0
 8009930:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009932:	7bfb      	ldrb	r3, [r7, #15]
 8009934:	4618      	mov	r0, r3
 8009936:	f000 f8a7 	bl	8009a88 <USBD_Get_USB_Status>
 800993a:	4603      	mov	r3, r0
 800993c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800993e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	460b      	mov	r3, r1
 8009952:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800995a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800995c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009960:	2b00      	cmp	r3, #0
 8009962:	da0b      	bge.n	800997c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009964:	78fb      	ldrb	r3, [r7, #3]
 8009966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800996a:	68f9      	ldr	r1, [r7, #12]
 800996c:	4613      	mov	r3, r2
 800996e:	00db      	lsls	r3, r3, #3
 8009970:	1a9b      	subs	r3, r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	440b      	add	r3, r1
 8009976:	333e      	adds	r3, #62	; 0x3e
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	e00b      	b.n	8009994 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009982:	68f9      	ldr	r1, [r7, #12]
 8009984:	4613      	mov	r3, r2
 8009986:	00db      	lsls	r3, r3, #3
 8009988:	1a9b      	subs	r3, r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	440b      	add	r3, r1
 800998e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009992:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	460b      	mov	r3, r1
 80099aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099b0:	2300      	movs	r3, #0
 80099b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099ba:	78fa      	ldrb	r2, [r7, #3]
 80099bc:	4611      	mov	r1, r2
 80099be:	4618      	mov	r0, r3
 80099c0:	f7f9 fc66 	bl	8003290 <HAL_PCD_SetAddress>
 80099c4:	4603      	mov	r3, r0
 80099c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 f85c 	bl	8009a88 <USBD_Get_USB_Status>
 80099d0:	4603      	mov	r3, r0
 80099d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b086      	sub	sp, #24
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	60f8      	str	r0, [r7, #12]
 80099e6:	607a      	str	r2, [r7, #4]
 80099e8:	603b      	str	r3, [r7, #0]
 80099ea:	460b      	mov	r3, r1
 80099ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099fc:	7af9      	ldrb	r1, [r7, #11]
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	f7f9 fd7f 	bl	8003504 <HAL_PCD_EP_Transmit>
 8009a06:	4603      	mov	r3, r0
 8009a08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a0a:	7dfb      	ldrb	r3, [r7, #23]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f000 f83b 	bl	8009a88 <USBD_Get_USB_Status>
 8009a12:	4603      	mov	r3, r0
 8009a14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a16:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3718      	adds	r7, #24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	607a      	str	r2, [r7, #4]
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a34:	2300      	movs	r3, #0
 8009a36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a3e:	7af9      	ldrb	r1, [r7, #11]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	f7f9 fcfb 	bl	800343e <HAL_PCD_EP_Receive>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 f81a 	bl	8009a88 <USBD_Get_USB_Status>
 8009a54:	4603      	mov	r3, r0
 8009a56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a58:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3718      	adds	r7, #24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b082      	sub	sp, #8
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a74:	78fa      	ldrb	r2, [r7, #3]
 8009a76:	4611      	mov	r1, r2
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7f9 fd2b 	bl	80034d4 <HAL_PCD_EP_GetRxCount>
 8009a7e:	4603      	mov	r3, r0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	4603      	mov	r3, r0
 8009a90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a92:	2300      	movs	r3, #0
 8009a94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a96:	79fb      	ldrb	r3, [r7, #7]
 8009a98:	2b03      	cmp	r3, #3
 8009a9a:	d817      	bhi.n	8009acc <USBD_Get_USB_Status+0x44>
 8009a9c:	a201      	add	r2, pc, #4	; (adr r2, 8009aa4 <USBD_Get_USB_Status+0x1c>)
 8009a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa2:	bf00      	nop
 8009aa4:	08009ab5 	.word	0x08009ab5
 8009aa8:	08009abb 	.word	0x08009abb
 8009aac:	08009ac1 	.word	0x08009ac1
 8009ab0:	08009ac7 	.word	0x08009ac7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ab8:	e00b      	b.n	8009ad2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009aba:	2303      	movs	r3, #3
 8009abc:	73fb      	strb	r3, [r7, #15]
    break;
 8009abe:	e008      	b.n	8009ad2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ac4:	e005      	b.n	8009ad2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8009aca:	e002      	b.n	8009ad2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009acc:	2303      	movs	r3, #3
 8009ace:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad0:	bf00      	nop
  }
  return usb_status;
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <__errno>:
 8009ae0:	4b01      	ldr	r3, [pc, #4]	; (8009ae8 <__errno+0x8>)
 8009ae2:	6818      	ldr	r0, [r3, #0]
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	20000180 	.word	0x20000180

08009aec <__libc_init_array>:
 8009aec:	b570      	push	{r4, r5, r6, lr}
 8009aee:	4e0d      	ldr	r6, [pc, #52]	; (8009b24 <__libc_init_array+0x38>)
 8009af0:	4c0d      	ldr	r4, [pc, #52]	; (8009b28 <__libc_init_array+0x3c>)
 8009af2:	1ba4      	subs	r4, r4, r6
 8009af4:	10a4      	asrs	r4, r4, #2
 8009af6:	2500      	movs	r5, #0
 8009af8:	42a5      	cmp	r5, r4
 8009afa:	d109      	bne.n	8009b10 <__libc_init_array+0x24>
 8009afc:	4e0b      	ldr	r6, [pc, #44]	; (8009b2c <__libc_init_array+0x40>)
 8009afe:	4c0c      	ldr	r4, [pc, #48]	; (8009b30 <__libc_init_array+0x44>)
 8009b00:	f000 f8f6 	bl	8009cf0 <_init>
 8009b04:	1ba4      	subs	r4, r4, r6
 8009b06:	10a4      	asrs	r4, r4, #2
 8009b08:	2500      	movs	r5, #0
 8009b0a:	42a5      	cmp	r5, r4
 8009b0c:	d105      	bne.n	8009b1a <__libc_init_array+0x2e>
 8009b0e:	bd70      	pop	{r4, r5, r6, pc}
 8009b10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b14:	4798      	blx	r3
 8009b16:	3501      	adds	r5, #1
 8009b18:	e7ee      	b.n	8009af8 <__libc_init_array+0xc>
 8009b1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b1e:	4798      	blx	r3
 8009b20:	3501      	adds	r5, #1
 8009b22:	e7f2      	b.n	8009b0a <__libc_init_array+0x1e>
 8009b24:	08009d78 	.word	0x08009d78
 8009b28:	08009d78 	.word	0x08009d78
 8009b2c:	08009d78 	.word	0x08009d78
 8009b30:	08009d7c 	.word	0x08009d7c

08009b34 <malloc>:
 8009b34:	4b02      	ldr	r3, [pc, #8]	; (8009b40 <malloc+0xc>)
 8009b36:	4601      	mov	r1, r0
 8009b38:	6818      	ldr	r0, [r3, #0]
 8009b3a:	f000 b86d 	b.w	8009c18 <_malloc_r>
 8009b3e:	bf00      	nop
 8009b40:	20000180 	.word	0x20000180

08009b44 <free>:
 8009b44:	4b02      	ldr	r3, [pc, #8]	; (8009b50 <free+0xc>)
 8009b46:	4601      	mov	r1, r0
 8009b48:	6818      	ldr	r0, [r3, #0]
 8009b4a:	f000 b817 	b.w	8009b7c <_free_r>
 8009b4e:	bf00      	nop
 8009b50:	20000180 	.word	0x20000180

08009b54 <memcpy>:
 8009b54:	b510      	push	{r4, lr}
 8009b56:	1e43      	subs	r3, r0, #1
 8009b58:	440a      	add	r2, r1
 8009b5a:	4291      	cmp	r1, r2
 8009b5c:	d100      	bne.n	8009b60 <memcpy+0xc>
 8009b5e:	bd10      	pop	{r4, pc}
 8009b60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b68:	e7f7      	b.n	8009b5a <memcpy+0x6>

08009b6a <memset>:
 8009b6a:	4402      	add	r2, r0
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d100      	bne.n	8009b74 <memset+0xa>
 8009b72:	4770      	bx	lr
 8009b74:	f803 1b01 	strb.w	r1, [r3], #1
 8009b78:	e7f9      	b.n	8009b6e <memset+0x4>
	...

08009b7c <_free_r>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	4605      	mov	r5, r0
 8009b80:	2900      	cmp	r1, #0
 8009b82:	d045      	beq.n	8009c10 <_free_r+0x94>
 8009b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b88:	1f0c      	subs	r4, r1, #4
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	bfb8      	it	lt
 8009b8e:	18e4      	addlt	r4, r4, r3
 8009b90:	f000 f8ac 	bl	8009cec <__malloc_lock>
 8009b94:	4a1f      	ldr	r2, [pc, #124]	; (8009c14 <_free_r+0x98>)
 8009b96:	6813      	ldr	r3, [r2, #0]
 8009b98:	4610      	mov	r0, r2
 8009b9a:	b933      	cbnz	r3, 8009baa <_free_r+0x2e>
 8009b9c:	6063      	str	r3, [r4, #4]
 8009b9e:	6014      	str	r4, [r2, #0]
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ba6:	f000 b8a2 	b.w	8009cee <__malloc_unlock>
 8009baa:	42a3      	cmp	r3, r4
 8009bac:	d90c      	bls.n	8009bc8 <_free_r+0x4c>
 8009bae:	6821      	ldr	r1, [r4, #0]
 8009bb0:	1862      	adds	r2, r4, r1
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	bf04      	itt	eq
 8009bb6:	681a      	ldreq	r2, [r3, #0]
 8009bb8:	685b      	ldreq	r3, [r3, #4]
 8009bba:	6063      	str	r3, [r4, #4]
 8009bbc:	bf04      	itt	eq
 8009bbe:	1852      	addeq	r2, r2, r1
 8009bc0:	6022      	streq	r2, [r4, #0]
 8009bc2:	6004      	str	r4, [r0, #0]
 8009bc4:	e7ec      	b.n	8009ba0 <_free_r+0x24>
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	685a      	ldr	r2, [r3, #4]
 8009bca:	b10a      	cbz	r2, 8009bd0 <_free_r+0x54>
 8009bcc:	42a2      	cmp	r2, r4
 8009bce:	d9fa      	bls.n	8009bc6 <_free_r+0x4a>
 8009bd0:	6819      	ldr	r1, [r3, #0]
 8009bd2:	1858      	adds	r0, r3, r1
 8009bd4:	42a0      	cmp	r0, r4
 8009bd6:	d10b      	bne.n	8009bf0 <_free_r+0x74>
 8009bd8:	6820      	ldr	r0, [r4, #0]
 8009bda:	4401      	add	r1, r0
 8009bdc:	1858      	adds	r0, r3, r1
 8009bde:	4282      	cmp	r2, r0
 8009be0:	6019      	str	r1, [r3, #0]
 8009be2:	d1dd      	bne.n	8009ba0 <_free_r+0x24>
 8009be4:	6810      	ldr	r0, [r2, #0]
 8009be6:	6852      	ldr	r2, [r2, #4]
 8009be8:	605a      	str	r2, [r3, #4]
 8009bea:	4401      	add	r1, r0
 8009bec:	6019      	str	r1, [r3, #0]
 8009bee:	e7d7      	b.n	8009ba0 <_free_r+0x24>
 8009bf0:	d902      	bls.n	8009bf8 <_free_r+0x7c>
 8009bf2:	230c      	movs	r3, #12
 8009bf4:	602b      	str	r3, [r5, #0]
 8009bf6:	e7d3      	b.n	8009ba0 <_free_r+0x24>
 8009bf8:	6820      	ldr	r0, [r4, #0]
 8009bfa:	1821      	adds	r1, r4, r0
 8009bfc:	428a      	cmp	r2, r1
 8009bfe:	bf04      	itt	eq
 8009c00:	6811      	ldreq	r1, [r2, #0]
 8009c02:	6852      	ldreq	r2, [r2, #4]
 8009c04:	6062      	str	r2, [r4, #4]
 8009c06:	bf04      	itt	eq
 8009c08:	1809      	addeq	r1, r1, r0
 8009c0a:	6021      	streq	r1, [r4, #0]
 8009c0c:	605c      	str	r4, [r3, #4]
 8009c0e:	e7c7      	b.n	8009ba0 <_free_r+0x24>
 8009c10:	bd38      	pop	{r3, r4, r5, pc}
 8009c12:	bf00      	nop
 8009c14:	20000208 	.word	0x20000208

08009c18 <_malloc_r>:
 8009c18:	b570      	push	{r4, r5, r6, lr}
 8009c1a:	1ccd      	adds	r5, r1, #3
 8009c1c:	f025 0503 	bic.w	r5, r5, #3
 8009c20:	3508      	adds	r5, #8
 8009c22:	2d0c      	cmp	r5, #12
 8009c24:	bf38      	it	cc
 8009c26:	250c      	movcc	r5, #12
 8009c28:	2d00      	cmp	r5, #0
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	db01      	blt.n	8009c32 <_malloc_r+0x1a>
 8009c2e:	42a9      	cmp	r1, r5
 8009c30:	d903      	bls.n	8009c3a <_malloc_r+0x22>
 8009c32:	230c      	movs	r3, #12
 8009c34:	6033      	str	r3, [r6, #0]
 8009c36:	2000      	movs	r0, #0
 8009c38:	bd70      	pop	{r4, r5, r6, pc}
 8009c3a:	f000 f857 	bl	8009cec <__malloc_lock>
 8009c3e:	4a21      	ldr	r2, [pc, #132]	; (8009cc4 <_malloc_r+0xac>)
 8009c40:	6814      	ldr	r4, [r2, #0]
 8009c42:	4621      	mov	r1, r4
 8009c44:	b991      	cbnz	r1, 8009c6c <_malloc_r+0x54>
 8009c46:	4c20      	ldr	r4, [pc, #128]	; (8009cc8 <_malloc_r+0xb0>)
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	b91b      	cbnz	r3, 8009c54 <_malloc_r+0x3c>
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f000 f83d 	bl	8009ccc <_sbrk_r>
 8009c52:	6020      	str	r0, [r4, #0]
 8009c54:	4629      	mov	r1, r5
 8009c56:	4630      	mov	r0, r6
 8009c58:	f000 f838 	bl	8009ccc <_sbrk_r>
 8009c5c:	1c43      	adds	r3, r0, #1
 8009c5e:	d124      	bne.n	8009caa <_malloc_r+0x92>
 8009c60:	230c      	movs	r3, #12
 8009c62:	6033      	str	r3, [r6, #0]
 8009c64:	4630      	mov	r0, r6
 8009c66:	f000 f842 	bl	8009cee <__malloc_unlock>
 8009c6a:	e7e4      	b.n	8009c36 <_malloc_r+0x1e>
 8009c6c:	680b      	ldr	r3, [r1, #0]
 8009c6e:	1b5b      	subs	r3, r3, r5
 8009c70:	d418      	bmi.n	8009ca4 <_malloc_r+0x8c>
 8009c72:	2b0b      	cmp	r3, #11
 8009c74:	d90f      	bls.n	8009c96 <_malloc_r+0x7e>
 8009c76:	600b      	str	r3, [r1, #0]
 8009c78:	50cd      	str	r5, [r1, r3]
 8009c7a:	18cc      	adds	r4, r1, r3
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	f000 f836 	bl	8009cee <__malloc_unlock>
 8009c82:	f104 000b 	add.w	r0, r4, #11
 8009c86:	1d23      	adds	r3, r4, #4
 8009c88:	f020 0007 	bic.w	r0, r0, #7
 8009c8c:	1ac3      	subs	r3, r0, r3
 8009c8e:	d0d3      	beq.n	8009c38 <_malloc_r+0x20>
 8009c90:	425a      	negs	r2, r3
 8009c92:	50e2      	str	r2, [r4, r3]
 8009c94:	e7d0      	b.n	8009c38 <_malloc_r+0x20>
 8009c96:	428c      	cmp	r4, r1
 8009c98:	684b      	ldr	r3, [r1, #4]
 8009c9a:	bf16      	itet	ne
 8009c9c:	6063      	strne	r3, [r4, #4]
 8009c9e:	6013      	streq	r3, [r2, #0]
 8009ca0:	460c      	movne	r4, r1
 8009ca2:	e7eb      	b.n	8009c7c <_malloc_r+0x64>
 8009ca4:	460c      	mov	r4, r1
 8009ca6:	6849      	ldr	r1, [r1, #4]
 8009ca8:	e7cc      	b.n	8009c44 <_malloc_r+0x2c>
 8009caa:	1cc4      	adds	r4, r0, #3
 8009cac:	f024 0403 	bic.w	r4, r4, #3
 8009cb0:	42a0      	cmp	r0, r4
 8009cb2:	d005      	beq.n	8009cc0 <_malloc_r+0xa8>
 8009cb4:	1a21      	subs	r1, r4, r0
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	f000 f808 	bl	8009ccc <_sbrk_r>
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	d0cf      	beq.n	8009c60 <_malloc_r+0x48>
 8009cc0:	6025      	str	r5, [r4, #0]
 8009cc2:	e7db      	b.n	8009c7c <_malloc_r+0x64>
 8009cc4:	20000208 	.word	0x20000208
 8009cc8:	2000020c 	.word	0x2000020c

08009ccc <_sbrk_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4c06      	ldr	r4, [pc, #24]	; (8009ce8 <_sbrk_r+0x1c>)
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	4608      	mov	r0, r1
 8009cd6:	6023      	str	r3, [r4, #0]
 8009cd8:	f7f7 fabe 	bl	8001258 <_sbrk>
 8009cdc:	1c43      	adds	r3, r0, #1
 8009cde:	d102      	bne.n	8009ce6 <_sbrk_r+0x1a>
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	b103      	cbz	r3, 8009ce6 <_sbrk_r+0x1a>
 8009ce4:	602b      	str	r3, [r5, #0]
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	20001cd4 	.word	0x20001cd4

08009cec <__malloc_lock>:
 8009cec:	4770      	bx	lr

08009cee <__malloc_unlock>:
 8009cee:	4770      	bx	lr

08009cf0 <_init>:
 8009cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf2:	bf00      	nop
 8009cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cf6:	bc08      	pop	{r3}
 8009cf8:	469e      	mov	lr, r3
 8009cfa:	4770      	bx	lr

08009cfc <_fini>:
 8009cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfe:	bf00      	nop
 8009d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d02:	bc08      	pop	{r3}
 8009d04:	469e      	mov	lr, r3
 8009d06:	4770      	bx	lr
