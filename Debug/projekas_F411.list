
projekas_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009af8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009c90  08009c90  00019c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cf8  08009cf8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009cf8  08009cf8  00019cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d00  08009d00  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d00  08009d00  00019d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d04  08009d04  00019d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aec  200001e4  08009eec  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20001cd0  08009eec  00021cd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b747  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003960  00000000  00000000  0003b95b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f8  00000000  00000000  0003f2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001450  00000000  00000000  000408b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a973  00000000  00000000  00041d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012c9b  00000000  00000000  0005c67b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009798b  00000000  00000000  0006f316  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00106ca1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e00  00000000  00000000  00106d1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001e4 	.word	0x200001e4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009c78 	.word	0x08009c78

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001e8 	.word	0x200001e8
 80001d4:	08009c78 	.word	0x08009c78

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <reading_sensor>:
 ******************************************************************************
* @note funkcija nuskaito is jutiklio LSM9DS1 giroskopo ir akselerometro duomenis
*/

void reading_sensor(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	// nuskaitomi giroskopo ir akselerometro duomenys 12 baitu
	    CS_AG_value(GPIO_PIN_RESET); // pinas CS_A/G padaromas zemo lygio
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f2:	480d      	ldr	r0, [pc, #52]	; (8000528 <reading_sensor+0x40>)
 80004f4:	f002 f95c 	bl	80027b0 <HAL_GPIO_WritePin>
	    spiTXbuf[0] = 0x18|0x80;
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <reading_sensor+0x44>)
 80004fa:	2298      	movs	r2, #152	; 0x98
 80004fc:	701a      	strb	r2, [r3, #0]
	    HAL_SPI_Transmit(&hspi1,spiTXbuf,1,50); // i pirma skaitoma registra nusiunciama komanda 0x80 ijungiamas skaitymo rezimas
 80004fe:	2332      	movs	r3, #50	; 0x32
 8000500:	2201      	movs	r2, #1
 8000502:	490a      	ldr	r1, [pc, #40]	; (800052c <reading_sensor+0x44>)
 8000504:	480a      	ldr	r0, [pc, #40]	; (8000530 <reading_sensor+0x48>)
 8000506:	f003 ffcd 	bl	80044a4 <HAL_SPI_Transmit>
	    HAL_SPI_Receive(&hspi1,data_acc_gyr, 12, 50); // nuskaitomi duomenys
 800050a:	2332      	movs	r3, #50	; 0x32
 800050c:	220c      	movs	r2, #12
 800050e:	4909      	ldr	r1, [pc, #36]	; (8000534 <reading_sensor+0x4c>)
 8000510:	4807      	ldr	r0, [pc, #28]	; (8000530 <reading_sensor+0x48>)
 8000512:	f004 f8fb 	bl	800470c <HAL_SPI_Receive>
	    CS_AG_value(GPIO_PIN_SET); // pinas CS_A/G padaromas auksto lygio
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <reading_sensor+0x40>)
 800051e:	f002 f947 	bl	80027b0 <HAL_GPIO_WritePin>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40020400 	.word	0x40020400
 800052c:	20000210 	.word	0x20000210
 8000530:	20000358 	.word	0x20000358
 8000534:	20000258 	.word	0x20000258

08000538 <HAL_GPIO_EXTI_Callback>:
/**
 ******************************************************************************
* @note funkcija reikalinga patikrinimui ar jau yra naujas duomenu paketas kuri reikia nuskaityti
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  DataReadingFlag = 1;
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000544:	2201      	movs	r2, #1
 8000546:	701a      	strb	r2, [r3, #0]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	20000254 	.word	0x20000254

08000558 <HAL_ADC_ConvCpltCallback>:
/**
 ******************************************************************************
* @note Baterijos itampos lygio matavimui reikalinga funkcija
*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* This is called after the conversion is completed */
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <checking_baterry>:
 ******************************************************************************
* @note funkcija tikrina ar ADC verte nenukrito zemiau negu nustatyta riba
* jeigu nukrito zemiau ribos ijungiamas sviesos diodas.
*/
void checking_baterry(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	if(adcvalue[0] <= battery_threshold)
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <checking_baterry+0x2c>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	f640 42cc 	movw	r2, #3276	; 0xccc
 8000578:	4293      	cmp	r3, r2
 800057a:	d805      	bhi.n	8000588 <checking_baterry+0x1c>
	{
	  battery_aliarm(GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2110      	movs	r1, #16
 8000580:	4806      	ldr	r0, [pc, #24]	; (800059c <checking_baterry+0x30>)
 8000582:	f002 f915 	bl	80027b0 <HAL_GPIO_WritePin>
	}
	else
	{
	  battery_aliarm(GPIO_PIN_RESET);
	}
}
 8000586:	e004      	b.n	8000592 <checking_baterry+0x26>
	  battery_aliarm(GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2110      	movs	r1, #16
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <checking_baterry+0x30>)
 800058e:	f002 f90f 	bl	80027b0 <HAL_GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200002f4 	.word	0x200002f4
 800059c:	40020800 	.word	0x40020800

080005a0 <CDC_ReceiveCallback>:
/**
 ******************************************************************************
* @note funkcija duomenu nuskaitymui is kompiuterio

*/
void CDC_ReceiveCallback(uint8_t *buf, uint32_t len){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
	Receiveflag = 1;
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <CDC_ReceiveCallback+0x2c>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
    memcpy(receivedData, buf, strlen((char* )buf));
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff fe11 	bl	80001d8 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	461a      	mov	r2, r3
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <CDC_ReceiveCallback+0x30>)
 80005be:	f009 fa8d 	bl	8009adc <memcpy>
    //CDC_Transmit_FS(buf, len);
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200002ac 	.word	0x200002ac
 80005d0:	200002b0 	.word	0x200002b0

080005d4 <Motors_Control>:
/**
 ******************************************************************************
* @note funkcija kuri kontroluoja motoru sukimosi krypti

*/
void Motors_Control(int8_t DutyCycleA, int8_t DutyCycleB) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	460a      	mov	r2, r1
 80005de:	71fb      	strb	r3, [r7, #7]
 80005e0:	4613      	mov	r3, r2
 80005e2:	71bb      	strb	r3, [r7, #6]
	htim4.Instance->CCR1 = abs(DutyCycleA);  // Motor A speed control
 80005e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005ec:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005f0:	4b34      	ldr	r3, [pc, #208]	; (80006c4 <Motors_Control+0xf0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = abs(DutyCycleB);  // Motor B speed control
 80005f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005fa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005fe:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000602:	4b30      	ldr	r3, [pc, #192]	; (80006c4 <Motors_Control+0xf0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	639a      	str	r2, [r3, #56]	; 0x38

	// moving forward
	if (DutyCycleA > 0 && DutyCycleB > 0) {
 8000608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060c:	2b00      	cmp	r3, #0
 800060e:	dd0d      	ble.n	800062c <Motors_Control+0x58>
 8000610:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000614:	2b00      	cmp	r3, #0
 8000616:	dd09      	ble.n	800062c <Motors_Control+0x58>
		out1_out3(GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2150      	movs	r1, #80	; 0x50
 800061c:	482a      	ldr	r0, [pc, #168]	; (80006c8 <Motors_Control+0xf4>)
 800061e:	f002 f8c7 	bl	80027b0 <HAL_GPIO_WritePin>
		out2_out4(GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	21a0      	movs	r1, #160	; 0xa0
 8000626:	4828      	ldr	r0, [pc, #160]	; (80006c8 <Motors_Control+0xf4>)
 8000628:	f002 f8c2 	bl	80027b0 <HAL_GPIO_WritePin>

	}

	// moving backward
	if (DutyCycleA < 0 && DutyCycleB < 0) {
 800062c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000630:	2b00      	cmp	r3, #0
 8000632:	da0d      	bge.n	8000650 <Motors_Control+0x7c>
 8000634:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000638:	2b00      	cmp	r3, #0
 800063a:	da09      	bge.n	8000650 <Motors_Control+0x7c>
		out1_out3(GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	2150      	movs	r1, #80	; 0x50
 8000640:	4821      	ldr	r0, [pc, #132]	; (80006c8 <Motors_Control+0xf4>)
 8000642:	f002 f8b5 	bl	80027b0 <HAL_GPIO_WritePin>
		out2_out4(GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	21a0      	movs	r1, #160	; 0xa0
 800064a:	481f      	ldr	r0, [pc, #124]	; (80006c8 <Motors_Control+0xf4>)
 800064c:	f002 f8b0 	bl	80027b0 <HAL_GPIO_WritePin>
	}

	// stop
	if (DutyCycleA == 0 && DutyCycleB == 0) {
 8000650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d10d      	bne.n	8000674 <Motors_Control+0xa0>
 8000658:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d109      	bne.n	8000674 <Motors_Control+0xa0>
		out1_out3(GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2150      	movs	r1, #80	; 0x50
 8000664:	4818      	ldr	r0, [pc, #96]	; (80006c8 <Motors_Control+0xf4>)
 8000666:	f002 f8a3 	bl	80027b0 <HAL_GPIO_WritePin>
		out2_out4(GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	21a0      	movs	r1, #160	; 0xa0
 800066e:	4816      	ldr	r0, [pc, #88]	; (80006c8 <Motors_Control+0xf4>)
 8000670:	f002 f89e 	bl	80027b0 <HAL_GPIO_WritePin>
	}

	// moving to left
	if(DutyCycleA < 0 && DutyCycleB > 0) {
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	da0d      	bge.n	8000698 <Motors_Control+0xc4>
 800067c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000680:	2b00      	cmp	r3, #0
 8000682:	dd09      	ble.n	8000698 <Motors_Control+0xc4>
		out1_out4(GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2190      	movs	r1, #144	; 0x90
 8000688:	480f      	ldr	r0, [pc, #60]	; (80006c8 <Motors_Control+0xf4>)
 800068a:	f002 f891 	bl	80027b0 <HAL_GPIO_WritePin>
		out2_out3(GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2160      	movs	r1, #96	; 0x60
 8000692:	480d      	ldr	r0, [pc, #52]	; (80006c8 <Motors_Control+0xf4>)
 8000694:	f002 f88c 	bl	80027b0 <HAL_GPIO_WritePin>
	}

	// moving to right
	if (DutyCycleA > 0 && DutyCycleB < 0) {
 8000698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	dd0d      	ble.n	80006bc <Motors_Control+0xe8>
 80006a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	da09      	bge.n	80006bc <Motors_Control+0xe8>
		out1_out4(GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2190      	movs	r1, #144	; 0x90
 80006ac:	4806      	ldr	r0, [pc, #24]	; (80006c8 <Motors_Control+0xf4>)
 80006ae:	f002 f87f 	bl	80027b0 <HAL_GPIO_WritePin>
		out2_out3(GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2160      	movs	r1, #96	; 0x60
 80006b6:	4804      	ldr	r0, [pc, #16]	; (80006c8 <Motors_Control+0xf4>)
 80006b8:	f002 f87a 	bl	80027b0 <HAL_GPIO_WritePin>
	}
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000214 	.word	0x20000214
 80006c8:	40020000 	.word	0x40020000

080006cc <checking_package>:
 ******************************************************************************
* @note tikrinamas gautas paketas is kompiuterio pagal gauta paketa
* arba paleidziamo motorai arba siunciami is jutiklio nuskaityti duomenys i kompiuteri
*/
void checking_package(uint8_t data_request)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
	if(data_request == 'M')
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b4d      	cmp	r3, #77	; 0x4d
 80006da:	d10a      	bne.n	80006f2 <checking_package+0x26>
		Motors_Control(receivedData[1], receivedData[2]);
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <checking_package+0x40>)
 80006de:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <checking_package+0x40>)
 80006e4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80006e8:	4619      	mov	r1, r3
 80006ea:	4610      	mov	r0, r2
 80006ec:	f7ff ff72 	bl	80005d4 <Motors_Control>
	else
		CDC_Transmit_FS(data_acc_gyr, strlen((char *)data_acc_gyr));
}
 80006f0:	e008      	b.n	8000704 <checking_package+0x38>
		CDC_Transmit_FS(data_acc_gyr, strlen((char *)data_acc_gyr));
 80006f2:	4807      	ldr	r0, [pc, #28]	; (8000710 <checking_package+0x44>)
 80006f4:	f7ff fd70 	bl	80001d8 <strlen>
 80006f8:	4603      	mov	r3, r0
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	4619      	mov	r1, r3
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <checking_package+0x44>)
 8000700:	f008 fd7a 	bl	80091f8 <CDC_Transmit_FS>
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200002b0 	.word	0x200002b0
 8000710:	20000258 	.word	0x20000258

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000718:	f000 fdd8 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071c:	f000 f896 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000720:	f000 faa4 	bl	8000c6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000724:	f000 fa82 	bl	8000c2c <MX_DMA_Init>
  MX_TIM4_Init();
 8000728:	f000 f9d6 	bl	8000ad8 <MX_TIM4_Init>
  MX_SPI1_Init();
 800072c:	f000 f948 	bl	80009c0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000730:	f000 fa52 	bl	8000bd8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000734:	f008 fc9c 	bl	8009070 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000738:	f000 f8f0 	bl	800091c <MX_ADC1_Init>
  MX_TIM2_Init();
 800073c:	f000 f976 	bl	8000a2c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // paleidziami laikmaciai PWM signalo generavimui
 8000740:	2100      	movs	r1, #0
 8000742:	4838      	ldr	r0, [pc, #224]	; (8000824 <main+0x110>)
 8000744:	f004 fc4e 	bl	8004fe4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000748:	2104      	movs	r1, #4
 800074a:	4836      	ldr	r0, [pc, #216]	; (8000824 <main+0x110>)
 800074c:	f004 fc4a 	bl	8004fe4 <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcvalue, 1); // paleidziamas ADC baterijos itampos lygio matavimui
 8000750:	2201      	movs	r2, #1
 8000752:	4935      	ldr	r1, [pc, #212]	; (8000828 <main+0x114>)
 8000754:	4835      	ldr	r0, [pc, #212]	; (800082c <main+0x118>)
 8000756:	f000 fe91 	bl	800147c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 800075a:	4835      	ldr	r0, [pc, #212]	; (8000830 <main+0x11c>)
 800075c:	f004 fbbd 	bl	8004eda <HAL_TIM_Base_Start_IT>

  //*****************************************************//
  //komandu rasymas i jutikllio registrus
  // CTRL_REG1_G paleidziamas giroskopas
    CS_AG_value(GPIO_PIN_RESET); // pinas CS_A/G padaromas zemo lygio
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000766:	4833      	ldr	r0, [pc, #204]	; (8000834 <main+0x120>)
 8000768:	f002 f822 	bl	80027b0 <HAL_GPIO_WritePin>
    spiTXbuf[0] = 0x10;
 800076c:	4b32      	ldr	r3, [pc, #200]	; (8000838 <main+0x124>)
 800076e:	2210      	movs	r2, #16
 8000770:	701a      	strb	r2, [r3, #0]
    spiTXbuf[1] = 0x80;
 8000772:	4b31      	ldr	r3, [pc, #196]	; (8000838 <main+0x124>)
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	705a      	strb	r2, [r3, #1]
    HAL_SPI_Transmit(&hspi1,spiTXbuf,2,50); // siunciama registras + duomenys rasomi i registra
 8000778:	2332      	movs	r3, #50	; 0x32
 800077a:	2202      	movs	r2, #2
 800077c:	492e      	ldr	r1, [pc, #184]	; (8000838 <main+0x124>)
 800077e:	482f      	ldr	r0, [pc, #188]	; (800083c <main+0x128>)
 8000780:	f003 fe90 	bl	80044a4 <HAL_SPI_Transmit>
    CS_AG_value(GPIO_PIN_SET); // pinas CS_A/G padaromas auksto lygio
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078a:	482a      	ldr	r0, [pc, #168]	; (8000834 <main+0x120>)
 800078c:	f002 f810 	bl	80027b0 <HAL_GPIO_WritePin>

   // CTRL_REG6_XL  paleidziamas akselerometras
    CS_AG_value(GPIO_PIN_RESET); // pinas CS_A/G padaromas zemo lygio
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000796:	4827      	ldr	r0, [pc, #156]	; (8000834 <main+0x120>)
 8000798:	f002 f80a 	bl	80027b0 <HAL_GPIO_WritePin>
    spiTXbuf[0] = 0x20;
 800079c:	4b26      	ldr	r3, [pc, #152]	; (8000838 <main+0x124>)
 800079e:	2220      	movs	r2, #32
 80007a0:	701a      	strb	r2, [r3, #0]
    spiTXbuf[1] = 0x80;
 80007a2:	4b25      	ldr	r3, [pc, #148]	; (8000838 <main+0x124>)
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	705a      	strb	r2, [r3, #1]
    HAL_SPI_Transmit(&hspi1,spiTXbuf,2,50); // siunciama registras + duomenys rasomi i registra
 80007a8:	2332      	movs	r3, #50	; 0x32
 80007aa:	2202      	movs	r2, #2
 80007ac:	4922      	ldr	r1, [pc, #136]	; (8000838 <main+0x124>)
 80007ae:	4823      	ldr	r0, [pc, #140]	; (800083c <main+0x128>)
 80007b0:	f003 fe78 	bl	80044a4 <HAL_SPI_Transmit>
    CS_AG_value(GPIO_PIN_SET); // pinas CS_A/G padaromas auksto lygio
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ba:	481e      	ldr	r0, [pc, #120]	; (8000834 <main+0x120>)
 80007bc:	f001 fff8 	bl	80027b0 <HAL_GPIO_WritePin>

    // INT1_CTRL paleidziama giroskopo ir akselerometro pertrauktys
    CS_AG_value(GPIO_PIN_RESET); // pinas CS_A/G padaromas zemo lygio
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c6:	481b      	ldr	r0, [pc, #108]	; (8000834 <main+0x120>)
 80007c8:	f001 fff2 	bl	80027b0 <HAL_GPIO_WritePin>
    spiTXbuf[0] = 0x0C;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <main+0x124>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	701a      	strb	r2, [r3, #0]
    spiTXbuf[1] = 0xC3;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <main+0x124>)
 80007d4:	22c3      	movs	r2, #195	; 0xc3
 80007d6:	705a      	strb	r2, [r3, #1]
    HAL_SPI_Transmit(&hspi1,spiTXbuf,2,50); // siunciama registras + duomenys rasomi i registra
 80007d8:	2332      	movs	r3, #50	; 0x32
 80007da:	2202      	movs	r2, #2
 80007dc:	4916      	ldr	r1, [pc, #88]	; (8000838 <main+0x124>)
 80007de:	4817      	ldr	r0, [pc, #92]	; (800083c <main+0x128>)
 80007e0:	f003 fe60 	bl	80044a4 <HAL_SPI_Transmit>
    CS_AG_value(GPIO_PIN_SET); // pinas CS_A/G padaromas auksto lygio
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ea:	4812      	ldr	r0, [pc, #72]	; (8000834 <main+0x120>)
 80007ec:	f001 ffe0 	bl	80027b0 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(DataReadingFlag == 1)
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <main+0x12c>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d104      	bne.n	8000802 <main+0xee>
	  	  {
	  		  DataReadingFlag = 0;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <main+0x12c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
	  		  reading_sensor();
 80007fe:	f7ff fe73 	bl	80004e8 <reading_sensor>
	  	  }

	  if(Receiveflag == 1)
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <main+0x130>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d109      	bne.n	800081e <main+0x10a>
	  		{
	  			Receiveflag = 0;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <main+0x130>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
	  	  	  	checking_package(receivedData[0]);
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <main+0x134>)
 8000812:	f993 3000 	ldrsb.w	r3, [r3]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff57 	bl	80006cc <checking_package>
	  		}
	  checking_baterry();
 800081e:	f7ff fea5 	bl	800056c <checking_baterry>
	  if(DataReadingFlag == 1)
 8000822:	e7e5      	b.n	80007f0 <main+0xdc>
 8000824:	20000214 	.word	0x20000214
 8000828:	200002f4 	.word	0x200002f4
 800082c:	20000264 	.word	0x20000264
 8000830:	200003b0 	.word	0x200003b0
 8000834:	40020400 	.word	0x40020400
 8000838:	20000210 	.word	0x20000210
 800083c:	20000358 	.word	0x20000358
 8000840:	20000254 	.word	0x20000254
 8000844:	200002ac 	.word	0x200002ac
 8000848:	200002b0 	.word	0x200002b0

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b094      	sub	sp, #80	; 0x50
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0320 	add.w	r3, r7, #32
 8000856:	2230      	movs	r2, #48	; 0x30
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f009 f949 	bl	8009af2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	4b27      	ldr	r3, [pc, #156]	; (8000914 <SystemClock_Config+0xc8>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	4a26      	ldr	r2, [pc, #152]	; (8000914 <SystemClock_Config+0xc8>)
 800087a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087e:	6413      	str	r3, [r2, #64]	; 0x40
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <SystemClock_Config+0xc8>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	4b21      	ldr	r3, [pc, #132]	; (8000918 <SystemClock_Config+0xcc>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a20      	ldr	r2, [pc, #128]	; (8000918 <SystemClock_Config+0xcc>)
 8000896:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <SystemClock_Config+0xcc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008bc:	2310      	movs	r3, #16
 80008be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008c0:	23c0      	movs	r3, #192	; 0xc0
 80008c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008c4:	2304      	movs	r3, #4
 80008c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 f923 	bl	8003b1c <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008dc:	f000 fa7c 	bl	8000dd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e0:	230f      	movs	r3, #15
 80008e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e4:	2302      	movs	r3, #2
 80008e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2101      	movs	r1, #1
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 fb7e 	bl	8003ffc <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000906:	f000 fa67 	bl	8000dd8 <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3750      	adds	r7, #80	; 0x50
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000

0800091c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800092e:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <MX_ADC1_Init+0x9c>)
 8000930:	4a22      	ldr	r2, [pc, #136]	; (80009bc <MX_ADC1_Init+0xa0>)
 8000932:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000934:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <MX_ADC1_Init+0x9c>)
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800093a:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_ADC1_Init+0x9c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <MX_ADC1_Init+0x9c>)
 8000942:	2201      	movs	r2, #1
 8000944:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_ADC1_Init+0x9c>)
 8000948:	2200      	movs	r2, #0
 800094a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_ADC1_Init+0x9c>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_ADC1_Init+0x9c>)
 8000956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_ADC1_Init+0x9c>)
 800095e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_ADC1_Init+0x9c>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_ADC1_Init+0x9c>)
 800096c:	2201      	movs	r2, #1
 800096e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_ADC1_Init+0x9c>)
 8000972:	2201      	movs	r2, #1
 8000974:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_ADC1_Init+0x9c>)
 800097a:	2201      	movs	r2, #1
 800097c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800097e:	480e      	ldr	r0, [pc, #56]	; (80009b8 <MX_ADC1_Init+0x9c>)
 8000980:	f000 fd38 	bl	80013f4 <HAL_ADC_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800098a:	f000 fa25 	bl	8000dd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800098e:	2301      	movs	r3, #1
 8000990:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000992:	2301      	movs	r3, #1
 8000994:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	4619      	mov	r1, r3
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <MX_ADC1_Init+0x9c>)
 80009a0:	f000 fe54 	bl	800164c <HAL_ADC_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80009aa:	f000 fa15 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000264 	.word	0x20000264
 80009bc:	40012000 	.word	0x40012000

080009c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009c6:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <MX_SPI1_Init+0x68>)
 80009c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_SPI1_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <MX_SPI1_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_SPI1_Init+0x64>)
 8000a0c:	220a      	movs	r2, #10
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_SPI1_Init+0x64>)
 8000a12:	f003 fce3 	bl	80043dc <HAL_SPI_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a1c:	f000 f9dc 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000358 	.word	0x20000358
 8000a28:	40013000 	.word	0x40013000

08000a2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
 8000a4a:	615a      	str	r2, [r3, #20]
 8000a4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <MX_TIM2_Init+0xa8>)
 8000a50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800-1;
 8000a56:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <MX_TIM2_Init+0xa8>)
 8000a58:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000a5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_TIM2_Init+0xa8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_TIM2_Init+0xa8>)
 8000a66:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <MX_TIM2_Init+0xa8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_TIM2_Init+0xa8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000a78:	4816      	ldr	r0, [pc, #88]	; (8000ad4 <MX_TIM2_Init+0xa8>)
 8000a7a:	f004 fa52 	bl	8004f22 <HAL_TIM_OC_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000a84:	f000 f9a8 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a88:	2320      	movs	r3, #32
 8000a8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a90:	f107 0320 	add.w	r3, r7, #32
 8000a94:	4619      	mov	r1, r3
 8000a96:	480f      	ldr	r0, [pc, #60]	; (8000ad4 <MX_TIM2_Init+0xa8>)
 8000a98:	f004 ff80 	bl	800599c <HAL_TIMEx_MasterConfigSynchronization>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000aa2:	f000 f999 	bl	8000dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_TIM2_Init+0xa8>)
 8000abe:	f004 fac3 	bl	8005048 <HAL_TIM_OC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000ac8:	f000 f986 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200003b0 	.word	0x200003b0

08000ad8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08e      	sub	sp, #56	; 0x38
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aec:	f107 0320 	add.w	r3, r7, #32
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
 8000b04:	615a      	str	r2, [r3, #20]
 8000b06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b08:	4b31      	ldr	r3, [pc, #196]	; (8000bd0 <MX_TIM4_Init+0xf8>)
 8000b0a:	4a32      	ldr	r2, [pc, #200]	; (8000bd4 <MX_TIM4_Init+0xfc>)
 8000b0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 8000b0e:	4b30      	ldr	r3, [pc, #192]	; (8000bd0 <MX_TIM4_Init+0xf8>)
 8000b10:	2230      	movs	r2, #48	; 0x30
 8000b12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b14:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <MX_TIM4_Init+0xf8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <MX_TIM4_Init+0xf8>)
 8000b1c:	2264      	movs	r2, #100	; 0x64
 8000b1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b20:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <MX_TIM4_Init+0xf8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b26:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <MX_TIM4_Init+0xf8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b2c:	4828      	ldr	r0, [pc, #160]	; (8000bd0 <MX_TIM4_Init+0xf8>)
 8000b2e:	f004 f9a9 	bl	8004e84 <HAL_TIM_Base_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000b38:	f000 f94e 	bl	8000dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4821      	ldr	r0, [pc, #132]	; (8000bd0 <MX_TIM4_Init+0xf8>)
 8000b4a:	f004 fba3 	bl	8005294 <HAL_TIM_ConfigClockSource>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000b54:	f000 f940 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b58:	481d      	ldr	r0, [pc, #116]	; (8000bd0 <MX_TIM4_Init+0xf8>)
 8000b5a:	f004 fa0d 	bl	8004f78 <HAL_TIM_PWM_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000b64:	f000 f938 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b70:	f107 0320 	add.w	r3, r7, #32
 8000b74:	4619      	mov	r1, r3
 8000b76:	4816      	ldr	r0, [pc, #88]	; (8000bd0 <MX_TIM4_Init+0xf8>)
 8000b78:	f004 ff10 	bl	800599c <HAL_TIMEx_MasterConfigSynchronization>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000b82:	f000 f929 	bl	8000dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b86:	2360      	movs	r3, #96	; 0x60
 8000b88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <MX_TIM4_Init+0xf8>)
 8000b9e:	f004 fab3 	bl	8005108 <HAL_TIM_PWM_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000ba8:	f000 f916 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <MX_TIM4_Init+0xf8>)
 8000bb4:	f004 faa8 	bl	8005108 <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000bbe:	f000 f90b 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000bc2:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <MX_TIM4_Init+0xf8>)
 8000bc4:	f000 fa3a 	bl	800103c <HAL_TIM_MspPostInit>

}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	; 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000214 	.word	0x20000214
 8000bd4:	40000800 	.word	0x40000800

08000bd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <MX_USART1_UART_Init+0x50>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000c10:	f004 ff32 	bl	8005a78 <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c1a:	f000 f8dd 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200002b4 	.word	0x200002b4
 8000c28:	40011000 	.word	0x40011000

08000c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_DMA_Init+0x3c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <MX_DMA_Init+0x3c>)
 8000c3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_DMA_Init+0x3c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2038      	movs	r0, #56	; 0x38
 8000c54:	f001 f885 	bl	8001d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c58:	2038      	movs	r0, #56	; 0x38
 8000c5a:	f001 f89e 	bl	8001d9a <HAL_NVIC_EnableIRQ>

}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b4f      	ldr	r3, [pc, #316]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a4e      	ldr	r2, [pc, #312]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b4c      	ldr	r3, [pc, #304]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b48      	ldr	r3, [pc, #288]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a47      	ldr	r2, [pc, #284]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b45      	ldr	r3, [pc, #276]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	4b41      	ldr	r3, [pc, #260]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a40      	ldr	r2, [pc, #256]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b3e      	ldr	r3, [pc, #248]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a39      	ldr	r2, [pc, #228]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b37      	ldr	r3, [pc, #220]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b33      	ldr	r3, [pc, #204]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a32      	ldr	r2, [pc, #200]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	21f0      	movs	r1, #240	; 0xf0
 8000d12:	482d      	ldr	r0, [pc, #180]	; (8000dc8 <MX_GPIO_Init+0x15c>)
 8000d14:	f001 fd4c 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2130      	movs	r1, #48	; 0x30
 8000d1c:	482b      	ldr	r0, [pc, #172]	; (8000dcc <MX_GPIO_Init+0x160>)
 8000d1e:	f001 fd47 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin|CS_M_Pin|DEN_A_G_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f240 6103 	movw	r1, #1539	; 0x603
 8000d28:	4829      	ldr	r0, [pc, #164]	; (8000dd0 <MX_GPIO_Init+0x164>)
 8000d2a:	f001 fd41 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_A_G_GPIO_Port, CS_A_G_Pin, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d34:	4826      	ldr	r0, [pc, #152]	; (8000dd0 <MX_GPIO_Init+0x164>)
 8000d36:	f001 fd3b 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT1_Pin OUT2_Pin OUT3_Pin OUT4_Pin */
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin;
 8000d3a:	23f0      	movs	r3, #240	; 0xf0
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481d      	ldr	r0, [pc, #116]	; (8000dc8 <MX_GPIO_Init+0x15c>)
 8000d52:	f001 fbab 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000d56:	2330      	movs	r3, #48	; 0x30
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4817      	ldr	r0, [pc, #92]	; (8000dcc <MX_GPIO_Init+0x160>)
 8000d6e:	f001 fb9d 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin CS_M_Pin CS_A_G_Pin
                           DEN_A_G_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|CS_M_Pin|CS_A_G_Pin
 8000d72:	f241 6303 	movw	r3, #5635	; 0x1603
 8000d76:	617b      	str	r3, [r7, #20]
                          |DEN_A_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <MX_GPIO_Init+0x164>)
 8000d8c:	f001 fb8e 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000d90:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_GPIO_Init+0x168>)
 8000d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	480a      	ldr	r0, [pc, #40]	; (8000dd0 <MX_GPIO_Init+0x164>)
 8000da6:	f001 fb81 	bl	80024ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	2017      	movs	r0, #23
 8000db0:	f000 ffd7 	bl	8001d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000db4:	2017      	movs	r0, #23
 8000db6:	f000 fff0 	bl	8001d9a <HAL_NVIC_EnableIRQ>

}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	; 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	40020800 	.word	0x40020800
 8000dd0:	40020400 	.word	0x40020400
 8000dd4:	10110000 	.word	0x10110000

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <HAL_MspInit+0x4c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <HAL_MspInit+0x4c>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800

08000e38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a2f      	ldr	r2, [pc, #188]	; (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d157      	bne.n	8000f0a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b2e      	ldr	r3, [pc, #184]	; (8000f18 <HAL_ADC_MspInit+0xe0>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a2d      	ldr	r2, [pc, #180]	; (8000f18 <HAL_ADC_MspInit+0xe0>)
 8000e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <HAL_ADC_MspInit+0xe0>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <HAL_ADC_MspInit+0xe0>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a26      	ldr	r2, [pc, #152]	; (8000f18 <HAL_ADC_MspInit+0xe0>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <HAL_ADC_MspInit+0xe0>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e92:	2302      	movs	r3, #2
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e96:	2303      	movs	r3, #3
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	481d      	ldr	r0, [pc, #116]	; (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000ea6:	f001 fb01 	bl	80024ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_ADC_MspInit+0xe8>)
 8000eac:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <HAL_ADC_MspInit+0xec>)
 8000eae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <HAL_ADC_MspInit+0xe8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_ADC_MspInit+0xe8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_ADC_MspInit+0xe8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_ADC_MspInit+0xe8>)
 8000ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_ADC_MspInit+0xe8>)
 8000ecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ed0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_ADC_MspInit+0xe8>)
 8000ed4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ed8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <HAL_ADC_MspInit+0xe8>)
 8000edc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ee0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_ADC_MspInit+0xe8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_ADC_MspInit+0xe8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000eee:	480c      	ldr	r0, [pc, #48]	; (8000f20 <HAL_ADC_MspInit+0xe8>)
 8000ef0:	f000 ff6e 	bl	8001dd0 <HAL_DMA_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000efa:	f7ff ff6d 	bl	8000dd8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_ADC_MspInit+0xe8>)
 8000f02:	639a      	str	r2, [r3, #56]	; 0x38
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_ADC_MspInit+0xe8>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3728      	adds	r7, #40	; 0x28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40012000 	.word	0x40012000
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	200002f8 	.word	0x200002f8
 8000f24:	40026410 	.word	0x40026410

08000f28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a19      	ldr	r2, [pc, #100]	; (8000fac <HAL_SPI_MspInit+0x84>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d12b      	bne.n	8000fa2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f82:	2338      	movs	r3, #56	; 0x38
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f92:	2305      	movs	r3, #5
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <HAL_SPI_MspInit+0x8c>)
 8000f9e:	f001 fa85 	bl	80024ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40013000 	.word	0x40013000
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020400 	.word	0x40020400

08000fb8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc8:	d10d      	bne.n	8000fe6 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_TIM_OC_MspInit+0x3c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_TIM_OC_MspInit+0x3c>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_TIM_OC_MspInit+0x3c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <HAL_TIM_Base_MspInit+0x3c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d10d      	bne.n	8001026 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_TIM_Base_MspInit+0x40>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a09      	ldr	r2, [pc, #36]	; (8001038 <HAL_TIM_Base_MspInit+0x40>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <HAL_TIM_Base_MspInit+0x40>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40000800 	.word	0x40000800
 8001038:	40023800 	.word	0x40023800

0800103c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <HAL_TIM_MspPostInit+0x68>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d11e      	bne.n	800109c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <HAL_TIM_MspPostInit+0x6c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a10      	ldr	r2, [pc, #64]	; (80010a8 <HAL_TIM_MspPostInit+0x6c>)
 8001068:	f043 0308 	orr.w	r3, r3, #8
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_TIM_MspPostInit+0x6c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800107a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800107e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800108c:	2302      	movs	r3, #2
 800108e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	4619      	mov	r1, r3
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <HAL_TIM_MspPostInit+0x70>)
 8001098:	f001 fa08 	bl	80024ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800109c:	bf00      	nop
 800109e:	3720      	adds	r7, #32
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40000800 	.word	0x40000800
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020c00 	.word	0x40020c00

080010b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a19      	ldr	r2, [pc, #100]	; (8001134 <HAL_UART_MspInit+0x84>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d12c      	bne.n	800112c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <HAL_UART_MspInit+0x88>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a17      	ldr	r2, [pc, #92]	; (8001138 <HAL_UART_MspInit+0x88>)
 80010dc:	f043 0310 	orr.w	r3, r3, #16
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_UART_MspInit+0x88>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_UART_MspInit+0x88>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a10      	ldr	r2, [pc, #64]	; (8001138 <HAL_UART_MspInit+0x88>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_UART_MspInit+0x88>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800110a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800110e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800111c:	2307      	movs	r3, #7
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_UART_MspInit+0x8c>)
 8001128:	f001 f9c0 	bl	80024ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	3728      	adds	r7, #40	; 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40011000 	.word	0x40011000
 8001138:	40023800 	.word	0x40023800
 800113c:	40020000 	.word	0x40020000

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <HardFault_Handler+0x4>

08001154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <MemManage_Handler+0x4>

0800115a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <BusFault_Handler+0x4>

08001160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <UsageFault_Handler+0x4>

08001166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001194:	f000 f8ec 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}

0800119c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80011a0:	2040      	movs	r0, #64	; 0x40
 80011a2:	f001 fb1f 	bl	80027e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80011a6:	2080      	movs	r0, #128	; 0x80
 80011a8:	f001 fb1c 	bl	80027e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80011ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011b0:	f001 fb18 	bl	80027e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <DMA2_Stream0_IRQHandler+0x10>)
 80011be:	f000 ff0d 	bl	8001fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200002f8 	.word	0x200002f8

080011cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <OTG_FS_IRQHandler+0x10>)
 80011d2:	f001 fc6f 	bl	8002ab4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200018c4 	.word	0x200018c4

080011e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e8:	4a14      	ldr	r2, [pc, #80]	; (800123c <_sbrk+0x5c>)
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <_sbrk+0x60>)
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <_sbrk+0x64>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <_sbrk+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d207      	bcs.n	8001220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001210:	f008 fc2a 	bl	8009a68 <__errno>
 8001214:	4602      	mov	r2, r0
 8001216:	230c      	movs	r3, #12
 8001218:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	e009      	b.n	8001234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <_sbrk+0x64>)
 8001230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20020000 	.word	0x20020000
 8001240:	00004000 	.word	0x00004000
 8001244:	20000200 	.word	0x20000200
 8001248:	20001cd0 	.word	0x20001cd0

0800124c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <SystemInit+0x28>)
 8001252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001256:	4a07      	ldr	r2, [pc, #28]	; (8001274 <SystemInit+0x28>)
 8001258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800125c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <SystemInit+0x28>)
 8001262:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001266:	609a      	str	r2, [r3, #8]
#endif
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800127c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800127e:	e003      	b.n	8001288 <LoopCopyDataInit>

08001280 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001282:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001284:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001286:	3104      	adds	r1, #4

08001288 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001288:	480b      	ldr	r0, [pc, #44]	; (80012b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800128c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800128e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001290:	d3f6      	bcc.n	8001280 <CopyDataInit>
  ldr  r2, =_sbss
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001294:	e002      	b.n	800129c <LoopFillZerobss>

08001296 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001296:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001298:	f842 3b04 	str.w	r3, [r2], #4

0800129c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800129e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012a0:	d3f9      	bcc.n	8001296 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012a2:	f7ff ffd3 	bl	800124c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a6:	f008 fbe5 	bl	8009a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012aa:	f7ff fa33 	bl	8000714 <main>
  bx  lr    
 80012ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012b4:	08009d08 	.word	0x08009d08
  ldr  r0, =_sdata
 80012b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012bc:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80012c0:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80012c4:	20001cd0 	.word	0x20001cd0

080012c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC_IRQHandler>
	...

080012cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0d      	ldr	r2, [pc, #52]	; (800130c <HAL_Init+0x40>)
 80012d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_Init+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_Init+0x40>)
 80012e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_Init+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_Init+0x40>)
 80012ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 fd29 	bl	8001d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 f808 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001300:	f7ff fd72 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023c00 	.word	0x40023c00

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x54>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fd41 	bl	8001db6 <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00e      	b.n	800135c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80a      	bhi.n	800135a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f000 fd09 	bl	8001d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <HAL_InitTick+0x5c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000000 	.word	0x20000000
 8001368:	20000008 	.word	0x20000008
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x20>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x24>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_IncTick+0x24>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008
 8001394:	200003f0 	.word	0x200003f0

08001398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_GetTick+0x14>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	200003f0 	.word	0x200003f0

080013b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff ffee 	bl	8001398 <HAL_GetTick>
 80013bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c8:	d005      	beq.n	80013d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_Delay+0x40>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013d6:	bf00      	nop
 80013d8:	f7ff ffde 	bl	8001398 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d8f7      	bhi.n	80013d8 <HAL_Delay+0x28>
  {
  }
}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000008 	.word	0x20000008

080013f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e033      	b.n	8001472 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	2b00      	cmp	r3, #0
 8001410:	d109      	bne.n	8001426 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff fd10 	bl	8000e38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	2b00      	cmp	r3, #0
 8001430:	d118      	bne.n	8001464 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800143a:	f023 0302 	bic.w	r3, r3, #2
 800143e:	f043 0202 	orr.w	r2, r3, #2
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 fa32 	bl	80018b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f023 0303 	bic.w	r3, r3, #3
 800145a:	f043 0201 	orr.w	r2, r3, #1
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	641a      	str	r2, [r3, #64]	; 0x40
 8001462:	e001      	b.n	8001468 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001492:	2b01      	cmp	r3, #1
 8001494:	d101      	bne.n	800149a <HAL_ADC_Start_DMA+0x1e>
 8001496:	2302      	movs	r3, #2
 8001498:	e0b1      	b.n	80015fe <HAL_ADC_Start_DMA+0x182>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d018      	beq.n	80014e2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0201 	orr.w	r2, r2, #1
 80014be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014c0:	4b51      	ldr	r3, [pc, #324]	; (8001608 <HAL_ADC_Start_DMA+0x18c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a51      	ldr	r2, [pc, #324]	; (800160c <HAL_ADC_Start_DMA+0x190>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	0c9a      	lsrs	r2, r3, #18
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80014d4:	e002      	b.n	80014dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	3b01      	subs	r3, #1
 80014da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f9      	bne.n	80014d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	f040 8085 	bne.w	80015fc <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001510:	2b00      	cmp	r3, #0
 8001512:	d007      	beq.n	8001524 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800151c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800152c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001530:	d106      	bne.n	8001540 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f023 0206 	bic.w	r2, r3, #6
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	645a      	str	r2, [r3, #68]	; 0x44
 800153e:	e002      	b.n	8001546 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800154e:	4b30      	ldr	r3, [pc, #192]	; (8001610 <HAL_ADC_Start_DMA+0x194>)
 8001550:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001556:	4a2f      	ldr	r2, [pc, #188]	; (8001614 <HAL_ADC_Start_DMA+0x198>)
 8001558:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155e:	4a2e      	ldr	r2, [pc, #184]	; (8001618 <HAL_ADC_Start_DMA+0x19c>)
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001566:	4a2d      	ldr	r2, [pc, #180]	; (800161c <HAL_ADC_Start_DMA+0x1a0>)
 8001568:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001572:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001582:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001592:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	334c      	adds	r3, #76	; 0x4c
 800159e:	4619      	mov	r1, r3
 80015a0:	68ba      	ldr	r2, [r7, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f000 fcc2 	bl	8001f2c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 031f 	and.w	r3, r3, #31
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10f      	bne.n	80015d4 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d11c      	bne.n	80015fc <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	e013      	b.n	80015fc <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a11      	ldr	r2, [pc, #68]	; (8001620 <HAL_ADC_Start_DMA+0x1a4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d10e      	bne.n	80015fc <HAL_ADC_Start_DMA+0x180>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d107      	bne.n	80015fc <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015fa:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000000 	.word	0x20000000
 800160c:	431bde83 	.word	0x431bde83
 8001610:	40012300 	.word	0x40012300
 8001614:	08001aa9 	.word	0x08001aa9
 8001618:	08001b63 	.word	0x08001b63
 800161c:	08001b7f 	.word	0x08001b7f
 8001620:	40012000 	.word	0x40012000

08001624 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x1c>
 8001664:	2302      	movs	r3, #2
 8001666:	e113      	b.n	8001890 <HAL_ADC_ConfigChannel+0x244>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b09      	cmp	r3, #9
 8001676:	d925      	bls.n	80016c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68d9      	ldr	r1, [r3, #12]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	461a      	mov	r2, r3
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	3b1e      	subs	r3, #30
 800168e:	2207      	movs	r2, #7
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43da      	mvns	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	400a      	ands	r2, r1
 800169c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68d9      	ldr	r1, [r3, #12]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	4603      	mov	r3, r0
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4403      	add	r3, r0
 80016b6:	3b1e      	subs	r3, #30
 80016b8:	409a      	lsls	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	e022      	b.n	800170a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6919      	ldr	r1, [r3, #16]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	2207      	movs	r2, #7
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	400a      	ands	r2, r1
 80016e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6919      	ldr	r1, [r3, #16]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4618      	mov	r0, r3
 80016fa:	4603      	mov	r3, r0
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4403      	add	r3, r0
 8001700:	409a      	lsls	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b06      	cmp	r3, #6
 8001710:	d824      	bhi.n	800175c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	3b05      	subs	r3, #5
 8001724:	221f      	movs	r2, #31
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43da      	mvns	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	400a      	ands	r2, r1
 8001732:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	b29b      	uxth	r3, r3
 8001740:	4618      	mov	r0, r3
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	3b05      	subs	r3, #5
 800174e:	fa00 f203 	lsl.w	r2, r0, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	635a      	str	r2, [r3, #52]	; 0x34
 800175a:	e04c      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b0c      	cmp	r3, #12
 8001762:	d824      	bhi.n	80017ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	3b23      	subs	r3, #35	; 0x23
 8001776:	221f      	movs	r2, #31
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43da      	mvns	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	400a      	ands	r2, r1
 8001784:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	b29b      	uxth	r3, r3
 8001792:	4618      	mov	r0, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	3b23      	subs	r3, #35	; 0x23
 80017a0:	fa00 f203 	lsl.w	r2, r0, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	631a      	str	r2, [r3, #48]	; 0x30
 80017ac:	e023      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	3b41      	subs	r3, #65	; 0x41
 80017c0:	221f      	movs	r2, #31
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	400a      	ands	r2, r1
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	4618      	mov	r0, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	3b41      	subs	r3, #65	; 0x41
 80017ea:	fa00 f203 	lsl.w	r2, r0, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <HAL_ADC_ConfigChannel+0x250>)
 80017f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a28      	ldr	r2, [pc, #160]	; (80018a0 <HAL_ADC_ConfigChannel+0x254>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d10f      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x1d8>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b12      	cmp	r3, #18
 800180a:	d10b      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1d      	ldr	r2, [pc, #116]	; (80018a0 <HAL_ADC_ConfigChannel+0x254>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d12b      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x23a>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <HAL_ADC_ConfigChannel+0x258>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d003      	beq.n	8001840 <HAL_ADC_ConfigChannel+0x1f4>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b11      	cmp	r3, #17
 800183e:	d122      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <HAL_ADC_ConfigChannel+0x258>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d111      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_ADC_ConfigChannel+0x25c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a11      	ldr	r2, [pc, #68]	; (80018ac <HAL_ADC_ConfigChannel+0x260>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	0c9a      	lsrs	r2, r3, #18
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001878:	e002      	b.n	8001880 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3b01      	subs	r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f9      	bne.n	800187a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	40012300 	.word	0x40012300
 80018a0:	40012000 	.word	0x40012000
 80018a4:	10000012 	.word	0x10000012
 80018a8:	20000000 	.word	0x20000000
 80018ac:	431bde83 	.word	0x431bde83

080018b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018b8:	4b79      	ldr	r3, [pc, #484]	; (8001aa0 <ADC_Init+0x1f0>)
 80018ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6859      	ldr	r1, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	021a      	lsls	r2, r3, #8
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001908:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800192a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6899      	ldr	r1, [r3, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	4a58      	ldr	r2, [pc, #352]	; (8001aa4 <ADC_Init+0x1f4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d022      	beq.n	800198e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001956:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6899      	ldr	r1, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001978:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6899      	ldr	r1, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	e00f      	b.n	80019ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800199c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0202 	bic.w	r2, r2, #2
 80019bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6899      	ldr	r1, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7e1b      	ldrb	r3, [r3, #24]
 80019c8:	005a      	lsls	r2, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d01b      	beq.n	8001a14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6859      	ldr	r1, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	3b01      	subs	r3, #1
 8001a08:	035a      	lsls	r2, r3, #13
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	e007      	b.n	8001a24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	051a      	lsls	r2, r3, #20
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6899      	ldr	r1, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a66:	025a      	lsls	r2, r3, #9
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6899      	ldr	r1, [r3, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	029a      	lsls	r2, r3, #10
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	609a      	str	r2, [r3, #8]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40012300 	.word	0x40012300
 8001aa4:	0f000001 	.word	0x0f000001

08001aa8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d13c      	bne.n	8001b3c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d12b      	bne.n	8001b34 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d127      	bne.n	8001b34 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d006      	beq.n	8001b00 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d119      	bne.n	8001b34 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0220 	bic.w	r2, r2, #32
 8001b0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d105      	bne.n	8001b34 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f043 0201 	orr.w	r2, r3, #1
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7fe fd0f 	bl	8000558 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b3a:	e00e      	b.n	8001b5a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f7ff fd75 	bl	8001638 <HAL_ADC_ErrorCallback>
}
 8001b4e:	e004      	b.n	8001b5a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	4798      	blx	r3
}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f7ff fd57 	bl	8001624 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b084      	sub	sp, #16
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2240      	movs	r2, #64	; 0x40
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f043 0204 	orr.w	r2, r3, #4
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f7ff fd4a 	bl	8001638 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bde:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	60d3      	str	r3, [r2, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4907      	ldr	r1, [pc, #28]	; (8001c48 <__NVIC_EnableIRQ+0x38>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0a      	blt.n	8001c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	490c      	ldr	r1, [pc, #48]	; (8001c98 <__NVIC_SetPriority+0x4c>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c74:	e00a      	b.n	8001c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4908      	ldr	r1, [pc, #32]	; (8001c9c <__NVIC_SetPriority+0x50>)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3b04      	subs	r3, #4
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	440b      	add	r3, r1
 8001c8a:	761a      	strb	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	bf28      	it	cs
 8001cbe:	2304      	movcs	r3, #4
 8001cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d902      	bls.n	8001cd0 <NVIC_EncodePriority+0x30>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3b03      	subs	r3, #3
 8001cce:	e000      	b.n	8001cd2 <NVIC_EncodePriority+0x32>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	4313      	orrs	r3, r2
         );
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	; 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d18:	d301      	bcc.n	8001d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00f      	b.n	8001d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <SysTick_Config+0x40>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d26:	210f      	movs	r1, #15
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f7ff ff8e 	bl	8001c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <SysTick_Config+0x40>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <SysTick_Config+0x40>)
 8001d38:	2207      	movs	r2, #7
 8001d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	e000e010 	.word	0xe000e010

08001d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff29 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d74:	f7ff ff3e 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	6978      	ldr	r0, [r7, #20]
 8001d80:	f7ff ff8e 	bl	8001ca0 <NVIC_EncodePriority>
 8001d84:	4602      	mov	r2, r0
 8001d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff5d 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff31 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffa2 	bl	8001d08 <SysTick_Config>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff fadc 	bl	8001398 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e099      	b.n	8001f20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0201 	bic.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0c:	e00f      	b.n	8001e2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e0e:	f7ff fac3 	bl	8001398 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d908      	bls.n	8001e2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2203      	movs	r2, #3
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e078      	b.n	8001f20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1e8      	bne.n	8001e0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <HAL_DMA_Init+0x158>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d107      	bne.n	8001e98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	4313      	orrs	r3, r2
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f023 0307 	bic.w	r3, r3, #7
 8001eae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d117      	bne.n	8001ef2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00e      	beq.n	8001ef2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 fa6f 	bl	80023b8 <DMA_CheckFifoParam>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2240      	movs	r2, #64	; 0x40
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e016      	b.n	8001f20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fa26 	bl	800234c <DMA_CalcBaseAndBitshift>
 8001f00:	4603      	mov	r3, r0
 8001f02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f08:	223f      	movs	r2, #63	; 0x3f
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	f010803f 	.word	0xf010803f

08001f2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_DMA_Start_IT+0x26>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e040      	b.n	8001fd4 <HAL_DMA_Start_IT+0xa8>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d12f      	bne.n	8001fc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f9b8 	bl	80022f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f84:	223f      	movs	r2, #63	; 0x3f
 8001f86:	409a      	lsls	r2, r3
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0216 	orr.w	r2, r2, #22
 8001f9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0208 	orr.w	r2, r2, #8
 8001fb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e005      	b.n	8001fd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fe8:	4b92      	ldr	r3, [pc, #584]	; (8002234 <HAL_DMA_IRQHandler+0x258>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a92      	ldr	r2, [pc, #584]	; (8002238 <HAL_DMA_IRQHandler+0x25c>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	0a9b      	lsrs	r3, r3, #10
 8001ff4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002006:	2208      	movs	r2, #8
 8002008:	409a      	lsls	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4013      	ands	r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d01a      	beq.n	8002048 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d013      	beq.n	8002048 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0204 	bic.w	r2, r2, #4
 800202e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002034:	2208      	movs	r2, #8
 8002036:	409a      	lsls	r2, r3
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	2201      	movs	r2, #1
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d012      	beq.n	800207e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206a:	2201      	movs	r2, #1
 800206c:	409a      	lsls	r2, r3
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002076:	f043 0202 	orr.w	r2, r3, #2
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	2204      	movs	r2, #4
 8002084:	409a      	lsls	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d012      	beq.n	80020b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00b      	beq.n	80020b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	2204      	movs	r2, #4
 80020a2:	409a      	lsls	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ac:	f043 0204 	orr.w	r2, r3, #4
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	2210      	movs	r2, #16
 80020ba:	409a      	lsls	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d043      	beq.n	800214c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d03c      	beq.n	800214c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	2210      	movs	r2, #16
 80020d8:	409a      	lsls	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d018      	beq.n	800211e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d108      	bne.n	800210c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d024      	beq.n	800214c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4798      	blx	r3
 800210a:	e01f      	b.n	800214c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01b      	beq.n	800214c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
 800211c:	e016      	b.n	800214c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d107      	bne.n	800213c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0208 	bic.w	r2, r2, #8
 800213a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002150:	2220      	movs	r2, #32
 8002152:	409a      	lsls	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 808e 	beq.w	800227a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 8086 	beq.w	800227a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002172:	2220      	movs	r2, #32
 8002174:	409a      	lsls	r2, r3
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b05      	cmp	r3, #5
 8002184:	d136      	bne.n	80021f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0216 	bic.w	r2, r2, #22
 8002194:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <HAL_DMA_IRQHandler+0x1da>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d007      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0208 	bic.w	r2, r2, #8
 80021c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ca:	223f      	movs	r2, #63	; 0x3f
 80021cc:	409a      	lsls	r2, r3
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d07d      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4798      	blx	r3
        }
        return;
 80021f2:	e078      	b.n	80022e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01c      	beq.n	800223c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d108      	bne.n	8002222 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002214:	2b00      	cmp	r3, #0
 8002216:	d030      	beq.n	800227a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4798      	blx	r3
 8002220:	e02b      	b.n	800227a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002226:	2b00      	cmp	r3, #0
 8002228:	d027      	beq.n	800227a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	4798      	blx	r3
 8002232:	e022      	b.n	800227a <HAL_DMA_IRQHandler+0x29e>
 8002234:	20000000 	.word	0x20000000
 8002238:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10f      	bne.n	800226a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0210 	bic.w	r2, r2, #16
 8002258:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227e:	2b00      	cmp	r3, #0
 8002280:	d032      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d022      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2205      	movs	r2, #5
 8002292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0201 	bic.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	3301      	adds	r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d307      	bcc.n	80022c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f2      	bne.n	80022a6 <HAL_DMA_IRQHandler+0x2ca>
 80022c0:	e000      	b.n	80022c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80022c2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	4798      	blx	r3
 80022e4:	e000      	b.n	80022e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80022e6:	bf00      	nop
    }
  }
}
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop

080022f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800230c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b40      	cmp	r3, #64	; 0x40
 800231c:	d108      	bne.n	8002330 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800232e:	e007      	b.n	8002340 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	3b10      	subs	r3, #16
 800235c:	4a14      	ldr	r2, [pc, #80]	; (80023b0 <DMA_CalcBaseAndBitshift+0x64>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002366:	4a13      	ldr	r2, [pc, #76]	; (80023b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4413      	add	r3, r2
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d909      	bls.n	800238e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002382:	f023 0303 	bic.w	r3, r3, #3
 8002386:	1d1a      	adds	r2, r3, #4
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	659a      	str	r2, [r3, #88]	; 0x58
 800238c:	e007      	b.n	800239e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002396:	f023 0303 	bic.w	r3, r3, #3
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	aaaaaaab 	.word	0xaaaaaaab
 80023b4:	08009cf0 	.word	0x08009cf0

080023b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d11f      	bne.n	8002412 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d855      	bhi.n	8002484 <DMA_CheckFifoParam+0xcc>
 80023d8:	a201      	add	r2, pc, #4	; (adr r2, 80023e0 <DMA_CheckFifoParam+0x28>)
 80023da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023de:	bf00      	nop
 80023e0:	080023f1 	.word	0x080023f1
 80023e4:	08002403 	.word	0x08002403
 80023e8:	080023f1 	.word	0x080023f1
 80023ec:	08002485 	.word	0x08002485
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d045      	beq.n	8002488 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002400:	e042      	b.n	8002488 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800240a:	d13f      	bne.n	800248c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002410:	e03c      	b.n	800248c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241a:	d121      	bne.n	8002460 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b03      	cmp	r3, #3
 8002420:	d836      	bhi.n	8002490 <DMA_CheckFifoParam+0xd8>
 8002422:	a201      	add	r2, pc, #4	; (adr r2, 8002428 <DMA_CheckFifoParam+0x70>)
 8002424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002428:	08002439 	.word	0x08002439
 800242c:	0800243f 	.word	0x0800243f
 8002430:	08002439 	.word	0x08002439
 8002434:	08002451 	.word	0x08002451
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
      break;
 800243c:	e02f      	b.n	800249e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d024      	beq.n	8002494 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800244e:	e021      	b.n	8002494 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002458:	d11e      	bne.n	8002498 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800245e:	e01b      	b.n	8002498 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d902      	bls.n	800246c <DMA_CheckFifoParam+0xb4>
 8002466:	2b03      	cmp	r3, #3
 8002468:	d003      	beq.n	8002472 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800246a:	e018      	b.n	800249e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
      break;
 8002470:	e015      	b.n	800249e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00e      	beq.n	800249c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
      break;
 8002482:	e00b      	b.n	800249c <DMA_CheckFifoParam+0xe4>
      break;
 8002484:	bf00      	nop
 8002486:	e00a      	b.n	800249e <DMA_CheckFifoParam+0xe6>
      break;
 8002488:	bf00      	nop
 800248a:	e008      	b.n	800249e <DMA_CheckFifoParam+0xe6>
      break;
 800248c:	bf00      	nop
 800248e:	e006      	b.n	800249e <DMA_CheckFifoParam+0xe6>
      break;
 8002490:	bf00      	nop
 8002492:	e004      	b.n	800249e <DMA_CheckFifoParam+0xe6>
      break;
 8002494:	bf00      	nop
 8002496:	e002      	b.n	800249e <DMA_CheckFifoParam+0xe6>
      break;   
 8002498:	bf00      	nop
 800249a:	e000      	b.n	800249e <DMA_CheckFifoParam+0xe6>
      break;
 800249c:	bf00      	nop
    }
  } 
  
  return status; 
 800249e:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	e159      	b.n	800277c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024c8:	2201      	movs	r2, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	f040 8148 	bne.w	8002776 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d00b      	beq.n	8002506 <HAL_GPIO_Init+0x5a>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d007      	beq.n	8002506 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024fa:	2b11      	cmp	r3, #17
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b12      	cmp	r3, #18
 8002504:	d130      	bne.n	8002568 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	2203      	movs	r2, #3
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800253c:	2201      	movs	r2, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 0201 	and.w	r2, r3, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2203      	movs	r2, #3
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0xfc>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b12      	cmp	r3, #18
 80025a6:	d123      	bne.n	80025f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	08da      	lsrs	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3208      	adds	r2, #8
 80025b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	220f      	movs	r2, #15
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	08da      	lsrs	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3208      	adds	r2, #8
 80025ea:	69b9      	ldr	r1, [r7, #24]
 80025ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	2203      	movs	r2, #3
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0203 	and.w	r2, r3, #3
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 80a2 	beq.w	8002776 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b56      	ldr	r3, [pc, #344]	; (8002790 <HAL_GPIO_Init+0x2e4>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	4a55      	ldr	r2, [pc, #340]	; (8002790 <HAL_GPIO_Init+0x2e4>)
 800263c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002640:	6453      	str	r3, [r2, #68]	; 0x44
 8002642:	4b53      	ldr	r3, [pc, #332]	; (8002790 <HAL_GPIO_Init+0x2e4>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800264e:	4a51      	ldr	r2, [pc, #324]	; (8002794 <HAL_GPIO_Init+0x2e8>)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	3302      	adds	r3, #2
 8002656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	220f      	movs	r2, #15
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a48      	ldr	r2, [pc, #288]	; (8002798 <HAL_GPIO_Init+0x2ec>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d019      	beq.n	80026ae <HAL_GPIO_Init+0x202>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a47      	ldr	r2, [pc, #284]	; (800279c <HAL_GPIO_Init+0x2f0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <HAL_GPIO_Init+0x1fe>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a46      	ldr	r2, [pc, #280]	; (80027a0 <HAL_GPIO_Init+0x2f4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00d      	beq.n	80026a6 <HAL_GPIO_Init+0x1fa>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a45      	ldr	r2, [pc, #276]	; (80027a4 <HAL_GPIO_Init+0x2f8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <HAL_GPIO_Init+0x1f6>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a44      	ldr	r2, [pc, #272]	; (80027a8 <HAL_GPIO_Init+0x2fc>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d101      	bne.n	800269e <HAL_GPIO_Init+0x1f2>
 800269a:	2304      	movs	r3, #4
 800269c:	e008      	b.n	80026b0 <HAL_GPIO_Init+0x204>
 800269e:	2307      	movs	r3, #7
 80026a0:	e006      	b.n	80026b0 <HAL_GPIO_Init+0x204>
 80026a2:	2303      	movs	r3, #3
 80026a4:	e004      	b.n	80026b0 <HAL_GPIO_Init+0x204>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e002      	b.n	80026b0 <HAL_GPIO_Init+0x204>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_GPIO_Init+0x204>
 80026ae:	2300      	movs	r3, #0
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	f002 0203 	and.w	r2, r2, #3
 80026b6:	0092      	lsls	r2, r2, #2
 80026b8:	4093      	lsls	r3, r2
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c0:	4934      	ldr	r1, [pc, #208]	; (8002794 <HAL_GPIO_Init+0x2e8>)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	3302      	adds	r3, #2
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ce:	4b37      	ldr	r3, [pc, #220]	; (80027ac <HAL_GPIO_Init+0x300>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026f2:	4a2e      	ldr	r2, [pc, #184]	; (80027ac <HAL_GPIO_Init+0x300>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026f8:	4b2c      	ldr	r3, [pc, #176]	; (80027ac <HAL_GPIO_Init+0x300>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800271c:	4a23      	ldr	r2, [pc, #140]	; (80027ac <HAL_GPIO_Init+0x300>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <HAL_GPIO_Init+0x300>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002746:	4a19      	ldr	r2, [pc, #100]	; (80027ac <HAL_GPIO_Init+0x300>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800274c:	4b17      	ldr	r3, [pc, #92]	; (80027ac <HAL_GPIO_Init+0x300>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002770:	4a0e      	ldr	r2, [pc, #56]	; (80027ac <HAL_GPIO_Init+0x300>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3301      	adds	r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	2b0f      	cmp	r3, #15
 8002780:	f67f aea2 	bls.w	80024c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002784:	bf00      	nop
 8002786:	3724      	adds	r7, #36	; 0x24
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	40023800 	.word	0x40023800
 8002794:	40013800 	.word	0x40013800
 8002798:	40020000 	.word	0x40020000
 800279c:	40020400 	.word	0x40020400
 80027a0:	40020800 	.word	0x40020800
 80027a4:	40020c00 	.word	0x40020c00
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40013c00 	.word	0x40013c00

080027b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
 80027bc:	4613      	mov	r3, r2
 80027be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027cc:	e003      	b.n	80027d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ce:	887b      	ldrh	r3, [r7, #2]
 80027d0:	041a      	lsls	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	619a      	str	r2, [r3, #24]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d006      	beq.n	8002808 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027fa:	4a05      	ldr	r2, [pc, #20]	; (8002810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fd fe98 	bl	8000538 <HAL_GPIO_EXTI_Callback>
  }
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40013c00 	.word	0x40013c00

08002814 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002816:	b08f      	sub	sp, #60	; 0x3c
 8002818:	af0a      	add	r7, sp, #40	; 0x28
 800281a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e10f      	b.n	8002a46 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d106      	bne.n	8002846 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f006 fe1f 	bl	8009484 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2203      	movs	r2, #3
 800284a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d102      	bne.n	8002860 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f003 fde6 	bl	8006436 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	687e      	ldr	r6, [r7, #4]
 8002872:	466d      	mov	r5, sp
 8002874:	f106 0410 	add.w	r4, r6, #16
 8002878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800287a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800287c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800287e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002880:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002884:	e885 0003 	stmia.w	r5, {r0, r1}
 8002888:	1d33      	adds	r3, r6, #4
 800288a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800288c:	6838      	ldr	r0, [r7, #0]
 800288e:	f003 fcbd 	bl	800620c <USB_CoreInit>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0d0      	b.n	8002a46 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 fdd4 	bl	8006458 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	e04a      	b.n	800294c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	333d      	adds	r3, #61	; 0x3d
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	333c      	adds	r3, #60	; 0x3c
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	b298      	uxth	r0, r3
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3342      	adds	r3, #66	; 0x42
 80028f2:	4602      	mov	r2, r0
 80028f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	333f      	adds	r3, #63	; 0x3f
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	1a9b      	subs	r3, r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	3344      	adds	r3, #68	; 0x44
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	3348      	adds	r3, #72	; 0x48
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3350      	adds	r3, #80	; 0x50
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	3301      	adds	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	429a      	cmp	r2, r3
 8002954:	d3af      	bcc.n	80028b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
 800295a:	e044      	b.n	80029e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002972:	7bfa      	ldrb	r2, [r7, #15]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029ca:	7bfa      	ldrb	r2, [r7, #15]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	3301      	adds	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d3b5      	bcc.n	800295c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	687e      	ldr	r6, [r7, #4]
 80029f8:	466d      	mov	r5, sp
 80029fa:	f106 0410 	add.w	r4, r6, #16
 80029fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a0e:	1d33      	adds	r3, r6, #4
 8002a10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a12:	6838      	ldr	r0, [r7, #0]
 8002a14:	f003 fd4a 	bl	80064ac <USB_DevInit>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2202      	movs	r2, #2
 8002a22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00d      	b.n	8002a46 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f004 fd92 	bl	8007568 <USB_DevDisconnect>

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a4e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b084      	sub	sp, #16
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_PCD_Start+0x1c>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e020      	b.n	8002aac <HAL_PCD_Start+0x5e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d109      	bne.n	8002a8e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d005      	beq.n	8002a8e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f003 fcbe 	bl	8006414 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f004 fd42 	bl	8007526 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b08d      	sub	sp, #52	; 0x34
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f004 fe00 	bl	80076d0 <USB_GetMode>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f040 839d 	bne.w	8003212 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f004 fd64 	bl	80075aa <USB_ReadInterrupts>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8393 	beq.w	8003210 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f004 fd5b 	bl	80075aa <USB_ReadInterrupts>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d107      	bne.n	8002b0e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f002 0202 	and.w	r2, r2, #2
 8002b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f004 fd49 	bl	80075aa <USB_ReadInterrupts>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b10      	cmp	r3, #16
 8002b20:	d161      	bne.n	8002be6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699a      	ldr	r2, [r3, #24]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0210 	bic.w	r2, r2, #16
 8002b30:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	f003 020f 	and.w	r2, r3, #15
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3304      	adds	r3, #4
 8002b50:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	0c5b      	lsrs	r3, r3, #17
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d124      	bne.n	8002ba8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d035      	beq.n	8002bd6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	6a38      	ldr	r0, [r7, #32]
 8002b7e:	f004 fbaf 	bl	80072e0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b8e:	441a      	add	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	699a      	ldr	r2, [r3, #24]
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ba0:	441a      	add	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	619a      	str	r2, [r3, #24]
 8002ba6:	e016      	b.n	8002bd6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	0c5b      	lsrs	r3, r3, #17
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	2b06      	cmp	r3, #6
 8002bb2:	d110      	bne.n	8002bd6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bba:	2208      	movs	r2, #8
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	6a38      	ldr	r0, [r7, #32]
 8002bc0:	f004 fb8e 	bl	80072e0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	699a      	ldr	r2, [r3, #24]
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	091b      	lsrs	r3, r3, #4
 8002bcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bd0:	441a      	add	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699a      	ldr	r2, [r3, #24]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0210 	orr.w	r2, r2, #16
 8002be4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 fcdd 	bl	80075aa <USB_ReadInterrupts>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bf6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bfa:	d16e      	bne.n	8002cda <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f004 fce3 	bl	80075d0 <USB_ReadDevAllOutEpInterrupt>
 8002c0a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c0c:	e062      	b.n	8002cd4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d057      	beq.n	8002cc8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f004 fd08 	bl	8007638 <USB_ReadDevOutEPInterrupt>
 8002c28:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00c      	beq.n	8002c4e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c40:	461a      	mov	r2, r3
 8002c42:	2301      	movs	r3, #1
 8002c44:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fdb1 	bl	80037b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00c      	beq.n	8002c72 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c64:	461a      	mov	r2, r3
 8002c66:	2308      	movs	r3, #8
 8002c68:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 feab 	bl	80039c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2310      	movs	r3, #16
 8002c8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d009      	beq.n	8002cc8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cc6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	3301      	adds	r3, #1
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d199      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f004 fc63 	bl	80075aa <USB_ReadInterrupts>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cee:	f040 80c0 	bne.w	8002e72 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f004 fc84 	bl	8007604 <USB_ReadDevAllInEpInterrupt>
 8002cfc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002d02:	e0b2      	b.n	8002e6a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80a7 	beq.w	8002e5e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	4611      	mov	r1, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f004 fcaa 	bl	8007674 <USB_ReadDevInEPInterrupt>
 8002d20:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d057      	beq.n	8002ddc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	2201      	movs	r2, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69f9      	ldr	r1, [r7, #28]
 8002d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2301      	movs	r3, #1
 8002d60:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d132      	bne.n	8002dd0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	3348      	adds	r3, #72	; 0x48
 8002d7a:	6819      	ldr	r1, [r3, #0]
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4403      	add	r3, r0
 8002d8a:	3344      	adds	r3, #68	; 0x44
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4419      	add	r1, r3
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4403      	add	r3, r0
 8002d9e:	3348      	adds	r3, #72	; 0x48
 8002da0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d113      	bne.n	8002dd0 <HAL_PCD_IRQHandler+0x31c>
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	3350      	adds	r3, #80	; 0x50
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d108      	bne.n	8002dd0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2101      	movs	r1, #1
 8002dcc:	f004 fcb2 	bl	8007734 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f006 fbd5 	bl	8009586 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df2:	461a      	mov	r2, r3
 8002df4:	2308      	movs	r3, #8
 8002df6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d008      	beq.n	8002e14 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2310      	movs	r3, #16
 8002e12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2340      	movs	r3, #64	; 0x40
 8002e2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e46:	461a      	mov	r2, r3
 8002e48:	2302      	movs	r3, #2
 8002e4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fc1b 	bl	8003694 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	3301      	adds	r3, #1
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	085b      	lsrs	r3, r3, #1
 8002e68:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f47f af49 	bne.w	8002d04 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f004 fb97 	bl	80075aa <USB_ReadInterrupts>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e86:	d122      	bne.n	8002ece <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d108      	bne.n	8002eb8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002eae:	2100      	movs	r1, #0
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fe27 	bl	8003b04 <HAL_PCDEx_LPM_Callback>
 8002eb6:	e002      	b.n	8002ebe <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f006 fbd1 	bl	8009660 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695a      	ldr	r2, [r3, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ecc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f004 fb69 	bl	80075aa <USB_ReadInterrupts>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee2:	d112      	bne.n	8002f0a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d102      	bne.n	8002efa <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f006 fb8d 	bl	8009614 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f08:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f004 fb4b 	bl	80075aa <USB_ReadInterrupts>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f1e:	f040 80c7 	bne.w	80030b0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2110      	movs	r1, #16
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f003 fc19 	bl	8006774 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f46:	e056      	b.n	8002ff6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f54:	461a      	mov	r2, r3
 8002f56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f5a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f6c:	0151      	lsls	r1, r2, #5
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	440a      	add	r2, r1
 8002f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f7a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f8c:	0151      	lsls	r1, r2, #5
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	440a      	add	r2, r1
 8002f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fc0:	0151      	lsls	r1, r2, #5
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	440a      	add	r2, r1
 8002fc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fe0:	0151      	lsls	r1, r2, #5
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	440a      	add	r2, r1
 8002fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002fee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d3a3      	bcc.n	8002f48 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	69fa      	ldr	r2, [r7, #28]
 800300a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800300e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003012:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	2b00      	cmp	r3, #0
 800301a:	d016      	beq.n	800304a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800302c:	f043 030b 	orr.w	r3, r3, #11
 8003030:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800303a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003042:	f043 030b 	orr.w	r3, r3, #11
 8003046:	6453      	str	r3, [r2, #68]	; 0x44
 8003048:	e015      	b.n	8003076 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003058:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800305c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003060:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003070:	f043 030b 	orr.w	r3, r3, #11
 8003074:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003084:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003088:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800309a:	461a      	mov	r2, r3
 800309c:	f004 fb4a 	bl	8007734 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80030ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f004 fa78 	bl	80075aa <USB_ReadInterrupts>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c4:	d124      	bne.n	8003110 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f004 fb0e 	bl	80076ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f003 fbae 	bl	8006836 <USB_GetDevSpeed>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681c      	ldr	r4, [r3, #0]
 80030e6:	f001 f945 	bl	8004374 <HAL_RCC_GetHCLKFreq>
 80030ea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	4620      	mov	r0, r4
 80030f6:	f003 f8eb 	bl	80062d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f006 fa6b 	bl	80095d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800310e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f004 fa48 	bl	80075aa <USB_ReadInterrupts>
 800311a:	4603      	mov	r3, r0
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b08      	cmp	r3, #8
 8003122:	d10a      	bne.n	800313a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f006 fa48 	bl	80095ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695a      	ldr	r2, [r3, #20]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f002 0208 	and.w	r2, r2, #8
 8003138:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f004 fa33 	bl	80075aa <USB_ReadInterrupts>
 8003144:	4603      	mov	r3, r0
 8003146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800314a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800314e:	d10f      	bne.n	8003170 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	b2db      	uxtb	r3, r3
 8003158:	4619      	mov	r1, r3
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f006 faa0 	bl	80096a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800316e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f004 fa18 	bl	80075aa <USB_ReadInterrupts>
 800317a:	4603      	mov	r3, r0
 800317c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003180:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003184:	d10f      	bne.n	80031a6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	b2db      	uxtb	r3, r3
 800318e:	4619      	mov	r1, r3
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f006 fa73 	bl	800967c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80031a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f004 f9fd 	bl	80075aa <USB_ReadInterrupts>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ba:	d10a      	bne.n	80031d2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f006 fa81 	bl	80096c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695a      	ldr	r2, [r3, #20]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f004 f9e7 	bl	80075aa <USB_ReadInterrupts>
 80031dc:	4603      	mov	r3, r0
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d115      	bne.n	8003212 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f006 fa71 	bl	80096e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	e000      	b.n	8003212 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003210:	bf00      	nop
    }
  }
}
 8003212:	3734      	adds	r7, #52	; 0x34
 8003214:	46bd      	mov	sp, r7
 8003216:	bd90      	pop	{r4, r7, pc}

08003218 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_PCD_SetAddress+0x1a>
 800322e:	2302      	movs	r3, #2
 8003230:	e013      	b.n	800325a <HAL_PCD_SetAddress+0x42>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	4611      	mov	r1, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f004 f945 	bl	80074da <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	4608      	mov	r0, r1
 800326c:	4611      	mov	r1, r2
 800326e:	461a      	mov	r2, r3
 8003270:	4603      	mov	r3, r0
 8003272:	70fb      	strb	r3, [r7, #3]
 8003274:	460b      	mov	r3, r1
 8003276:	803b      	strh	r3, [r7, #0]
 8003278:	4613      	mov	r3, r2
 800327a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003284:	2b00      	cmp	r3, #0
 8003286:	da0f      	bge.n	80032a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	f003 020f 	and.w	r2, r3, #15
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	3338      	adds	r3, #56	; 0x38
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	4413      	add	r3, r2
 800329c:	3304      	adds	r3, #4
 800329e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2201      	movs	r2, #1
 80032a4:	705a      	strb	r2, [r3, #1]
 80032a6:	e00f      	b.n	80032c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	f003 020f 	and.w	r2, r3, #15
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	3304      	adds	r3, #4
 80032c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80032d4:	883a      	ldrh	r2, [r7, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	78ba      	ldrb	r2, [r7, #2]
 80032de:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	785b      	ldrb	r3, [r3, #1]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032f2:	78bb      	ldrb	r3, [r7, #2]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d102      	bne.n	80032fe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_PCD_EP_Open+0xaa>
 8003308:	2302      	movs	r3, #2
 800330a:	e00e      	b.n	800332a <HAL_PCD_EP_Open+0xc8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68f9      	ldr	r1, [r7, #12]
 800331a:	4618      	mov	r0, r3
 800331c:	f003 fab0 	bl	8006880 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003328:	7afb      	ldrb	r3, [r7, #11]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	460b      	mov	r3, r1
 800333c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800333e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003342:	2b00      	cmp	r3, #0
 8003344:	da0f      	bge.n	8003366 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	f003 020f 	and.w	r2, r3, #15
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	3338      	adds	r3, #56	; 0x38
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	3304      	adds	r3, #4
 800335c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2201      	movs	r2, #1
 8003362:	705a      	strb	r2, [r3, #1]
 8003364:	e00f      	b.n	8003386 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	f003 020f 	and.w	r2, r3, #15
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	4413      	add	r3, r2
 800337c:	3304      	adds	r3, #4
 800337e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	b2da      	uxtb	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_PCD_EP_Close+0x6e>
 800339c:	2302      	movs	r3, #2
 800339e:	e00e      	b.n	80033be <HAL_PCD_EP_Close+0x8c>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68f9      	ldr	r1, [r7, #12]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f003 faee 	bl	8006990 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b086      	sub	sp, #24
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
 80033d2:	460b      	mov	r3, r1
 80033d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033d6:	7afb      	ldrb	r3, [r7, #11]
 80033d8:	f003 020f 	and.w	r2, r3, #15
 80033dc:	4613      	mov	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	3304      	adds	r3, #4
 80033ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2200      	movs	r2, #0
 8003400:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2200      	movs	r2, #0
 8003406:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003408:	7afb      	ldrb	r3, [r7, #11]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	b2da      	uxtb	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d102      	bne.n	8003422 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003422:	7afb      	ldrb	r3, [r7, #11]
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	2b00      	cmp	r3, #0
 800342a:	d109      	bne.n	8003440 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	6979      	ldr	r1, [r7, #20]
 800343a:	f003 fdc9 	bl	8006fd0 <USB_EP0StartXfer>
 800343e:	e008      	b.n	8003452 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	6979      	ldr	r1, [r7, #20]
 800344e:	f003 fb7b 	bl	8006b48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	f003 020f 	and.w	r2, r3, #15
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800347e:	681b      	ldr	r3, [r3, #0]
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	607a      	str	r2, [r7, #4]
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	460b      	mov	r3, r1
 800349a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349c:	7afb      	ldrb	r3, [r7, #11]
 800349e:	f003 020f 	and.w	r2, r3, #15
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	3338      	adds	r3, #56	; 0x38
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	3304      	adds	r3, #4
 80034b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2200      	movs	r2, #0
 80034c4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2201      	movs	r2, #1
 80034ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034cc:	7afb      	ldrb	r3, [r7, #11]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d102      	bne.n	80034e6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034e6:	7afb      	ldrb	r3, [r7, #11]
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d109      	bne.n	8003504 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	6979      	ldr	r1, [r7, #20]
 80034fe:	f003 fd67 	bl	8006fd0 <USB_EP0StartXfer>
 8003502:	e008      	b.n	8003516 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	6979      	ldr	r1, [r7, #20]
 8003512:	f003 fb19 	bl	8006b48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	f003 020f 	and.w	r2, r3, #15
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	429a      	cmp	r2, r3
 8003538:	d901      	bls.n	800353e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e050      	b.n	80035e0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800353e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003542:	2b00      	cmp	r3, #0
 8003544:	da0f      	bge.n	8003566 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	f003 020f 	and.w	r2, r3, #15
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	3338      	adds	r3, #56	; 0x38
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	3304      	adds	r3, #4
 800355c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	705a      	strb	r2, [r3, #1]
 8003564:	e00d      	b.n	8003582 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	4413      	add	r3, r2
 8003578:	3304      	adds	r3, #4
 800357a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	b2da      	uxtb	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_PCD_EP_SetStall+0x82>
 800359e:	2302      	movs	r3, #2
 80035a0:	e01e      	b.n	80035e0 <HAL_PCD_EP_SetStall+0xc0>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68f9      	ldr	r1, [r7, #12]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f003 febe 	bl	8007332 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	b2d9      	uxtb	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035d0:	461a      	mov	r2, r3
 80035d2:	f004 f8af 	bl	8007734 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	f003 020f 	and.w	r2, r3, #15
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d901      	bls.n	8003606 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e042      	b.n	800368c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800360a:	2b00      	cmp	r3, #0
 800360c:	da0f      	bge.n	800362e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800360e:	78fb      	ldrb	r3, [r7, #3]
 8003610:	f003 020f 	and.w	r2, r3, #15
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	3338      	adds	r3, #56	; 0x38
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	4413      	add	r3, r2
 8003622:	3304      	adds	r3, #4
 8003624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	705a      	strb	r2, [r3, #1]
 800362c:	e00f      	b.n	800364e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	f003 020f 	and.w	r2, r3, #15
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	4413      	add	r3, r2
 8003644:	3304      	adds	r3, #4
 8003646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	b2da      	uxtb	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_PCD_EP_ClrStall+0x86>
 800366a:	2302      	movs	r3, #2
 800366c:	e00e      	b.n	800368c <HAL_PCD_EP_ClrStall+0xa4>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68f9      	ldr	r1, [r7, #12]
 800367c:	4618      	mov	r0, r3
 800367e:	f003 fec6 	bl	800740e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08a      	sub	sp, #40	; 0x28
 8003698:	af02      	add	r7, sp, #8
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	3338      	adds	r3, #56	; 0x38
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	4413      	add	r3, r2
 80036b8:	3304      	adds	r3, #4
 80036ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	699a      	ldr	r2, [r3, #24]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d901      	bls.n	80036cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e06c      	b.n	80037a6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d902      	bls.n	80036e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	3303      	adds	r3, #3
 80036ec:	089b      	lsrs	r3, r3, #2
 80036ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036f0:	e02b      	b.n	800374a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	429a      	cmp	r2, r3
 8003706:	d902      	bls.n	800370e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3303      	adds	r3, #3
 8003712:	089b      	lsrs	r3, r3, #2
 8003714:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	68d9      	ldr	r1, [r3, #12]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003726:	b2db      	uxtb	r3, r3
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	4603      	mov	r3, r0
 800372c:	6978      	ldr	r0, [r7, #20]
 800372e:	f003 fda2 	bl	8007276 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	441a      	add	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	441a      	add	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	b29b      	uxth	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	429a      	cmp	r2, r3
 800375e:	d809      	bhi.n	8003774 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	699a      	ldr	r2, [r3, #24]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003768:	429a      	cmp	r2, r3
 800376a:	d203      	bcs.n	8003774 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1be      	bne.n	80036f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	429a      	cmp	r2, r3
 800377e:	d811      	bhi.n	80037a4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	2201      	movs	r2, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	43db      	mvns	r3, r3
 800379a:	6939      	ldr	r1, [r7, #16]
 800379c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037a0:	4013      	ands	r3, r2
 80037a2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3720      	adds	r7, #32
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	333c      	adds	r3, #60	; 0x3c
 80037c8:	3304      	adds	r3, #4
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	f040 80a0 	bne.w	8003928 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d015      	beq.n	800381e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a72      	ldr	r2, [pc, #456]	; (80039c0 <PCD_EP_OutXfrComplete_int+0x210>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	f240 80dd 	bls.w	80039b6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80d7 	beq.w	80039b6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003814:	461a      	mov	r2, r3
 8003816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381a:	6093      	str	r3, [r2, #8]
 800381c:	e0cb      	b.n	80039b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d009      	beq.n	800383c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003834:	461a      	mov	r2, r3
 8003836:	2320      	movs	r3, #32
 8003838:	6093      	str	r3, [r2, #8]
 800383a:	e0bc      	b.n	80039b6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003842:	2b00      	cmp	r3, #0
 8003844:	f040 80b7 	bne.w	80039b6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a5d      	ldr	r2, [pc, #372]	; (80039c0 <PCD_EP_OutXfrComplete_int+0x210>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d90f      	bls.n	8003870 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4413      	add	r3, r2
 8003862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003866:	461a      	mov	r2, r3
 8003868:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800386c:	6093      	str	r3, [r2, #8]
 800386e:	e0a2      	b.n	80039b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003882:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	0159      	lsls	r1, r3, #5
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	440b      	add	r3, r1
 800388c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003896:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4403      	add	r3, r0
 80038a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80038aa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038be:	6819      	ldr	r1, [r3, #0]
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4403      	add	r3, r0
 80038ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4419      	add	r1, r3
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	4613      	mov	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4403      	add	r3, r0
 80038e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038e8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d114      	bne.n	800391a <PCD_EP_OutXfrComplete_int+0x16a>
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d108      	bne.n	800391a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003912:	461a      	mov	r2, r3
 8003914:	2101      	movs	r1, #1
 8003916:	f003 ff0d 	bl	8007734 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	4619      	mov	r1, r3
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f005 fe15 	bl	8009550 <HAL_PCD_DataOutStageCallback>
 8003926:	e046      	b.n	80039b6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4a26      	ldr	r2, [pc, #152]	; (80039c4 <PCD_EP_OutXfrComplete_int+0x214>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d124      	bne.n	800397a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003946:	461a      	mov	r2, r3
 8003948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800394c:	6093      	str	r3, [r2, #8]
 800394e:	e032      	b.n	80039b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003966:	461a      	mov	r2, r3
 8003968:	2320      	movs	r3, #32
 800396a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	4619      	mov	r1, r3
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f005 fdec 	bl	8009550 <HAL_PCD_DataOutStageCallback>
 8003978:	e01d      	b.n	80039b6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d114      	bne.n	80039aa <PCD_EP_OutXfrComplete_int+0x1fa>
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d108      	bne.n	80039aa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039a2:	461a      	mov	r2, r3
 80039a4:	2100      	movs	r1, #0
 80039a6:	f003 fec5 	bl	8007734 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	4619      	mov	r1, r3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f005 fdcd 	bl	8009550 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	4f54300a 	.word	0x4f54300a
 80039c4:	4f54310a 	.word	0x4f54310a

080039c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	333c      	adds	r3, #60	; 0x3c
 80039e0:	3304      	adds	r3, #4
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4a15      	ldr	r2, [pc, #84]	; (8003a50 <PCD_EP_OutSetupPacket_int+0x88>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d90e      	bls.n	8003a1c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d009      	beq.n	8003a1c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a14:	461a      	mov	r2, r3
 8003a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a1a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f005 fd85 	bl	800952c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4a0a      	ldr	r2, [pc, #40]	; (8003a50 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d90c      	bls.n	8003a44 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d108      	bne.n	8003a44 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	2101      	movs	r1, #1
 8003a40:	f003 fe78 	bl	8007734 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	4f54300a 	.word	0x4f54300a

08003a54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	70fb      	strb	r3, [r7, #3]
 8003a60:	4613      	mov	r3, r2
 8003a62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d107      	bne.n	8003a82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a72:	883b      	ldrh	r3, [r7, #0]
 8003a74:	0419      	lsls	r1, r3, #16
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a80:	e028      	b.n	8003ad4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	0c1b      	lsrs	r3, r3, #16
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a90:	2300      	movs	r3, #0
 8003a92:	73fb      	strb	r3, [r7, #15]
 8003a94:	e00d      	b.n	8003ab2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	3340      	adds	r3, #64	; 0x40
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
 8003ab2:	7bfa      	ldrb	r2, [r7, #15]
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d3ec      	bcc.n	8003a96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003abc:	883b      	ldrh	r3, [r7, #0]
 8003abe:	0418      	lsls	r0, r3, #16
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6819      	ldr	r1, [r3, #0]
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	4302      	orrs	r2, r0
 8003acc:	3340      	adds	r3, #64	; 0x40
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	460b      	mov	r3, r1
 8003aec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	887a      	ldrh	r2, [r7, #2]
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e25b      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d075      	beq.n	8003c26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b3a:	4ba3      	ldr	r3, [pc, #652]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d00c      	beq.n	8003b60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b46:	4ba0      	ldr	r3, [pc, #640]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d112      	bne.n	8003b78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b52:	4b9d      	ldr	r3, [pc, #628]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b5e:	d10b      	bne.n	8003b78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b60:	4b99      	ldr	r3, [pc, #612]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d05b      	beq.n	8003c24 <HAL_RCC_OscConfig+0x108>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d157      	bne.n	8003c24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e236      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b80:	d106      	bne.n	8003b90 <HAL_RCC_OscConfig+0x74>
 8003b82:	4b91      	ldr	r3, [pc, #580]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a90      	ldr	r2, [pc, #576]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e01d      	b.n	8003bcc <HAL_RCC_OscConfig+0xb0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x98>
 8003b9a:	4b8b      	ldr	r3, [pc, #556]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a8a      	ldr	r2, [pc, #552]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	4b88      	ldr	r3, [pc, #544]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a87      	ldr	r2, [pc, #540]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e00b      	b.n	8003bcc <HAL_RCC_OscConfig+0xb0>
 8003bb4:	4b84      	ldr	r3, [pc, #528]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a83      	ldr	r2, [pc, #524]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	4b81      	ldr	r3, [pc, #516]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a80      	ldr	r2, [pc, #512]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d013      	beq.n	8003bfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7fd fbe0 	bl	8001398 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7fd fbdc 	bl	8001398 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e1fb      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	4b76      	ldr	r3, [pc, #472]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0xc0>
 8003bfa:	e014      	b.n	8003c26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7fd fbcc 	bl	8001398 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c04:	f7fd fbc8 	bl	8001398 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	; 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e1e7      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c16:	4b6c      	ldr	r3, [pc, #432]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0xe8>
 8003c22:	e000      	b.n	8003c26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d063      	beq.n	8003cfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c32:	4b65      	ldr	r3, [pc, #404]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00b      	beq.n	8003c56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3e:	4b62      	ldr	r3, [pc, #392]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d11c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c4a:	4b5f      	ldr	r3, [pc, #380]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d116      	bne.n	8003c84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c56:	4b5c      	ldr	r3, [pc, #368]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_RCC_OscConfig+0x152>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d001      	beq.n	8003c6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e1bb      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6e:	4b56      	ldr	r3, [pc, #344]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4952      	ldr	r1, [pc, #328]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c82:	e03a      	b.n	8003cfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d020      	beq.n	8003cce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c8c:	4b4f      	ldr	r3, [pc, #316]	; (8003dcc <HAL_RCC_OscConfig+0x2b0>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fd fb81 	bl	8001398 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c9a:	f7fd fb7d 	bl	8001398 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e19c      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cac:	4b46      	ldr	r3, [pc, #280]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb8:	4b43      	ldr	r3, [pc, #268]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4940      	ldr	r1, [pc, #256]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	600b      	str	r3, [r1, #0]
 8003ccc:	e015      	b.n	8003cfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cce:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <HAL_RCC_OscConfig+0x2b0>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fd fb60 	bl	8001398 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cdc:	f7fd fb5c 	bl	8001398 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e17b      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cee:	4b36      	ldr	r3, [pc, #216]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d030      	beq.n	8003d68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d016      	beq.n	8003d3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d0e:	4b30      	ldr	r3, [pc, #192]	; (8003dd0 <HAL_RCC_OscConfig+0x2b4>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d14:	f7fd fb40 	bl	8001398 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d1c:	f7fd fb3c 	bl	8001398 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e15b      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2e:	4b26      	ldr	r3, [pc, #152]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x200>
 8003d3a:	e015      	b.n	8003d68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d3c:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <HAL_RCC_OscConfig+0x2b4>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d42:	f7fd fb29 	bl	8001398 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d4a:	f7fd fb25 	bl	8001398 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e144      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f0      	bne.n	8003d4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80a0 	beq.w	8003eb6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d76:	2300      	movs	r3, #0
 8003d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d7a:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10f      	bne.n	8003da6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	4a0e      	ldr	r2, [pc, #56]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d94:	6413      	str	r3, [r2, #64]	; 0x40
 8003d96:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da2:	2301      	movs	r3, #1
 8003da4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da6:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_RCC_OscConfig+0x2b8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d121      	bne.n	8003df6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <HAL_RCC_OscConfig+0x2b8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a07      	ldr	r2, [pc, #28]	; (8003dd4 <HAL_RCC_OscConfig+0x2b8>)
 8003db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dbe:	f7fd faeb 	bl	8001398 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc4:	e011      	b.n	8003dea <HAL_RCC_OscConfig+0x2ce>
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	42470000 	.word	0x42470000
 8003dd0:	42470e80 	.word	0x42470e80
 8003dd4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd8:	f7fd fade 	bl	8001398 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e0fd      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dea:	4b81      	ldr	r3, [pc, #516]	; (8003ff0 <HAL_RCC_OscConfig+0x4d4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d106      	bne.n	8003e0c <HAL_RCC_OscConfig+0x2f0>
 8003dfe:	4b7d      	ldr	r3, [pc, #500]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	4a7c      	ldr	r2, [pc, #496]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0a:	e01c      	b.n	8003e46 <HAL_RCC_OscConfig+0x32a>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b05      	cmp	r3, #5
 8003e12:	d10c      	bne.n	8003e2e <HAL_RCC_OscConfig+0x312>
 8003e14:	4b77      	ldr	r3, [pc, #476]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	4a76      	ldr	r2, [pc, #472]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e1a:	f043 0304 	orr.w	r3, r3, #4
 8003e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e20:	4b74      	ldr	r3, [pc, #464]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e24:	4a73      	ldr	r2, [pc, #460]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2c:	e00b      	b.n	8003e46 <HAL_RCC_OscConfig+0x32a>
 8003e2e:	4b71      	ldr	r3, [pc, #452]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	4a70      	ldr	r2, [pc, #448]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3a:	4b6e      	ldr	r3, [pc, #440]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	4a6d      	ldr	r2, [pc, #436]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e40:	f023 0304 	bic.w	r3, r3, #4
 8003e44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d015      	beq.n	8003e7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4e:	f7fd faa3 	bl	8001398 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fd fa9f 	bl	8001398 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e0bc      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6c:	4b61      	ldr	r3, [pc, #388]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ee      	beq.n	8003e56 <HAL_RCC_OscConfig+0x33a>
 8003e78:	e014      	b.n	8003ea4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7a:	f7fd fa8d 	bl	8001398 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fd fa89 	bl	8001398 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e0a6      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e98:	4b56      	ldr	r3, [pc, #344]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ee      	bne.n	8003e82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d105      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eaa:	4b52      	ldr	r3, [pc, #328]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	4a51      	ldr	r2, [pc, #324]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 8092 	beq.w	8003fe4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ec0:	4b4c      	ldr	r3, [pc, #304]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d05c      	beq.n	8003f86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d141      	bne.n	8003f58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed4:	4b48      	ldr	r3, [pc, #288]	; (8003ff8 <HAL_RCC_OscConfig+0x4dc>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fd fa5d 	bl	8001398 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee2:	f7fd fa59 	bl	8001398 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e078      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef4:	4b3f      	ldr	r3, [pc, #252]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f0      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	019b      	lsls	r3, r3, #6
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	085b      	lsrs	r3, r3, #1
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	041b      	lsls	r3, r3, #16
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	061b      	lsls	r3, r3, #24
 8003f24:	4933      	ldr	r1, [pc, #204]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f2a:	4b33      	ldr	r3, [pc, #204]	; (8003ff8 <HAL_RCC_OscConfig+0x4dc>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fd fa32 	bl	8001398 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f38:	f7fd fa2e 	bl	8001398 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e04d      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4a:	4b2a      	ldr	r3, [pc, #168]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0x41c>
 8003f56:	e045      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f58:	4b27      	ldr	r3, [pc, #156]	; (8003ff8 <HAL_RCC_OscConfig+0x4dc>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5e:	f7fd fa1b 	bl	8001398 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f66:	f7fd fa17 	bl	8001398 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e036      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f78:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1f0      	bne.n	8003f66 <HAL_RCC_OscConfig+0x44a>
 8003f84:	e02e      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e029      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f92:	4b18      	ldr	r3, [pc, #96]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d11c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d115      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fba:	4013      	ands	r3, r2
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d10d      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d106      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	42470060 	.word	0x42470060

08003ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0cc      	b.n	80041aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004010:	4b68      	ldr	r3, [pc, #416]	; (80041b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d90c      	bls.n	8004038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401e:	4b65      	ldr	r3, [pc, #404]	; (80041b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004026:	4b63      	ldr	r3, [pc, #396]	; (80041b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0b8      	b.n	80041aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d020      	beq.n	8004086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004050:	4b59      	ldr	r3, [pc, #356]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4a58      	ldr	r2, [pc, #352]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800405a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004068:	4b53      	ldr	r3, [pc, #332]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	4a52      	ldr	r2, [pc, #328]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004074:	4b50      	ldr	r3, [pc, #320]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	494d      	ldr	r1, [pc, #308]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	4313      	orrs	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d044      	beq.n	800411c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d107      	bne.n	80040aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409a:	4b47      	ldr	r3, [pc, #284]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d119      	bne.n	80040da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e07f      	b.n	80041aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d003      	beq.n	80040ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d107      	bne.n	80040ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ba:	4b3f      	ldr	r3, [pc, #252]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e06f      	b.n	80041aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ca:	4b3b      	ldr	r3, [pc, #236]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e067      	b.n	80041aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040da:	4b37      	ldr	r3, [pc, #220]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f023 0203 	bic.w	r2, r3, #3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	4934      	ldr	r1, [pc, #208]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040ec:	f7fd f954 	bl	8001398 <HAL_GetTick>
 80040f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f2:	e00a      	b.n	800410a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f4:	f7fd f950 	bl	8001398 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e04f      	b.n	80041aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410a:	4b2b      	ldr	r3, [pc, #172]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 020c 	and.w	r2, r3, #12
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	429a      	cmp	r2, r3
 800411a:	d1eb      	bne.n	80040f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800411c:	4b25      	ldr	r3, [pc, #148]	; (80041b4 <HAL_RCC_ClockConfig+0x1b8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d20c      	bcs.n	8004144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412a:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <HAL_RCC_ClockConfig+0x1b8>)
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004132:	4b20      	ldr	r3, [pc, #128]	; (80041b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d001      	beq.n	8004144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e032      	b.n	80041aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004150:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4916      	ldr	r1, [pc, #88]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d009      	beq.n	8004182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800416e:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	490e      	ldr	r1, [pc, #56]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	4313      	orrs	r3, r2
 8004180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004182:	f000 f821 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
 8004186:	4601      	mov	r1, r0
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <HAL_RCC_ClockConfig+0x1c0>)
 8004194:	5cd3      	ldrb	r3, [r2, r3]
 8004196:	fa21 f303 	lsr.w	r3, r1, r3
 800419a:	4a09      	ldr	r2, [pc, #36]	; (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 800419c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fd f8b4 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40023c00 	.word	0x40023c00
 80041b8:	40023800 	.word	0x40023800
 80041bc:	08009cd8 	.word	0x08009cd8
 80041c0:	20000000 	.word	0x20000000
 80041c4:	20000004 	.word	0x20000004

080041c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	2300      	movs	r3, #0
 80041d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041de:	4b63      	ldr	r3, [pc, #396]	; (800436c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d007      	beq.n	80041fa <HAL_RCC_GetSysClockFreq+0x32>
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d008      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x38>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f040 80b4 	bne.w	800435c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041f4:	4b5e      	ldr	r3, [pc, #376]	; (8004370 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80041f6:	60bb      	str	r3, [r7, #8]
       break;
 80041f8:	e0b3      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041fa:	4b5d      	ldr	r3, [pc, #372]	; (8004370 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80041fc:	60bb      	str	r3, [r7, #8]
      break;
 80041fe:	e0b0      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004200:	4b5a      	ldr	r3, [pc, #360]	; (800436c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004208:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800420a:	4b58      	ldr	r3, [pc, #352]	; (800436c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d04a      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004216:	4b55      	ldr	r3, [pc, #340]	; (800436c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	099b      	lsrs	r3, r3, #6
 800421c:	f04f 0400 	mov.w	r4, #0
 8004220:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	ea03 0501 	and.w	r5, r3, r1
 800422c:	ea04 0602 	and.w	r6, r4, r2
 8004230:	4629      	mov	r1, r5
 8004232:	4632      	mov	r2, r6
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	f04f 0400 	mov.w	r4, #0
 800423c:	0154      	lsls	r4, r2, #5
 800423e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004242:	014b      	lsls	r3, r1, #5
 8004244:	4619      	mov	r1, r3
 8004246:	4622      	mov	r2, r4
 8004248:	1b49      	subs	r1, r1, r5
 800424a:	eb62 0206 	sbc.w	r2, r2, r6
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	f04f 0400 	mov.w	r4, #0
 8004256:	0194      	lsls	r4, r2, #6
 8004258:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800425c:	018b      	lsls	r3, r1, #6
 800425e:	1a5b      	subs	r3, r3, r1
 8004260:	eb64 0402 	sbc.w	r4, r4, r2
 8004264:	f04f 0100 	mov.w	r1, #0
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	00e2      	lsls	r2, r4, #3
 800426e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004272:	00d9      	lsls	r1, r3, #3
 8004274:	460b      	mov	r3, r1
 8004276:	4614      	mov	r4, r2
 8004278:	195b      	adds	r3, r3, r5
 800427a:	eb44 0406 	adc.w	r4, r4, r6
 800427e:	f04f 0100 	mov.w	r1, #0
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	02a2      	lsls	r2, r4, #10
 8004288:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800428c:	0299      	lsls	r1, r3, #10
 800428e:	460b      	mov	r3, r1
 8004290:	4614      	mov	r4, r2
 8004292:	4618      	mov	r0, r3
 8004294:	4621      	mov	r1, r4
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f04f 0400 	mov.w	r4, #0
 800429c:	461a      	mov	r2, r3
 800429e:	4623      	mov	r3, r4
 80042a0:	f7fb ffa2 	bl	80001e8 <__aeabi_uldivmod>
 80042a4:	4603      	mov	r3, r0
 80042a6:	460c      	mov	r4, r1
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	e049      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ac:	4b2f      	ldr	r3, [pc, #188]	; (800436c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	099b      	lsrs	r3, r3, #6
 80042b2:	f04f 0400 	mov.w	r4, #0
 80042b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	ea03 0501 	and.w	r5, r3, r1
 80042c2:	ea04 0602 	and.w	r6, r4, r2
 80042c6:	4629      	mov	r1, r5
 80042c8:	4632      	mov	r2, r6
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	f04f 0400 	mov.w	r4, #0
 80042d2:	0154      	lsls	r4, r2, #5
 80042d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042d8:	014b      	lsls	r3, r1, #5
 80042da:	4619      	mov	r1, r3
 80042dc:	4622      	mov	r2, r4
 80042de:	1b49      	subs	r1, r1, r5
 80042e0:	eb62 0206 	sbc.w	r2, r2, r6
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	f04f 0400 	mov.w	r4, #0
 80042ec:	0194      	lsls	r4, r2, #6
 80042ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042f2:	018b      	lsls	r3, r1, #6
 80042f4:	1a5b      	subs	r3, r3, r1
 80042f6:	eb64 0402 	sbc.w	r4, r4, r2
 80042fa:	f04f 0100 	mov.w	r1, #0
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	00e2      	lsls	r2, r4, #3
 8004304:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004308:	00d9      	lsls	r1, r3, #3
 800430a:	460b      	mov	r3, r1
 800430c:	4614      	mov	r4, r2
 800430e:	195b      	adds	r3, r3, r5
 8004310:	eb44 0406 	adc.w	r4, r4, r6
 8004314:	f04f 0100 	mov.w	r1, #0
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	02a2      	lsls	r2, r4, #10
 800431e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004322:	0299      	lsls	r1, r3, #10
 8004324:	460b      	mov	r3, r1
 8004326:	4614      	mov	r4, r2
 8004328:	4618      	mov	r0, r3
 800432a:	4621      	mov	r1, r4
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f04f 0400 	mov.w	r4, #0
 8004332:	461a      	mov	r2, r3
 8004334:	4623      	mov	r3, r4
 8004336:	f7fb ff57 	bl	80001e8 <__aeabi_uldivmod>
 800433a:	4603      	mov	r3, r0
 800433c:	460c      	mov	r4, r1
 800433e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004340:	4b0a      	ldr	r3, [pc, #40]	; (800436c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	0c1b      	lsrs	r3, r3, #16
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	3301      	adds	r3, #1
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	60bb      	str	r3, [r7, #8]
      break;
 800435a:	e002      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800435e:	60bb      	str	r3, [r7, #8]
      break;
 8004360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004362:	68bb      	ldr	r3, [r7, #8]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800436c:	40023800 	.word	0x40023800
 8004370:	00f42400 	.word	0x00f42400

08004374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004378:	4b03      	ldr	r3, [pc, #12]	; (8004388 <HAL_RCC_GetHCLKFreq+0x14>)
 800437a:	681b      	ldr	r3, [r3, #0]
}
 800437c:	4618      	mov	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	20000000 	.word	0x20000000

0800438c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004390:	f7ff fff0 	bl	8004374 <HAL_RCC_GetHCLKFreq>
 8004394:	4601      	mov	r1, r0
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	0a9b      	lsrs	r3, r3, #10
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	4a03      	ldr	r2, [pc, #12]	; (80043b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043a2:	5cd3      	ldrb	r3, [r2, r3]
 80043a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40023800 	.word	0x40023800
 80043b0:	08009ce8 	.word	0x08009ce8

080043b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043b8:	f7ff ffdc 	bl	8004374 <HAL_RCC_GetHCLKFreq>
 80043bc:	4601      	mov	r1, r0
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	0b5b      	lsrs	r3, r3, #13
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	4a03      	ldr	r2, [pc, #12]	; (80043d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ca:	5cd3      	ldrb	r3, [r2, r3]
 80043cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40023800 	.word	0x40023800
 80043d8:	08009ce8 	.word	0x08009ce8

080043dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e056      	b.n	800449c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7fc fd8d 	bl	8000f28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2202      	movs	r2, #2
 8004412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004424:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	ea42 0103 	orr.w	r1, r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	0c1b      	lsrs	r3, r3, #16
 800446c:	f003 0104 	and.w	r1, r3, #4
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800448a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	4613      	mov	r3, r2
 80044b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_SPI_Transmit+0x22>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e11e      	b.n	8004704 <HAL_SPI_Transmit+0x260>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044ce:	f7fc ff63 	bl	8001398 <HAL_GetTick>
 80044d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d002      	beq.n	80044ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044e4:	2302      	movs	r3, #2
 80044e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044e8:	e103      	b.n	80046f2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <HAL_SPI_Transmit+0x52>
 80044f0:	88fb      	ldrh	r3, [r7, #6]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d102      	bne.n	80044fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044fa:	e0fa      	b.n	80046f2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2203      	movs	r2, #3
 8004500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	88fa      	ldrh	r2, [r7, #6]
 8004514:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	88fa      	ldrh	r2, [r7, #6]
 800451a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004542:	d107      	bne.n	8004554 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004552:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	d007      	beq.n	8004572 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004570:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457a:	d14b      	bne.n	8004614 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <HAL_SPI_Transmit+0xe6>
 8004584:	8afb      	ldrh	r3, [r7, #22]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d13e      	bne.n	8004608 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	881a      	ldrh	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	1c9a      	adds	r2, r3, #2
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045ae:	e02b      	b.n	8004608 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d112      	bne.n	80045e4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	881a      	ldrh	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	1c9a      	adds	r2, r3, #2
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80045e2:	e011      	b.n	8004608 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045e4:	f7fc fed8 	bl	8001398 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d803      	bhi.n	80045fc <HAL_SPI_Transmit+0x158>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fa:	d102      	bne.n	8004602 <HAL_SPI_Transmit+0x15e>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004606:	e074      	b.n	80046f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1ce      	bne.n	80045b0 <HAL_SPI_Transmit+0x10c>
 8004612:	e04c      	b.n	80046ae <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_SPI_Transmit+0x17e>
 800461c:	8afb      	ldrh	r3, [r7, #22]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d140      	bne.n	80046a4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004648:	e02c      	b.n	80046a4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b02      	cmp	r3, #2
 8004656:	d113      	bne.n	8004680 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	7812      	ldrb	r2, [r2, #0]
 8004664:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	86da      	strh	r2, [r3, #54]	; 0x36
 800467e:	e011      	b.n	80046a4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004680:	f7fc fe8a 	bl	8001398 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d803      	bhi.n	8004698 <HAL_SPI_Transmit+0x1f4>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	d102      	bne.n	800469e <HAL_SPI_Transmit+0x1fa>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046a2:	e026      	b.n	80046f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1cd      	bne.n	800464a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	6839      	ldr	r1, [r7, #0]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fba4 	bl	8004e00 <SPI_EndRxTxTransaction>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10a      	bne.n	80046e2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046cc:	2300      	movs	r3, #0
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	77fb      	strb	r3, [r7, #31]
 80046ee:	e000      	b.n	80046f2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80046f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004702:	7ffb      	ldrb	r3, [r7, #31]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004728:	d112      	bne.n	8004750 <HAL_SPI_Receive+0x44>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10e      	bne.n	8004750 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2204      	movs	r2, #4
 8004736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800473a:	88fa      	ldrh	r2, [r7, #6]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	4613      	mov	r3, r2
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f8e9 	bl	800491e <HAL_SPI_TransmitReceive>
 800474c:	4603      	mov	r3, r0
 800474e:	e0e2      	b.n	8004916 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_SPI_Receive+0x52>
 800475a:	2302      	movs	r3, #2
 800475c:	e0db      	b.n	8004916 <HAL_SPI_Receive+0x20a>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004766:	f7fc fe17 	bl	8001398 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d002      	beq.n	800477e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004778:	2302      	movs	r3, #2
 800477a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800477c:	e0c2      	b.n	8004904 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <HAL_SPI_Receive+0x7e>
 8004784:	88fb      	ldrh	r3, [r7, #6]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d102      	bne.n	8004790 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800478e:	e0b9      	b.n	8004904 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2204      	movs	r2, #4
 8004794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	88fa      	ldrh	r2, [r7, #6]
 80047a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	88fa      	ldrh	r2, [r7, #6]
 80047ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d6:	d107      	bne.n	80047e8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f2:	2b40      	cmp	r3, #64	; 0x40
 80047f4:	d007      	beq.n	8004806 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004804:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d162      	bne.n	80048d4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800480e:	e02e      	b.n	800486e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b01      	cmp	r3, #1
 800481c:	d115      	bne.n	800484a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f103 020c 	add.w	r2, r3, #12
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	7812      	ldrb	r2, [r2, #0]
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004848:	e011      	b.n	800486e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800484a:	f7fc fda5 	bl	8001398 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d803      	bhi.n	8004862 <HAL_SPI_Receive+0x156>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004860:	d102      	bne.n	8004868 <HAL_SPI_Receive+0x15c>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d102      	bne.n	800486e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800486c:	e04a      	b.n	8004904 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1cb      	bne.n	8004810 <HAL_SPI_Receive+0x104>
 8004878:	e031      	b.n	80048de <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b01      	cmp	r3, #1
 8004886:	d113      	bne.n	80048b0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	b292      	uxth	r2, r2
 8004894:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	1c9a      	adds	r2, r3, #2
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048ae:	e011      	b.n	80048d4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048b0:	f7fc fd72 	bl	8001398 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d803      	bhi.n	80048c8 <HAL_SPI_Receive+0x1bc>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c6:	d102      	bne.n	80048ce <HAL_SPI_Receive+0x1c2>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d102      	bne.n	80048d4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048d2:	e017      	b.n	8004904 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1cd      	bne.n	800487a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	6839      	ldr	r1, [r7, #0]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 fa27 	bl	8004d36 <SPI_EndRxTransaction>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2220      	movs	r2, #32
 80048f2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	75fb      	strb	r3, [r7, #23]
 8004900:	e000      	b.n	8004904 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004902:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004914:	7dfb      	ldrb	r3, [r7, #23]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b08c      	sub	sp, #48	; 0x30
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
 800492a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800492c:	2301      	movs	r3, #1
 800492e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <HAL_SPI_TransmitReceive+0x26>
 8004940:	2302      	movs	r3, #2
 8004942:	e18a      	b.n	8004c5a <HAL_SPI_TransmitReceive+0x33c>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800494c:	f7fc fd24 	bl	8001398 <HAL_GetTick>
 8004950:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004962:	887b      	ldrh	r3, [r7, #2]
 8004964:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004966:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800496a:	2b01      	cmp	r3, #1
 800496c:	d00f      	beq.n	800498e <HAL_SPI_TransmitReceive+0x70>
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004974:	d107      	bne.n	8004986 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d103      	bne.n	8004986 <HAL_SPI_TransmitReceive+0x68>
 800497e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004982:	2b04      	cmp	r3, #4
 8004984:	d003      	beq.n	800498e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004986:	2302      	movs	r3, #2
 8004988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800498c:	e15b      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_SPI_TransmitReceive+0x82>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_SPI_TransmitReceive+0x82>
 800499a:	887b      	ldrh	r3, [r7, #2]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d103      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049a6:	e14e      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d003      	beq.n	80049bc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2205      	movs	r2, #5
 80049b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	887a      	ldrh	r2, [r7, #2]
 80049cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	887a      	ldrh	r2, [r7, #2]
 80049d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	887a      	ldrh	r2, [r7, #2]
 80049de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	887a      	ldrh	r2, [r7, #2]
 80049e4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d007      	beq.n	8004a10 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a18:	d178      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_SPI_TransmitReceive+0x10a>
 8004a22:	8b7b      	ldrh	r3, [r7, #26]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d166      	bne.n	8004af6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	881a      	ldrh	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	1c9a      	adds	r2, r3, #2
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a4c:	e053      	b.n	8004af6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d11b      	bne.n	8004a94 <HAL_SPI_TransmitReceive+0x176>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d016      	beq.n	8004a94 <HAL_SPI_TransmitReceive+0x176>
 8004a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d113      	bne.n	8004a94 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	881a      	ldrh	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7c:	1c9a      	adds	r2, r3, #2
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d119      	bne.n	8004ad6 <HAL_SPI_TransmitReceive+0x1b8>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d014      	beq.n	8004ad6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	b292      	uxth	r2, r2
 8004ab8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	1c9a      	adds	r2, r3, #2
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ad6:	f7fc fc5f 	bl	8001398 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d807      	bhi.n	8004af6 <HAL_SPI_TransmitReceive+0x1d8>
 8004ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aec:	d003      	beq.n	8004af6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004af4:	e0a7      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1a6      	bne.n	8004a4e <HAL_SPI_TransmitReceive+0x130>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1a1      	bne.n	8004a4e <HAL_SPI_TransmitReceive+0x130>
 8004b0a:	e07c      	b.n	8004c06 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <HAL_SPI_TransmitReceive+0x1fc>
 8004b14:	8b7b      	ldrh	r3, [r7, #26]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d16b      	bne.n	8004bf2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	330c      	adds	r3, #12
 8004b24:	7812      	ldrb	r2, [r2, #0]
 8004b26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b40:	e057      	b.n	8004bf2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d11c      	bne.n	8004b8a <HAL_SPI_TransmitReceive+0x26c>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d017      	beq.n	8004b8a <HAL_SPI_TransmitReceive+0x26c>
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d114      	bne.n	8004b8a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	330c      	adds	r3, #12
 8004b6a:	7812      	ldrb	r2, [r2, #0]
 8004b6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d119      	bne.n	8004bcc <HAL_SPI_TransmitReceive+0x2ae>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d014      	beq.n	8004bcc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bcc:	f7fc fbe4 	bl	8001398 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d803      	bhi.n	8004be4 <HAL_SPI_TransmitReceive+0x2c6>
 8004bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be2:	d102      	bne.n	8004bea <HAL_SPI_TransmitReceive+0x2cc>
 8004be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d103      	bne.n	8004bf2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004bf0:	e029      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1a2      	bne.n	8004b42 <HAL_SPI_TransmitReceive+0x224>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d19d      	bne.n	8004b42 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 f8f8 	bl	8004e00 <SPI_EndRxTxTransaction>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d006      	beq.n	8004c24 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c22:	e010      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10b      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	e000      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004c44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3730      	adds	r7, #48	; 0x30
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	603b      	str	r3, [r7, #0]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c72:	e04c      	b.n	8004d0e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	d048      	beq.n	8004d0e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004c7c:	f7fc fb8c 	bl	8001398 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d902      	bls.n	8004c92 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d13d      	bne.n	8004d0e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ca0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004caa:	d111      	bne.n	8004cd0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb4:	d004      	beq.n	8004cc0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cbe:	d107      	bne.n	8004cd0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd8:	d10f      	bne.n	8004cfa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e00f      	b.n	8004d2e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4013      	ands	r3, r2
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	bf0c      	ite	eq
 8004d1e:	2301      	moveq	r3, #1
 8004d20:	2300      	movne	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	461a      	mov	r2, r3
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d1a3      	bne.n	8004c74 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b086      	sub	sp, #24
 8004d3a:	af02      	add	r7, sp, #8
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d4a:	d111      	bne.n	8004d70 <SPI_EndRxTransaction+0x3a>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d54:	d004      	beq.n	8004d60 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5e:	d107      	bne.n	8004d70 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d6e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d78:	d12a      	bne.n	8004dd0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d82:	d012      	beq.n	8004daa <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2180      	movs	r1, #128	; 0x80
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f7ff ff67 	bl	8004c62 <SPI_WaitFlagStateUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d02d      	beq.n	8004df6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	f043 0220 	orr.w	r2, r3, #32
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e026      	b.n	8004df8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2200      	movs	r2, #0
 8004db2:	2101      	movs	r1, #1
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f7ff ff54 	bl	8004c62 <SPI_WaitFlagStateUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01a      	beq.n	8004df6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc4:	f043 0220 	orr.w	r2, r3, #32
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e013      	b.n	8004df8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2101      	movs	r1, #1
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f7ff ff41 	bl	8004c62 <SPI_WaitFlagStateUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dea:	f043 0220 	orr.w	r2, r3, #32
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e000      	b.n	8004df8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <SPI_EndRxTxTransaction+0x7c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1b      	ldr	r2, [pc, #108]	; (8004e80 <SPI_EndRxTxTransaction+0x80>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	0d5b      	lsrs	r3, r3, #21
 8004e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e1c:	fb02 f303 	mul.w	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e2a:	d112      	bne.n	8004e52 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2200      	movs	r2, #0
 8004e34:	2180      	movs	r1, #128	; 0x80
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7ff ff13 	bl	8004c62 <SPI_WaitFlagStateUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d016      	beq.n	8004e70 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e46:	f043 0220 	orr.w	r2, r3, #32
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e00f      	b.n	8004e72 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e68:	2b80      	cmp	r3, #128	; 0x80
 8004e6a:	d0f2      	beq.n	8004e52 <SPI_EndRxTxTransaction+0x52>
 8004e6c:	e000      	b.n	8004e70 <SPI_EndRxTxTransaction+0x70>
        break;
 8004e6e:	bf00      	nop
  }

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000000 	.word	0x20000000
 8004e80:	165e9f81 	.word	0x165e9f81

08004e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e01d      	b.n	8004ed2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fc f8a4 	bl	8000ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f000 fa9e 	bl	8005404 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b085      	sub	sp, #20
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0201 	orr.w	r2, r2, #1
 8004ef0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b06      	cmp	r3, #6
 8004f02:	d007      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b082      	sub	sp, #8
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e01d      	b.n	8004f70 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d106      	bne.n	8004f4e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7fc f835 	bl	8000fb8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2202      	movs	r2, #2
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4610      	mov	r0, r2
 8004f62:	f000 fa4f 	bl	8005404 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e01d      	b.n	8004fc6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f815 	bl	8004fce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	f000 fa24 	bl	8005404 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	6839      	ldr	r1, [r7, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fcaa 	bl	8005950 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a10      	ldr	r2, [pc, #64]	; (8005044 <HAL_TIM_PWM_Start+0x60>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d107      	bne.n	8005016 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005014:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b06      	cmp	r3, #6
 8005026:	d007      	beq.n	8005038 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0201 	orr.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40010000 	.word	0x40010000

08005048 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_TIM_OC_ConfigChannel+0x1a>
 800505e:	2302      	movs	r3, #2
 8005060:	e04e      	b.n	8005100 <HAL_TIM_OC_ConfigChannel+0xb8>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2202      	movs	r2, #2
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b0c      	cmp	r3, #12
 8005076:	d839      	bhi.n	80050ec <HAL_TIM_OC_ConfigChannel+0xa4>
 8005078:	a201      	add	r2, pc, #4	; (adr r2, 8005080 <HAL_TIM_OC_ConfigChannel+0x38>)
 800507a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507e:	bf00      	nop
 8005080:	080050b5 	.word	0x080050b5
 8005084:	080050ed 	.word	0x080050ed
 8005088:	080050ed 	.word	0x080050ed
 800508c:	080050ed 	.word	0x080050ed
 8005090:	080050c3 	.word	0x080050c3
 8005094:	080050ed 	.word	0x080050ed
 8005098:	080050ed 	.word	0x080050ed
 800509c:	080050ed 	.word	0x080050ed
 80050a0:	080050d1 	.word	0x080050d1
 80050a4:	080050ed 	.word	0x080050ed
 80050a8:	080050ed 	.word	0x080050ed
 80050ac:	080050ed 	.word	0x080050ed
 80050b0:	080050df 	.word	0x080050df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68b9      	ldr	r1, [r7, #8]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fa22 	bl	8005504 <TIM_OC1_SetConfig>
      break;
 80050c0:	e015      	b.n	80050ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fa81 	bl	80055d0 <TIM_OC2_SetConfig>
      break;
 80050ce:	e00e      	b.n	80050ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68b9      	ldr	r1, [r7, #8]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fae6 	bl	80056a8 <TIM_OC3_SetConfig>
      break;
 80050dc:	e007      	b.n	80050ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 fb49 	bl	800577c <TIM_OC4_SetConfig>
      break;
 80050ea:	e000      	b.n	80050ee <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80050ec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800511e:	2302      	movs	r3, #2
 8005120:	e0b4      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x184>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b0c      	cmp	r3, #12
 8005136:	f200 809f 	bhi.w	8005278 <HAL_TIM_PWM_ConfigChannel+0x170>
 800513a:	a201      	add	r2, pc, #4	; (adr r2, 8005140 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800513c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005140:	08005175 	.word	0x08005175
 8005144:	08005279 	.word	0x08005279
 8005148:	08005279 	.word	0x08005279
 800514c:	08005279 	.word	0x08005279
 8005150:	080051b5 	.word	0x080051b5
 8005154:	08005279 	.word	0x08005279
 8005158:	08005279 	.word	0x08005279
 800515c:	08005279 	.word	0x08005279
 8005160:	080051f7 	.word	0x080051f7
 8005164:	08005279 	.word	0x08005279
 8005168:	08005279 	.word	0x08005279
 800516c:	08005279 	.word	0x08005279
 8005170:	08005237 	.word	0x08005237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f9c2 	bl	8005504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0208 	orr.w	r2, r2, #8
 800518e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699a      	ldr	r2, [r3, #24]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0204 	bic.w	r2, r2, #4
 800519e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6999      	ldr	r1, [r3, #24]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	691a      	ldr	r2, [r3, #16]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	619a      	str	r2, [r3, #24]
      break;
 80051b2:	e062      	b.n	800527a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fa08 	bl	80055d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6999      	ldr	r1, [r3, #24]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	021a      	lsls	r2, r3, #8
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	619a      	str	r2, [r3, #24]
      break;
 80051f4:	e041      	b.n	800527a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fa53 	bl	80056a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69da      	ldr	r2, [r3, #28]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0208 	orr.w	r2, r2, #8
 8005210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0204 	bic.w	r2, r2, #4
 8005220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69d9      	ldr	r1, [r3, #28]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	61da      	str	r2, [r3, #28]
      break;
 8005234:	e021      	b.n	800527a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fa9d 	bl	800577c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69da      	ldr	r2, [r3, #28]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69d9      	ldr	r1, [r3, #28]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	021a      	lsls	r2, r3, #8
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	61da      	str	r2, [r3, #28]
      break;
 8005276:	e000      	b.n	800527a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005278:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_TIM_ConfigClockSource+0x18>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e0a6      	b.n	80053fa <HAL_TIM_ConfigClockSource+0x166>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b40      	cmp	r3, #64	; 0x40
 80052e2:	d067      	beq.n	80053b4 <HAL_TIM_ConfigClockSource+0x120>
 80052e4:	2b40      	cmp	r3, #64	; 0x40
 80052e6:	d80b      	bhi.n	8005300 <HAL_TIM_ConfigClockSource+0x6c>
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	d073      	beq.n	80053d4 <HAL_TIM_ConfigClockSource+0x140>
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d802      	bhi.n	80052f6 <HAL_TIM_ConfigClockSource+0x62>
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d06f      	beq.n	80053d4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80052f4:	e078      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d06c      	beq.n	80053d4 <HAL_TIM_ConfigClockSource+0x140>
 80052fa:	2b30      	cmp	r3, #48	; 0x30
 80052fc:	d06a      	beq.n	80053d4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80052fe:	e073      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005300:	2b70      	cmp	r3, #112	; 0x70
 8005302:	d00d      	beq.n	8005320 <HAL_TIM_ConfigClockSource+0x8c>
 8005304:	2b70      	cmp	r3, #112	; 0x70
 8005306:	d804      	bhi.n	8005312 <HAL_TIM_ConfigClockSource+0x7e>
 8005308:	2b50      	cmp	r3, #80	; 0x50
 800530a:	d033      	beq.n	8005374 <HAL_TIM_ConfigClockSource+0xe0>
 800530c:	2b60      	cmp	r3, #96	; 0x60
 800530e:	d041      	beq.n	8005394 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005310:	e06a      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005316:	d066      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x152>
 8005318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800531c:	d017      	beq.n	800534e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800531e:	e063      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6818      	ldr	r0, [r3, #0]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	6899      	ldr	r1, [r3, #8]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f000 faee 	bl	8005910 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005342:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	609a      	str	r2, [r3, #8]
      break;
 800534c:	e04c      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6899      	ldr	r1, [r3, #8]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f000 fad7 	bl	8005910 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005370:	609a      	str	r2, [r3, #8]
      break;
 8005372:	e039      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6818      	ldr	r0, [r3, #0]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	6859      	ldr	r1, [r3, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	461a      	mov	r2, r3
 8005382:	f000 fa4b 	bl	800581c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2150      	movs	r1, #80	; 0x50
 800538c:	4618      	mov	r0, r3
 800538e:	f000 faa4 	bl	80058da <TIM_ITRx_SetConfig>
      break;
 8005392:	e029      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6818      	ldr	r0, [r3, #0]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	6859      	ldr	r1, [r3, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	461a      	mov	r2, r3
 80053a2:	f000 fa6a 	bl	800587a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2160      	movs	r1, #96	; 0x60
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fa94 	bl	80058da <TIM_ITRx_SetConfig>
      break;
 80053b2:	e019      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	6859      	ldr	r1, [r3, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	461a      	mov	r2, r3
 80053c2:	f000 fa2b 	bl	800581c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2140      	movs	r1, #64	; 0x40
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fa84 	bl	80058da <TIM_ITRx_SetConfig>
      break;
 80053d2:	e009      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f000 fa7b 	bl	80058da <TIM_ITRx_SetConfig>
      break;
 80053e4:	e000      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80053e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a34      	ldr	r2, [pc, #208]	; (80054e8 <TIM_Base_SetConfig+0xe4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00f      	beq.n	800543c <TIM_Base_SetConfig+0x38>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005422:	d00b      	beq.n	800543c <TIM_Base_SetConfig+0x38>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a31      	ldr	r2, [pc, #196]	; (80054ec <TIM_Base_SetConfig+0xe8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d007      	beq.n	800543c <TIM_Base_SetConfig+0x38>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a30      	ldr	r2, [pc, #192]	; (80054f0 <TIM_Base_SetConfig+0xec>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d003      	beq.n	800543c <TIM_Base_SetConfig+0x38>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a2f      	ldr	r2, [pc, #188]	; (80054f4 <TIM_Base_SetConfig+0xf0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d108      	bne.n	800544e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a25      	ldr	r2, [pc, #148]	; (80054e8 <TIM_Base_SetConfig+0xe4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d01b      	beq.n	800548e <TIM_Base_SetConfig+0x8a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545c:	d017      	beq.n	800548e <TIM_Base_SetConfig+0x8a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a22      	ldr	r2, [pc, #136]	; (80054ec <TIM_Base_SetConfig+0xe8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d013      	beq.n	800548e <TIM_Base_SetConfig+0x8a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a21      	ldr	r2, [pc, #132]	; (80054f0 <TIM_Base_SetConfig+0xec>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00f      	beq.n	800548e <TIM_Base_SetConfig+0x8a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a20      	ldr	r2, [pc, #128]	; (80054f4 <TIM_Base_SetConfig+0xf0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00b      	beq.n	800548e <TIM_Base_SetConfig+0x8a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a1f      	ldr	r2, [pc, #124]	; (80054f8 <TIM_Base_SetConfig+0xf4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d007      	beq.n	800548e <TIM_Base_SetConfig+0x8a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a1e      	ldr	r2, [pc, #120]	; (80054fc <TIM_Base_SetConfig+0xf8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d003      	beq.n	800548e <TIM_Base_SetConfig+0x8a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a1d      	ldr	r2, [pc, #116]	; (8005500 <TIM_Base_SetConfig+0xfc>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d108      	bne.n	80054a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a08      	ldr	r2, [pc, #32]	; (80054e8 <TIM_Base_SetConfig+0xe4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d103      	bne.n	80054d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	691a      	ldr	r2, [r3, #16]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	615a      	str	r2, [r3, #20]
}
 80054da:	bf00      	nop
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40010000 	.word	0x40010000
 80054ec:	40000400 	.word	0x40000400
 80054f0:	40000800 	.word	0x40000800
 80054f4:	40000c00 	.word	0x40000c00
 80054f8:	40014000 	.word	0x40014000
 80054fc:	40014400 	.word	0x40014400
 8005500:	40014800 	.word	0x40014800

08005504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	f023 0201 	bic.w	r2, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f023 0302 	bic.w	r3, r3, #2
 800554c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a1c      	ldr	r2, [pc, #112]	; (80055cc <TIM_OC1_SetConfig+0xc8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d10c      	bne.n	800557a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f023 0308 	bic.w	r3, r3, #8
 8005566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f023 0304 	bic.w	r3, r3, #4
 8005578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a13      	ldr	r2, [pc, #76]	; (80055cc <TIM_OC1_SetConfig+0xc8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d111      	bne.n	80055a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	621a      	str	r2, [r3, #32]
}
 80055c0:	bf00      	nop
 80055c2:	371c      	adds	r7, #28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	40010000 	.word	0x40010000

080055d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f023 0210 	bic.w	r2, r3, #16
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	021b      	lsls	r3, r3, #8
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f023 0320 	bic.w	r3, r3, #32
 800561a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a1e      	ldr	r2, [pc, #120]	; (80056a4 <TIM_OC2_SetConfig+0xd4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d10d      	bne.n	800564c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800564a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a15      	ldr	r2, [pc, #84]	; (80056a4 <TIM_OC2_SetConfig+0xd4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d113      	bne.n	800567c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800565a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40010000 	.word	0x40010000

080056a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0303 	bic.w	r3, r3, #3
 80056de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a1d      	ldr	r2, [pc, #116]	; (8005778 <TIM_OC3_SetConfig+0xd0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d10d      	bne.n	8005722 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800570c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	021b      	lsls	r3, r3, #8
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	4313      	orrs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a14      	ldr	r2, [pc, #80]	; (8005778 <TIM_OC3_SetConfig+0xd0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d113      	bne.n	8005752 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	621a      	str	r2, [r3, #32]
}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	40010000 	.word	0x40010000

0800577c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	021b      	lsls	r3, r3, #8
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	031b      	lsls	r3, r3, #12
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a10      	ldr	r2, [pc, #64]	; (8005818 <TIM_OC4_SetConfig+0x9c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d109      	bne.n	80057f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	019b      	lsls	r3, r3, #6
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	621a      	str	r2, [r3, #32]
}
 800580a:	bf00      	nop
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40010000 	.word	0x40010000

0800581c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f023 0201 	bic.w	r2, r3, #1
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f023 030a 	bic.w	r3, r3, #10
 8005858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800587a:	b480      	push	{r7}
 800587c:	b087      	sub	sp, #28
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f023 0210 	bic.w	r2, r3, #16
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	031b      	lsls	r3, r3, #12
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	621a      	str	r2, [r3, #32]
}
 80058ce:	bf00      	nop
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058da:	b480      	push	{r7}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	f043 0307 	orr.w	r3, r3, #7
 80058fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	609a      	str	r2, [r3, #8]
}
 8005904:	bf00      	nop
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800592a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	021a      	lsls	r2, r3, #8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	431a      	orrs	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4313      	orrs	r3, r2
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	609a      	str	r2, [r3, #8]
}
 8005944:	bf00      	nop
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f003 031f 	and.w	r3, r3, #31
 8005962:	2201      	movs	r2, #1
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6a1a      	ldr	r2, [r3, #32]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	43db      	mvns	r3, r3
 8005972:	401a      	ands	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a1a      	ldr	r2, [r3, #32]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	fa01 f303 	lsl.w	r3, r1, r3
 8005988:	431a      	orrs	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	621a      	str	r2, [r3, #32]
}
 800598e:	bf00      	nop
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d101      	bne.n	80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e050      	b.n	8005a56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a1c      	ldr	r2, [pc, #112]	; (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d018      	beq.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a00:	d013      	beq.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a18      	ldr	r2, [pc, #96]	; (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00e      	beq.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a16      	ldr	r2, [pc, #88]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d009      	beq.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a15      	ldr	r2, [pc, #84]	; (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d004      	beq.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a13      	ldr	r2, [pc, #76]	; (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d10c      	bne.n	8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40010000 	.word	0x40010000
 8005a68:	40000400 	.word	0x40000400
 8005a6c:	40000800 	.word	0x40000800
 8005a70:	40000c00 	.word	0x40000c00
 8005a74:	40014000 	.word	0x40014000

08005a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e03f      	b.n	8005b0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fb fb06 	bl	80010b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2224      	movs	r2, #36	; 0x24
 8005aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f829 	bl	8005b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695a      	ldr	r2, [r3, #20]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b18:	b085      	sub	sp, #20
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b56:	f023 030c 	bic.w	r3, r3, #12
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6812      	ldr	r2, [r2, #0]
 8005b5e:	68f9      	ldr	r1, [r7, #12]
 8005b60:	430b      	orrs	r3, r1
 8005b62:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b82:	f040 818b 	bne.w	8005e9c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4ac1      	ldr	r2, [pc, #772]	; (8005e90 <UART_SetConfig+0x37c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d005      	beq.n	8005b9c <UART_SetConfig+0x88>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4abf      	ldr	r2, [pc, #764]	; (8005e94 <UART_SetConfig+0x380>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	f040 80bd 	bne.w	8005d16 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b9c:	f7fe fc0a 	bl	80043b4 <HAL_RCC_GetPCLK2Freq>
 8005ba0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	461d      	mov	r5, r3
 8005ba6:	f04f 0600 	mov.w	r6, #0
 8005baa:	46a8      	mov	r8, r5
 8005bac:	46b1      	mov	r9, r6
 8005bae:	eb18 0308 	adds.w	r3, r8, r8
 8005bb2:	eb49 0409 	adc.w	r4, r9, r9
 8005bb6:	4698      	mov	r8, r3
 8005bb8:	46a1      	mov	r9, r4
 8005bba:	eb18 0805 	adds.w	r8, r8, r5
 8005bbe:	eb49 0906 	adc.w	r9, r9, r6
 8005bc2:	f04f 0100 	mov.w	r1, #0
 8005bc6:	f04f 0200 	mov.w	r2, #0
 8005bca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005bce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005bd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005bd6:	4688      	mov	r8, r1
 8005bd8:	4691      	mov	r9, r2
 8005bda:	eb18 0005 	adds.w	r0, r8, r5
 8005bde:	eb49 0106 	adc.w	r1, r9, r6
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	461d      	mov	r5, r3
 8005be8:	f04f 0600 	mov.w	r6, #0
 8005bec:	196b      	adds	r3, r5, r5
 8005bee:	eb46 0406 	adc.w	r4, r6, r6
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	4623      	mov	r3, r4
 8005bf6:	f7fa faf7 	bl	80001e8 <__aeabi_uldivmod>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	461a      	mov	r2, r3
 8005c00:	4ba5      	ldr	r3, [pc, #660]	; (8005e98 <UART_SetConfig+0x384>)
 8005c02:	fba3 2302 	umull	r2, r3, r3, r2
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	461d      	mov	r5, r3
 8005c10:	f04f 0600 	mov.w	r6, #0
 8005c14:	46a9      	mov	r9, r5
 8005c16:	46b2      	mov	sl, r6
 8005c18:	eb19 0309 	adds.w	r3, r9, r9
 8005c1c:	eb4a 040a 	adc.w	r4, sl, sl
 8005c20:	4699      	mov	r9, r3
 8005c22:	46a2      	mov	sl, r4
 8005c24:	eb19 0905 	adds.w	r9, r9, r5
 8005c28:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c2c:	f04f 0100 	mov.w	r1, #0
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c40:	4689      	mov	r9, r1
 8005c42:	4692      	mov	sl, r2
 8005c44:	eb19 0005 	adds.w	r0, r9, r5
 8005c48:	eb4a 0106 	adc.w	r1, sl, r6
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	461d      	mov	r5, r3
 8005c52:	f04f 0600 	mov.w	r6, #0
 8005c56:	196b      	adds	r3, r5, r5
 8005c58:	eb46 0406 	adc.w	r4, r6, r6
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4623      	mov	r3, r4
 8005c60:	f7fa fac2 	bl	80001e8 <__aeabi_uldivmod>
 8005c64:	4603      	mov	r3, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4b8b      	ldr	r3, [pc, #556]	; (8005e98 <UART_SetConfig+0x384>)
 8005c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	2164      	movs	r1, #100	; 0x64
 8005c74:	fb01 f303 	mul.w	r3, r1, r3
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	3332      	adds	r3, #50	; 0x32
 8005c7e:	4a86      	ldr	r2, [pc, #536]	; (8005e98 <UART_SetConfig+0x384>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c8c:	4498      	add	r8, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	461d      	mov	r5, r3
 8005c92:	f04f 0600 	mov.w	r6, #0
 8005c96:	46a9      	mov	r9, r5
 8005c98:	46b2      	mov	sl, r6
 8005c9a:	eb19 0309 	adds.w	r3, r9, r9
 8005c9e:	eb4a 040a 	adc.w	r4, sl, sl
 8005ca2:	4699      	mov	r9, r3
 8005ca4:	46a2      	mov	sl, r4
 8005ca6:	eb19 0905 	adds.w	r9, r9, r5
 8005caa:	eb4a 0a06 	adc.w	sl, sl, r6
 8005cae:	f04f 0100 	mov.w	r1, #0
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cc2:	4689      	mov	r9, r1
 8005cc4:	4692      	mov	sl, r2
 8005cc6:	eb19 0005 	adds.w	r0, r9, r5
 8005cca:	eb4a 0106 	adc.w	r1, sl, r6
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	461d      	mov	r5, r3
 8005cd4:	f04f 0600 	mov.w	r6, #0
 8005cd8:	196b      	adds	r3, r5, r5
 8005cda:	eb46 0406 	adc.w	r4, r6, r6
 8005cde:	461a      	mov	r2, r3
 8005ce0:	4623      	mov	r3, r4
 8005ce2:	f7fa fa81 	bl	80001e8 <__aeabi_uldivmod>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	460c      	mov	r4, r1
 8005cea:	461a      	mov	r2, r3
 8005cec:	4b6a      	ldr	r3, [pc, #424]	; (8005e98 <UART_SetConfig+0x384>)
 8005cee:	fba3 1302 	umull	r1, r3, r3, r2
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	2164      	movs	r1, #100	; 0x64
 8005cf6:	fb01 f303 	mul.w	r3, r1, r3
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	3332      	adds	r3, #50	; 0x32
 8005d00:	4a65      	ldr	r2, [pc, #404]	; (8005e98 <UART_SetConfig+0x384>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	f003 0207 	and.w	r2, r3, #7
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4442      	add	r2, r8
 8005d12:	609a      	str	r2, [r3, #8]
 8005d14:	e26f      	b.n	80061f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d16:	f7fe fb39 	bl	800438c <HAL_RCC_GetPCLK1Freq>
 8005d1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	461d      	mov	r5, r3
 8005d20:	f04f 0600 	mov.w	r6, #0
 8005d24:	46a8      	mov	r8, r5
 8005d26:	46b1      	mov	r9, r6
 8005d28:	eb18 0308 	adds.w	r3, r8, r8
 8005d2c:	eb49 0409 	adc.w	r4, r9, r9
 8005d30:	4698      	mov	r8, r3
 8005d32:	46a1      	mov	r9, r4
 8005d34:	eb18 0805 	adds.w	r8, r8, r5
 8005d38:	eb49 0906 	adc.w	r9, r9, r6
 8005d3c:	f04f 0100 	mov.w	r1, #0
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d50:	4688      	mov	r8, r1
 8005d52:	4691      	mov	r9, r2
 8005d54:	eb18 0005 	adds.w	r0, r8, r5
 8005d58:	eb49 0106 	adc.w	r1, r9, r6
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	461d      	mov	r5, r3
 8005d62:	f04f 0600 	mov.w	r6, #0
 8005d66:	196b      	adds	r3, r5, r5
 8005d68:	eb46 0406 	adc.w	r4, r6, r6
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	4623      	mov	r3, r4
 8005d70:	f7fa fa3a 	bl	80001e8 <__aeabi_uldivmod>
 8005d74:	4603      	mov	r3, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4b47      	ldr	r3, [pc, #284]	; (8005e98 <UART_SetConfig+0x384>)
 8005d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	461d      	mov	r5, r3
 8005d8a:	f04f 0600 	mov.w	r6, #0
 8005d8e:	46a9      	mov	r9, r5
 8005d90:	46b2      	mov	sl, r6
 8005d92:	eb19 0309 	adds.w	r3, r9, r9
 8005d96:	eb4a 040a 	adc.w	r4, sl, sl
 8005d9a:	4699      	mov	r9, r3
 8005d9c:	46a2      	mov	sl, r4
 8005d9e:	eb19 0905 	adds.w	r9, r9, r5
 8005da2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005da6:	f04f 0100 	mov.w	r1, #0
 8005daa:	f04f 0200 	mov.w	r2, #0
 8005dae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005db2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005db6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dba:	4689      	mov	r9, r1
 8005dbc:	4692      	mov	sl, r2
 8005dbe:	eb19 0005 	adds.w	r0, r9, r5
 8005dc2:	eb4a 0106 	adc.w	r1, sl, r6
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	461d      	mov	r5, r3
 8005dcc:	f04f 0600 	mov.w	r6, #0
 8005dd0:	196b      	adds	r3, r5, r5
 8005dd2:	eb46 0406 	adc.w	r4, r6, r6
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	4623      	mov	r3, r4
 8005dda:	f7fa fa05 	bl	80001e8 <__aeabi_uldivmod>
 8005dde:	4603      	mov	r3, r0
 8005de0:	460c      	mov	r4, r1
 8005de2:	461a      	mov	r2, r3
 8005de4:	4b2c      	ldr	r3, [pc, #176]	; (8005e98 <UART_SetConfig+0x384>)
 8005de6:	fba3 1302 	umull	r1, r3, r3, r2
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	2164      	movs	r1, #100	; 0x64
 8005dee:	fb01 f303 	mul.w	r3, r1, r3
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	3332      	adds	r3, #50	; 0x32
 8005df8:	4a27      	ldr	r2, [pc, #156]	; (8005e98 <UART_SetConfig+0x384>)
 8005dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e06:	4498      	add	r8, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	461d      	mov	r5, r3
 8005e0c:	f04f 0600 	mov.w	r6, #0
 8005e10:	46a9      	mov	r9, r5
 8005e12:	46b2      	mov	sl, r6
 8005e14:	eb19 0309 	adds.w	r3, r9, r9
 8005e18:	eb4a 040a 	adc.w	r4, sl, sl
 8005e1c:	4699      	mov	r9, r3
 8005e1e:	46a2      	mov	sl, r4
 8005e20:	eb19 0905 	adds.w	r9, r9, r5
 8005e24:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e28:	f04f 0100 	mov.w	r1, #0
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e3c:	4689      	mov	r9, r1
 8005e3e:	4692      	mov	sl, r2
 8005e40:	eb19 0005 	adds.w	r0, r9, r5
 8005e44:	eb4a 0106 	adc.w	r1, sl, r6
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	461d      	mov	r5, r3
 8005e4e:	f04f 0600 	mov.w	r6, #0
 8005e52:	196b      	adds	r3, r5, r5
 8005e54:	eb46 0406 	adc.w	r4, r6, r6
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4623      	mov	r3, r4
 8005e5c:	f7fa f9c4 	bl	80001e8 <__aeabi_uldivmod>
 8005e60:	4603      	mov	r3, r0
 8005e62:	460c      	mov	r4, r1
 8005e64:	461a      	mov	r2, r3
 8005e66:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <UART_SetConfig+0x384>)
 8005e68:	fba3 1302 	umull	r1, r3, r3, r2
 8005e6c:	095b      	lsrs	r3, r3, #5
 8005e6e:	2164      	movs	r1, #100	; 0x64
 8005e70:	fb01 f303 	mul.w	r3, r1, r3
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	3332      	adds	r3, #50	; 0x32
 8005e7a:	4a07      	ldr	r2, [pc, #28]	; (8005e98 <UART_SetConfig+0x384>)
 8005e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	f003 0207 	and.w	r2, r3, #7
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4442      	add	r2, r8
 8005e8c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005e8e:	e1b2      	b.n	80061f6 <UART_SetConfig+0x6e2>
 8005e90:	40011000 	.word	0x40011000
 8005e94:	40011400 	.word	0x40011400
 8005e98:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4ad7      	ldr	r2, [pc, #860]	; (8006200 <UART_SetConfig+0x6ec>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d005      	beq.n	8005eb2 <UART_SetConfig+0x39e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4ad6      	ldr	r2, [pc, #856]	; (8006204 <UART_SetConfig+0x6f0>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	f040 80d1 	bne.w	8006054 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eb2:	f7fe fa7f 	bl	80043b4 <HAL_RCC_GetPCLK2Freq>
 8005eb6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	469a      	mov	sl, r3
 8005ebc:	f04f 0b00 	mov.w	fp, #0
 8005ec0:	46d0      	mov	r8, sl
 8005ec2:	46d9      	mov	r9, fp
 8005ec4:	eb18 0308 	adds.w	r3, r8, r8
 8005ec8:	eb49 0409 	adc.w	r4, r9, r9
 8005ecc:	4698      	mov	r8, r3
 8005ece:	46a1      	mov	r9, r4
 8005ed0:	eb18 080a 	adds.w	r8, r8, sl
 8005ed4:	eb49 090b 	adc.w	r9, r9, fp
 8005ed8:	f04f 0100 	mov.w	r1, #0
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ee4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ee8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005eec:	4688      	mov	r8, r1
 8005eee:	4691      	mov	r9, r2
 8005ef0:	eb1a 0508 	adds.w	r5, sl, r8
 8005ef4:	eb4b 0609 	adc.w	r6, fp, r9
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	4619      	mov	r1, r3
 8005efe:	f04f 0200 	mov.w	r2, #0
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	f04f 0400 	mov.w	r4, #0
 8005f0a:	0094      	lsls	r4, r2, #2
 8005f0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f10:	008b      	lsls	r3, r1, #2
 8005f12:	461a      	mov	r2, r3
 8005f14:	4623      	mov	r3, r4
 8005f16:	4628      	mov	r0, r5
 8005f18:	4631      	mov	r1, r6
 8005f1a:	f7fa f965 	bl	80001e8 <__aeabi_uldivmod>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	460c      	mov	r4, r1
 8005f22:	461a      	mov	r2, r3
 8005f24:	4bb8      	ldr	r3, [pc, #736]	; (8006208 <UART_SetConfig+0x6f4>)
 8005f26:	fba3 2302 	umull	r2, r3, r3, r2
 8005f2a:	095b      	lsrs	r3, r3, #5
 8005f2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	469b      	mov	fp, r3
 8005f34:	f04f 0c00 	mov.w	ip, #0
 8005f38:	46d9      	mov	r9, fp
 8005f3a:	46e2      	mov	sl, ip
 8005f3c:	eb19 0309 	adds.w	r3, r9, r9
 8005f40:	eb4a 040a 	adc.w	r4, sl, sl
 8005f44:	4699      	mov	r9, r3
 8005f46:	46a2      	mov	sl, r4
 8005f48:	eb19 090b 	adds.w	r9, r9, fp
 8005f4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f50:	f04f 0100 	mov.w	r1, #0
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f64:	4689      	mov	r9, r1
 8005f66:	4692      	mov	sl, r2
 8005f68:	eb1b 0509 	adds.w	r5, fp, r9
 8005f6c:	eb4c 060a 	adc.w	r6, ip, sl
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	4619      	mov	r1, r3
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	f04f 0400 	mov.w	r4, #0
 8005f82:	0094      	lsls	r4, r2, #2
 8005f84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f88:	008b      	lsls	r3, r1, #2
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	4623      	mov	r3, r4
 8005f8e:	4628      	mov	r0, r5
 8005f90:	4631      	mov	r1, r6
 8005f92:	f7fa f929 	bl	80001e8 <__aeabi_uldivmod>
 8005f96:	4603      	mov	r3, r0
 8005f98:	460c      	mov	r4, r1
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	4b9a      	ldr	r3, [pc, #616]	; (8006208 <UART_SetConfig+0x6f4>)
 8005f9e:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	2164      	movs	r1, #100	; 0x64
 8005fa6:	fb01 f303 	mul.w	r3, r1, r3
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	3332      	adds	r3, #50	; 0x32
 8005fb0:	4a95      	ldr	r2, [pc, #596]	; (8006208 <UART_SetConfig+0x6f4>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fbc:	4498      	add	r8, r3
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	469b      	mov	fp, r3
 8005fc2:	f04f 0c00 	mov.w	ip, #0
 8005fc6:	46d9      	mov	r9, fp
 8005fc8:	46e2      	mov	sl, ip
 8005fca:	eb19 0309 	adds.w	r3, r9, r9
 8005fce:	eb4a 040a 	adc.w	r4, sl, sl
 8005fd2:	4699      	mov	r9, r3
 8005fd4:	46a2      	mov	sl, r4
 8005fd6:	eb19 090b 	adds.w	r9, r9, fp
 8005fda:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005fde:	f04f 0100 	mov.w	r1, #0
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ff2:	4689      	mov	r9, r1
 8005ff4:	4692      	mov	sl, r2
 8005ff6:	eb1b 0509 	adds.w	r5, fp, r9
 8005ffa:	eb4c 060a 	adc.w	r6, ip, sl
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	4619      	mov	r1, r3
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	f04f 0300 	mov.w	r3, #0
 800600c:	f04f 0400 	mov.w	r4, #0
 8006010:	0094      	lsls	r4, r2, #2
 8006012:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006016:	008b      	lsls	r3, r1, #2
 8006018:	461a      	mov	r2, r3
 800601a:	4623      	mov	r3, r4
 800601c:	4628      	mov	r0, r5
 800601e:	4631      	mov	r1, r6
 8006020:	f7fa f8e2 	bl	80001e8 <__aeabi_uldivmod>
 8006024:	4603      	mov	r3, r0
 8006026:	460c      	mov	r4, r1
 8006028:	461a      	mov	r2, r3
 800602a:	4b77      	ldr	r3, [pc, #476]	; (8006208 <UART_SetConfig+0x6f4>)
 800602c:	fba3 1302 	umull	r1, r3, r3, r2
 8006030:	095b      	lsrs	r3, r3, #5
 8006032:	2164      	movs	r1, #100	; 0x64
 8006034:	fb01 f303 	mul.w	r3, r1, r3
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	3332      	adds	r3, #50	; 0x32
 800603e:	4a72      	ldr	r2, [pc, #456]	; (8006208 <UART_SetConfig+0x6f4>)
 8006040:	fba2 2303 	umull	r2, r3, r2, r3
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	f003 020f 	and.w	r2, r3, #15
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4442      	add	r2, r8
 8006050:	609a      	str	r2, [r3, #8]
 8006052:	e0d0      	b.n	80061f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006054:	f7fe f99a 	bl	800438c <HAL_RCC_GetPCLK1Freq>
 8006058:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	469a      	mov	sl, r3
 800605e:	f04f 0b00 	mov.w	fp, #0
 8006062:	46d0      	mov	r8, sl
 8006064:	46d9      	mov	r9, fp
 8006066:	eb18 0308 	adds.w	r3, r8, r8
 800606a:	eb49 0409 	adc.w	r4, r9, r9
 800606e:	4698      	mov	r8, r3
 8006070:	46a1      	mov	r9, r4
 8006072:	eb18 080a 	adds.w	r8, r8, sl
 8006076:	eb49 090b 	adc.w	r9, r9, fp
 800607a:	f04f 0100 	mov.w	r1, #0
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006086:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800608a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800608e:	4688      	mov	r8, r1
 8006090:	4691      	mov	r9, r2
 8006092:	eb1a 0508 	adds.w	r5, sl, r8
 8006096:	eb4b 0609 	adc.w	r6, fp, r9
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	4619      	mov	r1, r3
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	f04f 0400 	mov.w	r4, #0
 80060ac:	0094      	lsls	r4, r2, #2
 80060ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060b2:	008b      	lsls	r3, r1, #2
 80060b4:	461a      	mov	r2, r3
 80060b6:	4623      	mov	r3, r4
 80060b8:	4628      	mov	r0, r5
 80060ba:	4631      	mov	r1, r6
 80060bc:	f7fa f894 	bl	80001e8 <__aeabi_uldivmod>
 80060c0:	4603      	mov	r3, r0
 80060c2:	460c      	mov	r4, r1
 80060c4:	461a      	mov	r2, r3
 80060c6:	4b50      	ldr	r3, [pc, #320]	; (8006208 <UART_SetConfig+0x6f4>)
 80060c8:	fba3 2302 	umull	r2, r3, r3, r2
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	469b      	mov	fp, r3
 80060d6:	f04f 0c00 	mov.w	ip, #0
 80060da:	46d9      	mov	r9, fp
 80060dc:	46e2      	mov	sl, ip
 80060de:	eb19 0309 	adds.w	r3, r9, r9
 80060e2:	eb4a 040a 	adc.w	r4, sl, sl
 80060e6:	4699      	mov	r9, r3
 80060e8:	46a2      	mov	sl, r4
 80060ea:	eb19 090b 	adds.w	r9, r9, fp
 80060ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060f2:	f04f 0100 	mov.w	r1, #0
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006102:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006106:	4689      	mov	r9, r1
 8006108:	4692      	mov	sl, r2
 800610a:	eb1b 0509 	adds.w	r5, fp, r9
 800610e:	eb4c 060a 	adc.w	r6, ip, sl
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	4619      	mov	r1, r3
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	f04f 0400 	mov.w	r4, #0
 8006124:	0094      	lsls	r4, r2, #2
 8006126:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800612a:	008b      	lsls	r3, r1, #2
 800612c:	461a      	mov	r2, r3
 800612e:	4623      	mov	r3, r4
 8006130:	4628      	mov	r0, r5
 8006132:	4631      	mov	r1, r6
 8006134:	f7fa f858 	bl	80001e8 <__aeabi_uldivmod>
 8006138:	4603      	mov	r3, r0
 800613a:	460c      	mov	r4, r1
 800613c:	461a      	mov	r2, r3
 800613e:	4b32      	ldr	r3, [pc, #200]	; (8006208 <UART_SetConfig+0x6f4>)
 8006140:	fba3 1302 	umull	r1, r3, r3, r2
 8006144:	095b      	lsrs	r3, r3, #5
 8006146:	2164      	movs	r1, #100	; 0x64
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	011b      	lsls	r3, r3, #4
 8006150:	3332      	adds	r3, #50	; 0x32
 8006152:	4a2d      	ldr	r2, [pc, #180]	; (8006208 <UART_SetConfig+0x6f4>)
 8006154:	fba2 2303 	umull	r2, r3, r2, r3
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800615e:	4498      	add	r8, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	469b      	mov	fp, r3
 8006164:	f04f 0c00 	mov.w	ip, #0
 8006168:	46d9      	mov	r9, fp
 800616a:	46e2      	mov	sl, ip
 800616c:	eb19 0309 	adds.w	r3, r9, r9
 8006170:	eb4a 040a 	adc.w	r4, sl, sl
 8006174:	4699      	mov	r9, r3
 8006176:	46a2      	mov	sl, r4
 8006178:	eb19 090b 	adds.w	r9, r9, fp
 800617c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006180:	f04f 0100 	mov.w	r1, #0
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800618c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006190:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006194:	4689      	mov	r9, r1
 8006196:	4692      	mov	sl, r2
 8006198:	eb1b 0509 	adds.w	r5, fp, r9
 800619c:	eb4c 060a 	adc.w	r6, ip, sl
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	4619      	mov	r1, r3
 80061a6:	f04f 0200 	mov.w	r2, #0
 80061aa:	f04f 0300 	mov.w	r3, #0
 80061ae:	f04f 0400 	mov.w	r4, #0
 80061b2:	0094      	lsls	r4, r2, #2
 80061b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061b8:	008b      	lsls	r3, r1, #2
 80061ba:	461a      	mov	r2, r3
 80061bc:	4623      	mov	r3, r4
 80061be:	4628      	mov	r0, r5
 80061c0:	4631      	mov	r1, r6
 80061c2:	f7fa f811 	bl	80001e8 <__aeabi_uldivmod>
 80061c6:	4603      	mov	r3, r0
 80061c8:	460c      	mov	r4, r1
 80061ca:	461a      	mov	r2, r3
 80061cc:	4b0e      	ldr	r3, [pc, #56]	; (8006208 <UART_SetConfig+0x6f4>)
 80061ce:	fba3 1302 	umull	r1, r3, r3, r2
 80061d2:	095b      	lsrs	r3, r3, #5
 80061d4:	2164      	movs	r1, #100	; 0x64
 80061d6:	fb01 f303 	mul.w	r3, r1, r3
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	3332      	adds	r3, #50	; 0x32
 80061e0:	4a09      	ldr	r2, [pc, #36]	; (8006208 <UART_SetConfig+0x6f4>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	f003 020f 	and.w	r2, r3, #15
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4442      	add	r2, r8
 80061f2:	609a      	str	r2, [r3, #8]
}
 80061f4:	e7ff      	b.n	80061f6 <UART_SetConfig+0x6e2>
 80061f6:	bf00      	nop
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006200:	40011000 	.word	0x40011000
 8006204:	40011400 	.word	0x40011400
 8006208:	51eb851f 	.word	0x51eb851f

0800620c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800620c:	b084      	sub	sp, #16
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	f107 001c 	add.w	r0, r7, #28
 800621a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	2b01      	cmp	r3, #1
 8006222:	d122      	bne.n	800626a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800624c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800624e:	2b01      	cmp	r3, #1
 8006250:	d105      	bne.n	800625e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f001 fac6 	bl	80077f0 <USB_CoreReset>
 8006264:	4603      	mov	r3, r0
 8006266:	73fb      	strb	r3, [r7, #15]
 8006268:	e01a      	b.n	80062a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 faba 	bl	80077f0 <USB_CoreReset>
 800627c:	4603      	mov	r3, r0
 800627e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	639a      	str	r2, [r3, #56]	; 0x38
 8006292:	e005      	b.n	80062a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006298:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d10b      	bne.n	80062be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f043 0206 	orr.w	r2, r3, #6
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f043 0220 	orr.w	r2, r3, #32
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062be:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062ca:	b004      	add	sp, #16
 80062cc:	4770      	bx	lr
	...

080062d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	4613      	mov	r3, r2
 80062dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80062de:	79fb      	ldrb	r3, [r7, #7]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d165      	bne.n	80063b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4a41      	ldr	r2, [pc, #260]	; (80063ec <USB_SetTurnaroundTime+0x11c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d906      	bls.n	80062fa <USB_SetTurnaroundTime+0x2a>
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4a40      	ldr	r2, [pc, #256]	; (80063f0 <USB_SetTurnaroundTime+0x120>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d802      	bhi.n	80062fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80062f4:	230f      	movs	r3, #15
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	e062      	b.n	80063c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	4a3c      	ldr	r2, [pc, #240]	; (80063f0 <USB_SetTurnaroundTime+0x120>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d906      	bls.n	8006310 <USB_SetTurnaroundTime+0x40>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	4a3b      	ldr	r2, [pc, #236]	; (80063f4 <USB_SetTurnaroundTime+0x124>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d802      	bhi.n	8006310 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800630a:	230e      	movs	r3, #14
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	e057      	b.n	80063c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4a38      	ldr	r2, [pc, #224]	; (80063f4 <USB_SetTurnaroundTime+0x124>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d906      	bls.n	8006326 <USB_SetTurnaroundTime+0x56>
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	4a37      	ldr	r2, [pc, #220]	; (80063f8 <USB_SetTurnaroundTime+0x128>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d802      	bhi.n	8006326 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006320:	230d      	movs	r3, #13
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	e04c      	b.n	80063c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	4a33      	ldr	r2, [pc, #204]	; (80063f8 <USB_SetTurnaroundTime+0x128>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d906      	bls.n	800633c <USB_SetTurnaroundTime+0x6c>
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	4a32      	ldr	r2, [pc, #200]	; (80063fc <USB_SetTurnaroundTime+0x12c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d802      	bhi.n	800633c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006336:	230c      	movs	r3, #12
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	e041      	b.n	80063c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	4a2f      	ldr	r2, [pc, #188]	; (80063fc <USB_SetTurnaroundTime+0x12c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d906      	bls.n	8006352 <USB_SetTurnaroundTime+0x82>
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4a2e      	ldr	r2, [pc, #184]	; (8006400 <USB_SetTurnaroundTime+0x130>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d802      	bhi.n	8006352 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800634c:	230b      	movs	r3, #11
 800634e:	617b      	str	r3, [r7, #20]
 8006350:	e036      	b.n	80063c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	4a2a      	ldr	r2, [pc, #168]	; (8006400 <USB_SetTurnaroundTime+0x130>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d906      	bls.n	8006368 <USB_SetTurnaroundTime+0x98>
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	4a29      	ldr	r2, [pc, #164]	; (8006404 <USB_SetTurnaroundTime+0x134>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d802      	bhi.n	8006368 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006362:	230a      	movs	r3, #10
 8006364:	617b      	str	r3, [r7, #20]
 8006366:	e02b      	b.n	80063c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4a26      	ldr	r2, [pc, #152]	; (8006404 <USB_SetTurnaroundTime+0x134>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d906      	bls.n	800637e <USB_SetTurnaroundTime+0xae>
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	4a25      	ldr	r2, [pc, #148]	; (8006408 <USB_SetTurnaroundTime+0x138>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d802      	bhi.n	800637e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006378:	2309      	movs	r3, #9
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	e020      	b.n	80063c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	4a21      	ldr	r2, [pc, #132]	; (8006408 <USB_SetTurnaroundTime+0x138>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d906      	bls.n	8006394 <USB_SetTurnaroundTime+0xc4>
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	4a20      	ldr	r2, [pc, #128]	; (800640c <USB_SetTurnaroundTime+0x13c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d802      	bhi.n	8006394 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800638e:	2308      	movs	r3, #8
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	e015      	b.n	80063c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4a1d      	ldr	r2, [pc, #116]	; (800640c <USB_SetTurnaroundTime+0x13c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d906      	bls.n	80063aa <USB_SetTurnaroundTime+0xda>
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	4a1c      	ldr	r2, [pc, #112]	; (8006410 <USB_SetTurnaroundTime+0x140>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d802      	bhi.n	80063aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80063a4:	2307      	movs	r3, #7
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	e00a      	b.n	80063c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80063aa:	2306      	movs	r3, #6
 80063ac:	617b      	str	r3, [r7, #20]
 80063ae:	e007      	b.n	80063c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80063b0:	79fb      	ldrb	r3, [r7, #7]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d102      	bne.n	80063bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80063b6:	2309      	movs	r3, #9
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	e001      	b.n	80063c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80063bc:	2309      	movs	r3, #9
 80063be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	68da      	ldr	r2, [r3, #12]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	029b      	lsls	r3, r3, #10
 80063d4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80063d8:	431a      	orrs	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	371c      	adds	r7, #28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	00d8acbf 	.word	0x00d8acbf
 80063f0:	00e4e1bf 	.word	0x00e4e1bf
 80063f4:	00f423ff 	.word	0x00f423ff
 80063f8:	0106737f 	.word	0x0106737f
 80063fc:	011a499f 	.word	0x011a499f
 8006400:	01312cff 	.word	0x01312cff
 8006404:	014ca43f 	.word	0x014ca43f
 8006408:	016e35ff 	.word	0x016e35ff
 800640c:	01a6ab1f 	.word	0x01a6ab1f
 8006410:	01e847ff 	.word	0x01e847ff

08006414 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f043 0201 	orr.w	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f023 0201 	bic.w	r2, r3, #1
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d106      	bne.n	8006484 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	60da      	str	r2, [r3, #12]
 8006482:	e00b      	b.n	800649c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d106      	bne.n	8006498 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	60da      	str	r2, [r3, #12]
 8006496:	e001      	b.n	800649c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e003      	b.n	80064a4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800649c:	2032      	movs	r0, #50	; 0x32
 800649e:	f7fa ff87 	bl	80013b0 <HAL_Delay>

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064ac:	b084      	sub	sp, #16
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b086      	sub	sp, #24
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80064ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80064c6:	2300      	movs	r3, #0
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	e009      	b.n	80064e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	3340      	adds	r3, #64	; 0x40
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	2200      	movs	r2, #0
 80064d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	3301      	adds	r3, #1
 80064de:	613b      	str	r3, [r7, #16]
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	2b0e      	cmp	r3, #14
 80064e4:	d9f2      	bls.n	80064cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80064e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d11c      	bne.n	8006526 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064fa:	f043 0302 	orr.w	r3, r3, #2
 80064fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006504:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	639a      	str	r2, [r3, #56]	; 0x38
 8006524:	e00b      	b.n	800653e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006536:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006544:	461a      	mov	r2, r3
 8006546:	2300      	movs	r3, #0
 8006548:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006550:	4619      	mov	r1, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006558:	461a      	mov	r2, r3
 800655a:	680b      	ldr	r3, [r1, #0]
 800655c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800655e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006560:	2b01      	cmp	r3, #1
 8006562:	d10c      	bne.n	800657e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006566:	2b00      	cmp	r3, #0
 8006568:	d104      	bne.n	8006574 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800656a:	2100      	movs	r1, #0
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f949 	bl	8006804 <USB_SetDevSpeed>
 8006572:	e008      	b.n	8006586 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006574:	2101      	movs	r1, #1
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f944 	bl	8006804 <USB_SetDevSpeed>
 800657c:	e003      	b.n	8006586 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800657e:	2103      	movs	r1, #3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f93f 	bl	8006804 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006586:	2110      	movs	r1, #16
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f8f3 	bl	8006774 <USB_FlushTxFifo>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f911 	bl	80067c0 <USB_FlushRxFifo>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ae:	461a      	mov	r2, r3
 80065b0:	2300      	movs	r3, #0
 80065b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ba:	461a      	mov	r2, r3
 80065bc:	2300      	movs	r3, #0
 80065be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c6:	461a      	mov	r2, r3
 80065c8:	2300      	movs	r3, #0
 80065ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065cc:	2300      	movs	r3, #0
 80065ce:	613b      	str	r3, [r7, #16]
 80065d0:	e043      	b.n	800665a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065e8:	d118      	bne.n	800661c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10a      	bne.n	8006606 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065fc:	461a      	mov	r2, r3
 80065fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	e013      	b.n	800662e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006612:	461a      	mov	r2, r3
 8006614:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	e008      	b.n	800662e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006628:	461a      	mov	r2, r3
 800662a:	2300      	movs	r3, #0
 800662c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4413      	add	r3, r2
 8006636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663a:	461a      	mov	r2, r3
 800663c:	2300      	movs	r3, #0
 800663e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664c:	461a      	mov	r2, r3
 800664e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006652:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	3301      	adds	r3, #1
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	429a      	cmp	r2, r3
 8006660:	d3b7      	bcc.n	80065d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006662:	2300      	movs	r3, #0
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	e043      	b.n	80066f0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800667a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800667e:	d118      	bne.n	80066b2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10a      	bne.n	800669c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006692:	461a      	mov	r2, r3
 8006694:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	e013      	b.n	80066c4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a8:	461a      	mov	r2, r3
 80066aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	e008      	b.n	80066c4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066be:	461a      	mov	r2, r3
 80066c0:	2300      	movs	r3, #0
 80066c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d0:	461a      	mov	r2, r3
 80066d2:	2300      	movs	r3, #0
 80066d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e2:	461a      	mov	r2, r3
 80066e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	3301      	adds	r3, #1
 80066ee:	613b      	str	r3, [r7, #16]
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d3b7      	bcc.n	8006668 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800670a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006718:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	2b00      	cmp	r3, #0
 800671e:	d105      	bne.n	800672c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	f043 0210 	orr.w	r2, r3, #16
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	699a      	ldr	r2, [r3, #24]
 8006730:	4b0f      	ldr	r3, [pc, #60]	; (8006770 <USB_DevInit+0x2c4>)
 8006732:	4313      	orrs	r3, r2
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800673a:	2b00      	cmp	r3, #0
 800673c:	d005      	beq.n	800674a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f043 0208 	orr.w	r2, r3, #8
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800674a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674c:	2b01      	cmp	r3, #1
 800674e:	d107      	bne.n	8006760 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006758:	f043 0304 	orr.w	r3, r3, #4
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006760:	7dfb      	ldrb	r3, [r7, #23]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800676c:	b004      	add	sp, #16
 800676e:	4770      	bx	lr
 8006770:	803c3800 	.word	0x803c3800

08006774 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800677e:	2300      	movs	r3, #0
 8006780:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	019b      	lsls	r3, r3, #6
 8006786:	f043 0220 	orr.w	r2, r3, #32
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3301      	adds	r3, #1
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4a09      	ldr	r2, [pc, #36]	; (80067bc <USB_FlushTxFifo+0x48>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d901      	bls.n	80067a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e006      	b.n	80067ae <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b20      	cmp	r3, #32
 80067aa:	d0f0      	beq.n	800678e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	00030d40 	.word	0x00030d40

080067c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2210      	movs	r2, #16
 80067d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3301      	adds	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4a09      	ldr	r2, [pc, #36]	; (8006800 <USB_FlushRxFifo+0x40>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d901      	bls.n	80067e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e006      	b.n	80067f2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f003 0310 	and.w	r3, r3, #16
 80067ec:	2b10      	cmp	r3, #16
 80067ee:	d0f0      	beq.n	80067d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	00030d40 	.word	0x00030d40

08006804 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	78fb      	ldrb	r3, [r7, #3]
 800681e:	68f9      	ldr	r1, [r7, #12]
 8006820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006824:	4313      	orrs	r3, r2
 8006826:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006836:	b480      	push	{r7}
 8006838:	b087      	sub	sp, #28
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f003 0306 	and.w	r3, r3, #6
 800684e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d102      	bne.n	800685c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006856:	2300      	movs	r3, #0
 8006858:	75fb      	strb	r3, [r7, #23]
 800685a:	e00a      	b.n	8006872 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b02      	cmp	r3, #2
 8006860:	d002      	beq.n	8006868 <USB_GetDevSpeed+0x32>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b06      	cmp	r3, #6
 8006866:	d102      	bne.n	800686e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006868:	2302      	movs	r3, #2
 800686a:	75fb      	strb	r3, [r7, #23]
 800686c:	e001      	b.n	8006872 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800686e:	230f      	movs	r3, #15
 8006870:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006872:	7dfb      	ldrb	r3, [r7, #23]
}
 8006874:	4618      	mov	r0, r3
 8006876:	371c      	adds	r7, #28
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	785b      	ldrb	r3, [r3, #1]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d13a      	bne.n	8006912 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a2:	69da      	ldr	r2, [r3, #28]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	f003 030f 	and.w	r3, r3, #15
 80068ac:	2101      	movs	r1, #1
 80068ae:	fa01 f303 	lsl.w	r3, r1, r3
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	68f9      	ldr	r1, [r7, #12]
 80068b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ba:	4313      	orrs	r3, r2
 80068bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d155      	bne.n	8006980 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	78db      	ldrb	r3, [r3, #3]
 80068ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	059b      	lsls	r3, r3, #22
 80068f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068f8:	4313      	orrs	r3, r2
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	0151      	lsls	r1, r2, #5
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	440a      	add	r2, r1
 8006902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800690a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	e036      	b.n	8006980 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006918:	69da      	ldr	r2, [r3, #28]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	f003 030f 	and.w	r3, r3, #15
 8006922:	2101      	movs	r1, #1
 8006924:	fa01 f303 	lsl.w	r3, r1, r3
 8006928:	041b      	lsls	r3, r3, #16
 800692a:	68f9      	ldr	r1, [r7, #12]
 800692c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006930:	4313      	orrs	r3, r2
 8006932:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d11a      	bne.n	8006980 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	78db      	ldrb	r3, [r3, #3]
 8006964:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006966:	430b      	orrs	r3, r1
 8006968:	4313      	orrs	r3, r2
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	0151      	lsls	r1, r2, #5
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	440a      	add	r2, r1
 8006972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800697a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800697e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
	...

08006990 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	785b      	ldrb	r3, [r3, #1]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d161      	bne.n	8006a70 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c2:	d11f      	bne.n	8006a04 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	0151      	lsls	r1, r2, #5
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	440a      	add	r2, r1
 80069da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	0151      	lsls	r1, r2, #5
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	440a      	add	r2, r1
 80069fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	f003 030f 	and.w	r3, r3, #15
 8006a14:	2101      	movs	r1, #1
 8006a16:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	43db      	mvns	r3, r3
 8006a1e:	68f9      	ldr	r1, [r7, #12]
 8006a20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a24:	4013      	ands	r3, r2
 8006a26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2e:	69da      	ldr	r2, [r3, #28]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	2101      	movs	r1, #1
 8006a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	43db      	mvns	r3, r3
 8006a42:	68f9      	ldr	r1, [r7, #12]
 8006a44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a48:	4013      	ands	r3, r2
 8006a4a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	0159      	lsls	r1, r3, #5
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	440b      	add	r3, r1
 8006a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a66:	4619      	mov	r1, r3
 8006a68:	4b35      	ldr	r3, [pc, #212]	; (8006b40 <USB_DeactivateEndpoint+0x1b0>)
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	600b      	str	r3, [r1, #0]
 8006a6e:	e060      	b.n	8006b32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a86:	d11f      	bne.n	8006ac8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	0151      	lsls	r1, r2, #5
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	440a      	add	r2, r1
 8006a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006aa6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	0151      	lsls	r1, r2, #5
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	440a      	add	r2, r1
 8006abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ac6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	f003 030f 	and.w	r3, r3, #15
 8006ad8:	2101      	movs	r1, #1
 8006ada:	fa01 f303 	lsl.w	r3, r1, r3
 8006ade:	041b      	lsls	r3, r3, #16
 8006ae0:	43db      	mvns	r3, r3
 8006ae2:	68f9      	ldr	r1, [r7, #12]
 8006ae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ae8:	4013      	ands	r3, r2
 8006aea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af2:	69da      	ldr	r2, [r3, #28]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	f003 030f 	and.w	r3, r3, #15
 8006afc:	2101      	movs	r1, #1
 8006afe:	fa01 f303 	lsl.w	r3, r1, r3
 8006b02:	041b      	lsls	r3, r3, #16
 8006b04:	43db      	mvns	r3, r3
 8006b06:	68f9      	ldr	r1, [r7, #12]
 8006b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	0159      	lsls	r1, r3, #5
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	440b      	add	r3, r1
 8006b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <USB_DeactivateEndpoint+0x1b4>)
 8006b2e:	4013      	ands	r3, r2
 8006b30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	ec337800 	.word	0xec337800
 8006b44:	eff37800 	.word	0xeff37800

08006b48 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08a      	sub	sp, #40	; 0x28
 8006b4c:	af02      	add	r7, sp, #8
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	4613      	mov	r3, r2
 8006b54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	785b      	ldrb	r3, [r3, #1]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	f040 815c 	bne.w	8006e22 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d132      	bne.n	8006bd8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	0151      	lsls	r1, r2, #5
 8006b84:	69fa      	ldr	r2, [r7, #28]
 8006b86:	440a      	add	r2, r1
 8006b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	0151      	lsls	r1, r2, #5
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	440a      	add	r2, r1
 8006bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	0151      	lsls	r1, r2, #5
 8006bc8:	69fa      	ldr	r2, [r7, #28]
 8006bca:	440a      	add	r2, r1
 8006bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd0:	0cdb      	lsrs	r3, r3, #19
 8006bd2:	04db      	lsls	r3, r3, #19
 8006bd4:	6113      	str	r3, [r2, #16]
 8006bd6:	e074      	b.n	8006cc2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	0151      	lsls	r1, r2, #5
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	440a      	add	r2, r1
 8006bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf2:	0cdb      	lsrs	r3, r3, #19
 8006bf4:	04db      	lsls	r3, r3, #19
 8006bf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	0151      	lsls	r1, r2, #5
 8006c0a:	69fa      	ldr	r2, [r7, #28]
 8006c0c:	440a      	add	r2, r1
 8006c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	6959      	ldr	r1, [r3, #20]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	440b      	add	r3, r1
 8006c34:	1e59      	subs	r1, r3, #1
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c3e:	04d9      	lsls	r1, r3, #19
 8006c40:	4b9d      	ldr	r3, [pc, #628]	; (8006eb8 <USB_EPStartXfer+0x370>)
 8006c42:	400b      	ands	r3, r1
 8006c44:	69b9      	ldr	r1, [r7, #24]
 8006c46:	0148      	lsls	r0, r1, #5
 8006c48:	69f9      	ldr	r1, [r7, #28]
 8006c4a:	4401      	add	r1, r0
 8006c4c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c50:	4313      	orrs	r3, r2
 8006c52:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c6a:	69b9      	ldr	r1, [r7, #24]
 8006c6c:	0148      	lsls	r0, r1, #5
 8006c6e:	69f9      	ldr	r1, [r7, #28]
 8006c70:	4401      	add	r1, r0
 8006c72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c76:	4313      	orrs	r3, r2
 8006c78:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	78db      	ldrb	r3, [r3, #3]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d11f      	bne.n	8006cc2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	0151      	lsls	r1, r2, #5
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	440a      	add	r2, r1
 8006c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006ca0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	0151      	lsls	r1, r2, #5
 8006cb4:	69fa      	ldr	r2, [r7, #28]
 8006cb6:	440a      	add	r2, r1
 8006cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cc0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006cc2:	79fb      	ldrb	r3, [r7, #7]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d14b      	bne.n	8006d60 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d009      	beq.n	8006ce4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cdc:	461a      	mov	r2, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	78db      	ldrb	r3, [r3, #3]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d128      	bne.n	8006d3e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d110      	bne.n	8006d1e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	0151      	lsls	r1, r2, #5
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	440a      	add	r2, r1
 8006d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	e00f      	b.n	8006d3e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	0151      	lsls	r1, r2, #5
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	440a      	add	r2, r1
 8006d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d3c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	0151      	lsls	r1, r2, #5
 8006d50:	69fa      	ldr	r2, [r7, #28]
 8006d52:	440a      	add	r2, r1
 8006d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	e12f      	b.n	8006fc0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	0151      	lsls	r1, r2, #5
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	440a      	add	r2, r1
 8006d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d7e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	78db      	ldrb	r3, [r3, #3]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d015      	beq.n	8006db4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 8117 	beq.w	8006fc0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	2101      	movs	r1, #1
 8006da4:	fa01 f303 	lsl.w	r3, r1, r3
 8006da8:	69f9      	ldr	r1, [r7, #28]
 8006daa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dae:	4313      	orrs	r3, r2
 8006db0:	634b      	str	r3, [r1, #52]	; 0x34
 8006db2:	e105      	b.n	8006fc0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d110      	bne.n	8006de6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	69fa      	ldr	r2, [r7, #28]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	e00f      	b.n	8006e06 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	69ba      	ldr	r2, [r7, #24]
 8006df6:	0151      	lsls	r1, r2, #5
 8006df8:	69fa      	ldr	r2, [r7, #28]
 8006dfa:	440a      	add	r2, r1
 8006dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e04:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	68d9      	ldr	r1, [r3, #12]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	781a      	ldrb	r2, [r3, #0]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	b298      	uxth	r0, r3
 8006e14:	79fb      	ldrb	r3, [r7, #7]
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	4603      	mov	r3, r0
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f000 fa2b 	bl	8007276 <USB_WritePacket>
 8006e20:	e0ce      	b.n	8006fc0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	0151      	lsls	r1, r2, #5
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	440a      	add	r2, r1
 8006e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e3c:	0cdb      	lsrs	r3, r3, #19
 8006e3e:	04db      	lsls	r3, r3, #19
 8006e40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	0151      	lsls	r1, r2, #5
 8006e54:	69fa      	ldr	r2, [r7, #28]
 8006e56:	440a      	add	r2, r1
 8006e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e64:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d126      	bne.n	8006ebc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7a:	691a      	ldr	r2, [r3, #16]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e84:	69b9      	ldr	r1, [r7, #24]
 8006e86:	0148      	lsls	r0, r1, #5
 8006e88:	69f9      	ldr	r1, [r7, #28]
 8006e8a:	4401      	add	r1, r0
 8006e8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e90:	4313      	orrs	r3, r2
 8006e92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	0151      	lsls	r1, r2, #5
 8006ea6:	69fa      	ldr	r2, [r7, #28]
 8006ea8:	440a      	add	r2, r1
 8006eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006eb2:	6113      	str	r3, [r2, #16]
 8006eb4:	e036      	b.n	8006f24 <USB_EPStartXfer+0x3dc>
 8006eb6:	bf00      	nop
 8006eb8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	695a      	ldr	r2, [r3, #20]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	1e5a      	subs	r2, r3, #1
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	8afb      	ldrh	r3, [r7, #22]
 8006ee2:	04d9      	lsls	r1, r3, #19
 8006ee4:	4b39      	ldr	r3, [pc, #228]	; (8006fcc <USB_EPStartXfer+0x484>)
 8006ee6:	400b      	ands	r3, r1
 8006ee8:	69b9      	ldr	r1, [r7, #24]
 8006eea:	0148      	lsls	r0, r1, #5
 8006eec:	69f9      	ldr	r1, [r7, #28]
 8006eee:	4401      	add	r1, r0
 8006ef0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f04:	691a      	ldr	r2, [r3, #16]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	8af9      	ldrh	r1, [r7, #22]
 8006f0c:	fb01 f303 	mul.w	r3, r1, r3
 8006f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f14:	69b9      	ldr	r1, [r7, #24]
 8006f16:	0148      	lsls	r0, r1, #5
 8006f18:	69f9      	ldr	r1, [r7, #28]
 8006f1a:	4401      	add	r1, r0
 8006f1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f20:	4313      	orrs	r3, r2
 8006f22:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f24:	79fb      	ldrb	r3, [r7, #7]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d10d      	bne.n	8006f46 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d009      	beq.n	8006f46 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	68d9      	ldr	r1, [r3, #12]
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f42:	460a      	mov	r2, r1
 8006f44:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	78db      	ldrb	r3, [r3, #3]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d128      	bne.n	8006fa0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d110      	bne.n	8006f80 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	0151      	lsls	r1, r2, #5
 8006f70:	69fa      	ldr	r2, [r7, #28]
 8006f72:	440a      	add	r2, r1
 8006f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	e00f      	b.n	8006fa0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	0151      	lsls	r1, r2, #5
 8006f92:	69fa      	ldr	r2, [r7, #28]
 8006f94:	440a      	add	r2, r1
 8006f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f9e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3720      	adds	r7, #32
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	1ff80000 	.word	0x1ff80000

08006fd0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	785b      	ldrb	r3, [r3, #1]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	f040 80cd 	bne.w	800718c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d132      	bne.n	8007060 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	0151      	lsls	r1, r2, #5
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	440a      	add	r2, r1
 8007010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007014:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007018:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800701c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	0151      	lsls	r1, r2, #5
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	440a      	add	r2, r1
 8007034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007038:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800703c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	4413      	add	r3, r2
 8007046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	0151      	lsls	r1, r2, #5
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	440a      	add	r2, r1
 8007054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007058:	0cdb      	lsrs	r3, r3, #19
 800705a:	04db      	lsls	r3, r3, #19
 800705c:	6113      	str	r3, [r2, #16]
 800705e:	e04e      	b.n	80070fe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	0151      	lsls	r1, r2, #5
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	440a      	add	r2, r1
 8007076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800707a:	0cdb      	lsrs	r3, r3, #19
 800707c:	04db      	lsls	r3, r3, #19
 800707e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	440a      	add	r2, r1
 8007096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800709a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800709e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070a2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	695a      	ldr	r2, [r3, #20]
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d903      	bls.n	80070b8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	0151      	lsls	r1, r2, #5
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	440a      	add	r2, r1
 80070ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e4:	691a      	ldr	r2, [r3, #16]
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070ee:	6939      	ldr	r1, [r7, #16]
 80070f0:	0148      	lsls	r0, r1, #5
 80070f2:	6979      	ldr	r1, [r7, #20]
 80070f4:	4401      	add	r1, r0
 80070f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070fa:	4313      	orrs	r3, r2
 80070fc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d11e      	bne.n	8007142 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d009      	beq.n	8007120 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	4413      	add	r3, r2
 8007114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007118:	461a      	mov	r2, r3
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	0151      	lsls	r1, r2, #5
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	440a      	add	r2, r1
 8007136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800713a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	e092      	b.n	8007268 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	0151      	lsls	r1, r2, #5
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	440a      	add	r2, r1
 8007158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800715c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007160:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d07e      	beq.n	8007268 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	f003 030f 	and.w	r3, r3, #15
 800717a:	2101      	movs	r1, #1
 800717c:	fa01 f303 	lsl.w	r3, r1, r3
 8007180:	6979      	ldr	r1, [r7, #20]
 8007182:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007186:	4313      	orrs	r3, r2
 8007188:	634b      	str	r3, [r1, #52]	; 0x34
 800718a:	e06d      	b.n	8007268 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	0151      	lsls	r1, r2, #5
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	440a      	add	r2, r1
 80071a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071a6:	0cdb      	lsrs	r3, r3, #19
 80071a8:	04db      	lsls	r3, r3, #19
 80071aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	0151      	lsls	r1, r2, #5
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	440a      	add	r2, r1
 80071c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071ce:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	0151      	lsls	r1, r2, #5
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	440a      	add	r2, r1
 80071f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800720c:	691a      	ldr	r2, [r3, #16]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007216:	6939      	ldr	r1, [r7, #16]
 8007218:	0148      	lsls	r0, r1, #5
 800721a:	6979      	ldr	r1, [r7, #20]
 800721c:	4401      	add	r1, r0
 800721e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007222:	4313      	orrs	r3, r2
 8007224:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007226:	79fb      	ldrb	r3, [r7, #7]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d10d      	bne.n	8007248 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d009      	beq.n	8007248 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	68d9      	ldr	r1, [r3, #12]
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007244:	460a      	mov	r2, r1
 8007246:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	0151      	lsls	r1, r2, #5
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	440a      	add	r2, r1
 800725e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007262:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007266:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	371c      	adds	r7, #28
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007276:	b480      	push	{r7}
 8007278:	b089      	sub	sp, #36	; 0x24
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	4611      	mov	r1, r2
 8007282:	461a      	mov	r2, r3
 8007284:	460b      	mov	r3, r1
 8007286:	71fb      	strb	r3, [r7, #7]
 8007288:	4613      	mov	r3, r2
 800728a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007294:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007298:	2b00      	cmp	r3, #0
 800729a:	d11a      	bne.n	80072d2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800729c:	88bb      	ldrh	r3, [r7, #4]
 800729e:	3303      	adds	r3, #3
 80072a0:	089b      	lsrs	r3, r3, #2
 80072a2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80072a4:	2300      	movs	r3, #0
 80072a6:	61bb      	str	r3, [r7, #24]
 80072a8:	e00f      	b.n	80072ca <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80072aa:	79fb      	ldrb	r3, [r7, #7]
 80072ac:	031a      	lsls	r2, r3, #12
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b6:	461a      	mov	r2, r3
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	3304      	adds	r3, #4
 80072c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	3301      	adds	r3, #1
 80072c8:	61bb      	str	r3, [r7, #24]
 80072ca:	69ba      	ldr	r2, [r7, #24]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d3eb      	bcc.n	80072aa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3724      	adds	r7, #36	; 0x24
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b089      	sub	sp, #36	; 0x24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	4613      	mov	r3, r2
 80072ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80072f6:	88fb      	ldrh	r3, [r7, #6]
 80072f8:	3303      	adds	r3, #3
 80072fa:	089b      	lsrs	r3, r3, #2
 80072fc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80072fe:	2300      	movs	r3, #0
 8007300:	61bb      	str	r3, [r7, #24]
 8007302:	e00b      	b.n	800731c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	3304      	adds	r3, #4
 8007314:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	3301      	adds	r3, #1
 800731a:	61bb      	str	r3, [r7, #24]
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	429a      	cmp	r2, r3
 8007322:	d3ef      	bcc.n	8007304 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007324:	69fb      	ldr	r3, [r7, #28]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3724      	adds	r7, #36	; 0x24
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007332:	b480      	push	{r7}
 8007334:	b085      	sub	sp, #20
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d12c      	bne.n	80073a8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	db12      	blt.n	8007386 <USB_EPSetStall+0x54>
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00f      	beq.n	8007386 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	4413      	add	r3, r2
 800736e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	0151      	lsls	r1, r2, #5
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	440a      	add	r2, r1
 800737c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007380:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007384:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4413      	add	r3, r2
 800738e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	0151      	lsls	r1, r2, #5
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	440a      	add	r2, r1
 800739c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073a4:	6013      	str	r3, [r2, #0]
 80073a6:	e02b      	b.n	8007400 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	db12      	blt.n	80073e0 <USB_EPSetStall+0xae>
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00f      	beq.n	80073e0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	0151      	lsls	r1, r2, #5
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	440a      	add	r2, r1
 80073d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073de:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800740e:	b480      	push	{r7}
 8007410:	b085      	sub	sp, #20
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	785b      	ldrb	r3, [r3, #1]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d128      	bne.n	800747c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	0151      	lsls	r1, r2, #5
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	440a      	add	r2, r1
 8007440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007444:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007448:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	78db      	ldrb	r3, [r3, #3]
 800744e:	2b03      	cmp	r3, #3
 8007450:	d003      	beq.n	800745a <USB_EPClearStall+0x4c>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	78db      	ldrb	r3, [r3, #3]
 8007456:	2b02      	cmp	r3, #2
 8007458:	d138      	bne.n	80074cc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4413      	add	r3, r2
 8007462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	0151      	lsls	r1, r2, #5
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	440a      	add	r2, r1
 8007470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	e027      	b.n	80074cc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	0151      	lsls	r1, r2, #5
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	440a      	add	r2, r1
 8007492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007496:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800749a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	78db      	ldrb	r3, [r3, #3]
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d003      	beq.n	80074ac <USB_EPClearStall+0x9e>
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	78db      	ldrb	r3, [r3, #3]
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d10f      	bne.n	80074cc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	0151      	lsls	r1, r2, #5
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	440a      	add	r2, r1
 80074c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074ca:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80074da:	b480      	push	{r7}
 80074dc:	b085      	sub	sp, #20
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	460b      	mov	r3, r1
 80074e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074f8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80074fc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	78fb      	ldrb	r3, [r7, #3]
 8007508:	011b      	lsls	r3, r3, #4
 800750a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800750e:	68f9      	ldr	r1, [r7, #12]
 8007510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007514:	4313      	orrs	r3, r2
 8007516:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3714      	adds	r7, #20
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007526:	b480      	push	{r7}
 8007528:	b085      	sub	sp, #20
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007540:	f023 0303 	bic.w	r3, r3, #3
 8007544:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007554:	f023 0302 	bic.w	r3, r3, #2
 8007558:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007582:	f023 0303 	bic.w	r3, r3, #3
 8007586:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007596:	f043 0302 	orr.w	r3, r3, #2
 800759a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b085      	sub	sp, #20
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4013      	ands	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80075c2:	68fb      	ldr	r3, [r7, #12]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	4013      	ands	r3, r2
 80075f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	0c1b      	lsrs	r3, r3, #16
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	4013      	ands	r3, r2
 8007626:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	b29b      	uxth	r3, r3
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007648:	78fb      	ldrb	r3, [r7, #3]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	4413      	add	r3, r2
 8007650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	4013      	ands	r3, r2
 8007664:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007666:	68bb      	ldr	r3, [r7, #8]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007674:	b480      	push	{r7}
 8007676:	b087      	sub	sp, #28
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007696:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007698:	78fb      	ldrb	r3, [r7, #3]
 800769a:	f003 030f 	and.w	r3, r3, #15
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	fa22 f303 	lsr.w	r3, r2, r3
 80076a4:	01db      	lsls	r3, r3, #7
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	4013      	ands	r3, r2
 80076c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076c2:	68bb      	ldr	r3, [r7, #8]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	371c      	adds	r7, #28
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	695b      	ldr	r3, [r3, #20]
 80076dc:	f003 0301 	and.w	r3, r3, #1
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007706:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800770a:	f023 0307 	bic.w	r3, r3, #7
 800770e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800771e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007722:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
	...

08007734 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	460b      	mov	r3, r1
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	333c      	adds	r3, #60	; 0x3c
 800774a:	3304      	adds	r3, #4
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	4a26      	ldr	r2, [pc, #152]	; (80077ec <USB_EP0_OutStart+0xb8>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d90a      	bls.n	800776e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007768:	d101      	bne.n	800776e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	e037      	b.n	80077de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007774:	461a      	mov	r2, r3
 8007776:	2300      	movs	r3, #0
 8007778:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800778c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800779c:	f043 0318 	orr.w	r3, r3, #24
 80077a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80077b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80077b6:	7afb      	ldrb	r3, [r7, #11]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d10f      	bne.n	80077dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c2:	461a      	mov	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80077da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	371c      	adds	r7, #28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	4f54300a 	.word	0x4f54300a

080077f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80077f8:	2300      	movs	r3, #0
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	3301      	adds	r3, #1
 8007800:	60fb      	str	r3, [r7, #12]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	4a13      	ldr	r2, [pc, #76]	; (8007854 <USB_CoreReset+0x64>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d901      	bls.n	800780e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e01b      	b.n	8007846 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	daf2      	bge.n	80077fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f043 0201 	orr.w	r2, r3, #1
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3301      	adds	r3, #1
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4a09      	ldr	r2, [pc, #36]	; (8007854 <USB_CoreReset+0x64>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d901      	bls.n	8007838 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e006      	b.n	8007846 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b01      	cmp	r3, #1
 8007842:	d0f0      	beq.n	8007826 <USB_CoreReset+0x36>

  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	00030d40 	.word	0x00030d40

08007858 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007864:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007868:	f002 f928 	bl	8009abc <malloc>
 800786c:	4603      	mov	r3, r0
 800786e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d105      	bne.n	8007882 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800787e:	2302      	movs	r3, #2
 8007880:	e066      	b.n	8007950 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	7c1b      	ldrb	r3, [r3, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d119      	bne.n	80078c6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007896:	2202      	movs	r2, #2
 8007898:	2181      	movs	r1, #129	; 0x81
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f001 ff95 	bl	80097ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078aa:	2202      	movs	r2, #2
 80078ac:	2101      	movs	r1, #1
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f001 ff8b 	bl	80097ca <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2210      	movs	r2, #16
 80078c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80078c4:	e016      	b.n	80078f4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078c6:	2340      	movs	r3, #64	; 0x40
 80078c8:	2202      	movs	r2, #2
 80078ca:	2181      	movs	r1, #129	; 0x81
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f001 ff7c 	bl	80097ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078d8:	2340      	movs	r3, #64	; 0x40
 80078da:	2202      	movs	r2, #2
 80078dc:	2101      	movs	r1, #1
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 ff73 	bl	80097ca <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2210      	movs	r2, #16
 80078f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80078f4:	2308      	movs	r3, #8
 80078f6:	2203      	movs	r2, #3
 80078f8:	2182      	movs	r1, #130	; 0x82
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f001 ff65 	bl	80097ca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	7c1b      	ldrb	r3, [r3, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007934:	2101      	movs	r1, #1
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f002 f836 	bl	80099a8 <USBD_LL_PrepareReceive>
 800793c:	e007      	b.n	800794e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007944:	2340      	movs	r3, #64	; 0x40
 8007946:	2101      	movs	r1, #1
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f002 f82d 	bl	80099a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007968:	2181      	movs	r1, #129	; 0x81
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 ff53 	bl	8009816 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007976:	2101      	movs	r1, #1
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f001 ff4c 	bl	8009816 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007986:	2182      	movs	r1, #130	; 0x82
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f001 ff44 	bl	8009816 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00e      	beq.n	80079c6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079b8:	4618      	mov	r0, r3
 80079ba:	f002 f887 	bl	8009acc <free>
    pdev->pClassData = NULL;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80079c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079e0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80079e6:	2300      	movs	r3, #0
 80079e8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d03a      	beq.n	8007a70 <USBD_CDC_Setup+0xa0>
 80079fa:	2b20      	cmp	r3, #32
 80079fc:	f040 8097 	bne.w	8007b2e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	88db      	ldrh	r3, [r3, #6]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d029      	beq.n	8007a5c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	b25b      	sxtb	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	da11      	bge.n	8007a36 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007a1e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	88d2      	ldrh	r2, [r2, #6]
 8007a24:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a26:	6939      	ldr	r1, [r7, #16]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	88db      	ldrh	r3, [r3, #6]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 fa9d 	bl	8008f6e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007a34:	e082      	b.n	8007b3c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	785a      	ldrb	r2, [r3, #1]
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	88db      	ldrh	r3, [r3, #6]
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a4c:	6939      	ldr	r1, [r7, #16]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	88db      	ldrh	r3, [r3, #6]
 8007a52:	461a      	mov	r2, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 fab6 	bl	8008fc6 <USBD_CtlPrepareRx>
    break;
 8007a5a:	e06f      	b.n	8007b3c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	7850      	ldrb	r0, [r2, #1]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	4798      	blx	r3
    break;
 8007a6e:	e065      	b.n	8007b3c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	785b      	ldrb	r3, [r3, #1]
 8007a74:	2b0b      	cmp	r3, #11
 8007a76:	d84f      	bhi.n	8007b18 <USBD_CDC_Setup+0x148>
 8007a78:	a201      	add	r2, pc, #4	; (adr r2, 8007a80 <USBD_CDC_Setup+0xb0>)
 8007a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7e:	bf00      	nop
 8007a80:	08007ab1 	.word	0x08007ab1
 8007a84:	08007b27 	.word	0x08007b27
 8007a88:	08007b19 	.word	0x08007b19
 8007a8c:	08007b19 	.word	0x08007b19
 8007a90:	08007b19 	.word	0x08007b19
 8007a94:	08007b19 	.word	0x08007b19
 8007a98:	08007b19 	.word	0x08007b19
 8007a9c:	08007b19 	.word	0x08007b19
 8007aa0:	08007b19 	.word	0x08007b19
 8007aa4:	08007b19 	.word	0x08007b19
 8007aa8:	08007ad9 	.word	0x08007ad9
 8007aac:	08007b01 	.word	0x08007b01
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d107      	bne.n	8007aca <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007aba:	f107 030c 	add.w	r3, r7, #12
 8007abe:	2202      	movs	r2, #2
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 fa53 	bl	8008f6e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007ac8:	e030      	b.n	8007b2c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 f9dd 	bl	8008e8c <USBD_CtlError>
        ret = USBD_FAIL;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ad6:	e029      	b.n	8007b2c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d107      	bne.n	8007af2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007ae2:	f107 030f 	add.w	r3, r7, #15
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 fa3f 	bl	8008f6e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007af0:	e01c      	b.n	8007b2c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f001 f9c9 	bl	8008e8c <USBD_CtlError>
        ret = USBD_FAIL;
 8007afa:	2303      	movs	r3, #3
 8007afc:	75fb      	strb	r3, [r7, #23]
      break;
 8007afe:	e015      	b.n	8007b2c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d00f      	beq.n	8007b2a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 f9bd 	bl	8008e8c <USBD_CtlError>
        ret = USBD_FAIL;
 8007b12:	2303      	movs	r3, #3
 8007b14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007b16:	e008      	b.n	8007b2a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 f9b6 	bl	8008e8c <USBD_CtlError>
      ret = USBD_FAIL;
 8007b20:	2303      	movs	r3, #3
 8007b22:	75fb      	strb	r3, [r7, #23]
      break;
 8007b24:	e002      	b.n	8007b2c <USBD_CDC_Setup+0x15c>
      break;
 8007b26:	bf00      	nop
 8007b28:	e008      	b.n	8007b3c <USBD_CDC_Setup+0x16c>
      break;
 8007b2a:	bf00      	nop
    }
    break;
 8007b2c:	e006      	b.n	8007b3c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f001 f9ab 	bl	8008e8c <USBD_CtlError>
    ret = USBD_FAIL;
 8007b36:	2303      	movs	r3, #3
 8007b38:	75fb      	strb	r3, [r7, #23]
    break;
 8007b3a:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop

08007b48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e049      	b.n	8007bfe <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b72:	78fa      	ldrb	r2, [r7, #3]
 8007b74:	6879      	ldr	r1, [r7, #4]
 8007b76:	4613      	mov	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	440b      	add	r3, r1
 8007b80:	3318      	adds	r3, #24
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d029      	beq.n	8007bdc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b88:	78fa      	ldrb	r2, [r7, #3]
 8007b8a:	6879      	ldr	r1, [r7, #4]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	440b      	add	r3, r1
 8007b96:	3318      	adds	r3, #24
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	78f9      	ldrb	r1, [r7, #3]
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	00db      	lsls	r3, r3, #3
 8007ba2:	1a5b      	subs	r3, r3, r1
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4403      	add	r3, r0
 8007ba8:	3344      	adds	r3, #68	; 0x44
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	fbb2 f1f3 	udiv	r1, r2, r3
 8007bb0:	fb03 f301 	mul.w	r3, r3, r1
 8007bb4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d110      	bne.n	8007bdc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007bba:	78fa      	ldrb	r2, [r7, #3]
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	440b      	add	r3, r1
 8007bc8:	3318      	adds	r3, #24
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007bce:	78f9      	ldrb	r1, [r7, #3]
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 fec6 	bl	8009966 <USBD_LL_Transmit>
 8007bda:	e00f      	b.n	8007bfc <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007bf8:	78fa      	ldrb	r2, [r7, #3]
 8007bfa:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e015      	b.n	8007c54 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c28:	78fb      	ldrb	r3, [r7, #3]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f001 fedc 	bl	80099ea <USBD_LL_GetRxDataSize>
 8007c32:	4602      	mov	r2, r0
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c4e:	4611      	mov	r1, r2
 8007c50:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c6a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d015      	beq.n	8007ca2 <USBD_CDC_EP0_RxReady+0x46>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c7c:	2bff      	cmp	r3, #255	; 0xff
 8007c7e:	d010      	beq.n	8007ca2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007c8e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c96:	b292      	uxth	r2, r2
 8007c98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	22ff      	movs	r2, #255	; 0xff
 8007c9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2243      	movs	r2, #67	; 0x43
 8007cb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007cba:	4b03      	ldr	r3, [pc, #12]	; (8007cc8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	20000094 	.word	0x20000094

08007ccc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2243      	movs	r2, #67	; 0x43
 8007cd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007cda:	4b03      	ldr	r3, [pc, #12]	; (8007ce8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	20000050 	.word	0x20000050

08007cec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2243      	movs	r2, #67	; 0x43
 8007cf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007cfa:	4b03      	ldr	r3, [pc, #12]	; (8007d08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	200000d8 	.word	0x200000d8

08007d0c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	220a      	movs	r2, #10
 8007d18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d1a:	4b03      	ldr	r3, [pc, #12]	; (8007d28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	2000000c 	.word	0x2000000c

08007d2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e004      	b.n	8007d4a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b087      	sub	sp, #28
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d68:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	371c      	adds	r7, #28
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d98:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dbe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d101      	bne.n	8007dd2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e01a      	b.n	8007e08 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d114      	bne.n	8007e06 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007dfa:	2181      	movs	r1, #129	; 0x81
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f001 fdb2 	bl	8009966 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e016      	b.n	8007e5c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	7c1b      	ldrb	r3, [r3, #16]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d109      	bne.n	8007e4a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e40:	2101      	movs	r1, #1
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f001 fdb0 	bl	80099a8 <USBD_LL_PrepareReceive>
 8007e48:	e007      	b.n	8007e5a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e50:	2340      	movs	r3, #64	; 0x40
 8007e52:	2101      	movs	r1, #1
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f001 fda7 	bl	80099a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e025      	b.n	8007ec8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d003      	beq.n	8007ea0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	79fa      	ldrb	r2, [r7, #7]
 8007eba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f001 fc1d 	bl	80096fc <USBD_LL_Init>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e010      	b.n	8007f0a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef8:	f107 020e 	add.w	r2, r7, #14
 8007efc:	4610      	mov	r0, r2
 8007efe:	4798      	blx	r3
 8007f00:	4602      	mov	r2, r0
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b082      	sub	sp, #8
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 fc3a 	bl	8009794 <USBD_LL_Start>
 8007f20:	4603      	mov	r3, r0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d009      	beq.n	8007f6e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	78fa      	ldrb	r2, [r7, #3]
 8007f64:	4611      	mov	r1, r2
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	4798      	blx	r3
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d007      	beq.n	8007f9e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	78fa      	ldrb	r2, [r7, #3]
 8007f98:	4611      	mov	r1, r2
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	4798      	blx	r3
  }

  return USBD_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 ff2c 	bl	8008e18 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007fce:	461a      	mov	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fdc:	f003 031f 	and.w	r3, r3, #31
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d00e      	beq.n	8008002 <USBD_LL_SetupStage+0x5a>
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d302      	bcc.n	8007fee <USBD_LL_SetupStage+0x46>
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d014      	beq.n	8008016 <USBD_LL_SetupStage+0x6e>
 8007fec:	e01d      	b.n	800802a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fa18 	bl	800842c <USBD_StdDevReq>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8008000:	e020      	b.n	8008044 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fa7c 	bl	8008508 <USBD_StdItfReq>
 8008010:	4603      	mov	r3, r0
 8008012:	73fb      	strb	r3, [r7, #15]
      break;
 8008014:	e016      	b.n	8008044 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fab8 	bl	8008594 <USBD_StdEPReq>
 8008024:	4603      	mov	r3, r0
 8008026:	73fb      	strb	r3, [r7, #15]
      break;
 8008028:	e00c      	b.n	8008044 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008030:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008034:	b2db      	uxtb	r3, r3
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 fc0b 	bl	8009854 <USBD_LL_StallEP>
 800803e:	4603      	mov	r3, r0
 8008040:	73fb      	strb	r3, [r7, #15]
      break;
 8008042:	bf00      	nop
  }

  return ret;
 8008044:	7bfb      	ldrb	r3, [r7, #15]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b086      	sub	sp, #24
 8008052:	af00      	add	r7, sp, #0
 8008054:	60f8      	str	r0, [r7, #12]
 8008056:	460b      	mov	r3, r1
 8008058:	607a      	str	r2, [r7, #4]
 800805a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800805c:	7afb      	ldrb	r3, [r7, #11]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d137      	bne.n	80080d2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008068:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008070:	2b03      	cmp	r3, #3
 8008072:	d14a      	bne.n	800810a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	689a      	ldr	r2, [r3, #8]
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	429a      	cmp	r2, r3
 800807e:	d913      	bls.n	80080a8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	689a      	ldr	r2, [r3, #8]
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	1ad2      	subs	r2, r2, r3
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	4293      	cmp	r3, r2
 8008098:	bf28      	it	cs
 800809a:	4613      	movcs	r3, r2
 800809c:	461a      	mov	r2, r3
 800809e:	6879      	ldr	r1, [r7, #4]
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 ffad 	bl	8009000 <USBD_CtlContinueRx>
 80080a6:	e030      	b.n	800810a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00a      	beq.n	80080ca <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d105      	bne.n	80080ca <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 ffa9 	bl	8009022 <USBD_CtlSendStatus>
 80080d0:	e01b      	b.n	800810a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d013      	beq.n	8008106 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80080e4:	2b03      	cmp	r3, #3
 80080e6:	d10e      	bne.n	8008106 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	7afa      	ldrb	r2, [r7, #11]
 80080f2:	4611      	mov	r1, r2
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	4798      	blx	r3
 80080f8:	4603      	mov	r3, r0
 80080fa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80080fc:	7dfb      	ldrb	r3, [r7, #23]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	e002      	b.n	800810c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008106:	2303      	movs	r3, #3
 8008108:	e000      	b.n	800810c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3718      	adds	r7, #24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	460b      	mov	r3, r1
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008122:	7afb      	ldrb	r3, [r7, #11]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d16a      	bne.n	80081fe <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	3314      	adds	r3, #20
 800812c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008134:	2b02      	cmp	r3, #2
 8008136:	d155      	bne.n	80081e4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	689a      	ldr	r2, [r3, #8]
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	429a      	cmp	r2, r3
 8008142:	d914      	bls.n	800816e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	689a      	ldr	r2, [r3, #8]
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	1ad2      	subs	r2, r2, r3
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	461a      	mov	r2, r3
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 ff22 	bl	8008fa4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008160:	2300      	movs	r3, #0
 8008162:	2200      	movs	r2, #0
 8008164:	2100      	movs	r1, #0
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f001 fc1e 	bl	80099a8 <USBD_LL_PrepareReceive>
 800816c:	e03a      	b.n	80081e4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	429a      	cmp	r2, r3
 8008178:	d11c      	bne.n	80081b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008182:	429a      	cmp	r2, r3
 8008184:	d316      	bcc.n	80081b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008190:	429a      	cmp	r2, r3
 8008192:	d20f      	bcs.n	80081b4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008194:	2200      	movs	r2, #0
 8008196:	2100      	movs	r1, #0
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 ff03 	bl	8008fa4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081a6:	2300      	movs	r3, #0
 80081a8:	2200      	movs	r2, #0
 80081aa:	2100      	movs	r1, #0
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f001 fbfb 	bl	80099a8 <USBD_LL_PrepareReceive>
 80081b2:	e017      	b.n	80081e4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00a      	beq.n	80081d6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d105      	bne.n	80081d6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80081d6:	2180      	movs	r1, #128	; 0x80
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f001 fb3b 	bl	8009854 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 ff32 	bl	8009048 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d123      	bne.n	8008236 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f7ff fe9b 	bl	8007f2a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80081fc:	e01b      	b.n	8008236 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d013      	beq.n	8008232 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008210:	2b03      	cmp	r3, #3
 8008212:	d10e      	bne.n	8008232 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	7afa      	ldrb	r2, [r7, #11]
 800821e:	4611      	mov	r1, r2
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	4798      	blx	r3
 8008224:	4603      	mov	r3, r0
 8008226:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008228:	7dfb      	ldrb	r3, [r7, #23]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800822e:	7dfb      	ldrb	r3, [r7, #23]
 8008230:	e002      	b.n	8008238 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008232:	2303      	movs	r3, #3
 8008234:	e000      	b.n	8008238 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800826c:	2b00      	cmp	r3, #0
 800826e:	d009      	beq.n	8008284 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6852      	ldr	r2, [r2, #4]
 800827c:	b2d2      	uxtb	r2, r2
 800827e:	4611      	mov	r1, r2
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008284:	2340      	movs	r3, #64	; 0x40
 8008286:	2200      	movs	r2, #0
 8008288:	2100      	movs	r1, #0
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f001 fa9d 	bl	80097ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2240      	movs	r2, #64	; 0x40
 800829c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082a0:	2340      	movs	r3, #64	; 0x40
 80082a2:	2200      	movs	r2, #0
 80082a4:	2180      	movs	r1, #128	; 0x80
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f001 fa8f 	bl	80097ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2240      	movs	r2, #64	; 0x40
 80082b6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b083      	sub	sp, #12
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	460b      	mov	r3, r1
 80082cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	78fa      	ldrb	r2, [r7, #3]
 80082d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2204      	movs	r2, #4
 80082fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800831a:	2b04      	cmp	r3, #4
 800831c:	d105      	bne.n	800832a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008346:	2b03      	cmp	r3, #3
 8008348:	d10b      	bne.n	8008362 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d005      	beq.n	8008362 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	460b      	mov	r3, r1
 8008390:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b082      	sub	sp, #8
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d009      	beq.n	80083e4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	6852      	ldr	r2, [r2, #4]
 80083dc:	b2d2      	uxtb	r2, r2
 80083de:	4611      	mov	r1, r2
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	4798      	blx	r3
  }

  return USBD_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b087      	sub	sp, #28
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	3301      	adds	r3, #1
 8008404:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800840c:	8a3b      	ldrh	r3, [r7, #16]
 800840e:	021b      	lsls	r3, r3, #8
 8008410:	b21a      	sxth	r2, r3
 8008412:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008416:	4313      	orrs	r3, r2
 8008418:	b21b      	sxth	r3, r3
 800841a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800841c:	89fb      	ldrh	r3, [r7, #14]
}
 800841e:	4618      	mov	r0, r3
 8008420:	371c      	adds	r7, #28
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
	...

0800842c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008442:	2b20      	cmp	r3, #32
 8008444:	d004      	beq.n	8008450 <USBD_StdDevReq+0x24>
 8008446:	2b40      	cmp	r3, #64	; 0x40
 8008448:	d002      	beq.n	8008450 <USBD_StdDevReq+0x24>
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <USBD_StdDevReq+0x38>
 800844e:	e050      	b.n	80084f2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	4798      	blx	r3
 800845e:	4603      	mov	r3, r0
 8008460:	73fb      	strb	r3, [r7, #15]
    break;
 8008462:	e04b      	b.n	80084fc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	785b      	ldrb	r3, [r3, #1]
 8008468:	2b09      	cmp	r3, #9
 800846a:	d83c      	bhi.n	80084e6 <USBD_StdDevReq+0xba>
 800846c:	a201      	add	r2, pc, #4	; (adr r2, 8008474 <USBD_StdDevReq+0x48>)
 800846e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008472:	bf00      	nop
 8008474:	080084c9 	.word	0x080084c9
 8008478:	080084dd 	.word	0x080084dd
 800847c:	080084e7 	.word	0x080084e7
 8008480:	080084d3 	.word	0x080084d3
 8008484:	080084e7 	.word	0x080084e7
 8008488:	080084a7 	.word	0x080084a7
 800848c:	0800849d 	.word	0x0800849d
 8008490:	080084e7 	.word	0x080084e7
 8008494:	080084bf 	.word	0x080084bf
 8008498:	080084b1 	.word	0x080084b1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f9ce 	bl	8008840 <USBD_GetDescriptor>
      break;
 80084a4:	e024      	b.n	80084f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fb33 	bl	8008b14 <USBD_SetAddress>
      break;
 80084ae:	e01f      	b.n	80084f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fb70 	bl	8008b98 <USBD_SetConfig>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73fb      	strb	r3, [r7, #15]
      break;
 80084bc:	e018      	b.n	80084f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fc0d 	bl	8008ce0 <USBD_GetConfig>
      break;
 80084c6:	e013      	b.n	80084f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fc3c 	bl	8008d48 <USBD_GetStatus>
      break;
 80084d0:	e00e      	b.n	80084f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fc6a 	bl	8008dae <USBD_SetFeature>
      break;
 80084da:	e009      	b.n	80084f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fc79 	bl	8008dd6 <USBD_ClrFeature>
      break;
 80084e4:	e004      	b.n	80084f0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fccf 	bl	8008e8c <USBD_CtlError>
      break;
 80084ee:	bf00      	nop
    }
    break;
 80084f0:	e004      	b.n	80084fc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fcc9 	bl	8008e8c <USBD_CtlError>
    break;
 80084fa:	bf00      	nop
  }

  return ret;
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop

08008508 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800851e:	2b20      	cmp	r3, #32
 8008520:	d003      	beq.n	800852a <USBD_StdItfReq+0x22>
 8008522:	2b40      	cmp	r3, #64	; 0x40
 8008524:	d001      	beq.n	800852a <USBD_StdItfReq+0x22>
 8008526:	2b00      	cmp	r3, #0
 8008528:	d12a      	bne.n	8008580 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008530:	3b01      	subs	r3, #1
 8008532:	2b02      	cmp	r3, #2
 8008534:	d81d      	bhi.n	8008572 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	889b      	ldrh	r3, [r3, #4]
 800853a:	b2db      	uxtb	r3, r3
 800853c:	2b01      	cmp	r3, #1
 800853e:	d813      	bhi.n	8008568 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	4798      	blx	r3
 800854e:	4603      	mov	r3, r0
 8008550:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	88db      	ldrh	r3, [r3, #6]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d110      	bne.n	800857c <USBD_StdItfReq+0x74>
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10d      	bne.n	800857c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fd5e 	bl	8009022 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008566:	e009      	b.n	800857c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008568:	6839      	ldr	r1, [r7, #0]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fc8e 	bl	8008e8c <USBD_CtlError>
      break;
 8008570:	e004      	b.n	800857c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fc89 	bl	8008e8c <USBD_CtlError>
      break;
 800857a:	e000      	b.n	800857e <USBD_StdItfReq+0x76>
      break;
 800857c:	bf00      	nop
    }
    break;
 800857e:	e004      	b.n	800858a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fc82 	bl	8008e8c <USBD_CtlError>
    break;
 8008588:	bf00      	nop
  }

  return ret;
 800858a:	7bfb      	ldrb	r3, [r7, #15]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	889b      	ldrh	r3, [r3, #4]
 80085a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085b0:	2b20      	cmp	r3, #32
 80085b2:	d004      	beq.n	80085be <USBD_StdEPReq+0x2a>
 80085b4:	2b40      	cmp	r3, #64	; 0x40
 80085b6:	d002      	beq.n	80085be <USBD_StdEPReq+0x2a>
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <USBD_StdEPReq+0x3e>
 80085bc:	e135      	b.n	800882a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	4798      	blx	r3
 80085cc:	4603      	mov	r3, r0
 80085ce:	73fb      	strb	r3, [r7, #15]
    break;
 80085d0:	e130      	b.n	8008834 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	785b      	ldrb	r3, [r3, #1]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d03e      	beq.n	8008658 <USBD_StdEPReq+0xc4>
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d002      	beq.n	80085e4 <USBD_StdEPReq+0x50>
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d077      	beq.n	80086d2 <USBD_StdEPReq+0x13e>
 80085e2:	e11c      	b.n	800881e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d002      	beq.n	80085f4 <USBD_StdEPReq+0x60>
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d015      	beq.n	800861e <USBD_StdEPReq+0x8a>
 80085f2:	e02b      	b.n	800864c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00c      	beq.n	8008614 <USBD_StdEPReq+0x80>
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b80      	cmp	r3, #128	; 0x80
 80085fe:	d009      	beq.n	8008614 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f001 f925 	bl	8009854 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800860a:	2180      	movs	r1, #128	; 0x80
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 f921 	bl	8009854 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008612:	e020      	b.n	8008656 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fc38 	bl	8008e8c <USBD_CtlError>
        break;
 800861c:	e01b      	b.n	8008656 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	885b      	ldrh	r3, [r3, #2]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10e      	bne.n	8008644 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00b      	beq.n	8008644 <USBD_StdEPReq+0xb0>
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	2b80      	cmp	r3, #128	; 0x80
 8008630:	d008      	beq.n	8008644 <USBD_StdEPReq+0xb0>
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	88db      	ldrh	r3, [r3, #6]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d104      	bne.n	8008644 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800863a:	7bbb      	ldrb	r3, [r7, #14]
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f001 f908 	bl	8009854 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fcec 	bl	8009022 <USBD_CtlSendStatus>

        break;
 800864a:	e004      	b.n	8008656 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fc1c 	bl	8008e8c <USBD_CtlError>
        break;
 8008654:	bf00      	nop
      }
      break;
 8008656:	e0e7      	b.n	8008828 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800865e:	2b02      	cmp	r3, #2
 8008660:	d002      	beq.n	8008668 <USBD_StdEPReq+0xd4>
 8008662:	2b03      	cmp	r3, #3
 8008664:	d015      	beq.n	8008692 <USBD_StdEPReq+0xfe>
 8008666:	e02d      	b.n	80086c4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00c      	beq.n	8008688 <USBD_StdEPReq+0xf4>
 800866e:	7bbb      	ldrb	r3, [r7, #14]
 8008670:	2b80      	cmp	r3, #128	; 0x80
 8008672:	d009      	beq.n	8008688 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 f8eb 	bl	8009854 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800867e:	2180      	movs	r1, #128	; 0x80
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f001 f8e7 	bl	8009854 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008686:	e023      	b.n	80086d0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fbfe 	bl	8008e8c <USBD_CtlError>
        break;
 8008690:	e01e      	b.n	80086d0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	885b      	ldrh	r3, [r3, #2]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d119      	bne.n	80086ce <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800869a:	7bbb      	ldrb	r3, [r7, #14]
 800869c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d004      	beq.n	80086ae <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f001 f8f2 	bl	8009892 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fcb7 	bl	8009022 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	4798      	blx	r3
        }
        break;
 80086c2:	e004      	b.n	80086ce <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fbe0 	bl	8008e8c <USBD_CtlError>
        break;
 80086cc:	e000      	b.n	80086d0 <USBD_StdEPReq+0x13c>
        break;
 80086ce:	bf00      	nop
      }
      break;
 80086d0:	e0aa      	b.n	8008828 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d002      	beq.n	80086e2 <USBD_StdEPReq+0x14e>
 80086dc:	2b03      	cmp	r3, #3
 80086de:	d032      	beq.n	8008746 <USBD_StdEPReq+0x1b2>
 80086e0:	e097      	b.n	8008812 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d007      	beq.n	80086f8 <USBD_StdEPReq+0x164>
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
 80086ea:	2b80      	cmp	r3, #128	; 0x80
 80086ec:	d004      	beq.n	80086f8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fbcb 	bl	8008e8c <USBD_CtlError>
          break;
 80086f6:	e091      	b.n	800881c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	da0b      	bge.n	8008718 <USBD_StdEPReq+0x184>
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	3310      	adds	r3, #16
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	4413      	add	r3, r2
 8008714:	3304      	adds	r3, #4
 8008716:	e00b      	b.n	8008730 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008718:	7bbb      	ldrb	r3, [r7, #14]
 800871a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800871e:	4613      	mov	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	4413      	add	r3, r2
 800872e:	3304      	adds	r3, #4
 8008730:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	2200      	movs	r2, #0
 8008736:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2202      	movs	r2, #2
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fc15 	bl	8008f6e <USBD_CtlSendData>
        break;
 8008744:	e06a      	b.n	800881c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008746:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800874a:	2b00      	cmp	r3, #0
 800874c:	da11      	bge.n	8008772 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800874e:	7bbb      	ldrb	r3, [r7, #14]
 8008750:	f003 020f 	and.w	r2, r3, #15
 8008754:	6879      	ldr	r1, [r7, #4]
 8008756:	4613      	mov	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	440b      	add	r3, r1
 8008760:	3324      	adds	r3, #36	; 0x24
 8008762:	881b      	ldrh	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d117      	bne.n	8008798 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fb8e 	bl	8008e8c <USBD_CtlError>
            break;
 8008770:	e054      	b.n	800881c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008772:	7bbb      	ldrb	r3, [r7, #14]
 8008774:	f003 020f 	and.w	r2, r3, #15
 8008778:	6879      	ldr	r1, [r7, #4]
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	440b      	add	r3, r1
 8008784:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d104      	bne.n	8008798 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fb7b 	bl	8008e8c <USBD_CtlError>
            break;
 8008796:	e041      	b.n	800881c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008798:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800879c:	2b00      	cmp	r3, #0
 800879e:	da0b      	bge.n	80087b8 <USBD_StdEPReq+0x224>
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
 80087a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087a6:	4613      	mov	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	3310      	adds	r3, #16
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	4413      	add	r3, r2
 80087b4:	3304      	adds	r3, #4
 80087b6:	e00b      	b.n	80087d0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
 80087ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	4413      	add	r3, r2
 80087ce:	3304      	adds	r3, #4
 80087d0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087d2:	7bbb      	ldrb	r3, [r7, #14]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d002      	beq.n	80087de <USBD_StdEPReq+0x24a>
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	2b80      	cmp	r3, #128	; 0x80
 80087dc:	d103      	bne.n	80087e6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	2200      	movs	r2, #0
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	e00e      	b.n	8008804 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f001 f870 	bl	80098d0 <USBD_LL_IsStallEP>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d003      	beq.n	80087fe <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2201      	movs	r2, #1
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	e002      	b.n	8008804 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2200      	movs	r2, #0
 8008802:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2202      	movs	r2, #2
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fbaf 	bl	8008f6e <USBD_CtlSendData>
          break;
 8008810:	e004      	b.n	800881c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fb39 	bl	8008e8c <USBD_CtlError>
        break;
 800881a:	bf00      	nop
      }
      break;
 800881c:	e004      	b.n	8008828 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fb33 	bl	8008e8c <USBD_CtlError>
      break;
 8008826:	bf00      	nop
    }
    break;
 8008828:	e004      	b.n	8008834 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fb2d 	bl	8008e8c <USBD_CtlError>
    break;
 8008832:	bf00      	nop
  }

  return ret;
 8008834:	7bfb      	ldrb	r3, [r7, #15]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
	...

08008840 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800884a:	2300      	movs	r3, #0
 800884c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800884e:	2300      	movs	r3, #0
 8008850:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008852:	2300      	movs	r3, #0
 8008854:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	885b      	ldrh	r3, [r3, #2]
 800885a:	0a1b      	lsrs	r3, r3, #8
 800885c:	b29b      	uxth	r3, r3
 800885e:	3b01      	subs	r3, #1
 8008860:	2b06      	cmp	r3, #6
 8008862:	f200 8128 	bhi.w	8008ab6 <USBD_GetDescriptor+0x276>
 8008866:	a201      	add	r2, pc, #4	; (adr r2, 800886c <USBD_GetDescriptor+0x2c>)
 8008868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886c:	08008889 	.word	0x08008889
 8008870:	080088a1 	.word	0x080088a1
 8008874:	080088e1 	.word	0x080088e1
 8008878:	08008ab7 	.word	0x08008ab7
 800887c:	08008ab7 	.word	0x08008ab7
 8008880:	08008a57 	.word	0x08008a57
 8008884:	08008a83 	.word	0x08008a83
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	7c12      	ldrb	r2, [r2, #16]
 8008894:	f107 0108 	add.w	r1, r7, #8
 8008898:	4610      	mov	r0, r2
 800889a:	4798      	blx	r3
 800889c:	60f8      	str	r0, [r7, #12]
    break;
 800889e:	e112      	b.n	8008ac6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	7c1b      	ldrb	r3, [r3, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10d      	bne.n	80088c4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b0:	f107 0208 	add.w	r2, r7, #8
 80088b4:	4610      	mov	r0, r2
 80088b6:	4798      	blx	r3
 80088b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3301      	adds	r3, #1
 80088be:	2202      	movs	r2, #2
 80088c0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80088c2:	e100      	b.n	8008ac6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088cc:	f107 0208 	add.w	r2, r7, #8
 80088d0:	4610      	mov	r0, r2
 80088d2:	4798      	blx	r3
 80088d4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3301      	adds	r3, #1
 80088da:	2202      	movs	r2, #2
 80088dc:	701a      	strb	r2, [r3, #0]
    break;
 80088de:	e0f2      	b.n	8008ac6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	885b      	ldrh	r3, [r3, #2]
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b05      	cmp	r3, #5
 80088e8:	f200 80ac 	bhi.w	8008a44 <USBD_GetDescriptor+0x204>
 80088ec:	a201      	add	r2, pc, #4	; (adr r2, 80088f4 <USBD_GetDescriptor+0xb4>)
 80088ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f2:	bf00      	nop
 80088f4:	0800890d 	.word	0x0800890d
 80088f8:	08008941 	.word	0x08008941
 80088fc:	08008975 	.word	0x08008975
 8008900:	080089a9 	.word	0x080089a9
 8008904:	080089dd 	.word	0x080089dd
 8008908:	08008a11 	.word	0x08008a11
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00b      	beq.n	8008930 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	7c12      	ldrb	r2, [r2, #16]
 8008924:	f107 0108 	add.w	r1, r7, #8
 8008928:	4610      	mov	r0, r2
 800892a:	4798      	blx	r3
 800892c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800892e:	e091      	b.n	8008a54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 faaa 	bl	8008e8c <USBD_CtlError>
        err++;
 8008938:	7afb      	ldrb	r3, [r7, #11]
 800893a:	3301      	adds	r3, #1
 800893c:	72fb      	strb	r3, [r7, #11]
      break;
 800893e:	e089      	b.n	8008a54 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00b      	beq.n	8008964 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	7c12      	ldrb	r2, [r2, #16]
 8008958:	f107 0108 	add.w	r1, r7, #8
 800895c:	4610      	mov	r0, r2
 800895e:	4798      	blx	r3
 8008960:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008962:	e077      	b.n	8008a54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fa90 	bl	8008e8c <USBD_CtlError>
        err++;
 800896c:	7afb      	ldrb	r3, [r7, #11]
 800896e:	3301      	adds	r3, #1
 8008970:	72fb      	strb	r3, [r7, #11]
      break;
 8008972:	e06f      	b.n	8008a54 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00b      	beq.n	8008998 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	7c12      	ldrb	r2, [r2, #16]
 800898c:	f107 0108 	add.w	r1, r7, #8
 8008990:	4610      	mov	r0, r2
 8008992:	4798      	blx	r3
 8008994:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008996:	e05d      	b.n	8008a54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fa76 	bl	8008e8c <USBD_CtlError>
        err++;
 80089a0:	7afb      	ldrb	r3, [r7, #11]
 80089a2:	3301      	adds	r3, #1
 80089a4:	72fb      	strb	r3, [r7, #11]
      break;
 80089a6:	e055      	b.n	8008a54 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00b      	beq.n	80089cc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	7c12      	ldrb	r2, [r2, #16]
 80089c0:	f107 0108 	add.w	r1, r7, #8
 80089c4:	4610      	mov	r0, r2
 80089c6:	4798      	blx	r3
 80089c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089ca:	e043      	b.n	8008a54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fa5c 	bl	8008e8c <USBD_CtlError>
        err++;
 80089d4:	7afb      	ldrb	r3, [r7, #11]
 80089d6:	3301      	adds	r3, #1
 80089d8:	72fb      	strb	r3, [r7, #11]
      break;
 80089da:	e03b      	b.n	8008a54 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00b      	beq.n	8008a00 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	7c12      	ldrb	r2, [r2, #16]
 80089f4:	f107 0108 	add.w	r1, r7, #8
 80089f8:	4610      	mov	r0, r2
 80089fa:	4798      	blx	r3
 80089fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089fe:	e029      	b.n	8008a54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fa42 	bl	8008e8c <USBD_CtlError>
        err++;
 8008a08:	7afb      	ldrb	r3, [r7, #11]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a0e:	e021      	b.n	8008a54 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00b      	beq.n	8008a34 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	7c12      	ldrb	r2, [r2, #16]
 8008a28:	f107 0108 	add.w	r1, r7, #8
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	4798      	blx	r3
 8008a30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a32:	e00f      	b.n	8008a54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fa28 	bl	8008e8c <USBD_CtlError>
        err++;
 8008a3c:	7afb      	ldrb	r3, [r7, #11]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	72fb      	strb	r3, [r7, #11]
      break;
 8008a42:	e007      	b.n	8008a54 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa20 	bl	8008e8c <USBD_CtlError>
      err++;
 8008a4c:	7afb      	ldrb	r3, [r7, #11]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008a52:	bf00      	nop
    }
    break;
 8008a54:	e037      	b.n	8008ac6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	7c1b      	ldrb	r3, [r3, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d109      	bne.n	8008a72 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a66:	f107 0208 	add.w	r2, r7, #8
 8008a6a:	4610      	mov	r0, r2
 8008a6c:	4798      	blx	r3
 8008a6e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008a70:	e029      	b.n	8008ac6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fa09 	bl	8008e8c <USBD_CtlError>
      err++;
 8008a7a:	7afb      	ldrb	r3, [r7, #11]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	72fb      	strb	r3, [r7, #11]
    break;
 8008a80:	e021      	b.n	8008ac6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	7c1b      	ldrb	r3, [r3, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10d      	bne.n	8008aa6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a92:	f107 0208 	add.w	r2, r7, #8
 8008a96:	4610      	mov	r0, r2
 8008a98:	4798      	blx	r3
 8008a9a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	2207      	movs	r2, #7
 8008aa2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008aa4:	e00f      	b.n	8008ac6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f9ef 	bl	8008e8c <USBD_CtlError>
      err++;
 8008aae:	7afb      	ldrb	r3, [r7, #11]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	72fb      	strb	r3, [r7, #11]
    break;
 8008ab4:	e007      	b.n	8008ac6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f9e7 	bl	8008e8c <USBD_CtlError>
    err++;
 8008abe:	7afb      	ldrb	r3, [r7, #11]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	72fb      	strb	r3, [r7, #11]
    break;
 8008ac4:	bf00      	nop
  }

  if (err != 0U)
 8008ac6:	7afb      	ldrb	r3, [r7, #11]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d11e      	bne.n	8008b0a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	88db      	ldrh	r3, [r3, #6]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d016      	beq.n	8008b02 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008ad4:	893b      	ldrh	r3, [r7, #8]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00e      	beq.n	8008af8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	88da      	ldrh	r2, [r3, #6]
 8008ade:	893b      	ldrh	r3, [r7, #8]
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	bf28      	it	cs
 8008ae4:	4613      	movcs	r3, r2
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008aea:	893b      	ldrh	r3, [r7, #8]
 8008aec:	461a      	mov	r2, r3
 8008aee:	68f9      	ldr	r1, [r7, #12]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fa3c 	bl	8008f6e <USBD_CtlSendData>
 8008af6:	e009      	b.n	8008b0c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f9c6 	bl	8008e8c <USBD_CtlError>
 8008b00:	e004      	b.n	8008b0c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fa8d 	bl	8009022 <USBD_CtlSendStatus>
 8008b08:	e000      	b.n	8008b0c <USBD_GetDescriptor+0x2cc>
    return;
 8008b0a:	bf00      	nop
    }
  }
}
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop

08008b14 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	889b      	ldrh	r3, [r3, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d130      	bne.n	8008b88 <USBD_SetAddress+0x74>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	88db      	ldrh	r3, [r3, #6]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d12c      	bne.n	8008b88 <USBD_SetAddress+0x74>
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	885b      	ldrh	r3, [r3, #2]
 8008b32:	2b7f      	cmp	r3, #127	; 0x7f
 8008b34:	d828      	bhi.n	8008b88 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	885b      	ldrh	r3, [r3, #2]
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d104      	bne.n	8008b56 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f99c 	bl	8008e8c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b54:	e01c      	b.n	8008b90 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	7bfa      	ldrb	r2, [r7, #15]
 8008b5a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
 8008b60:	4619      	mov	r1, r3
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fee0 	bl	8009928 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fa5a 	bl	8009022 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d004      	beq.n	8008b7e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2202      	movs	r2, #2
 8008b78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b7c:	e008      	b.n	8008b90 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b86:	e003      	b.n	8008b90 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f97e 	bl	8008e8c <USBD_CtlError>
  }
}
 8008b90:	bf00      	nop
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	885b      	ldrh	r3, [r3, #2]
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	4b4b      	ldr	r3, [pc, #300]	; (8008cdc <USBD_SetConfig+0x144>)
 8008bae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bb0:	4b4a      	ldr	r3, [pc, #296]	; (8008cdc <USBD_SetConfig+0x144>)
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d905      	bls.n	8008bc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f966 	bl	8008e8c <USBD_CtlError>
    return USBD_FAIL;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e087      	b.n	8008cd4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d002      	beq.n	8008bd4 <USBD_SetConfig+0x3c>
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d025      	beq.n	8008c1e <USBD_SetConfig+0x86>
 8008bd2:	e071      	b.n	8008cb8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008bd4:	4b41      	ldr	r3, [pc, #260]	; (8008cdc <USBD_SetConfig+0x144>)
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d01c      	beq.n	8008c16 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008bdc:	4b3f      	ldr	r3, [pc, #252]	; (8008cdc <USBD_SetConfig+0x144>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	461a      	mov	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008be6:	4b3d      	ldr	r3, [pc, #244]	; (8008cdc <USBD_SetConfig+0x144>)
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	4619      	mov	r1, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7ff f9a7 	bl	8007f40 <USBD_SetClassConfig>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d004      	beq.n	8008c06 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f944 	bl	8008e8c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c04:	e065      	b.n	8008cd2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fa0b 	bl	8009022 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2203      	movs	r2, #3
 8008c10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008c14:	e05d      	b.n	8008cd2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fa03 	bl	8009022 <USBD_CtlSendStatus>
    break;
 8008c1c:	e059      	b.n	8008cd2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008c1e:	4b2f      	ldr	r3, [pc, #188]	; (8008cdc <USBD_SetConfig+0x144>)
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d112      	bne.n	8008c4c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2202      	movs	r2, #2
 8008c2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008c2e:	4b2b      	ldr	r3, [pc, #172]	; (8008cdc <USBD_SetConfig+0x144>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c38:	4b28      	ldr	r3, [pc, #160]	; (8008cdc <USBD_SetConfig+0x144>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7ff f99a 	bl	8007f78 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f9ec 	bl	8009022 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c4a:	e042      	b.n	8008cd2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008c4c:	4b23      	ldr	r3, [pc, #140]	; (8008cdc <USBD_SetConfig+0x144>)
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	461a      	mov	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d02a      	beq.n	8008cb0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	4619      	mov	r1, r3
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7ff f988 	bl	8007f78 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008c68:	4b1c      	ldr	r3, [pc, #112]	; (8008cdc <USBD_SetConfig+0x144>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c72:	4b1a      	ldr	r3, [pc, #104]	; (8008cdc <USBD_SetConfig+0x144>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff f961 	bl	8007f40 <USBD_SetClassConfig>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00f      	beq.n	8008ca8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f8fe 	bl	8008e8c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7ff f96d 	bl	8007f78 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008ca6:	e014      	b.n	8008cd2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f9ba 	bl	8009022 <USBD_CtlSendStatus>
    break;
 8008cae:	e010      	b.n	8008cd2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f9b6 	bl	8009022 <USBD_CtlSendStatus>
    break;
 8008cb6:	e00c      	b.n	8008cd2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f8e6 	bl	8008e8c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cc0:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <USBD_SetConfig+0x144>)
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7ff f956 	bl	8007f78 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd0:	bf00      	nop
  }

  return ret;
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	20000204 	.word	0x20000204

08008ce0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	88db      	ldrh	r3, [r3, #6]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d004      	beq.n	8008cfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f8c9 	bl	8008e8c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008cfa:	e021      	b.n	8008d40 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	db17      	blt.n	8008d36 <USBD_GetConfig+0x56>
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	dd02      	ble.n	8008d10 <USBD_GetConfig+0x30>
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d00b      	beq.n	8008d26 <USBD_GetConfig+0x46>
 8008d0e:	e012      	b.n	8008d36 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3308      	adds	r3, #8
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f925 	bl	8008f6e <USBD_CtlSendData>
      break;
 8008d24:	e00c      	b.n	8008d40 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f91d 	bl	8008f6e <USBD_CtlSendData>
      break;
 8008d34:	e004      	b.n	8008d40 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f8a7 	bl	8008e8c <USBD_CtlError>
      break;
 8008d3e:	bf00      	nop
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d81e      	bhi.n	8008d9c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	88db      	ldrh	r3, [r3, #6]
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d004      	beq.n	8008d70 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f88f 	bl	8008e8c <USBD_CtlError>
      break;
 8008d6e:	e01a      	b.n	8008da6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d005      	beq.n	8008d8c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f043 0202 	orr.w	r2, r3, #2
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	330c      	adds	r3, #12
 8008d90:	2202      	movs	r2, #2
 8008d92:	4619      	mov	r1, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f8ea 	bl	8008f6e <USBD_CtlSendData>
    break;
 8008d9a:	e004      	b.n	8008da6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f874 	bl	8008e8c <USBD_CtlError>
    break;
 8008da4:	bf00      	nop
  }
}
 8008da6:	bf00      	nop
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b082      	sub	sp, #8
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	885b      	ldrh	r3, [r3, #2]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d106      	bne.n	8008dce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f92a 	bl	8009022 <USBD_CtlSendStatus>
  }
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008de6:	3b01      	subs	r3, #1
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d80b      	bhi.n	8008e04 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	885b      	ldrh	r3, [r3, #2]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d10c      	bne.n	8008e0e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f910 	bl	8009022 <USBD_CtlSendStatus>
      }
      break;
 8008e02:	e004      	b.n	8008e0e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f840 	bl	8008e8c <USBD_CtlError>
      break;
 8008e0c:	e000      	b.n	8008e10 <USBD_ClrFeature+0x3a>
      break;
 8008e0e:	bf00      	nop
  }
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	781a      	ldrb	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	3301      	adds	r3, #1
 8008e32:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	781a      	ldrb	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f7ff fad3 	bl	80083ee <SWAPBYTE>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3301      	adds	r3, #1
 8008e54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f7ff fac6 	bl	80083ee <SWAPBYTE>
 8008e62:	4603      	mov	r3, r0
 8008e64:	461a      	mov	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	3301      	adds	r3, #1
 8008e74:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f7ff fab9 	bl	80083ee <SWAPBYTE>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	461a      	mov	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	80da      	strh	r2, [r3, #6]
}
 8008e84:	bf00      	nop
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e96:	2180      	movs	r1, #128	; 0x80
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fcdb 	bl	8009854 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fcd7 	bl	8009854 <USBD_LL_StallEP>
}
 8008ea6:	bf00      	nop
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b086      	sub	sp, #24
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	60f8      	str	r0, [r7, #12]
 8008eb6:	60b9      	str	r1, [r7, #8]
 8008eb8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d036      	beq.n	8008f32 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ec8:	6938      	ldr	r0, [r7, #16]
 8008eca:	f000 f836 	bl	8008f3a <USBD_GetLen>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008edc:	7dfb      	ldrb	r3, [r7, #23]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	7812      	ldrb	r2, [r2, #0]
 8008ee6:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ee8:	7dfb      	ldrb	r3, [r7, #23]
 8008eea:	3301      	adds	r3, #1
 8008eec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	2203      	movs	r2, #3
 8008ef6:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	3301      	adds	r3, #1
 8008efc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008efe:	e013      	b.n	8008f28 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	4413      	add	r3, r2
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	7812      	ldrb	r2, [r2, #0]
 8008f0a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	613b      	str	r3, [r7, #16]
    idx++;
 8008f12:	7dfb      	ldrb	r3, [r7, #23]
 8008f14:	3301      	adds	r3, #1
 8008f16:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	2200      	movs	r2, #0
 8008f20:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
 8008f24:	3301      	adds	r3, #1
 8008f26:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1e7      	bne.n	8008f00 <USBD_GetString+0x52>
 8008f30:	e000      	b.n	8008f34 <USBD_GetString+0x86>
    return;
 8008f32:	bf00      	nop
  }
}
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b085      	sub	sp, #20
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f42:	2300      	movs	r3, #0
 8008f44:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f4a:	e005      	b.n	8008f58 <USBD_GetLen+0x1e>
  {
    len++;
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	3301      	adds	r3, #1
 8008f56:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1f5      	bne.n	8008f4c <USBD_GetLen+0x12>
  }

  return len;
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	2100      	movs	r1, #0
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 fce6 	bl	8009966 <USBD_LL_Transmit>

  return USBD_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f000 fcd5 	bl	8009966 <USBD_LL_Transmit>

  return USBD_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	60f8      	str	r0, [r7, #12]
 8008fce:	60b9      	str	r1, [r7, #8]
 8008fd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2203      	movs	r2, #3
 8008fd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	2100      	movs	r1, #0
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fcd9 	bl	80099a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	2100      	movs	r1, #0
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f000 fcc8 	bl	80099a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b082      	sub	sp, #8
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2204      	movs	r2, #4
 800902e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009032:	2300      	movs	r3, #0
 8009034:	2200      	movs	r2, #0
 8009036:	2100      	movs	r1, #0
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fc94 	bl	8009966 <USBD_LL_Transmit>

  return USBD_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2205      	movs	r2, #5
 8009054:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009058:	2300      	movs	r3, #0
 800905a:	2200      	movs	r2, #0
 800905c:	2100      	movs	r1, #0
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fca2 	bl	80099a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
	...

08009070 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009074:	2200      	movs	r2, #0
 8009076:	4912      	ldr	r1, [pc, #72]	; (80090c0 <MX_USB_DEVICE_Init+0x50>)
 8009078:	4812      	ldr	r0, [pc, #72]	; (80090c4 <MX_USB_DEVICE_Init+0x54>)
 800907a:	f7fe fef3 	bl	8007e64 <USBD_Init>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009084:	f7f7 fea8 	bl	8000dd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009088:	490f      	ldr	r1, [pc, #60]	; (80090c8 <MX_USB_DEVICE_Init+0x58>)
 800908a:	480e      	ldr	r0, [pc, #56]	; (80090c4 <MX_USB_DEVICE_Init+0x54>)
 800908c:	f7fe ff20 	bl	8007ed0 <USBD_RegisterClass>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009096:	f7f7 fe9f 	bl	8000dd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800909a:	490c      	ldr	r1, [pc, #48]	; (80090cc <MX_USB_DEVICE_Init+0x5c>)
 800909c:	4809      	ldr	r0, [pc, #36]	; (80090c4 <MX_USB_DEVICE_Init+0x54>)
 800909e:	f7fe fe45 	bl	8007d2c <USBD_CDC_RegisterInterface>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090a8:	f7f7 fe96 	bl	8000dd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090ac:	4805      	ldr	r0, [pc, #20]	; (80090c4 <MX_USB_DEVICE_Init+0x54>)
 80090ae:	f7fe ff30 	bl	8007f12 <USBD_Start>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090b8:	f7f7 fe8e 	bl	8000dd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090bc:	bf00      	nop
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	20000130 	.word	0x20000130
 80090c4:	200003f4 	.word	0x200003f4
 80090c8:	20000018 	.word	0x20000018
 80090cc:	2000011c 	.word	0x2000011c

080090d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090d4:	2200      	movs	r2, #0
 80090d6:	4905      	ldr	r1, [pc, #20]	; (80090ec <CDC_Init_FS+0x1c>)
 80090d8:	4805      	ldr	r0, [pc, #20]	; (80090f0 <CDC_Init_FS+0x20>)
 80090da:	f7fe fe3c 	bl	8007d56 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090de:	4905      	ldr	r1, [pc, #20]	; (80090f4 <CDC_Init_FS+0x24>)
 80090e0:	4803      	ldr	r0, [pc, #12]	; (80090f0 <CDC_Init_FS+0x20>)
 80090e2:	f7fe fe51 	bl	8007d88 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80090e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	20000ec4 	.word	0x20000ec4
 80090f0:	200003f4 	.word	0x200003f4
 80090f4:	200006c4 	.word	0x200006c4

080090f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80090f8:	b480      	push	{r7}
 80090fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80090fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090fe:	4618      	mov	r0, r3
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	6039      	str	r1, [r7, #0]
 8009112:	71fb      	strb	r3, [r7, #7]
 8009114:	4613      	mov	r3, r2
 8009116:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009118:	79fb      	ldrb	r3, [r7, #7]
 800911a:	2b23      	cmp	r3, #35	; 0x23
 800911c:	d84a      	bhi.n	80091b4 <CDC_Control_FS+0xac>
 800911e:	a201      	add	r2, pc, #4	; (adr r2, 8009124 <CDC_Control_FS+0x1c>)
 8009120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009124:	080091b5 	.word	0x080091b5
 8009128:	080091b5 	.word	0x080091b5
 800912c:	080091b5 	.word	0x080091b5
 8009130:	080091b5 	.word	0x080091b5
 8009134:	080091b5 	.word	0x080091b5
 8009138:	080091b5 	.word	0x080091b5
 800913c:	080091b5 	.word	0x080091b5
 8009140:	080091b5 	.word	0x080091b5
 8009144:	080091b5 	.word	0x080091b5
 8009148:	080091b5 	.word	0x080091b5
 800914c:	080091b5 	.word	0x080091b5
 8009150:	080091b5 	.word	0x080091b5
 8009154:	080091b5 	.word	0x080091b5
 8009158:	080091b5 	.word	0x080091b5
 800915c:	080091b5 	.word	0x080091b5
 8009160:	080091b5 	.word	0x080091b5
 8009164:	080091b5 	.word	0x080091b5
 8009168:	080091b5 	.word	0x080091b5
 800916c:	080091b5 	.word	0x080091b5
 8009170:	080091b5 	.word	0x080091b5
 8009174:	080091b5 	.word	0x080091b5
 8009178:	080091b5 	.word	0x080091b5
 800917c:	080091b5 	.word	0x080091b5
 8009180:	080091b5 	.word	0x080091b5
 8009184:	080091b5 	.word	0x080091b5
 8009188:	080091b5 	.word	0x080091b5
 800918c:	080091b5 	.word	0x080091b5
 8009190:	080091b5 	.word	0x080091b5
 8009194:	080091b5 	.word	0x080091b5
 8009198:	080091b5 	.word	0x080091b5
 800919c:	080091b5 	.word	0x080091b5
 80091a0:	080091b5 	.word	0x080091b5
 80091a4:	080091b5 	.word	0x080091b5
 80091a8:	080091b5 	.word	0x080091b5
 80091ac:	080091b5 	.word	0x080091b5
 80091b0:	080091b5 	.word	0x080091b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091b4:	bf00      	nop
  }

  return (USBD_OK);
 80091b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091ce:	6879      	ldr	r1, [r7, #4]
 80091d0:	4808      	ldr	r0, [pc, #32]	; (80091f4 <CDC_Receive_FS+0x30>)
 80091d2:	f7fe fdd9 	bl	8007d88 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091d6:	4807      	ldr	r0, [pc, #28]	; (80091f4 <CDC_Receive_FS+0x30>)
 80091d8:	f7fe fe1a 	bl	8007e10 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, Len[0]);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4619      	mov	r1, r3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7f7 f9dc 	bl	80005a0 <CDC_ReceiveCallback>
  return (USBD_OK);
 80091e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3708      	adds	r7, #8
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	200003f4 	.word	0x200003f4

080091f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	460b      	mov	r3, r1
 8009202:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009208:	4b0d      	ldr	r3, [pc, #52]	; (8009240 <CDC_Transmit_FS+0x48>)
 800920a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800920e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800921a:	2301      	movs	r3, #1
 800921c:	e00b      	b.n	8009236 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800921e:	887b      	ldrh	r3, [r7, #2]
 8009220:	461a      	mov	r2, r3
 8009222:	6879      	ldr	r1, [r7, #4]
 8009224:	4806      	ldr	r0, [pc, #24]	; (8009240 <CDC_Transmit_FS+0x48>)
 8009226:	f7fe fd96 	bl	8007d56 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800922a:	4805      	ldr	r0, [pc, #20]	; (8009240 <CDC_Transmit_FS+0x48>)
 800922c:	f7fe fdc0 	bl	8007db0 <USBD_CDC_TransmitPacket>
 8009230:	4603      	mov	r3, r0
 8009232:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009234:	7bfb      	ldrb	r3, [r7, #15]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	200003f4 	.word	0x200003f4

08009244 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009244:	b480      	push	{r7}
 8009246:	b087      	sub	sp, #28
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	4613      	mov	r3, r2
 8009250:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009256:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800925a:	4618      	mov	r0, r3
 800925c:	371c      	adds	r7, #28
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
	...

08009268 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	6039      	str	r1, [r7, #0]
 8009272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	2212      	movs	r2, #18
 8009278:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800927a:	4b03      	ldr	r3, [pc, #12]	; (8009288 <USBD_FS_DeviceDescriptor+0x20>)
}
 800927c:	4618      	mov	r0, r3
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	2000014c 	.word	0x2000014c

0800928c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	4603      	mov	r3, r0
 8009294:	6039      	str	r1, [r7, #0]
 8009296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	2204      	movs	r2, #4
 800929c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800929e:	4b03      	ldr	r3, [pc, #12]	; (80092ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	20000160 	.word	0x20000160

080092b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	6039      	str	r1, [r7, #0]
 80092ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092bc:	79fb      	ldrb	r3, [r7, #7]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d105      	bne.n	80092ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	4907      	ldr	r1, [pc, #28]	; (80092e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80092c6:	4808      	ldr	r0, [pc, #32]	; (80092e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80092c8:	f7ff fdf1 	bl	8008eae <USBD_GetString>
 80092cc:	e004      	b.n	80092d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	4904      	ldr	r1, [pc, #16]	; (80092e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80092d2:	4805      	ldr	r0, [pc, #20]	; (80092e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80092d4:	f7ff fdeb 	bl	8008eae <USBD_GetString>
  }
  return USBD_StrDesc;
 80092d8:	4b02      	ldr	r3, [pc, #8]	; (80092e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	200016c4 	.word	0x200016c4
 80092e8:	08009c90 	.word	0x08009c90

080092ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	6039      	str	r1, [r7, #0]
 80092f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	4904      	ldr	r1, [pc, #16]	; (800930c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092fc:	4804      	ldr	r0, [pc, #16]	; (8009310 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092fe:	f7ff fdd6 	bl	8008eae <USBD_GetString>
  return USBD_StrDesc;
 8009302:	4b02      	ldr	r3, [pc, #8]	; (800930c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009304:	4618      	mov	r0, r3
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	200016c4 	.word	0x200016c4
 8009310:	08009ca8 	.word	0x08009ca8

08009314 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	4603      	mov	r3, r0
 800931c:	6039      	str	r1, [r7, #0]
 800931e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	221a      	movs	r2, #26
 8009324:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009326:	f000 f843 	bl	80093b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800932a:	4b02      	ldr	r3, [pc, #8]	; (8009334 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800932c:	4618      	mov	r0, r3
 800932e:	3708      	adds	r7, #8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	20000164 	.word	0x20000164

08009338 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	4603      	mov	r3, r0
 8009340:	6039      	str	r1, [r7, #0]
 8009342:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009344:	79fb      	ldrb	r3, [r7, #7]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d105      	bne.n	8009356 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	4907      	ldr	r1, [pc, #28]	; (800936c <USBD_FS_ConfigStrDescriptor+0x34>)
 800934e:	4808      	ldr	r0, [pc, #32]	; (8009370 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009350:	f7ff fdad 	bl	8008eae <USBD_GetString>
 8009354:	e004      	b.n	8009360 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	4904      	ldr	r1, [pc, #16]	; (800936c <USBD_FS_ConfigStrDescriptor+0x34>)
 800935a:	4805      	ldr	r0, [pc, #20]	; (8009370 <USBD_FS_ConfigStrDescriptor+0x38>)
 800935c:	f7ff fda7 	bl	8008eae <USBD_GetString>
  }
  return USBD_StrDesc;
 8009360:	4b02      	ldr	r3, [pc, #8]	; (800936c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009362:	4618      	mov	r0, r3
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	200016c4 	.word	0x200016c4
 8009370:	08009cbc 	.word	0x08009cbc

08009374 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	6039      	str	r1, [r7, #0]
 800937e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009380:	79fb      	ldrb	r3, [r7, #7]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d105      	bne.n	8009392 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	4907      	ldr	r1, [pc, #28]	; (80093a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800938a:	4808      	ldr	r0, [pc, #32]	; (80093ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800938c:	f7ff fd8f 	bl	8008eae <USBD_GetString>
 8009390:	e004      	b.n	800939c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	4904      	ldr	r1, [pc, #16]	; (80093a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009396:	4805      	ldr	r0, [pc, #20]	; (80093ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009398:	f7ff fd89 	bl	8008eae <USBD_GetString>
  }
  return USBD_StrDesc;
 800939c:	4b02      	ldr	r3, [pc, #8]	; (80093a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3708      	adds	r7, #8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	200016c4 	.word	0x200016c4
 80093ac:	08009cc8 	.word	0x08009cc8

080093b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093b6:	4b0f      	ldr	r3, [pc, #60]	; (80093f4 <Get_SerialNum+0x44>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093bc:	4b0e      	ldr	r3, [pc, #56]	; (80093f8 <Get_SerialNum+0x48>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093c2:	4b0e      	ldr	r3, [pc, #56]	; (80093fc <Get_SerialNum+0x4c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4413      	add	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d009      	beq.n	80093ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093d6:	2208      	movs	r2, #8
 80093d8:	4909      	ldr	r1, [pc, #36]	; (8009400 <Get_SerialNum+0x50>)
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f000 f814 	bl	8009408 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093e0:	2204      	movs	r2, #4
 80093e2:	4908      	ldr	r1, [pc, #32]	; (8009404 <Get_SerialNum+0x54>)
 80093e4:	68b8      	ldr	r0, [r7, #8]
 80093e6:	f000 f80f 	bl	8009408 <IntToUnicode>
  }
}
 80093ea:	bf00      	nop
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	1fff7a10 	.word	0x1fff7a10
 80093f8:	1fff7a14 	.word	0x1fff7a14
 80093fc:	1fff7a18 	.word	0x1fff7a18
 8009400:	20000166 	.word	0x20000166
 8009404:	20000176 	.word	0x20000176

08009408 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009408:	b480      	push	{r7}
 800940a:	b087      	sub	sp, #28
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	4613      	mov	r3, r2
 8009414:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800941a:	2300      	movs	r3, #0
 800941c:	75fb      	strb	r3, [r7, #23]
 800941e:	e027      	b.n	8009470 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	0f1b      	lsrs	r3, r3, #28
 8009424:	2b09      	cmp	r3, #9
 8009426:	d80b      	bhi.n	8009440 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	0f1b      	lsrs	r3, r3, #28
 800942c:	b2da      	uxtb	r2, r3
 800942e:	7dfb      	ldrb	r3, [r7, #23]
 8009430:	005b      	lsls	r3, r3, #1
 8009432:	4619      	mov	r1, r3
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	440b      	add	r3, r1
 8009438:	3230      	adds	r2, #48	; 0x30
 800943a:	b2d2      	uxtb	r2, r2
 800943c:	701a      	strb	r2, [r3, #0]
 800943e:	e00a      	b.n	8009456 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	0f1b      	lsrs	r3, r3, #28
 8009444:	b2da      	uxtb	r2, r3
 8009446:	7dfb      	ldrb	r3, [r7, #23]
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	4619      	mov	r1, r3
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	440b      	add	r3, r1
 8009450:	3237      	adds	r2, #55	; 0x37
 8009452:	b2d2      	uxtb	r2, r2
 8009454:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	011b      	lsls	r3, r3, #4
 800945a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800945c:	7dfb      	ldrb	r3, [r7, #23]
 800945e:	005b      	lsls	r3, r3, #1
 8009460:	3301      	adds	r3, #1
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	4413      	add	r3, r2
 8009466:	2200      	movs	r2, #0
 8009468:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800946a:	7dfb      	ldrb	r3, [r7, #23]
 800946c:	3301      	adds	r3, #1
 800946e:	75fb      	strb	r3, [r7, #23]
 8009470:	7dfa      	ldrb	r2, [r7, #23]
 8009472:	79fb      	ldrb	r3, [r7, #7]
 8009474:	429a      	cmp	r2, r3
 8009476:	d3d3      	bcc.n	8009420 <IntToUnicode+0x18>
  }
}
 8009478:	bf00      	nop
 800947a:	371c      	adds	r7, #28
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b08a      	sub	sp, #40	; 0x28
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800948c:	f107 0314 	add.w	r3, r7, #20
 8009490:	2200      	movs	r2, #0
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	605a      	str	r2, [r3, #4]
 8009496:	609a      	str	r2, [r3, #8]
 8009498:	60da      	str	r2, [r3, #12]
 800949a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094a4:	d13a      	bne.n	800951c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094a6:	2300      	movs	r3, #0
 80094a8:	613b      	str	r3, [r7, #16]
 80094aa:	4b1e      	ldr	r3, [pc, #120]	; (8009524 <HAL_PCD_MspInit+0xa0>)
 80094ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ae:	4a1d      	ldr	r2, [pc, #116]	; (8009524 <HAL_PCD_MspInit+0xa0>)
 80094b0:	f043 0301 	orr.w	r3, r3, #1
 80094b4:	6313      	str	r3, [r2, #48]	; 0x30
 80094b6:	4b1b      	ldr	r3, [pc, #108]	; (8009524 <HAL_PCD_MspInit+0xa0>)
 80094b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ba:	f003 0301 	and.w	r3, r3, #1
 80094be:	613b      	str	r3, [r7, #16]
 80094c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80094c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80094c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094c8:	2302      	movs	r3, #2
 80094ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094cc:	2300      	movs	r3, #0
 80094ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094d0:	2303      	movs	r3, #3
 80094d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094d4:	230a      	movs	r3, #10
 80094d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094d8:	f107 0314 	add.w	r3, r7, #20
 80094dc:	4619      	mov	r1, r3
 80094de:	4812      	ldr	r0, [pc, #72]	; (8009528 <HAL_PCD_MspInit+0xa4>)
 80094e0:	f7f8 ffe4 	bl	80024ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094e4:	4b0f      	ldr	r3, [pc, #60]	; (8009524 <HAL_PCD_MspInit+0xa0>)
 80094e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e8:	4a0e      	ldr	r2, [pc, #56]	; (8009524 <HAL_PCD_MspInit+0xa0>)
 80094ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ee:	6353      	str	r3, [r2, #52]	; 0x34
 80094f0:	2300      	movs	r3, #0
 80094f2:	60fb      	str	r3, [r7, #12]
 80094f4:	4b0b      	ldr	r3, [pc, #44]	; (8009524 <HAL_PCD_MspInit+0xa0>)
 80094f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094f8:	4a0a      	ldr	r2, [pc, #40]	; (8009524 <HAL_PCD_MspInit+0xa0>)
 80094fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094fe:	6453      	str	r3, [r2, #68]	; 0x44
 8009500:	4b08      	ldr	r3, [pc, #32]	; (8009524 <HAL_PCD_MspInit+0xa0>)
 8009502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009508:	60fb      	str	r3, [r7, #12]
 800950a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800950c:	2200      	movs	r2, #0
 800950e:	2100      	movs	r1, #0
 8009510:	2043      	movs	r0, #67	; 0x43
 8009512:	f7f8 fc26 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009516:	2043      	movs	r0, #67	; 0x43
 8009518:	f7f8 fc3f 	bl	8001d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800951c:	bf00      	nop
 800951e:	3728      	adds	r7, #40	; 0x28
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	40023800 	.word	0x40023800
 8009528:	40020000 	.word	0x40020000

0800952c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009540:	4619      	mov	r1, r3
 8009542:	4610      	mov	r0, r2
 8009544:	f7fe fd30 	bl	8007fa8 <USBD_LL_SetupStage>
}
 8009548:	bf00      	nop
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	460b      	mov	r3, r1
 800955a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	6879      	ldr	r1, [r7, #4]
 8009566:	4613      	mov	r3, r2
 8009568:	00db      	lsls	r3, r3, #3
 800956a:	1a9b      	subs	r3, r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	440b      	add	r3, r1
 8009570:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	4619      	mov	r1, r3
 800957a:	f7fe fd68 	bl	800804e <USBD_LL_DataOutStage>
}
 800957e:	bf00      	nop
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b082      	sub	sp, #8
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	460b      	mov	r3, r1
 8009590:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009598:	78fa      	ldrb	r2, [r7, #3]
 800959a:	6879      	ldr	r1, [r7, #4]
 800959c:	4613      	mov	r3, r2
 800959e:	00db      	lsls	r3, r3, #3
 80095a0:	1a9b      	subs	r3, r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	440b      	add	r3, r1
 80095a6:	3348      	adds	r3, #72	; 0x48
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	78fb      	ldrb	r3, [r7, #3]
 80095ac:	4619      	mov	r1, r3
 80095ae:	f7fe fdb1 	bl	8008114 <USBD_LL_DataInStage>
}
 80095b2:	bf00      	nop
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b082      	sub	sp, #8
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fe feb5 	bl	8008338 <USBD_LL_SOF>
}
 80095ce:	bf00      	nop
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095de:	2301      	movs	r3, #1
 80095e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d001      	beq.n	80095ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095ea:	f7f7 fbf5 	bl	8000dd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80095f4:	7bfa      	ldrb	r2, [r7, #15]
 80095f6:	4611      	mov	r1, r2
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fe fe62 	bl	80082c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009604:	4618      	mov	r0, r3
 8009606:	f7fe fe1b 	bl	8008240 <USBD_LL_Reset>
}
 800960a:	bf00      	nop
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
	...

08009614 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe fe5d 	bl	80082e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	6812      	ldr	r2, [r2, #0]
 8009636:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800963a:	f043 0301 	orr.w	r3, r3, #1
 800963e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d005      	beq.n	8009654 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009648:	4b04      	ldr	r3, [pc, #16]	; (800965c <HAL_PCD_SuspendCallback+0x48>)
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	4a03      	ldr	r2, [pc, #12]	; (800965c <HAL_PCD_SuspendCallback+0x48>)
 800964e:	f043 0306 	orr.w	r3, r3, #6
 8009652:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009654:	bf00      	nop
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	e000ed00 	.word	0xe000ed00

08009660 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800966e:	4618      	mov	r0, r3
 8009670:	f7fe fe4c 	bl	800830c <USBD_LL_Resume>
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800968e:	78fa      	ldrb	r2, [r7, #3]
 8009690:	4611      	mov	r1, r2
 8009692:	4618      	mov	r0, r3
 8009694:	f7fe fe77 	bl	8008386 <USBD_LL_IsoOUTIncomplete>
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	460b      	mov	r3, r1
 80096aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80096b2:	78fa      	ldrb	r2, [r7, #3]
 80096b4:	4611      	mov	r1, r2
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fe fe58 	bl	800836c <USBD_LL_IsoINIncomplete>
}
 80096bc:	bf00      	nop
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fe fe64 	bl	80083a0 <USBD_LL_DevConnected>
}
 80096d8:	bf00      	nop
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe fe61 	bl	80083b6 <USBD_LL_DevDisconnected>
}
 80096f4:	bf00      	nop
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d13c      	bne.n	8009786 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800970c:	4a20      	ldr	r2, [pc, #128]	; (8009790 <USBD_LL_Init+0x94>)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a1e      	ldr	r2, [pc, #120]	; (8009790 <USBD_LL_Init+0x94>)
 8009718:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800971c:	4b1c      	ldr	r3, [pc, #112]	; (8009790 <USBD_LL_Init+0x94>)
 800971e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009722:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009724:	4b1a      	ldr	r3, [pc, #104]	; (8009790 <USBD_LL_Init+0x94>)
 8009726:	2204      	movs	r2, #4
 8009728:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800972a:	4b19      	ldr	r3, [pc, #100]	; (8009790 <USBD_LL_Init+0x94>)
 800972c:	2202      	movs	r2, #2
 800972e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009730:	4b17      	ldr	r3, [pc, #92]	; (8009790 <USBD_LL_Init+0x94>)
 8009732:	2200      	movs	r2, #0
 8009734:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009736:	4b16      	ldr	r3, [pc, #88]	; (8009790 <USBD_LL_Init+0x94>)
 8009738:	2202      	movs	r2, #2
 800973a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800973c:	4b14      	ldr	r3, [pc, #80]	; (8009790 <USBD_LL_Init+0x94>)
 800973e:	2200      	movs	r2, #0
 8009740:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009742:	4b13      	ldr	r3, [pc, #76]	; (8009790 <USBD_LL_Init+0x94>)
 8009744:	2200      	movs	r2, #0
 8009746:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009748:	4b11      	ldr	r3, [pc, #68]	; (8009790 <USBD_LL_Init+0x94>)
 800974a:	2200      	movs	r2, #0
 800974c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800974e:	4b10      	ldr	r3, [pc, #64]	; (8009790 <USBD_LL_Init+0x94>)
 8009750:	2200      	movs	r2, #0
 8009752:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009754:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <USBD_LL_Init+0x94>)
 8009756:	2200      	movs	r2, #0
 8009758:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800975a:	480d      	ldr	r0, [pc, #52]	; (8009790 <USBD_LL_Init+0x94>)
 800975c:	f7f9 f85a 	bl	8002814 <HAL_PCD_Init>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009766:	f7f7 fb37 	bl	8000dd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800976a:	2180      	movs	r1, #128	; 0x80
 800976c:	4808      	ldr	r0, [pc, #32]	; (8009790 <USBD_LL_Init+0x94>)
 800976e:	f7fa f9b8 	bl	8003ae2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009772:	2240      	movs	r2, #64	; 0x40
 8009774:	2100      	movs	r1, #0
 8009776:	4806      	ldr	r0, [pc, #24]	; (8009790 <USBD_LL_Init+0x94>)
 8009778:	f7fa f96c 	bl	8003a54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800977c:	2280      	movs	r2, #128	; 0x80
 800977e:	2101      	movs	r1, #1
 8009780:	4803      	ldr	r0, [pc, #12]	; (8009790 <USBD_LL_Init+0x94>)
 8009782:	f7fa f967 	bl	8003a54 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3708      	adds	r7, #8
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	200018c4 	.word	0x200018c4

08009794 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7f9 f94f 	bl	8002a4e <HAL_PCD_Start>
 80097b0:	4603      	mov	r3, r0
 80097b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 f92a 	bl	8009a10 <USBD_Get_USB_Status>
 80097bc:	4603      	mov	r3, r0
 80097be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b084      	sub	sp, #16
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	4608      	mov	r0, r1
 80097d4:	4611      	mov	r1, r2
 80097d6:	461a      	mov	r2, r3
 80097d8:	4603      	mov	r3, r0
 80097da:	70fb      	strb	r3, [r7, #3]
 80097dc:	460b      	mov	r3, r1
 80097de:	70bb      	strb	r3, [r7, #2]
 80097e0:	4613      	mov	r3, r2
 80097e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097f2:	78bb      	ldrb	r3, [r7, #2]
 80097f4:	883a      	ldrh	r2, [r7, #0]
 80097f6:	78f9      	ldrb	r1, [r7, #3]
 80097f8:	f7f9 fd33 	bl	8003262 <HAL_PCD_EP_Open>
 80097fc:	4603      	mov	r3, r0
 80097fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009800:	7bfb      	ldrb	r3, [r7, #15]
 8009802:	4618      	mov	r0, r3
 8009804:	f000 f904 	bl	8009a10 <USBD_Get_USB_Status>
 8009808:	4603      	mov	r3, r0
 800980a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800980c:	7bbb      	ldrb	r3, [r7, #14]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b084      	sub	sp, #16
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	460b      	mov	r3, r1
 8009820:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009830:	78fa      	ldrb	r2, [r7, #3]
 8009832:	4611      	mov	r1, r2
 8009834:	4618      	mov	r0, r3
 8009836:	f7f9 fd7c 	bl	8003332 <HAL_PCD_EP_Close>
 800983a:	4603      	mov	r3, r0
 800983c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800983e:	7bfb      	ldrb	r3, [r7, #15]
 8009840:	4618      	mov	r0, r3
 8009842:	f000 f8e5 	bl	8009a10 <USBD_Get_USB_Status>
 8009846:	4603      	mov	r3, r0
 8009848:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800984a:	7bbb      	ldrb	r3, [r7, #14]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009860:	2300      	movs	r3, #0
 8009862:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009864:	2300      	movs	r3, #0
 8009866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800986e:	78fa      	ldrb	r2, [r7, #3]
 8009870:	4611      	mov	r1, r2
 8009872:	4618      	mov	r0, r3
 8009874:	f7f9 fe54 	bl	8003520 <HAL_PCD_EP_SetStall>
 8009878:	4603      	mov	r3, r0
 800987a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800987c:	7bfb      	ldrb	r3, [r7, #15]
 800987e:	4618      	mov	r0, r3
 8009880:	f000 f8c6 	bl	8009a10 <USBD_Get_USB_Status>
 8009884:	4603      	mov	r3, r0
 8009886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009888:	7bbb      	ldrb	r3, [r7, #14]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	460b      	mov	r3, r1
 800989c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098ac:	78fa      	ldrb	r2, [r7, #3]
 80098ae:	4611      	mov	r1, r2
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7f9 fe99 	bl	80035e8 <HAL_PCD_EP_ClrStall>
 80098b6:	4603      	mov	r3, r0
 80098b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 f8a7 	bl	8009a10 <USBD_Get_USB_Status>
 80098c2:	4603      	mov	r3, r0
 80098c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	460b      	mov	r3, r1
 80098da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	da0b      	bge.n	8009904 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098ec:	78fb      	ldrb	r3, [r7, #3]
 80098ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098f2:	68f9      	ldr	r1, [r7, #12]
 80098f4:	4613      	mov	r3, r2
 80098f6:	00db      	lsls	r3, r3, #3
 80098f8:	1a9b      	subs	r3, r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	440b      	add	r3, r1
 80098fe:	333e      	adds	r3, #62	; 0x3e
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	e00b      	b.n	800991c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009904:	78fb      	ldrb	r3, [r7, #3]
 8009906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800990a:	68f9      	ldr	r1, [r7, #12]
 800990c:	4613      	mov	r3, r2
 800990e:	00db      	lsls	r3, r3, #3
 8009910:	1a9b      	subs	r3, r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	440b      	add	r3, r1
 8009916:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800991a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009942:	78fa      	ldrb	r2, [r7, #3]
 8009944:	4611      	mov	r1, r2
 8009946:	4618      	mov	r0, r3
 8009948:	f7f9 fc66 	bl	8003218 <HAL_PCD_SetAddress>
 800994c:	4603      	mov	r3, r0
 800994e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	4618      	mov	r0, r3
 8009954:	f000 f85c 	bl	8009a10 <USBD_Get_USB_Status>
 8009958:	4603      	mov	r3, r0
 800995a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800995c:	7bbb      	ldrb	r3, [r7, #14]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b086      	sub	sp, #24
 800996a:	af00      	add	r7, sp, #0
 800996c:	60f8      	str	r0, [r7, #12]
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	603b      	str	r3, [r7, #0]
 8009972:	460b      	mov	r3, r1
 8009974:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800997a:	2300      	movs	r3, #0
 800997c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009984:	7af9      	ldrb	r1, [r7, #11]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	f7f9 fd7f 	bl	800348c <HAL_PCD_EP_Transmit>
 800998e:	4603      	mov	r3, r0
 8009990:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009992:	7dfb      	ldrb	r3, [r7, #23]
 8009994:	4618      	mov	r0, r3
 8009996:	f000 f83b 	bl	8009a10 <USBD_Get_USB_Status>
 800999a:	4603      	mov	r3, r0
 800999c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800999e:	7dbb      	ldrb	r3, [r7, #22]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3718      	adds	r7, #24
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	607a      	str	r2, [r7, #4]
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	460b      	mov	r3, r1
 80099b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099c6:	7af9      	ldrb	r1, [r7, #11]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	f7f9 fcfb 	bl	80033c6 <HAL_PCD_EP_Receive>
 80099d0:	4603      	mov	r3, r0
 80099d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
 80099d6:	4618      	mov	r0, r3
 80099d8:	f000 f81a 	bl	8009a10 <USBD_Get_USB_Status>
 80099dc:	4603      	mov	r3, r0
 80099de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b082      	sub	sp, #8
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	460b      	mov	r3, r1
 80099f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099fc:	78fa      	ldrb	r2, [r7, #3]
 80099fe:	4611      	mov	r1, r2
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7f9 fd2b 	bl	800345c <HAL_PCD_EP_GetRxCount>
 8009a06:	4603      	mov	r3, r0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	d817      	bhi.n	8009a54 <USBD_Get_USB_Status+0x44>
 8009a24:	a201      	add	r2, pc, #4	; (adr r2, 8009a2c <USBD_Get_USB_Status+0x1c>)
 8009a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2a:	bf00      	nop
 8009a2c:	08009a3d 	.word	0x08009a3d
 8009a30:	08009a43 	.word	0x08009a43
 8009a34:	08009a49 	.word	0x08009a49
 8009a38:	08009a4f 	.word	0x08009a4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a40:	e00b      	b.n	8009a5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a42:	2303      	movs	r3, #3
 8009a44:	73fb      	strb	r3, [r7, #15]
    break;
 8009a46:	e008      	b.n	8009a5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a4c:	e005      	b.n	8009a5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	73fb      	strb	r3, [r7, #15]
    break;
 8009a52:	e002      	b.n	8009a5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a54:	2303      	movs	r3, #3
 8009a56:	73fb      	strb	r3, [r7, #15]
    break;
 8009a58:	bf00      	nop
  }
  return usb_status;
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3714      	adds	r7, #20
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <__errno>:
 8009a68:	4b01      	ldr	r3, [pc, #4]	; (8009a70 <__errno+0x8>)
 8009a6a:	6818      	ldr	r0, [r3, #0]
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	20000180 	.word	0x20000180

08009a74 <__libc_init_array>:
 8009a74:	b570      	push	{r4, r5, r6, lr}
 8009a76:	4e0d      	ldr	r6, [pc, #52]	; (8009aac <__libc_init_array+0x38>)
 8009a78:	4c0d      	ldr	r4, [pc, #52]	; (8009ab0 <__libc_init_array+0x3c>)
 8009a7a:	1ba4      	subs	r4, r4, r6
 8009a7c:	10a4      	asrs	r4, r4, #2
 8009a7e:	2500      	movs	r5, #0
 8009a80:	42a5      	cmp	r5, r4
 8009a82:	d109      	bne.n	8009a98 <__libc_init_array+0x24>
 8009a84:	4e0b      	ldr	r6, [pc, #44]	; (8009ab4 <__libc_init_array+0x40>)
 8009a86:	4c0c      	ldr	r4, [pc, #48]	; (8009ab8 <__libc_init_array+0x44>)
 8009a88:	f000 f8f6 	bl	8009c78 <_init>
 8009a8c:	1ba4      	subs	r4, r4, r6
 8009a8e:	10a4      	asrs	r4, r4, #2
 8009a90:	2500      	movs	r5, #0
 8009a92:	42a5      	cmp	r5, r4
 8009a94:	d105      	bne.n	8009aa2 <__libc_init_array+0x2e>
 8009a96:	bd70      	pop	{r4, r5, r6, pc}
 8009a98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a9c:	4798      	blx	r3
 8009a9e:	3501      	adds	r5, #1
 8009aa0:	e7ee      	b.n	8009a80 <__libc_init_array+0xc>
 8009aa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009aa6:	4798      	blx	r3
 8009aa8:	3501      	adds	r5, #1
 8009aaa:	e7f2      	b.n	8009a92 <__libc_init_array+0x1e>
 8009aac:	08009d00 	.word	0x08009d00
 8009ab0:	08009d00 	.word	0x08009d00
 8009ab4:	08009d00 	.word	0x08009d00
 8009ab8:	08009d04 	.word	0x08009d04

08009abc <malloc>:
 8009abc:	4b02      	ldr	r3, [pc, #8]	; (8009ac8 <malloc+0xc>)
 8009abe:	4601      	mov	r1, r0
 8009ac0:	6818      	ldr	r0, [r3, #0]
 8009ac2:	f000 b86d 	b.w	8009ba0 <_malloc_r>
 8009ac6:	bf00      	nop
 8009ac8:	20000180 	.word	0x20000180

08009acc <free>:
 8009acc:	4b02      	ldr	r3, [pc, #8]	; (8009ad8 <free+0xc>)
 8009ace:	4601      	mov	r1, r0
 8009ad0:	6818      	ldr	r0, [r3, #0]
 8009ad2:	f000 b817 	b.w	8009b04 <_free_r>
 8009ad6:	bf00      	nop
 8009ad8:	20000180 	.word	0x20000180

08009adc <memcpy>:
 8009adc:	b510      	push	{r4, lr}
 8009ade:	1e43      	subs	r3, r0, #1
 8009ae0:	440a      	add	r2, r1
 8009ae2:	4291      	cmp	r1, r2
 8009ae4:	d100      	bne.n	8009ae8 <memcpy+0xc>
 8009ae6:	bd10      	pop	{r4, pc}
 8009ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009af0:	e7f7      	b.n	8009ae2 <memcpy+0x6>

08009af2 <memset>:
 8009af2:	4402      	add	r2, r0
 8009af4:	4603      	mov	r3, r0
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d100      	bne.n	8009afc <memset+0xa>
 8009afa:	4770      	bx	lr
 8009afc:	f803 1b01 	strb.w	r1, [r3], #1
 8009b00:	e7f9      	b.n	8009af6 <memset+0x4>
	...

08009b04 <_free_r>:
 8009b04:	b538      	push	{r3, r4, r5, lr}
 8009b06:	4605      	mov	r5, r0
 8009b08:	2900      	cmp	r1, #0
 8009b0a:	d045      	beq.n	8009b98 <_free_r+0x94>
 8009b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b10:	1f0c      	subs	r4, r1, #4
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	bfb8      	it	lt
 8009b16:	18e4      	addlt	r4, r4, r3
 8009b18:	f000 f8ac 	bl	8009c74 <__malloc_lock>
 8009b1c:	4a1f      	ldr	r2, [pc, #124]	; (8009b9c <_free_r+0x98>)
 8009b1e:	6813      	ldr	r3, [r2, #0]
 8009b20:	4610      	mov	r0, r2
 8009b22:	b933      	cbnz	r3, 8009b32 <_free_r+0x2e>
 8009b24:	6063      	str	r3, [r4, #4]
 8009b26:	6014      	str	r4, [r2, #0]
 8009b28:	4628      	mov	r0, r5
 8009b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b2e:	f000 b8a2 	b.w	8009c76 <__malloc_unlock>
 8009b32:	42a3      	cmp	r3, r4
 8009b34:	d90c      	bls.n	8009b50 <_free_r+0x4c>
 8009b36:	6821      	ldr	r1, [r4, #0]
 8009b38:	1862      	adds	r2, r4, r1
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	bf04      	itt	eq
 8009b3e:	681a      	ldreq	r2, [r3, #0]
 8009b40:	685b      	ldreq	r3, [r3, #4]
 8009b42:	6063      	str	r3, [r4, #4]
 8009b44:	bf04      	itt	eq
 8009b46:	1852      	addeq	r2, r2, r1
 8009b48:	6022      	streq	r2, [r4, #0]
 8009b4a:	6004      	str	r4, [r0, #0]
 8009b4c:	e7ec      	b.n	8009b28 <_free_r+0x24>
 8009b4e:	4613      	mov	r3, r2
 8009b50:	685a      	ldr	r2, [r3, #4]
 8009b52:	b10a      	cbz	r2, 8009b58 <_free_r+0x54>
 8009b54:	42a2      	cmp	r2, r4
 8009b56:	d9fa      	bls.n	8009b4e <_free_r+0x4a>
 8009b58:	6819      	ldr	r1, [r3, #0]
 8009b5a:	1858      	adds	r0, r3, r1
 8009b5c:	42a0      	cmp	r0, r4
 8009b5e:	d10b      	bne.n	8009b78 <_free_r+0x74>
 8009b60:	6820      	ldr	r0, [r4, #0]
 8009b62:	4401      	add	r1, r0
 8009b64:	1858      	adds	r0, r3, r1
 8009b66:	4282      	cmp	r2, r0
 8009b68:	6019      	str	r1, [r3, #0]
 8009b6a:	d1dd      	bne.n	8009b28 <_free_r+0x24>
 8009b6c:	6810      	ldr	r0, [r2, #0]
 8009b6e:	6852      	ldr	r2, [r2, #4]
 8009b70:	605a      	str	r2, [r3, #4]
 8009b72:	4401      	add	r1, r0
 8009b74:	6019      	str	r1, [r3, #0]
 8009b76:	e7d7      	b.n	8009b28 <_free_r+0x24>
 8009b78:	d902      	bls.n	8009b80 <_free_r+0x7c>
 8009b7a:	230c      	movs	r3, #12
 8009b7c:	602b      	str	r3, [r5, #0]
 8009b7e:	e7d3      	b.n	8009b28 <_free_r+0x24>
 8009b80:	6820      	ldr	r0, [r4, #0]
 8009b82:	1821      	adds	r1, r4, r0
 8009b84:	428a      	cmp	r2, r1
 8009b86:	bf04      	itt	eq
 8009b88:	6811      	ldreq	r1, [r2, #0]
 8009b8a:	6852      	ldreq	r2, [r2, #4]
 8009b8c:	6062      	str	r2, [r4, #4]
 8009b8e:	bf04      	itt	eq
 8009b90:	1809      	addeq	r1, r1, r0
 8009b92:	6021      	streq	r1, [r4, #0]
 8009b94:	605c      	str	r4, [r3, #4]
 8009b96:	e7c7      	b.n	8009b28 <_free_r+0x24>
 8009b98:	bd38      	pop	{r3, r4, r5, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20000208 	.word	0x20000208

08009ba0 <_malloc_r>:
 8009ba0:	b570      	push	{r4, r5, r6, lr}
 8009ba2:	1ccd      	adds	r5, r1, #3
 8009ba4:	f025 0503 	bic.w	r5, r5, #3
 8009ba8:	3508      	adds	r5, #8
 8009baa:	2d0c      	cmp	r5, #12
 8009bac:	bf38      	it	cc
 8009bae:	250c      	movcc	r5, #12
 8009bb0:	2d00      	cmp	r5, #0
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	db01      	blt.n	8009bba <_malloc_r+0x1a>
 8009bb6:	42a9      	cmp	r1, r5
 8009bb8:	d903      	bls.n	8009bc2 <_malloc_r+0x22>
 8009bba:	230c      	movs	r3, #12
 8009bbc:	6033      	str	r3, [r6, #0]
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	bd70      	pop	{r4, r5, r6, pc}
 8009bc2:	f000 f857 	bl	8009c74 <__malloc_lock>
 8009bc6:	4a21      	ldr	r2, [pc, #132]	; (8009c4c <_malloc_r+0xac>)
 8009bc8:	6814      	ldr	r4, [r2, #0]
 8009bca:	4621      	mov	r1, r4
 8009bcc:	b991      	cbnz	r1, 8009bf4 <_malloc_r+0x54>
 8009bce:	4c20      	ldr	r4, [pc, #128]	; (8009c50 <_malloc_r+0xb0>)
 8009bd0:	6823      	ldr	r3, [r4, #0]
 8009bd2:	b91b      	cbnz	r3, 8009bdc <_malloc_r+0x3c>
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	f000 f83d 	bl	8009c54 <_sbrk_r>
 8009bda:	6020      	str	r0, [r4, #0]
 8009bdc:	4629      	mov	r1, r5
 8009bde:	4630      	mov	r0, r6
 8009be0:	f000 f838 	bl	8009c54 <_sbrk_r>
 8009be4:	1c43      	adds	r3, r0, #1
 8009be6:	d124      	bne.n	8009c32 <_malloc_r+0x92>
 8009be8:	230c      	movs	r3, #12
 8009bea:	6033      	str	r3, [r6, #0]
 8009bec:	4630      	mov	r0, r6
 8009bee:	f000 f842 	bl	8009c76 <__malloc_unlock>
 8009bf2:	e7e4      	b.n	8009bbe <_malloc_r+0x1e>
 8009bf4:	680b      	ldr	r3, [r1, #0]
 8009bf6:	1b5b      	subs	r3, r3, r5
 8009bf8:	d418      	bmi.n	8009c2c <_malloc_r+0x8c>
 8009bfa:	2b0b      	cmp	r3, #11
 8009bfc:	d90f      	bls.n	8009c1e <_malloc_r+0x7e>
 8009bfe:	600b      	str	r3, [r1, #0]
 8009c00:	50cd      	str	r5, [r1, r3]
 8009c02:	18cc      	adds	r4, r1, r3
 8009c04:	4630      	mov	r0, r6
 8009c06:	f000 f836 	bl	8009c76 <__malloc_unlock>
 8009c0a:	f104 000b 	add.w	r0, r4, #11
 8009c0e:	1d23      	adds	r3, r4, #4
 8009c10:	f020 0007 	bic.w	r0, r0, #7
 8009c14:	1ac3      	subs	r3, r0, r3
 8009c16:	d0d3      	beq.n	8009bc0 <_malloc_r+0x20>
 8009c18:	425a      	negs	r2, r3
 8009c1a:	50e2      	str	r2, [r4, r3]
 8009c1c:	e7d0      	b.n	8009bc0 <_malloc_r+0x20>
 8009c1e:	428c      	cmp	r4, r1
 8009c20:	684b      	ldr	r3, [r1, #4]
 8009c22:	bf16      	itet	ne
 8009c24:	6063      	strne	r3, [r4, #4]
 8009c26:	6013      	streq	r3, [r2, #0]
 8009c28:	460c      	movne	r4, r1
 8009c2a:	e7eb      	b.n	8009c04 <_malloc_r+0x64>
 8009c2c:	460c      	mov	r4, r1
 8009c2e:	6849      	ldr	r1, [r1, #4]
 8009c30:	e7cc      	b.n	8009bcc <_malloc_r+0x2c>
 8009c32:	1cc4      	adds	r4, r0, #3
 8009c34:	f024 0403 	bic.w	r4, r4, #3
 8009c38:	42a0      	cmp	r0, r4
 8009c3a:	d005      	beq.n	8009c48 <_malloc_r+0xa8>
 8009c3c:	1a21      	subs	r1, r4, r0
 8009c3e:	4630      	mov	r0, r6
 8009c40:	f000 f808 	bl	8009c54 <_sbrk_r>
 8009c44:	3001      	adds	r0, #1
 8009c46:	d0cf      	beq.n	8009be8 <_malloc_r+0x48>
 8009c48:	6025      	str	r5, [r4, #0]
 8009c4a:	e7db      	b.n	8009c04 <_malloc_r+0x64>
 8009c4c:	20000208 	.word	0x20000208
 8009c50:	2000020c 	.word	0x2000020c

08009c54 <_sbrk_r>:
 8009c54:	b538      	push	{r3, r4, r5, lr}
 8009c56:	4c06      	ldr	r4, [pc, #24]	; (8009c70 <_sbrk_r+0x1c>)
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4605      	mov	r5, r0
 8009c5c:	4608      	mov	r0, r1
 8009c5e:	6023      	str	r3, [r4, #0]
 8009c60:	f7f7 fabe 	bl	80011e0 <_sbrk>
 8009c64:	1c43      	adds	r3, r0, #1
 8009c66:	d102      	bne.n	8009c6e <_sbrk_r+0x1a>
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	b103      	cbz	r3, 8009c6e <_sbrk_r+0x1a>
 8009c6c:	602b      	str	r3, [r5, #0]
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}
 8009c70:	20001ccc 	.word	0x20001ccc

08009c74 <__malloc_lock>:
 8009c74:	4770      	bx	lr

08009c76 <__malloc_unlock>:
 8009c76:	4770      	bx	lr

08009c78 <_init>:
 8009c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7a:	bf00      	nop
 8009c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c7e:	bc08      	pop	{r3}
 8009c80:	469e      	mov	lr, r3
 8009c82:	4770      	bx	lr

08009c84 <_fini>:
 8009c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c86:	bf00      	nop
 8009c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c8a:	bc08      	pop	{r3}
 8009c8c:	469e      	mov	lr, r3
 8009c8e:	4770      	bx	lr
