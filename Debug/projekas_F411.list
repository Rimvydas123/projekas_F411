
projekas_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a48  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007be0  08007be0  00017be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c40  08007c40  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007c40  08007c40  00017c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c48  08007c48  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c48  08007c48  00017c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c4c  08007c4c  00017c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019ec  200001e4  08007e34  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bd0  08007e34  00021bd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001955b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003544  00000000  00000000  0003976f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001408  00000000  00000000  0003ccb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001280  00000000  00000000  0003e0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019c84  00000000  00000000  0003f340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011126  00000000  00000000  00058fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092949  00000000  00000000  0006a0ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fca33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005580  00000000  00000000  000fcab0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001e4 	.word	0x200001e4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007bc8 	.word	0x08007bc8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001e8 	.word	0x200001e8
 80001d4:	08007bc8 	.word	0x08007bc8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fbfa 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f842 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f988 	bl	80007f8 <MX_GPIO_Init>
  MX_TIM4_Init();
 80004e8:	f000 f8dc 	bl	80006a4 <MX_TIM4_Init>
  MX_SPI1_Init();
 80004ec:	f000 f8a4 	bl	8000638 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004f0:	f000 f958 	bl	80007a4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80004f4:	f006 fd8c 	bl	8007010 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80004f8:	2100      	movs	r1, #0
 80004fa:	4818      	ldr	r0, [pc, #96]	; (800055c <main+0x84>)
 80004fc:	f002 fdd2 	bl	80030a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000500:	2104      	movs	r1, #4
 8000502:	4816      	ldr	r0, [pc, #88]	; (800055c <main+0x84>)
 8000504:	f002 fdce 	bl	80030a4 <HAL_TIM_PWM_Start>
	  		//{
	  			//Receiveflag = 0;
	  			//Motors_Control(receivedData[0], receivedData[2]);
	  		//}
	  //Motors_Control(receivedData[0], receivedData[2]);
	  htim4.Instance->CCR1 = abs(DutyCycle);
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <main+0x88>)
 800050a:	f993 3000 	ldrsb.w	r3, [r3]
 800050e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000512:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <main+0x84>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	635a      	str	r2, [r3, #52]	; 0x34
	  DutyCycle = DutyCycle + 10;
 800051c:	4b10      	ldr	r3, [pc, #64]	; (8000560 <main+0x88>)
 800051e:	f993 3000 	ldrsb.w	r3, [r3]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	330a      	adds	r3, #10
 8000526:	b2db      	uxtb	r3, r3
 8000528:	b25a      	sxtb	r2, r3
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <main+0x88>)
 800052c:	701a      	strb	r2, [r3, #0]
	  if(DutyCycle == 100) DutyCycle=0;
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <main+0x88>)
 8000530:	f993 3000 	ldrsb.w	r3, [r3]
 8000534:	2b64      	cmp	r3, #100	; 0x64
 8000536:	d102      	bne.n	800053e <main+0x66>
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <main+0x88>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 800053e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000542:	f000 fc39 	bl	8000db8 <HAL_Delay>
	  in1_in3(GPIO_PIN_SET); // in1 and in3
 8000546:	2201      	movs	r2, #1
 8000548:	2150      	movs	r1, #80	; 0x50
 800054a:	4806      	ldr	r0, [pc, #24]	; (8000564 <main+0x8c>)
 800054c:	f000 feea 	bl	8001324 <HAL_GPIO_WritePin>
	  in2_in4(GPIO_PIN_RESET);   //in2 and in4
 8000550:	2200      	movs	r2, #0
 8000552:	21a0      	movs	r1, #160	; 0xa0
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <main+0x8c>)
 8000556:	f000 fee5 	bl	8001324 <HAL_GPIO_WritePin>
	  htim4.Instance->CCR1 = abs(DutyCycle);
 800055a:	e7d5      	b.n	8000508 <main+0x30>
 800055c:	20000214 	.word	0x20000214
 8000560:	20000200 	.word	0x20000200
 8000564:	40020000 	.word	0x40020000

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f007 fa64 	bl	8007a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <SystemClock_Config+0xc8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a26      	ldr	r2, [pc, #152]	; (8000630 <SystemClock_Config+0xc8>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <SystemClock_Config+0xc8>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b21      	ldr	r3, [pc, #132]	; (8000634 <SystemClock_Config+0xcc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a20      	ldr	r2, [pc, #128]	; (8000634 <SystemClock_Config+0xcc>)
 80005b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <SystemClock_Config+0xcc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005d8:	2310      	movs	r3, #16
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005dc:	23c0      	movs	r3, #192	; 0xc0
 80005de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 f835 	bl	800265c <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f8:	f000 f9a2 	bl	8000940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fa90 	bl	8002b3c <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000622:	f000 f98d 	bl	8000940 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_SPI1_Init+0x64>)
 800063e:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <MX_SPI1_Init+0x68>)
 8000640:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_SPI1_Init+0x64>)
 8000644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000648:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_SPI1_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_SPI1_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_SPI1_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_SPI1_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_SPI1_Init+0x64>)
 8000664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000668:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_SPI1_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <MX_SPI1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_SPI1_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <MX_SPI1_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_SPI1_Init+0x64>)
 8000684:	220a      	movs	r2, #10
 8000686:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_SPI1_Init+0x64>)
 800068a:	f002 fc47 	bl	8002f1c <HAL_SPI_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000694:	f000 f954 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000298 	.word	0x20000298
 80006a0:	40013000 	.word	0x40013000

080006a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08e      	sub	sp, #56	; 0x38
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	615a      	str	r2, [r3, #20]
 80006d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006d4:	4b31      	ldr	r3, [pc, #196]	; (800079c <MX_TIM4_Init+0xf8>)
 80006d6:	4a32      	ldr	r2, [pc, #200]	; (80007a0 <MX_TIM4_Init+0xfc>)
 80006d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16;
 80006da:	4b30      	ldr	r3, [pc, #192]	; (800079c <MX_TIM4_Init+0xf8>)
 80006dc:	2210      	movs	r2, #16
 80006de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e0:	4b2e      	ldr	r3, [pc, #184]	; (800079c <MX_TIM4_Init+0xf8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <MX_TIM4_Init+0xf8>)
 80006e8:	2264      	movs	r2, #100	; 0x64
 80006ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ec:	4b2b      	ldr	r3, [pc, #172]	; (800079c <MX_TIM4_Init+0xf8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b2a      	ldr	r3, [pc, #168]	; (800079c <MX_TIM4_Init+0xf8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80006f8:	4828      	ldr	r0, [pc, #160]	; (800079c <MX_TIM4_Init+0xf8>)
 80006fa:	f002 fc73 	bl	8002fe4 <HAL_TIM_Base_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000704:	f000 f91c 	bl	8000940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800070e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000712:	4619      	mov	r1, r3
 8000714:	4821      	ldr	r0, [pc, #132]	; (800079c <MX_TIM4_Init+0xf8>)
 8000716:	f002 fdbd 	bl	8003294 <HAL_TIM_ConfigClockSource>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000720:	f000 f90e 	bl	8000940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000724:	481d      	ldr	r0, [pc, #116]	; (800079c <MX_TIM4_Init+0xf8>)
 8000726:	f002 fc88 	bl	800303a <HAL_TIM_PWM_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000730:	f000 f906 	bl	8000940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4619      	mov	r1, r3
 8000742:	4816      	ldr	r0, [pc, #88]	; (800079c <MX_TIM4_Init+0xf8>)
 8000744:	f003 f92a 	bl	800399c <HAL_TIMEx_MasterConfigSynchronization>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800074e:	f000 f8f7 	bl	8000940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000752:	2360      	movs	r3, #96	; 0x60
 8000754:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	4619      	mov	r1, r3
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <MX_TIM4_Init+0xf8>)
 800076a:	f002 fccd 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000774:	f000 f8e4 	bl	8000940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2204      	movs	r2, #4
 800077c:	4619      	mov	r1, r3
 800077e:	4807      	ldr	r0, [pc, #28]	; (800079c <MX_TIM4_Init+0xf8>)
 8000780:	f002 fcc2 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800078a:	f000 f8d9 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800078e:	4803      	ldr	r0, [pc, #12]	; (800079c <MX_TIM4_Init+0xf8>)
 8000790:	f000 f970 	bl	8000a74 <HAL_TIM_MspPostInit>

}
 8000794:	bf00      	nop
 8000796:	3738      	adds	r7, #56	; 0x38
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000214 	.word	0x20000214
 80007a0:	40000800 	.word	0x40000800

080007a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <MX_USART1_UART_Init+0x50>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007dc:	f003 f94c 	bl	8003a78 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007e6:	f000 f8ab 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000258 	.word	0x20000258
 80007f4:	40011000 	.word	0x40011000

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b46      	ldr	r3, [pc, #280]	; (800092c <MX_GPIO_Init+0x134>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a45      	ldr	r2, [pc, #276]	; (800092c <MX_GPIO_Init+0x134>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b43      	ldr	r3, [pc, #268]	; (800092c <MX_GPIO_Init+0x134>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b3f      	ldr	r3, [pc, #252]	; (800092c <MX_GPIO_Init+0x134>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a3e      	ldr	r2, [pc, #248]	; (800092c <MX_GPIO_Init+0x134>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b3c      	ldr	r3, [pc, #240]	; (800092c <MX_GPIO_Init+0x134>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b38      	ldr	r3, [pc, #224]	; (800092c <MX_GPIO_Init+0x134>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a37      	ldr	r2, [pc, #220]	; (800092c <MX_GPIO_Init+0x134>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b35      	ldr	r3, [pc, #212]	; (800092c <MX_GPIO_Init+0x134>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b31      	ldr	r3, [pc, #196]	; (800092c <MX_GPIO_Init+0x134>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a30      	ldr	r2, [pc, #192]	; (800092c <MX_GPIO_Init+0x134>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b2e      	ldr	r3, [pc, #184]	; (800092c <MX_GPIO_Init+0x134>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b2a      	ldr	r3, [pc, #168]	; (800092c <MX_GPIO_Init+0x134>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a29      	ldr	r2, [pc, #164]	; (800092c <MX_GPIO_Init+0x134>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b27      	ldr	r3, [pc, #156]	; (800092c <MX_GPIO_Init+0x134>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	21f0      	movs	r1, #240	; 0xf0
 800089e:	4824      	ldr	r0, [pc, #144]	; (8000930 <MX_GPIO_Init+0x138>)
 80008a0:	f000 fd40 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2130      	movs	r1, #48	; 0x30
 80008a8:	4822      	ldr	r0, [pc, #136]	; (8000934 <MX_GPIO_Init+0x13c>)
 80008aa:	f000 fd3b 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	4821      	ldr	r0, [pc, #132]	; (8000938 <MX_GPIO_Init+0x140>)
 80008b4:	f000 fd36 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT1_Pin OUT2_Pin OUT3_Pin OUT4_Pin */
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin;
 80008b8:	23f0      	movs	r3, #240	; 0xf0
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	4818      	ldr	r0, [pc, #96]	; (8000930 <MX_GPIO_Init+0x138>)
 80008d0:	f000 fba6 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80008d4:	2330      	movs	r3, #48	; 0x30
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4812      	ldr	r0, [pc, #72]	; (8000934 <MX_GPIO_Init+0x13c>)
 80008ec:	f000 fb98 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008f0:	2340      	movs	r3, #64	; 0x40
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_GPIO_Init+0x144>)
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_GPIO_Init+0x140>)
 8000904:	f000 fb8c 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_GPIO_Init+0x140>)
 8000920:	f000 fb7e 	bl	8001020 <HAL_GPIO_Init>

}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000
 8000934:	40020800 	.word	0x40020800
 8000938:	40020400 	.word	0x40020400
 800093c:	10110000 	.word	0x10110000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <HAL_MspInit+0x4c>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_MspInit+0x4c>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <HAL_SPI_MspInit+0x84>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d12b      	bne.n	8000a1a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_SPI_MspInit+0x88>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <HAL_SPI_MspInit+0x88>)
 80009cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_SPI_MspInit+0x88>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_SPI_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <HAL_SPI_MspInit+0x88>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_SPI_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009fa:	2338      	movs	r3, #56	; 0x38
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a0a:	2305      	movs	r3, #5
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_SPI_MspInit+0x8c>)
 8000a16:	f000 fb03 	bl	8001020 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	; 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40013000 	.word	0x40013000
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020400 	.word	0x40020400

08000a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <HAL_TIM_Base_MspInit+0x3c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d10d      	bne.n	8000a5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <HAL_TIM_Base_MspInit+0x40>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <HAL_TIM_Base_MspInit+0x40>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <HAL_TIM_Base_MspInit+0x40>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40000800 	.word	0x40000800
 8000a70:	40023800 	.word	0x40023800

08000a74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a12      	ldr	r2, [pc, #72]	; (8000adc <HAL_TIM_MspPostInit+0x68>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d11e      	bne.n	8000ad4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_TIM_MspPostInit+0x6c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <HAL_TIM_MspPostInit+0x6c>)
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_TIM_MspPostInit+0x6c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0308 	and.w	r3, r3, #8
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ab2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ab6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	4619      	mov	r1, r3
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <HAL_TIM_MspPostInit+0x70>)
 8000ad0:	f000 faa6 	bl	8001020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ad4:	bf00      	nop
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40000800 	.word	0x40000800
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020c00 	.word	0x40020c00

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <HAL_UART_MspInit+0x84>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d12c      	bne.n	8000b64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b14:	f043 0310 	orr.w	r3, r3, #16
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b54:	2307      	movs	r3, #7
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <HAL_UART_MspInit+0x8c>)
 8000b60:	f000 fa5e 	bl	8001020 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40011000 	.word	0x40011000
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 f8d4 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <OTG_FS_IRQHandler+0x10>)
 8000bda:	f000 fd0c 	bl	80015f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200017c4 	.word	0x200017c4

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f006 feda 	bl	80079d0 <__errno>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	230c      	movs	r3, #12
 8000c20:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <_sbrk+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20020000 	.word	0x20020000
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	20000204 	.word	0x20000204
 8000c50:	20001bd0 	.word	0x20001bd0

08000c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <SystemInit+0x28>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5e:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <SystemInit+0x28>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SystemInit+0x28>)
 8000c6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c86:	e003      	b.n	8000c90 <LoopCopyDataInit>

08000c88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c8e:	3104      	adds	r1, #4

08000c90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c90:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c98:	d3f6      	bcc.n	8000c88 <CopyDataInit>
  ldr  r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c9c:	e002      	b.n	8000ca4 <LoopFillZerobss>

08000c9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ca0:	f842 3b04 	str.w	r3, [r2], #4

08000ca4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ca6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ca8:	d3f9      	bcc.n	8000c9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000caa:	f7ff ffd3 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f006 fe95 	bl	80079dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fc11 	bl	80004d8 <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cbc:	08007c50 	.word	0x08007c50
  ldr  r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cc4:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000cc8:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000ccc:	20001bd0 	.word	0x20001bd0

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f94d 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f808 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fe22 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x54>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x58>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f965 	bl	8001006 <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f000 f92d 	bl	8000fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	200002f0 	.word	0x200002f0

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	200002f0 	.word	0x200002f0

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff ffee 	bl	8000da0 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_Delay+0x40>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dde:	bf00      	nop
 8000de0:	f7ff ffde 	bl	8000da0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d8f7      	bhi.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000008 	.word	0x20000008

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 021f 	and.w	r2, r3, #31
 8000e78:	4907      	ldr	r1, [pc, #28]	; (8000e98 <__NVIC_EnableIRQ+0x38>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff29 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc4:	f7ff ff3e 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff ff8e 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff5d 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff31 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffa2 	bl	8000f58 <SysTick_Config>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
 800103a:	e159      	b.n	80012f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800103c:	2201      	movs	r2, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	429a      	cmp	r2, r3
 8001056:	f040 8148 	bne.w	80012ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d00b      	beq.n	800107a <HAL_GPIO_Init+0x5a>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800106e:	2b11      	cmp	r3, #17
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b12      	cmp	r3, #18
 8001078:	d130      	bne.n	80010dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b0:	2201      	movs	r2, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	f003 0201 	and.w	r2, r3, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0xfc>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b12      	cmp	r3, #18
 800111a:	d123      	bne.n	8001164 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	08da      	lsrs	r2, r3, #3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3208      	adds	r2, #8
 8001124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	220f      	movs	r2, #15
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	691a      	ldr	r2, [r3, #16]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	08da      	lsrs	r2, r3, #3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3208      	adds	r2, #8
 800115e:	69b9      	ldr	r1, [r7, #24]
 8001160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0203 	and.w	r2, r3, #3
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 80a2 	beq.w	80012ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b56      	ldr	r3, [pc, #344]	; (8001304 <HAL_GPIO_Init+0x2e4>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a55      	ldr	r2, [pc, #340]	; (8001304 <HAL_GPIO_Init+0x2e4>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b53      	ldr	r3, [pc, #332]	; (8001304 <HAL_GPIO_Init+0x2e4>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c2:	4a51      	ldr	r2, [pc, #324]	; (8001308 <HAL_GPIO_Init+0x2e8>)
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	3302      	adds	r3, #2
 80011ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	220f      	movs	r2, #15
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a48      	ldr	r2, [pc, #288]	; (800130c <HAL_GPIO_Init+0x2ec>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d019      	beq.n	8001222 <HAL_GPIO_Init+0x202>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a47      	ldr	r2, [pc, #284]	; (8001310 <HAL_GPIO_Init+0x2f0>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d013      	beq.n	800121e <HAL_GPIO_Init+0x1fe>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a46      	ldr	r2, [pc, #280]	; (8001314 <HAL_GPIO_Init+0x2f4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00d      	beq.n	800121a <HAL_GPIO_Init+0x1fa>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a45      	ldr	r2, [pc, #276]	; (8001318 <HAL_GPIO_Init+0x2f8>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d007      	beq.n	8001216 <HAL_GPIO_Init+0x1f6>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a44      	ldr	r2, [pc, #272]	; (800131c <HAL_GPIO_Init+0x2fc>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_GPIO_Init+0x1f2>
 800120e:	2304      	movs	r3, #4
 8001210:	e008      	b.n	8001224 <HAL_GPIO_Init+0x204>
 8001212:	2307      	movs	r3, #7
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x204>
 8001216:	2303      	movs	r3, #3
 8001218:	e004      	b.n	8001224 <HAL_GPIO_Init+0x204>
 800121a:	2302      	movs	r3, #2
 800121c:	e002      	b.n	8001224 <HAL_GPIO_Init+0x204>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_GPIO_Init+0x204>
 8001222:	2300      	movs	r3, #0
 8001224:	69fa      	ldr	r2, [r7, #28]
 8001226:	f002 0203 	and.w	r2, r2, #3
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	4093      	lsls	r3, r2
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001234:	4934      	ldr	r1, [pc, #208]	; (8001308 <HAL_GPIO_Init+0x2e8>)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001242:	4b37      	ldr	r3, [pc, #220]	; (8001320 <HAL_GPIO_Init+0x300>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001266:	4a2e      	ldr	r2, [pc, #184]	; (8001320 <HAL_GPIO_Init+0x300>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800126c:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <HAL_GPIO_Init+0x300>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001290:	4a23      	ldr	r2, [pc, #140]	; (8001320 <HAL_GPIO_Init+0x300>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001296:	4b22      	ldr	r3, [pc, #136]	; (8001320 <HAL_GPIO_Init+0x300>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ba:	4a19      	ldr	r2, [pc, #100]	; (8001320 <HAL_GPIO_Init+0x300>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <HAL_GPIO_Init+0x300>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e4:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <HAL_GPIO_Init+0x300>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3301      	adds	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	2b0f      	cmp	r3, #15
 80012f4:	f67f aea2 	bls.w	800103c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f8:	bf00      	nop
 80012fa:	3724      	adds	r7, #36	; 0x24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	40023800 	.word	0x40023800
 8001308:	40013800 	.word	0x40013800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40021000 	.word	0x40021000
 8001320:	40013c00 	.word	0x40013c00

08001324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
 8001330:	4613      	mov	r3, r2
 8001332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001334:	787b      	ldrb	r3, [r7, #1]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001340:	e003      	b.n	800134a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	041a      	lsls	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	619a      	str	r2, [r3, #24]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001356:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001358:	b08f      	sub	sp, #60	; 0x3c
 800135a:	af0a      	add	r7, sp, #40	; 0x28
 800135c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e10f      	b.n	8001588 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d106      	bne.n	8001388 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f006 f832 	bl	80073ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2203      	movs	r2, #3
 800138c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f003 f845 	bl	8004436 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	687e      	ldr	r6, [r7, #4]
 80013b4:	466d      	mov	r5, sp
 80013b6:	f106 0410 	add.w	r4, r6, #16
 80013ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80013ca:	1d33      	adds	r3, r6, #4
 80013cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ce:	6838      	ldr	r0, [r7, #0]
 80013d0:	f002 ff1c 	bl	800420c <USB_CoreInit>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d005      	beq.n	80013e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2202      	movs	r2, #2
 80013de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e0d0      	b.n	8001588 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 f833 	bl	8004458 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	e04a      	b.n	800148e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	1a9b      	subs	r3, r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	333d      	adds	r3, #61	; 0x3d
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	1a9b      	subs	r3, r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	333c      	adds	r3, #60	; 0x3c
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	b298      	uxth	r0, r3
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	1a9b      	subs	r3, r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	3342      	adds	r3, #66	; 0x42
 8001434:	4602      	mov	r2, r0
 8001436:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	333f      	adds	r3, #63	; 0x3f
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	3344      	adds	r3, #68	; 0x44
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	3348      	adds	r3, #72	; 0x48
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	1a9b      	subs	r3, r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	3350      	adds	r3, #80	; 0x50
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	3301      	adds	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	429a      	cmp	r2, r3
 8001496:	d3af      	bcc.n	80013f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	e044      	b.n	8001528 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800149e:	7bfa      	ldrb	r2, [r7, #15]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	1a9b      	subs	r3, r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	440b      	add	r3, r1
 80014d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	1a9b      	subs	r3, r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	1a9b      	subs	r3, r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	1a9b      	subs	r3, r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	3301      	adds	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	7bfa      	ldrb	r2, [r7, #15]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	429a      	cmp	r2, r3
 8001530:	d3b5      	bcc.n	800149e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	687e      	ldr	r6, [r7, #4]
 800153a:	466d      	mov	r5, sp
 800153c:	f106 0410 	add.w	r4, r6, #16
 8001540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001548:	e894 0003 	ldmia.w	r4, {r0, r1}
 800154c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001550:	1d33      	adds	r3, r6, #4
 8001552:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001554:	6838      	ldr	r0, [r7, #0]
 8001556:	f002 ffa9 	bl	80044ac <USB_DevInit>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2202      	movs	r2, #2
 8001564:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e00d      	b.n	8001588 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f003 fff1 	bl	8005568 <USB_DevDisconnect>

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001590 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <HAL_PCD_Start+0x1c>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e020      	b.n	80015ee <HAL_PCD_Start+0x5e>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d109      	bne.n	80015d0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d005      	beq.n	80015d0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 ff1d 	bl	8004414 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 ffa1 	bl	8005526 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015f6:	b590      	push	{r4, r7, lr}
 80015f8:	b08d      	sub	sp, #52	; 0x34
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f004 f85f 	bl	80056d0 <USB_GetMode>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	f040 839d 	bne.w	8001d54 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f003 ffc3 	bl	80055aa <USB_ReadInterrupts>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 8393 	beq.w	8001d52 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f003 ffba 	bl	80055aa <USB_ReadInterrupts>
 8001636:	4603      	mov	r3, r0
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b02      	cmp	r3, #2
 800163e:	d107      	bne.n	8001650 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	695a      	ldr	r2, [r3, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f002 0202 	and.w	r2, r2, #2
 800164e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f003 ffa8 	bl	80055aa <USB_ReadInterrupts>
 800165a:	4603      	mov	r3, r0
 800165c:	f003 0310 	and.w	r3, r3, #16
 8001660:	2b10      	cmp	r3, #16
 8001662:	d161      	bne.n	8001728 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	699a      	ldr	r2, [r3, #24]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0210 	bic.w	r2, r2, #16
 8001672:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	f003 020f 	and.w	r2, r3, #15
 8001680:	4613      	mov	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	1a9b      	subs	r3, r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	3304      	adds	r3, #4
 8001692:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	0c5b      	lsrs	r3, r3, #17
 8001698:	f003 030f 	and.w	r3, r3, #15
 800169c:	2b02      	cmp	r3, #2
 800169e:	d124      	bne.n	80016ea <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d035      	beq.n	8001718 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	091b      	lsrs	r3, r3, #4
 80016b4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	6a38      	ldr	r0, [r7, #32]
 80016c0:	f003 fe0e 	bl	80052e0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016d0:	441a      	add	r2, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	699a      	ldr	r2, [r3, #24]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016e2:	441a      	add	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	619a      	str	r2, [r3, #24]
 80016e8:	e016      	b.n	8001718 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	0c5b      	lsrs	r3, r3, #17
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d110      	bne.n	8001718 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016fc:	2208      	movs	r2, #8
 80016fe:	4619      	mov	r1, r3
 8001700:	6a38      	ldr	r0, [r7, #32]
 8001702:	f003 fded 	bl	80052e0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	699a      	ldr	r2, [r3, #24]
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001712:	441a      	add	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	699a      	ldr	r2, [r3, #24]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0210 	orr.w	r2, r2, #16
 8001726:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f003 ff3c 	bl	80055aa <USB_ReadInterrupts>
 8001732:	4603      	mov	r3, r0
 8001734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001738:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800173c:	d16e      	bne.n	800181c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f003 ff42 	bl	80055d0 <USB_ReadDevAllOutEpInterrupt>
 800174c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800174e:	e062      	b.n	8001816 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d057      	beq.n	800180a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f003 ff67 	bl	8005638 <USB_ReadDevOutEPInterrupt>
 800176a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00c      	beq.n	8001790 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	015a      	lsls	r2, r3, #5
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	4413      	add	r3, r2
 800177e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001782:	461a      	mov	r2, r3
 8001784:	2301      	movs	r3, #1
 8001786:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 fdb0 	bl	80022f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00c      	beq.n	80017b4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	015a      	lsls	r2, r3, #5
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017a6:	461a      	mov	r2, r3
 80017a8:	2308      	movs	r3, #8
 80017aa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 feaa 	bl	8002508 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	015a      	lsls	r2, r3, #5
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ca:	461a      	mov	r2, r3
 80017cc:	2310      	movs	r3, #16
 80017ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d008      	beq.n	80017ec <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	015a      	lsls	r2, r3, #5
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017e6:	461a      	mov	r2, r3
 80017e8:	2320      	movs	r3, #32
 80017ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d009      	beq.n	800180a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	015a      	lsls	r2, r3, #5
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001802:	461a      	mov	r2, r3
 8001804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001808:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	3301      	adds	r3, #1
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001812:	085b      	lsrs	r3, r3, #1
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001818:	2b00      	cmp	r3, #0
 800181a:	d199      	bne.n	8001750 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f003 fec2 	bl	80055aa <USB_ReadInterrupts>
 8001826:	4603      	mov	r3, r0
 8001828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800182c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001830:	f040 80c0 	bne.w	80019b4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f003 fee3 	bl	8005604 <USB_ReadDevAllInEpInterrupt>
 800183e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001844:	e0b2      	b.n	80019ac <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80a7 	beq.w	80019a0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f003 ff09 	bl	8005674 <USB_ReadDevInEPInterrupt>
 8001862:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d057      	beq.n	800191e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	f003 030f 	and.w	r3, r3, #15
 8001874:	2201      	movs	r2, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	43db      	mvns	r3, r3
 8001888:	69f9      	ldr	r1, [r7, #28]
 800188a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800188e:	4013      	ands	r3, r2
 8001890:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	015a      	lsls	r2, r3, #5
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	4413      	add	r3, r2
 800189a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800189e:	461a      	mov	r2, r3
 80018a0:	2301      	movs	r3, #1
 80018a2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d132      	bne.n	8001912 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b0:	4613      	mov	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	1a9b      	subs	r3, r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	3348      	adds	r3, #72	; 0x48
 80018bc:	6819      	ldr	r1, [r3, #0]
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c2:	4613      	mov	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	1a9b      	subs	r3, r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4403      	add	r3, r0
 80018cc:	3344      	adds	r3, #68	; 0x44
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4419      	add	r1, r3
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d6:	4613      	mov	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4403      	add	r3, r0
 80018e0:	3348      	adds	r3, #72	; 0x48
 80018e2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d113      	bne.n	8001912 <HAL_PCD_IRQHandler+0x31c>
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ee:	4613      	mov	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	1a9b      	subs	r3, r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	3350      	adds	r3, #80	; 0x50
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d108      	bne.n	8001912 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800190a:	461a      	mov	r2, r3
 800190c:	2101      	movs	r1, #1
 800190e:	f003 ff11 	bl	8005734 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	b2db      	uxtb	r3, r3
 8001916:	4619      	mov	r1, r3
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f005 fde8 	bl	80074ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	015a      	lsls	r2, r3, #5
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	4413      	add	r3, r2
 8001930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001934:	461a      	mov	r2, r3
 8001936:	2308      	movs	r3, #8
 8001938:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	015a      	lsls	r2, r3, #5
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	4413      	add	r3, r2
 800194c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001950:	461a      	mov	r2, r3
 8001952:	2310      	movs	r3, #16
 8001954:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	015a      	lsls	r2, r3, #5
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	4413      	add	r3, r2
 8001968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800196c:	461a      	mov	r2, r3
 800196e:	2340      	movs	r3, #64	; 0x40
 8001970:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	015a      	lsls	r2, r3, #5
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	4413      	add	r3, r2
 8001984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001988:	461a      	mov	r2, r3
 800198a:	2302      	movs	r3, #2
 800198c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fc1b 	bl	80021d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	3301      	adds	r3, #1
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a8:	085b      	lsrs	r3, r3, #1
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f47f af49 	bne.w	8001846 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 fdf6 	bl	80055aa <USB_ReadInterrupts>
 80019be:	4603      	mov	r3, r0
 80019c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019c8:	d122      	bne.n	8001a10 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d108      	bne.n	80019fa <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019f0:	2100      	movs	r1, #0
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 fe26 	bl	8002644 <HAL_PCDEx_LPM_Callback>
 80019f8:	e002      	b.n	8001a00 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f005 fde4 	bl	80075c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f003 fdc8 	bl	80055aa <USB_ReadInterrupts>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a24:	d112      	bne.n	8001a4c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d102      	bne.n	8001a3c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f005 fda0 	bl	800757c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a4a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 fdaa 	bl	80055aa <USB_ReadInterrupts>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a60:	f040 80c7 	bne.w	8001bf2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a72:	f023 0301 	bic.w	r3, r3, #1
 8001a76:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2110      	movs	r1, #16
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 fe78 	bl	8004774 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a88:	e056      	b.n	8001b38 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	015a      	lsls	r2, r3, #5
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	4413      	add	r3, r2
 8001a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a96:	461a      	mov	r2, r3
 8001a98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a9c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa0:	015a      	lsls	r2, r3, #5
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aae:	0151      	lsls	r1, r2, #5
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	440a      	add	r2, r1
 8001ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ab8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001abc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	015a      	lsls	r2, r3, #5
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ace:	0151      	lsls	r1, r2, #5
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	440a      	add	r2, r1
 8001ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ad8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001adc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	015a      	lsls	r2, r3, #5
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aea:	461a      	mov	r2, r3
 8001aec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001af0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af4:	015a      	lsls	r2, r3, #5
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b02:	0151      	lsls	r1, r2, #5
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	440a      	add	r2, r1
 8001b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b14:	015a      	lsls	r2, r3, #5
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	4413      	add	r3, r2
 8001b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b22:	0151      	lsls	r1, r2, #5
 8001b24:	69fa      	ldr	r2, [r7, #28]
 8001b26:	440a      	add	r2, r1
 8001b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b30:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b34:	3301      	adds	r3, #1
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d3a3      	bcc.n	8001a8a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b50:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b54:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d016      	beq.n	8001b8c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b6e:	f043 030b 	orr.w	r3, r3, #11
 8001b72:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b84:	f043 030b 	orr.w	r3, r3, #11
 8001b88:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8a:	e015      	b.n	8001bb8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b9e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ba2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bb2:	f043 030b 	orr.w	r3, r3, #11
 8001bb6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001bca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f003 fda9 	bl	8005734 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fcd7 	bl	80055aa <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c06:	d124      	bne.n	8001c52 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f003 fd6d 	bl	80056ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 fe0d 	bl	8004836 <USB_GetDevSpeed>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681c      	ldr	r4, [r3, #0]
 8001c28:	f001 f944 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8001c2c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	4620      	mov	r0, r4
 8001c38:	f002 fb4a 	bl	80042d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f005 fc7e 	bl	800753e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	695a      	ldr	r2, [r3, #20]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c50:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f003 fca7 	bl	80055aa <USB_ReadInterrupts>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d10a      	bne.n	8001c7c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f005 fc5b 	bl	8007522 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f002 0208 	and.w	r2, r2, #8
 8001c7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 fc92 	bl	80055aa <USB_ReadInterrupts>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c90:	d10f      	bne.n	8001cb2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f005 fcb3 	bl	8007608 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 fc77 	bl	80055aa <USB_ReadInterrupts>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cc6:	d10f      	bne.n	8001ce8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f005 fc86 	bl	80075e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 fc5c 	bl	80055aa <USB_ReadInterrupts>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cfc:	d10a      	bne.n	8001d14 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f005 fc94 	bl	800762c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695a      	ldr	r2, [r3, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001d12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 fc46 	bl	80055aa <USB_ReadInterrupts>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d115      	bne.n	8001d54 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f005 fc84 	bl	8007648 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6859      	ldr	r1, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	e000      	b.n	8001d54 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001d52:	bf00      	nop
    }
  }
}
 8001d54:	3734      	adds	r7, #52	; 0x34
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd90      	pop	{r4, r7, pc}

08001d5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_PCD_SetAddress+0x1a>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e013      	b.n	8001d9c <HAL_PCD_SetAddress+0x42>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 fba4 	bl	80054da <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	4608      	mov	r0, r1
 8001dae:	4611      	mov	r1, r2
 8001db0:	461a      	mov	r2, r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	70fb      	strb	r3, [r7, #3]
 8001db6:	460b      	mov	r3, r1
 8001db8:	803b      	strh	r3, [r7, #0]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	da0f      	bge.n	8001dea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	f003 020f 	and.w	r2, r3, #15
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	3338      	adds	r3, #56	; 0x38
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	3304      	adds	r3, #4
 8001de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	705a      	strb	r2, [r3, #1]
 8001de8:	e00f      	b.n	8001e0a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f003 020f 	and.w	r2, r3, #15
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	3304      	adds	r3, #4
 8001e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e16:	883a      	ldrh	r2, [r7, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	78ba      	ldrb	r2, [r7, #2]
 8001e20:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e34:	78bb      	ldrb	r3, [r7, #2]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d102      	bne.n	8001e40 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_PCD_EP_Open+0xaa>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e00e      	b.n	8001e6c <HAL_PCD_EP_Open+0xc8>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68f9      	ldr	r1, [r7, #12]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f002 fd0f 	bl	8004880 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001e6a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	da0f      	bge.n	8001ea8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	f003 020f 	and.w	r2, r3, #15
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	3338      	adds	r3, #56	; 0x38
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	705a      	strb	r2, [r3, #1]
 8001ea6:	e00f      	b.n	8001ec8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	f003 020f 	and.w	r2, r3, #15
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	1a9b      	subs	r3, r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_PCD_EP_Close+0x6e>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e00e      	b.n	8001f00 <HAL_PCD_EP_Close+0x8c>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68f9      	ldr	r1, [r7, #12]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f002 fd4d 	bl	8004990 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	460b      	mov	r3, r1
 8001f16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f18:	7afb      	ldrb	r3, [r7, #11]
 8001f1a:	f003 020f 	and.w	r2, r3, #15
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	1a9b      	subs	r3, r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3304      	adds	r3, #4
 8001f30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2200      	movs	r2, #0
 8001f48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f4a:	7afb      	ldrb	r3, [r7, #11]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d102      	bne.n	8001f64 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f64:	7afb      	ldrb	r3, [r7, #11]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	6979      	ldr	r1, [r7, #20]
 8001f7c:	f003 f828 	bl	8004fd0 <USB_EP0StartXfer>
 8001f80:	e008      	b.n	8001f94 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	6979      	ldr	r1, [r7, #20]
 8001f90:	f002 fdda 	bl	8004b48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	f003 020f 	and.w	r2, r3, #15
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	1a9b      	subs	r3, r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001fc0:	681b      	ldr	r3, [r3, #0]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fde:	7afb      	ldrb	r3, [r7, #11]
 8001fe0:	f003 020f 	and.w	r2, r3, #15
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	1a9b      	subs	r3, r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	3338      	adds	r3, #56	; 0x38
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2201      	movs	r2, #1
 800200c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800200e:	7afb      	ldrb	r3, [r7, #11]
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	b2da      	uxtb	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d102      	bne.n	8002028 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002028:	7afb      	ldrb	r3, [r7, #11]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	6979      	ldr	r1, [r7, #20]
 8002040:	f002 ffc6 	bl	8004fd0 <USB_EP0StartXfer>
 8002044:	e008      	b.n	8002058 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	6979      	ldr	r1, [r7, #20]
 8002054:	f002 fd78 	bl	8004b48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 020f 	and.w	r2, r3, #15
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	429a      	cmp	r2, r3
 800207a:	d901      	bls.n	8002080 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e050      	b.n	8002122 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002084:	2b00      	cmp	r3, #0
 8002086:	da0f      	bge.n	80020a8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	f003 020f 	and.w	r2, r3, #15
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	3338      	adds	r3, #56	; 0x38
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4413      	add	r3, r2
 800209c:	3304      	adds	r3, #4
 800209e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	705a      	strb	r2, [r3, #1]
 80020a6:	e00d      	b.n	80020c4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	3304      	adds	r3, #4
 80020bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_PCD_EP_SetStall+0x82>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e01e      	b.n	8002122 <HAL_PCD_EP_SetStall+0xc0>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 f91d 	bl	8005332 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10a      	bne.n	8002118 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	b2d9      	uxtb	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002112:	461a      	mov	r2, r3
 8002114:	f003 fb0e 	bl	8005734 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	f003 020f 	and.w	r2, r3, #15
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	d901      	bls.n	8002148 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e042      	b.n	80021ce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002148:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800214c:	2b00      	cmp	r3, #0
 800214e:	da0f      	bge.n	8002170 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	f003 020f 	and.w	r2, r3, #15
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	3338      	adds	r3, #56	; 0x38
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	4413      	add	r3, r2
 8002164:	3304      	adds	r3, #4
 8002166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2201      	movs	r2, #1
 800216c:	705a      	strb	r2, [r3, #1]
 800216e:	e00f      	b.n	8002190 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	f003 020f 	and.w	r2, r3, #15
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	3304      	adds	r3, #4
 8002188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_PCD_EP_ClrStall+0x86>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e00e      	b.n	80021ce <HAL_PCD_EP_ClrStall+0xa4>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68f9      	ldr	r1, [r7, #12]
 80021be:	4618      	mov	r0, r3
 80021c0:	f003 f925 	bl	800540e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b08a      	sub	sp, #40	; 0x28
 80021da:	af02      	add	r7, sp, #8
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	3338      	adds	r3, #56	; 0x38
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	3304      	adds	r3, #4
 80021fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	429a      	cmp	r2, r3
 8002208:	d901      	bls.n	800220e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e06c      	b.n	80022e8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	429a      	cmp	r2, r3
 8002222:	d902      	bls.n	800222a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3303      	adds	r3, #3
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002232:	e02b      	b.n	800228c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	695a      	ldr	r2, [r3, #20]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	69fa      	ldr	r2, [r7, #28]
 8002246:	429a      	cmp	r2, r3
 8002248:	d902      	bls.n	8002250 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	3303      	adds	r3, #3
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	68d9      	ldr	r1, [r3, #12]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002268:	b2db      	uxtb	r3, r3
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	4603      	mov	r3, r0
 800226e:	6978      	ldr	r0, [r7, #20]
 8002270:	f003 f801 	bl	8005276 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	441a      	add	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	441a      	add	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	b29b      	uxth	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d809      	bhi.n	80022b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d203      	bcs.n	80022b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1be      	bne.n	8002234 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d811      	bhi.n	80022e6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	2201      	movs	r2, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	43db      	mvns	r3, r3
 80022dc:	6939      	ldr	r1, [r7, #16]
 80022de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022e2:	4013      	ands	r3, r2
 80022e4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	333c      	adds	r3, #60	; 0x3c
 8002308:	3304      	adds	r3, #4
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b01      	cmp	r3, #1
 8002324:	f040 80a0 	bne.w	8002468 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d015      	beq.n	800235e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a72      	ldr	r2, [pc, #456]	; (8002500 <PCD_EP_OutXfrComplete_int+0x210>)
 8002336:	4293      	cmp	r3, r2
 8002338:	f240 80dd 	bls.w	80024f6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 80d7 	beq.w	80024f6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002354:	461a      	mov	r2, r3
 8002356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800235a:	6093      	str	r3, [r2, #8]
 800235c:	e0cb      	b.n	80024f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d009      	beq.n	800237c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002374:	461a      	mov	r2, r3
 8002376:	2320      	movs	r3, #32
 8002378:	6093      	str	r3, [r2, #8]
 800237a:	e0bc      	b.n	80024f6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 80b7 	bne.w	80024f6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4a5d      	ldr	r2, [pc, #372]	; (8002500 <PCD_EP_OutXfrComplete_int+0x210>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d90f      	bls.n	80023b0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00a      	beq.n	80023b0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a6:	461a      	mov	r2, r3
 80023a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ac:	6093      	str	r3, [r2, #8]
 80023ae:	e0a2      	b.n	80024f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023c2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	0159      	lsls	r1, r3, #5
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	440b      	add	r3, r1
 80023cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80023d6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4403      	add	r3, r0
 80023e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80023ea:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023fe:	6819      	ldr	r1, [r3, #0]
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4403      	add	r3, r0
 800240e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4419      	add	r1, r3
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	4613      	mov	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	1a9b      	subs	r3, r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4403      	add	r3, r0
 8002424:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002428:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d114      	bne.n	800245a <PCD_EP_OutXfrComplete_int+0x16a>
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d108      	bne.n	800245a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002452:	461a      	mov	r2, r3
 8002454:	2101      	movs	r1, #1
 8002456:	f003 f96d 	bl	8005734 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	4619      	mov	r1, r3
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f005 f829 	bl	80074b8 <HAL_PCD_DataOutStageCallback>
 8002466:	e046      	b.n	80024f6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4a26      	ldr	r2, [pc, #152]	; (8002504 <PCD_EP_OutXfrComplete_int+0x214>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d124      	bne.n	80024ba <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	015a      	lsls	r2, r3, #5
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4413      	add	r3, r2
 8002482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002486:	461a      	mov	r2, r3
 8002488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800248c:	6093      	str	r3, [r2, #8]
 800248e:	e032      	b.n	80024f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b00      	cmp	r3, #0
 8002498:	d008      	beq.n	80024ac <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a6:	461a      	mov	r2, r3
 80024a8:	2320      	movs	r3, #32
 80024aa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	4619      	mov	r1, r3
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f005 f800 	bl	80074b8 <HAL_PCD_DataOutStageCallback>
 80024b8:	e01d      	b.n	80024f6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d114      	bne.n	80024ea <PCD_EP_OutXfrComplete_int+0x1fa>
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	4613      	mov	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d108      	bne.n	80024ea <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024e2:	461a      	mov	r2, r3
 80024e4:	2100      	movs	r1, #0
 80024e6:	f003 f925 	bl	8005734 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	4619      	mov	r1, r3
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f004 ffe1 	bl	80074b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	4f54300a 	.word	0x4f54300a
 8002504:	4f54310a 	.word	0x4f54310a

08002508 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	333c      	adds	r3, #60	; 0x3c
 8002520:	3304      	adds	r3, #4
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4413      	add	r3, r2
 800252e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4a15      	ldr	r2, [pc, #84]	; (8002590 <PCD_EP_OutSetupPacket_int+0x88>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d90e      	bls.n	800255c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002544:	2b00      	cmp	r3, #0
 8002546:	d009      	beq.n	800255c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002554:	461a      	mov	r2, r3
 8002556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800255a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f004 ff99 	bl	8007494 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <PCD_EP_OutSetupPacket_int+0x88>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d90c      	bls.n	8002584 <PCD_EP_OutSetupPacket_int+0x7c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d108      	bne.n	8002584 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800257c:	461a      	mov	r2, r3
 800257e:	2101      	movs	r1, #1
 8002580:	f003 f8d8 	bl	8005734 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	4f54300a 	.word	0x4f54300a

08002594 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
 80025a0:	4613      	mov	r3, r2
 80025a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d107      	bne.n	80025c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025b2:	883b      	ldrh	r3, [r7, #0]
 80025b4:	0419      	lsls	r1, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	430a      	orrs	r2, r1
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
 80025c0:	e028      	b.n	8002614 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	4413      	add	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e00d      	b.n	80025f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	3340      	adds	r3, #64	; 0x40
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	4413      	add	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	3301      	adds	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d3ec      	bcc.n	80025d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025fc:	883b      	ldrh	r3, [r7, #0]
 80025fe:	0418      	lsls	r0, r3, #16
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6819      	ldr	r1, [r3, #0]
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	3b01      	subs	r3, #1
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	4302      	orrs	r2, r0
 800260c:	3340      	adds	r3, #64	; 0x40
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e25b      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d075      	beq.n	8002766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800267a:	4ba3      	ldr	r3, [pc, #652]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d00c      	beq.n	80026a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002686:	4ba0      	ldr	r3, [pc, #640]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800268e:	2b08      	cmp	r3, #8
 8002690:	d112      	bne.n	80026b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002692:	4b9d      	ldr	r3, [pc, #628]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800269e:	d10b      	bne.n	80026b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a0:	4b99      	ldr	r3, [pc, #612]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d05b      	beq.n	8002764 <HAL_RCC_OscConfig+0x108>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d157      	bne.n	8002764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e236      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	d106      	bne.n	80026d0 <HAL_RCC_OscConfig+0x74>
 80026c2:	4b91      	ldr	r3, [pc, #580]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a90      	ldr	r2, [pc, #576]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e01d      	b.n	800270c <HAL_RCC_OscConfig+0xb0>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x98>
 80026da:	4b8b      	ldr	r3, [pc, #556]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a8a      	ldr	r2, [pc, #552]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b88      	ldr	r3, [pc, #544]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a87      	ldr	r2, [pc, #540]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e00b      	b.n	800270c <HAL_RCC_OscConfig+0xb0>
 80026f4:	4b84      	ldr	r3, [pc, #528]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a83      	ldr	r2, [pc, #524]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 80026fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b81      	ldr	r3, [pc, #516]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a80      	ldr	r2, [pc, #512]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 8002706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7fe fb44 	bl	8000da0 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800271c:	f7fe fb40 	bl	8000da0 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	; 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e1fb      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b76      	ldr	r3, [pc, #472]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0xc0>
 800273a:	e014      	b.n	8002766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe fb30 	bl	8000da0 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002744:	f7fe fb2c 	bl	8000da0 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1e7      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	4b6c      	ldr	r3, [pc, #432]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0xe8>
 8002762:	e000      	b.n	8002766 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d063      	beq.n	800283a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002772:	4b65      	ldr	r3, [pc, #404]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277e:	4b62      	ldr	r3, [pc, #392]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002786:	2b08      	cmp	r3, #8
 8002788:	d11c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278a:	4b5f      	ldr	r3, [pc, #380]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d116      	bne.n	80027c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	4b5c      	ldr	r3, [pc, #368]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <HAL_RCC_OscConfig+0x152>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d001      	beq.n	80027ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e1bb      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	4b56      	ldr	r3, [pc, #344]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4952      	ldr	r1, [pc, #328]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c2:	e03a      	b.n	800283a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d020      	beq.n	800280e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027cc:	4b4f      	ldr	r3, [pc, #316]	; (800290c <HAL_RCC_OscConfig+0x2b0>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7fe fae5 	bl	8000da0 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027da:	f7fe fae1 	bl	8000da0 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e19c      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	4b46      	ldr	r3, [pc, #280]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	4b43      	ldr	r3, [pc, #268]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4940      	ldr	r1, [pc, #256]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 8002808:	4313      	orrs	r3, r2
 800280a:	600b      	str	r3, [r1, #0]
 800280c:	e015      	b.n	800283a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280e:	4b3f      	ldr	r3, [pc, #252]	; (800290c <HAL_RCC_OscConfig+0x2b0>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fac4 	bl	8000da0 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281c:	f7fe fac0 	bl	8000da0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e17b      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	4b36      	ldr	r3, [pc, #216]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d030      	beq.n	80028a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284e:	4b30      	ldr	r3, [pc, #192]	; (8002910 <HAL_RCC_OscConfig+0x2b4>)
 8002850:	2201      	movs	r2, #1
 8002852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7fe faa4 	bl	8000da0 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800285c:	f7fe faa0 	bl	8000da0 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e15b      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	4b26      	ldr	r3, [pc, #152]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x200>
 800287a:	e015      	b.n	80028a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800287c:	4b24      	ldr	r3, [pc, #144]	; (8002910 <HAL_RCC_OscConfig+0x2b4>)
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7fe fa8d 	bl	8000da0 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288a:	f7fe fa89 	bl	8000da0 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e144      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289c:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 800289e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f0      	bne.n	800288a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80a0 	beq.w	80029f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ba:	4b13      	ldr	r3, [pc, #76]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10f      	bne.n	80028e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	4a0e      	ldr	r2, [pc, #56]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d4:	6413      	str	r3, [r2, #64]	; 0x40
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <HAL_RCC_OscConfig+0x2ac>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e2:	2301      	movs	r3, #1
 80028e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_RCC_OscConfig+0x2b8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d121      	bne.n	8002936 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <HAL_RCC_OscConfig+0x2b8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a07      	ldr	r2, [pc, #28]	; (8002914 <HAL_RCC_OscConfig+0x2b8>)
 80028f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fe:	f7fe fa4f 	bl	8000da0 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	e011      	b.n	800292a <HAL_RCC_OscConfig+0x2ce>
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800
 800290c:	42470000 	.word	0x42470000
 8002910:	42470e80 	.word	0x42470e80
 8002914:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002918:	f7fe fa42 	bl	8000da0 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e0fd      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292a:	4b81      	ldr	r3, [pc, #516]	; (8002b30 <HAL_RCC_OscConfig+0x4d4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d106      	bne.n	800294c <HAL_RCC_OscConfig+0x2f0>
 800293e:	4b7d      	ldr	r3, [pc, #500]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	4a7c      	ldr	r2, [pc, #496]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6713      	str	r3, [r2, #112]	; 0x70
 800294a:	e01c      	b.n	8002986 <HAL_RCC_OscConfig+0x32a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b05      	cmp	r3, #5
 8002952:	d10c      	bne.n	800296e <HAL_RCC_OscConfig+0x312>
 8002954:	4b77      	ldr	r3, [pc, #476]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a76      	ldr	r2, [pc, #472]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
 8002960:	4b74      	ldr	r3, [pc, #464]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	4a73      	ldr	r2, [pc, #460]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6713      	str	r3, [r2, #112]	; 0x70
 800296c:	e00b      	b.n	8002986 <HAL_RCC_OscConfig+0x32a>
 800296e:	4b71      	ldr	r3, [pc, #452]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	4a70      	ldr	r2, [pc, #448]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	6713      	str	r3, [r2, #112]	; 0x70
 800297a:	4b6e      	ldr	r3, [pc, #440]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297e:	4a6d      	ldr	r2, [pc, #436]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 8002980:	f023 0304 	bic.w	r3, r3, #4
 8002984:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d015      	beq.n	80029ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298e:	f7fe fa07 	bl	8000da0 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002994:	e00a      	b.n	80029ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f7fe fa03 	bl	8000da0 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e0bc      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ac:	4b61      	ldr	r3, [pc, #388]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 80029ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0ee      	beq.n	8002996 <HAL_RCC_OscConfig+0x33a>
 80029b8:	e014      	b.n	80029e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ba:	f7fe f9f1 	bl	8000da0 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe f9ed 	bl	8000da0 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e0a6      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d8:	4b56      	ldr	r3, [pc, #344]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ee      	bne.n	80029c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d105      	bne.n	80029f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ea:	4b52      	ldr	r3, [pc, #328]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	4a51      	ldr	r2, [pc, #324]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 80029f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8092 	beq.w	8002b24 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a00:	4b4c      	ldr	r3, [pc, #304]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d05c      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d141      	bne.n	8002a98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a14:	4b48      	ldr	r3, [pc, #288]	; (8002b38 <HAL_RCC_OscConfig+0x4dc>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe f9c1 	bl	8000da0 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe f9bd 	bl	8000da0 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e078      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a34:	4b3f      	ldr	r3, [pc, #252]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	019b      	lsls	r3, r3, #6
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	085b      	lsrs	r3, r3, #1
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	041b      	lsls	r3, r3, #16
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	061b      	lsls	r3, r3, #24
 8002a64:	4933      	ldr	r1, [pc, #204]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a6a:	4b33      	ldr	r3, [pc, #204]	; (8002b38 <HAL_RCC_OscConfig+0x4dc>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe f996 	bl	8000da0 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a78:	f7fe f992 	bl	8000da0 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e04d      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8a:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x41c>
 8002a96:	e045      	b.n	8002b24 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a98:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <HAL_RCC_OscConfig+0x4dc>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9e:	f7fe f97f 	bl	8000da0 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa6:	f7fe f97b 	bl	8000da0 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e036      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab8:	4b1e      	ldr	r3, [pc, #120]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f0      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x44a>
 8002ac4:	e02e      	b.n	8002b24 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e029      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ad2:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <HAL_RCC_OscConfig+0x4d8>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d11c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d115      	bne.n	8002b20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002afa:	4013      	ands	r3, r2
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d10d      	bne.n	8002b20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d106      	bne.n	8002b20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40007000 	.word	0x40007000
 8002b34:	40023800 	.word	0x40023800
 8002b38:	42470060 	.word	0x42470060

08002b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0cc      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b50:	4b68      	ldr	r3, [pc, #416]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d90c      	bls.n	8002b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b65      	ldr	r3, [pc, #404]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b63      	ldr	r3, [pc, #396]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0b8      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d020      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b90:	4b59      	ldr	r3, [pc, #356]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4a58      	ldr	r2, [pc, #352]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ba8:	4b53      	ldr	r3, [pc, #332]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	4a52      	ldr	r2, [pc, #328]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb4:	4b50      	ldr	r3, [pc, #320]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	494d      	ldr	r1, [pc, #308]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d044      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bda:	4b47      	ldr	r3, [pc, #284]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d119      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e07f      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d003      	beq.n	8002bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d107      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfa:	4b3f      	ldr	r3, [pc, #252]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e06f      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0a:	4b3b      	ldr	r3, [pc, #236]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e067      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c1a:	4b37      	ldr	r3, [pc, #220]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f023 0203 	bic.w	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4934      	ldr	r1, [pc, #208]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c2c:	f7fe f8b8 	bl	8000da0 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c32:	e00a      	b.n	8002c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c34:	f7fe f8b4 	bl	8000da0 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e04f      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4a:	4b2b      	ldr	r3, [pc, #172]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 020c 	and.w	r2, r3, #12
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d1eb      	bne.n	8002c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d20c      	bcs.n	8002c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c72:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e032      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c90:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4916      	ldr	r1, [pc, #88]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cae:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	490e      	ldr	r1, [pc, #56]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cc2:	f000 f821 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8002cc6:	4601      	mov	r1, r0
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002cd4:	5cd3      	ldrb	r3, [r2, r3]
 8002cd6:	fa21 f303 	lsr.w	r3, r1, r3
 8002cda:	4a09      	ldr	r2, [pc, #36]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe f818 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023c00 	.word	0x40023c00
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	08007c28 	.word	0x08007c28
 8002d00:	20000000 	.word	0x20000000
 8002d04:	20000004 	.word	0x20000004

08002d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	2300      	movs	r3, #0
 8002d18:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d1e:	4b63      	ldr	r3, [pc, #396]	; (8002eac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d007      	beq.n	8002d3a <HAL_RCC_GetSysClockFreq+0x32>
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d008      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0x38>
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f040 80b4 	bne.w	8002e9c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d34:	4b5e      	ldr	r3, [pc, #376]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d36:	60bb      	str	r3, [r7, #8]
       break;
 8002d38:	e0b3      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d3a:	4b5d      	ldr	r3, [pc, #372]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d3c:	60bb      	str	r3, [r7, #8]
      break;
 8002d3e:	e0b0      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d40:	4b5a      	ldr	r3, [pc, #360]	; (8002eac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d4a:	4b58      	ldr	r3, [pc, #352]	; (8002eac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d04a      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d56:	4b55      	ldr	r3, [pc, #340]	; (8002eac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	099b      	lsrs	r3, r3, #6
 8002d5c:	f04f 0400 	mov.w	r4, #0
 8002d60:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	ea03 0501 	and.w	r5, r3, r1
 8002d6c:	ea04 0602 	and.w	r6, r4, r2
 8002d70:	4629      	mov	r1, r5
 8002d72:	4632      	mov	r2, r6
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	f04f 0400 	mov.w	r4, #0
 8002d7c:	0154      	lsls	r4, r2, #5
 8002d7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d82:	014b      	lsls	r3, r1, #5
 8002d84:	4619      	mov	r1, r3
 8002d86:	4622      	mov	r2, r4
 8002d88:	1b49      	subs	r1, r1, r5
 8002d8a:	eb62 0206 	sbc.w	r2, r2, r6
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	f04f 0400 	mov.w	r4, #0
 8002d96:	0194      	lsls	r4, r2, #6
 8002d98:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d9c:	018b      	lsls	r3, r1, #6
 8002d9e:	1a5b      	subs	r3, r3, r1
 8002da0:	eb64 0402 	sbc.w	r4, r4, r2
 8002da4:	f04f 0100 	mov.w	r1, #0
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	00e2      	lsls	r2, r4, #3
 8002dae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002db2:	00d9      	lsls	r1, r3, #3
 8002db4:	460b      	mov	r3, r1
 8002db6:	4614      	mov	r4, r2
 8002db8:	195b      	adds	r3, r3, r5
 8002dba:	eb44 0406 	adc.w	r4, r4, r6
 8002dbe:	f04f 0100 	mov.w	r1, #0
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	02a2      	lsls	r2, r4, #10
 8002dc8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002dcc:	0299      	lsls	r1, r3, #10
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4614      	mov	r4, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f04f 0400 	mov.w	r4, #0
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4623      	mov	r3, r4
 8002de0:	f7fd f9fa 	bl	80001d8 <__aeabi_uldivmod>
 8002de4:	4603      	mov	r3, r0
 8002de6:	460c      	mov	r4, r1
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	e049      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dec:	4b2f      	ldr	r3, [pc, #188]	; (8002eac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	099b      	lsrs	r3, r3, #6
 8002df2:	f04f 0400 	mov.w	r4, #0
 8002df6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	ea03 0501 	and.w	r5, r3, r1
 8002e02:	ea04 0602 	and.w	r6, r4, r2
 8002e06:	4629      	mov	r1, r5
 8002e08:	4632      	mov	r2, r6
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	f04f 0400 	mov.w	r4, #0
 8002e12:	0154      	lsls	r4, r2, #5
 8002e14:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e18:	014b      	lsls	r3, r1, #5
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4622      	mov	r2, r4
 8002e1e:	1b49      	subs	r1, r1, r5
 8002e20:	eb62 0206 	sbc.w	r2, r2, r6
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	f04f 0400 	mov.w	r4, #0
 8002e2c:	0194      	lsls	r4, r2, #6
 8002e2e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e32:	018b      	lsls	r3, r1, #6
 8002e34:	1a5b      	subs	r3, r3, r1
 8002e36:	eb64 0402 	sbc.w	r4, r4, r2
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	00e2      	lsls	r2, r4, #3
 8002e44:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e48:	00d9      	lsls	r1, r3, #3
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	195b      	adds	r3, r3, r5
 8002e50:	eb44 0406 	adc.w	r4, r4, r6
 8002e54:	f04f 0100 	mov.w	r1, #0
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	02a2      	lsls	r2, r4, #10
 8002e5e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e62:	0299      	lsls	r1, r3, #10
 8002e64:	460b      	mov	r3, r1
 8002e66:	4614      	mov	r4, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f04f 0400 	mov.w	r4, #0
 8002e72:	461a      	mov	r2, r3
 8002e74:	4623      	mov	r3, r4
 8002e76:	f7fd f9af 	bl	80001d8 <__aeabi_uldivmod>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e80:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	0c1b      	lsrs	r3, r3, #16
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e98:	60bb      	str	r3, [r7, #8]
      break;
 8002e9a:	e002      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e9e:	60bb      	str	r3, [r7, #8]
      break;
 8002ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	00f42400 	.word	0x00f42400

08002eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eba:	681b      	ldr	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20000000 	.word	0x20000000

08002ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ed0:	f7ff fff0 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8002ed4:	4601      	mov	r1, r0
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	0a9b      	lsrs	r3, r3, #10
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4a03      	ldr	r2, [pc, #12]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee2:	5cd3      	ldrb	r3, [r2, r3]
 8002ee4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	08007c38 	.word	0x08007c38

08002ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ef8:	f7ff ffdc 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8002efc:	4601      	mov	r1, r0
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	0b5b      	lsrs	r3, r3, #13
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4a03      	ldr	r2, [pc, #12]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0a:	5cd3      	ldrb	r3, [r2, r3]
 8002f0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40023800 	.word	0x40023800
 8002f18:	08007c38 	.word	0x08007c38

08002f1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e056      	b.n	8002fdc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d106      	bne.n	8002f4e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7fd fd29 	bl	80009a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2202      	movs	r2, #2
 8002f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f64:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	ea42 0103 	orr.w	r1, r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	0c1b      	lsrs	r3, r3, #16
 8002fac:	f003 0104 	and.w	r1, r3, #4
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e01d      	b.n	8003032 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fd fd10 	bl	8000a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	4619      	mov	r1, r3
 8003022:	4610      	mov	r0, r2
 8003024:	f000 f9ee 	bl	8003404 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e01d      	b.n	8003088 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d106      	bne.n	8003066 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f815 	bl	8003090 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2202      	movs	r2, #2
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3304      	adds	r3, #4
 8003076:	4619      	mov	r1, r3
 8003078:	4610      	mov	r0, r2
 800307a:	f000 f9c3 	bl	8003404 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2201      	movs	r2, #1
 80030b4:	6839      	ldr	r1, [r7, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fc4a 	bl	8003950 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a10      	ldr	r2, [pc, #64]	; (8003104 <HAL_TIM_PWM_Start+0x60>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d107      	bne.n	80030d6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b06      	cmp	r3, #6
 80030e6:	d007      	beq.n	80030f8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40010000 	.word	0x40010000

08003108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800311e:	2302      	movs	r3, #2
 8003120:	e0b4      	b.n	800328c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2202      	movs	r2, #2
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b0c      	cmp	r3, #12
 8003136:	f200 809f 	bhi.w	8003278 <HAL_TIM_PWM_ConfigChannel+0x170>
 800313a:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003140:	08003175 	.word	0x08003175
 8003144:	08003279 	.word	0x08003279
 8003148:	08003279 	.word	0x08003279
 800314c:	08003279 	.word	0x08003279
 8003150:	080031b5 	.word	0x080031b5
 8003154:	08003279 	.word	0x08003279
 8003158:	08003279 	.word	0x08003279
 800315c:	08003279 	.word	0x08003279
 8003160:	080031f7 	.word	0x080031f7
 8003164:	08003279 	.word	0x08003279
 8003168:	08003279 	.word	0x08003279
 800316c:	08003279 	.word	0x08003279
 8003170:	08003237 	.word	0x08003237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f9c2 	bl	8003504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0208 	orr.w	r2, r2, #8
 800318e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0204 	bic.w	r2, r2, #4
 800319e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6999      	ldr	r1, [r3, #24]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	619a      	str	r2, [r3, #24]
      break;
 80031b2:	e062      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fa08 	bl	80035d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6999      	ldr	r1, [r3, #24]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	021a      	lsls	r2, r3, #8
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	619a      	str	r2, [r3, #24]
      break;
 80031f4:	e041      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fa53 	bl	80036a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0208 	orr.w	r2, r2, #8
 8003210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69da      	ldr	r2, [r3, #28]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0204 	bic.w	r2, r2, #4
 8003220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	69d9      	ldr	r1, [r3, #28]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	61da      	str	r2, [r3, #28]
      break;
 8003234:	e021      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68b9      	ldr	r1, [r7, #8]
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fa9d 	bl	800377c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69da      	ldr	r2, [r3, #28]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69d9      	ldr	r1, [r3, #28]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	021a      	lsls	r2, r3, #8
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	61da      	str	r2, [r3, #28]
      break;
 8003276:	e000      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003278:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_TIM_ConfigClockSource+0x18>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e0a6      	b.n	80033fa <HAL_TIM_ConfigClockSource+0x166>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b40      	cmp	r3, #64	; 0x40
 80032e2:	d067      	beq.n	80033b4 <HAL_TIM_ConfigClockSource+0x120>
 80032e4:	2b40      	cmp	r3, #64	; 0x40
 80032e6:	d80b      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x6c>
 80032e8:	2b10      	cmp	r3, #16
 80032ea:	d073      	beq.n	80033d4 <HAL_TIM_ConfigClockSource+0x140>
 80032ec:	2b10      	cmp	r3, #16
 80032ee:	d802      	bhi.n	80032f6 <HAL_TIM_ConfigClockSource+0x62>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d06f      	beq.n	80033d4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80032f4:	e078      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d06c      	beq.n	80033d4 <HAL_TIM_ConfigClockSource+0x140>
 80032fa:	2b30      	cmp	r3, #48	; 0x30
 80032fc:	d06a      	beq.n	80033d4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80032fe:	e073      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003300:	2b70      	cmp	r3, #112	; 0x70
 8003302:	d00d      	beq.n	8003320 <HAL_TIM_ConfigClockSource+0x8c>
 8003304:	2b70      	cmp	r3, #112	; 0x70
 8003306:	d804      	bhi.n	8003312 <HAL_TIM_ConfigClockSource+0x7e>
 8003308:	2b50      	cmp	r3, #80	; 0x50
 800330a:	d033      	beq.n	8003374 <HAL_TIM_ConfigClockSource+0xe0>
 800330c:	2b60      	cmp	r3, #96	; 0x60
 800330e:	d041      	beq.n	8003394 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003310:	e06a      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003316:	d066      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0x152>
 8003318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331c:	d017      	beq.n	800334e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800331e:	e063      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	6899      	ldr	r1, [r3, #8]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f000 faee 	bl	8003910 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003342:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	609a      	str	r2, [r3, #8]
      break;
 800334c:	e04c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	6899      	ldr	r1, [r3, #8]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f000 fad7 	bl	8003910 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003370:	609a      	str	r2, [r3, #8]
      break;
 8003372:	e039      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	461a      	mov	r2, r3
 8003382:	f000 fa4b 	bl	800381c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2150      	movs	r1, #80	; 0x50
 800338c:	4618      	mov	r0, r3
 800338e:	f000 faa4 	bl	80038da <TIM_ITRx_SetConfig>
      break;
 8003392:	e029      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	461a      	mov	r2, r3
 80033a2:	f000 fa6a 	bl	800387a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2160      	movs	r1, #96	; 0x60
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fa94 	bl	80038da <TIM_ITRx_SetConfig>
      break;
 80033b2:	e019      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	461a      	mov	r2, r3
 80033c2:	f000 fa2b 	bl	800381c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2140      	movs	r1, #64	; 0x40
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fa84 	bl	80038da <TIM_ITRx_SetConfig>
      break;
 80033d2:	e009      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4619      	mov	r1, r3
 80033de:	4610      	mov	r0, r2
 80033e0:	f000 fa7b 	bl	80038da <TIM_ITRx_SetConfig>
      break;
 80033e4:	e000      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80033e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a34      	ldr	r2, [pc, #208]	; (80034e8 <TIM_Base_SetConfig+0xe4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00f      	beq.n	800343c <TIM_Base_SetConfig+0x38>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003422:	d00b      	beq.n	800343c <TIM_Base_SetConfig+0x38>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a31      	ldr	r2, [pc, #196]	; (80034ec <TIM_Base_SetConfig+0xe8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d007      	beq.n	800343c <TIM_Base_SetConfig+0x38>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a30      	ldr	r2, [pc, #192]	; (80034f0 <TIM_Base_SetConfig+0xec>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d003      	beq.n	800343c <TIM_Base_SetConfig+0x38>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a2f      	ldr	r2, [pc, #188]	; (80034f4 <TIM_Base_SetConfig+0xf0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d108      	bne.n	800344e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a25      	ldr	r2, [pc, #148]	; (80034e8 <TIM_Base_SetConfig+0xe4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d01b      	beq.n	800348e <TIM_Base_SetConfig+0x8a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345c:	d017      	beq.n	800348e <TIM_Base_SetConfig+0x8a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a22      	ldr	r2, [pc, #136]	; (80034ec <TIM_Base_SetConfig+0xe8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d013      	beq.n	800348e <TIM_Base_SetConfig+0x8a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a21      	ldr	r2, [pc, #132]	; (80034f0 <TIM_Base_SetConfig+0xec>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00f      	beq.n	800348e <TIM_Base_SetConfig+0x8a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a20      	ldr	r2, [pc, #128]	; (80034f4 <TIM_Base_SetConfig+0xf0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00b      	beq.n	800348e <TIM_Base_SetConfig+0x8a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a1f      	ldr	r2, [pc, #124]	; (80034f8 <TIM_Base_SetConfig+0xf4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d007      	beq.n	800348e <TIM_Base_SetConfig+0x8a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a1e      	ldr	r2, [pc, #120]	; (80034fc <TIM_Base_SetConfig+0xf8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d003      	beq.n	800348e <TIM_Base_SetConfig+0x8a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <TIM_Base_SetConfig+0xfc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d108      	bne.n	80034a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <TIM_Base_SetConfig+0xe4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d103      	bne.n	80034d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	615a      	str	r2, [r3, #20]
}
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40010000 	.word	0x40010000
 80034ec:	40000400 	.word	0x40000400
 80034f0:	40000800 	.word	0x40000800
 80034f4:	40000c00 	.word	0x40000c00
 80034f8:	40014000 	.word	0x40014000
 80034fc:	40014400 	.word	0x40014400
 8003500:	40014800 	.word	0x40014800

08003504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f023 0201 	bic.w	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0303 	bic.w	r3, r3, #3
 800353a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f023 0302 	bic.w	r3, r3, #2
 800354c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a1c      	ldr	r2, [pc, #112]	; (80035cc <TIM_OC1_SetConfig+0xc8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d10c      	bne.n	800357a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f023 0308 	bic.w	r3, r3, #8
 8003566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f023 0304 	bic.w	r3, r3, #4
 8003578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a13      	ldr	r2, [pc, #76]	; (80035cc <TIM_OC1_SetConfig+0xc8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d111      	bne.n	80035a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	621a      	str	r2, [r3, #32]
}
 80035c0:	bf00      	nop
 80035c2:	371c      	adds	r7, #28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	40010000 	.word	0x40010000

080035d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f023 0210 	bic.w	r2, r3, #16
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f023 0320 	bic.w	r3, r3, #32
 800361a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	4313      	orrs	r3, r2
 8003626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a1e      	ldr	r2, [pc, #120]	; (80036a4 <TIM_OC2_SetConfig+0xd4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d10d      	bne.n	800364c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800364a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a15      	ldr	r2, [pc, #84]	; (80036a4 <TIM_OC2_SetConfig+0xd4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d113      	bne.n	800367c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800365a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	621a      	str	r2, [r3, #32]
}
 8003696:	bf00      	nop
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40010000 	.word	0x40010000

080036a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <TIM_OC3_SetConfig+0xd0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d10d      	bne.n	8003722 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800370c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	021b      	lsls	r3, r3, #8
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a14      	ldr	r2, [pc, #80]	; (8003778 <TIM_OC3_SetConfig+0xd0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d113      	bne.n	8003752 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	621a      	str	r2, [r3, #32]
}
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40010000 	.word	0x40010000

0800377c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	031b      	lsls	r3, r3, #12
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a10      	ldr	r2, [pc, #64]	; (8003818 <TIM_OC4_SetConfig+0x9c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d109      	bne.n	80037f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	019b      	lsls	r3, r3, #6
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40010000 	.word	0x40010000

0800381c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	f023 0201 	bic.w	r2, r3, #1
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f023 030a 	bic.w	r3, r3, #10
 8003858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	621a      	str	r2, [r3, #32]
}
 800386e:	bf00      	nop
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800387a:	b480      	push	{r7}
 800387c:	b087      	sub	sp, #28
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f023 0210 	bic.w	r2, r3, #16
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	031b      	lsls	r3, r3, #12
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	621a      	str	r2, [r3, #32]
}
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038da:	b480      	push	{r7}
 80038dc:	b085      	sub	sp, #20
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f043 0307 	orr.w	r3, r3, #7
 80038fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	609a      	str	r2, [r3, #8]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800392a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	021a      	lsls	r2, r3, #8
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	431a      	orrs	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4313      	orrs	r3, r2
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	609a      	str	r2, [r3, #8]
}
 8003944:	bf00      	nop
 8003946:	371c      	adds	r7, #28
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	2201      	movs	r2, #1
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a1a      	ldr	r2, [r3, #32]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	43db      	mvns	r3, r3
 8003972:	401a      	ands	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a1a      	ldr	r2, [r3, #32]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	fa01 f303 	lsl.w	r3, r1, r3
 8003988:	431a      	orrs	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	621a      	str	r2, [r3, #32]
}
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e050      	b.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a1c      	ldr	r2, [pc, #112]	; (8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d018      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a00:	d013      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a18      	ldr	r2, [pc, #96]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00e      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a16      	ldr	r2, [pc, #88]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d009      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a15      	ldr	r2, [pc, #84]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d004      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a13      	ldr	r2, [pc, #76]	; (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10c      	bne.n	8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40010000 	.word	0x40010000
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800
 8003a70:	40000c00 	.word	0x40000c00
 8003a74:	40014000 	.word	0x40014000

08003a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e03f      	b.n	8003b0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd f822 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2224      	movs	r2, #36	; 0x24
 8003aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f829 	bl	8003b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b56:	f023 030c 	bic.w	r3, r3, #12
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	68f9      	ldr	r1, [r7, #12]
 8003b60:	430b      	orrs	r3, r1
 8003b62:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b82:	f040 818b 	bne.w	8003e9c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4ac1      	ldr	r2, [pc, #772]	; (8003e90 <UART_SetConfig+0x37c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d005      	beq.n	8003b9c <UART_SetConfig+0x88>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4abf      	ldr	r2, [pc, #764]	; (8003e94 <UART_SetConfig+0x380>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	f040 80bd 	bne.w	8003d16 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b9c:	f7ff f9aa 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8003ba0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	461d      	mov	r5, r3
 8003ba6:	f04f 0600 	mov.w	r6, #0
 8003baa:	46a8      	mov	r8, r5
 8003bac:	46b1      	mov	r9, r6
 8003bae:	eb18 0308 	adds.w	r3, r8, r8
 8003bb2:	eb49 0409 	adc.w	r4, r9, r9
 8003bb6:	4698      	mov	r8, r3
 8003bb8:	46a1      	mov	r9, r4
 8003bba:	eb18 0805 	adds.w	r8, r8, r5
 8003bbe:	eb49 0906 	adc.w	r9, r9, r6
 8003bc2:	f04f 0100 	mov.w	r1, #0
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bd6:	4688      	mov	r8, r1
 8003bd8:	4691      	mov	r9, r2
 8003bda:	eb18 0005 	adds.w	r0, r8, r5
 8003bde:	eb49 0106 	adc.w	r1, r9, r6
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	461d      	mov	r5, r3
 8003be8:	f04f 0600 	mov.w	r6, #0
 8003bec:	196b      	adds	r3, r5, r5
 8003bee:	eb46 0406 	adc.w	r4, r6, r6
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4623      	mov	r3, r4
 8003bf6:	f7fc faef 	bl	80001d8 <__aeabi_uldivmod>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4ba5      	ldr	r3, [pc, #660]	; (8003e98 <UART_SetConfig+0x384>)
 8003c02:	fba3 2302 	umull	r2, r3, r3, r2
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	461d      	mov	r5, r3
 8003c10:	f04f 0600 	mov.w	r6, #0
 8003c14:	46a9      	mov	r9, r5
 8003c16:	46b2      	mov	sl, r6
 8003c18:	eb19 0309 	adds.w	r3, r9, r9
 8003c1c:	eb4a 040a 	adc.w	r4, sl, sl
 8003c20:	4699      	mov	r9, r3
 8003c22:	46a2      	mov	sl, r4
 8003c24:	eb19 0905 	adds.w	r9, r9, r5
 8003c28:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c2c:	f04f 0100 	mov.w	r1, #0
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c40:	4689      	mov	r9, r1
 8003c42:	4692      	mov	sl, r2
 8003c44:	eb19 0005 	adds.w	r0, r9, r5
 8003c48:	eb4a 0106 	adc.w	r1, sl, r6
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	461d      	mov	r5, r3
 8003c52:	f04f 0600 	mov.w	r6, #0
 8003c56:	196b      	adds	r3, r5, r5
 8003c58:	eb46 0406 	adc.w	r4, r6, r6
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4623      	mov	r3, r4
 8003c60:	f7fc faba 	bl	80001d8 <__aeabi_uldivmod>
 8003c64:	4603      	mov	r3, r0
 8003c66:	460c      	mov	r4, r1
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4b8b      	ldr	r3, [pc, #556]	; (8003e98 <UART_SetConfig+0x384>)
 8003c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	2164      	movs	r1, #100	; 0x64
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	3332      	adds	r3, #50	; 0x32
 8003c7e:	4a86      	ldr	r2, [pc, #536]	; (8003e98 <UART_SetConfig+0x384>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c8c:	4498      	add	r8, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	461d      	mov	r5, r3
 8003c92:	f04f 0600 	mov.w	r6, #0
 8003c96:	46a9      	mov	r9, r5
 8003c98:	46b2      	mov	sl, r6
 8003c9a:	eb19 0309 	adds.w	r3, r9, r9
 8003c9e:	eb4a 040a 	adc.w	r4, sl, sl
 8003ca2:	4699      	mov	r9, r3
 8003ca4:	46a2      	mov	sl, r4
 8003ca6:	eb19 0905 	adds.w	r9, r9, r5
 8003caa:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cae:	f04f 0100 	mov.w	r1, #0
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cc2:	4689      	mov	r9, r1
 8003cc4:	4692      	mov	sl, r2
 8003cc6:	eb19 0005 	adds.w	r0, r9, r5
 8003cca:	eb4a 0106 	adc.w	r1, sl, r6
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	461d      	mov	r5, r3
 8003cd4:	f04f 0600 	mov.w	r6, #0
 8003cd8:	196b      	adds	r3, r5, r5
 8003cda:	eb46 0406 	adc.w	r4, r6, r6
 8003cde:	461a      	mov	r2, r3
 8003ce0:	4623      	mov	r3, r4
 8003ce2:	f7fc fa79 	bl	80001d8 <__aeabi_uldivmod>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	460c      	mov	r4, r1
 8003cea:	461a      	mov	r2, r3
 8003cec:	4b6a      	ldr	r3, [pc, #424]	; (8003e98 <UART_SetConfig+0x384>)
 8003cee:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	2164      	movs	r1, #100	; 0x64
 8003cf6:	fb01 f303 	mul.w	r3, r1, r3
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	3332      	adds	r3, #50	; 0x32
 8003d00:	4a65      	ldr	r2, [pc, #404]	; (8003e98 <UART_SetConfig+0x384>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	f003 0207 	and.w	r2, r3, #7
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4442      	add	r2, r8
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	e26f      	b.n	80041f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d16:	f7ff f8d9 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 8003d1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	461d      	mov	r5, r3
 8003d20:	f04f 0600 	mov.w	r6, #0
 8003d24:	46a8      	mov	r8, r5
 8003d26:	46b1      	mov	r9, r6
 8003d28:	eb18 0308 	adds.w	r3, r8, r8
 8003d2c:	eb49 0409 	adc.w	r4, r9, r9
 8003d30:	4698      	mov	r8, r3
 8003d32:	46a1      	mov	r9, r4
 8003d34:	eb18 0805 	adds.w	r8, r8, r5
 8003d38:	eb49 0906 	adc.w	r9, r9, r6
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d50:	4688      	mov	r8, r1
 8003d52:	4691      	mov	r9, r2
 8003d54:	eb18 0005 	adds.w	r0, r8, r5
 8003d58:	eb49 0106 	adc.w	r1, r9, r6
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	461d      	mov	r5, r3
 8003d62:	f04f 0600 	mov.w	r6, #0
 8003d66:	196b      	adds	r3, r5, r5
 8003d68:	eb46 0406 	adc.w	r4, r6, r6
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4623      	mov	r3, r4
 8003d70:	f7fc fa32 	bl	80001d8 <__aeabi_uldivmod>
 8003d74:	4603      	mov	r3, r0
 8003d76:	460c      	mov	r4, r1
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4b47      	ldr	r3, [pc, #284]	; (8003e98 <UART_SetConfig+0x384>)
 8003d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	461d      	mov	r5, r3
 8003d8a:	f04f 0600 	mov.w	r6, #0
 8003d8e:	46a9      	mov	r9, r5
 8003d90:	46b2      	mov	sl, r6
 8003d92:	eb19 0309 	adds.w	r3, r9, r9
 8003d96:	eb4a 040a 	adc.w	r4, sl, sl
 8003d9a:	4699      	mov	r9, r3
 8003d9c:	46a2      	mov	sl, r4
 8003d9e:	eb19 0905 	adds.w	r9, r9, r5
 8003da2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003da6:	f04f 0100 	mov.w	r1, #0
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003db2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003db6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dba:	4689      	mov	r9, r1
 8003dbc:	4692      	mov	sl, r2
 8003dbe:	eb19 0005 	adds.w	r0, r9, r5
 8003dc2:	eb4a 0106 	adc.w	r1, sl, r6
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	461d      	mov	r5, r3
 8003dcc:	f04f 0600 	mov.w	r6, #0
 8003dd0:	196b      	adds	r3, r5, r5
 8003dd2:	eb46 0406 	adc.w	r4, r6, r6
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4623      	mov	r3, r4
 8003dda:	f7fc f9fd 	bl	80001d8 <__aeabi_uldivmod>
 8003dde:	4603      	mov	r3, r0
 8003de0:	460c      	mov	r4, r1
 8003de2:	461a      	mov	r2, r3
 8003de4:	4b2c      	ldr	r3, [pc, #176]	; (8003e98 <UART_SetConfig+0x384>)
 8003de6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	2164      	movs	r1, #100	; 0x64
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	3332      	adds	r3, #50	; 0x32
 8003df8:	4a27      	ldr	r2, [pc, #156]	; (8003e98 <UART_SetConfig+0x384>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e06:	4498      	add	r8, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	461d      	mov	r5, r3
 8003e0c:	f04f 0600 	mov.w	r6, #0
 8003e10:	46a9      	mov	r9, r5
 8003e12:	46b2      	mov	sl, r6
 8003e14:	eb19 0309 	adds.w	r3, r9, r9
 8003e18:	eb4a 040a 	adc.w	r4, sl, sl
 8003e1c:	4699      	mov	r9, r3
 8003e1e:	46a2      	mov	sl, r4
 8003e20:	eb19 0905 	adds.w	r9, r9, r5
 8003e24:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e28:	f04f 0100 	mov.w	r1, #0
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e3c:	4689      	mov	r9, r1
 8003e3e:	4692      	mov	sl, r2
 8003e40:	eb19 0005 	adds.w	r0, r9, r5
 8003e44:	eb4a 0106 	adc.w	r1, sl, r6
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	461d      	mov	r5, r3
 8003e4e:	f04f 0600 	mov.w	r6, #0
 8003e52:	196b      	adds	r3, r5, r5
 8003e54:	eb46 0406 	adc.w	r4, r6, r6
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4623      	mov	r3, r4
 8003e5c:	f7fc f9bc 	bl	80001d8 <__aeabi_uldivmod>
 8003e60:	4603      	mov	r3, r0
 8003e62:	460c      	mov	r4, r1
 8003e64:	461a      	mov	r2, r3
 8003e66:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <UART_SetConfig+0x384>)
 8003e68:	fba3 1302 	umull	r1, r3, r3, r2
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	2164      	movs	r1, #100	; 0x64
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	3332      	adds	r3, #50	; 0x32
 8003e7a:	4a07      	ldr	r2, [pc, #28]	; (8003e98 <UART_SetConfig+0x384>)
 8003e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	f003 0207 	and.w	r2, r3, #7
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4442      	add	r2, r8
 8003e8c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e8e:	e1b2      	b.n	80041f6 <UART_SetConfig+0x6e2>
 8003e90:	40011000 	.word	0x40011000
 8003e94:	40011400 	.word	0x40011400
 8003e98:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4ad7      	ldr	r2, [pc, #860]	; (8004200 <UART_SetConfig+0x6ec>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d005      	beq.n	8003eb2 <UART_SetConfig+0x39e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4ad6      	ldr	r2, [pc, #856]	; (8004204 <UART_SetConfig+0x6f0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	f040 80d1 	bne.w	8004054 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003eb2:	f7ff f81f 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8003eb6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	469a      	mov	sl, r3
 8003ebc:	f04f 0b00 	mov.w	fp, #0
 8003ec0:	46d0      	mov	r8, sl
 8003ec2:	46d9      	mov	r9, fp
 8003ec4:	eb18 0308 	adds.w	r3, r8, r8
 8003ec8:	eb49 0409 	adc.w	r4, r9, r9
 8003ecc:	4698      	mov	r8, r3
 8003ece:	46a1      	mov	r9, r4
 8003ed0:	eb18 080a 	adds.w	r8, r8, sl
 8003ed4:	eb49 090b 	adc.w	r9, r9, fp
 8003ed8:	f04f 0100 	mov.w	r1, #0
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ee4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ee8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003eec:	4688      	mov	r8, r1
 8003eee:	4691      	mov	r9, r2
 8003ef0:	eb1a 0508 	adds.w	r5, sl, r8
 8003ef4:	eb4b 0609 	adc.w	r6, fp, r9
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4619      	mov	r1, r3
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	f04f 0400 	mov.w	r4, #0
 8003f0a:	0094      	lsls	r4, r2, #2
 8003f0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f10:	008b      	lsls	r3, r1, #2
 8003f12:	461a      	mov	r2, r3
 8003f14:	4623      	mov	r3, r4
 8003f16:	4628      	mov	r0, r5
 8003f18:	4631      	mov	r1, r6
 8003f1a:	f7fc f95d 	bl	80001d8 <__aeabi_uldivmod>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	460c      	mov	r4, r1
 8003f22:	461a      	mov	r2, r3
 8003f24:	4bb8      	ldr	r3, [pc, #736]	; (8004208 <UART_SetConfig+0x6f4>)
 8003f26:	fba3 2302 	umull	r2, r3, r3, r2
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	469b      	mov	fp, r3
 8003f34:	f04f 0c00 	mov.w	ip, #0
 8003f38:	46d9      	mov	r9, fp
 8003f3a:	46e2      	mov	sl, ip
 8003f3c:	eb19 0309 	adds.w	r3, r9, r9
 8003f40:	eb4a 040a 	adc.w	r4, sl, sl
 8003f44:	4699      	mov	r9, r3
 8003f46:	46a2      	mov	sl, r4
 8003f48:	eb19 090b 	adds.w	r9, r9, fp
 8003f4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f50:	f04f 0100 	mov.w	r1, #0
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f64:	4689      	mov	r9, r1
 8003f66:	4692      	mov	sl, r2
 8003f68:	eb1b 0509 	adds.w	r5, fp, r9
 8003f6c:	eb4c 060a 	adc.w	r6, ip, sl
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	4619      	mov	r1, r3
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	f04f 0400 	mov.w	r4, #0
 8003f82:	0094      	lsls	r4, r2, #2
 8003f84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f88:	008b      	lsls	r3, r1, #2
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4623      	mov	r3, r4
 8003f8e:	4628      	mov	r0, r5
 8003f90:	4631      	mov	r1, r6
 8003f92:	f7fc f921 	bl	80001d8 <__aeabi_uldivmod>
 8003f96:	4603      	mov	r3, r0
 8003f98:	460c      	mov	r4, r1
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4b9a      	ldr	r3, [pc, #616]	; (8004208 <UART_SetConfig+0x6f4>)
 8003f9e:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	2164      	movs	r1, #100	; 0x64
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	3332      	adds	r3, #50	; 0x32
 8003fb0:	4a95      	ldr	r2, [pc, #596]	; (8004208 <UART_SetConfig+0x6f4>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fbc:	4498      	add	r8, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	469b      	mov	fp, r3
 8003fc2:	f04f 0c00 	mov.w	ip, #0
 8003fc6:	46d9      	mov	r9, fp
 8003fc8:	46e2      	mov	sl, ip
 8003fca:	eb19 0309 	adds.w	r3, r9, r9
 8003fce:	eb4a 040a 	adc.w	r4, sl, sl
 8003fd2:	4699      	mov	r9, r3
 8003fd4:	46a2      	mov	sl, r4
 8003fd6:	eb19 090b 	adds.w	r9, r9, fp
 8003fda:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fde:	f04f 0100 	mov.w	r1, #0
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ff2:	4689      	mov	r9, r1
 8003ff4:	4692      	mov	sl, r2
 8003ff6:	eb1b 0509 	adds.w	r5, fp, r9
 8003ffa:	eb4c 060a 	adc.w	r6, ip, sl
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	4619      	mov	r1, r3
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	f04f 0400 	mov.w	r4, #0
 8004010:	0094      	lsls	r4, r2, #2
 8004012:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004016:	008b      	lsls	r3, r1, #2
 8004018:	461a      	mov	r2, r3
 800401a:	4623      	mov	r3, r4
 800401c:	4628      	mov	r0, r5
 800401e:	4631      	mov	r1, r6
 8004020:	f7fc f8da 	bl	80001d8 <__aeabi_uldivmod>
 8004024:	4603      	mov	r3, r0
 8004026:	460c      	mov	r4, r1
 8004028:	461a      	mov	r2, r3
 800402a:	4b77      	ldr	r3, [pc, #476]	; (8004208 <UART_SetConfig+0x6f4>)
 800402c:	fba3 1302 	umull	r1, r3, r3, r2
 8004030:	095b      	lsrs	r3, r3, #5
 8004032:	2164      	movs	r1, #100	; 0x64
 8004034:	fb01 f303 	mul.w	r3, r1, r3
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	3332      	adds	r3, #50	; 0x32
 800403e:	4a72      	ldr	r2, [pc, #456]	; (8004208 <UART_SetConfig+0x6f4>)
 8004040:	fba2 2303 	umull	r2, r3, r2, r3
 8004044:	095b      	lsrs	r3, r3, #5
 8004046:	f003 020f 	and.w	r2, r3, #15
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4442      	add	r2, r8
 8004050:	609a      	str	r2, [r3, #8]
 8004052:	e0d0      	b.n	80041f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004054:	f7fe ff3a 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 8004058:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	469a      	mov	sl, r3
 800405e:	f04f 0b00 	mov.w	fp, #0
 8004062:	46d0      	mov	r8, sl
 8004064:	46d9      	mov	r9, fp
 8004066:	eb18 0308 	adds.w	r3, r8, r8
 800406a:	eb49 0409 	adc.w	r4, r9, r9
 800406e:	4698      	mov	r8, r3
 8004070:	46a1      	mov	r9, r4
 8004072:	eb18 080a 	adds.w	r8, r8, sl
 8004076:	eb49 090b 	adc.w	r9, r9, fp
 800407a:	f04f 0100 	mov.w	r1, #0
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004086:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800408a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800408e:	4688      	mov	r8, r1
 8004090:	4691      	mov	r9, r2
 8004092:	eb1a 0508 	adds.w	r5, sl, r8
 8004096:	eb4b 0609 	adc.w	r6, fp, r9
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4619      	mov	r1, r3
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	f04f 0400 	mov.w	r4, #0
 80040ac:	0094      	lsls	r4, r2, #2
 80040ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040b2:	008b      	lsls	r3, r1, #2
 80040b4:	461a      	mov	r2, r3
 80040b6:	4623      	mov	r3, r4
 80040b8:	4628      	mov	r0, r5
 80040ba:	4631      	mov	r1, r6
 80040bc:	f7fc f88c 	bl	80001d8 <__aeabi_uldivmod>
 80040c0:	4603      	mov	r3, r0
 80040c2:	460c      	mov	r4, r1
 80040c4:	461a      	mov	r2, r3
 80040c6:	4b50      	ldr	r3, [pc, #320]	; (8004208 <UART_SetConfig+0x6f4>)
 80040c8:	fba3 2302 	umull	r2, r3, r3, r2
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	469b      	mov	fp, r3
 80040d6:	f04f 0c00 	mov.w	ip, #0
 80040da:	46d9      	mov	r9, fp
 80040dc:	46e2      	mov	sl, ip
 80040de:	eb19 0309 	adds.w	r3, r9, r9
 80040e2:	eb4a 040a 	adc.w	r4, sl, sl
 80040e6:	4699      	mov	r9, r3
 80040e8:	46a2      	mov	sl, r4
 80040ea:	eb19 090b 	adds.w	r9, r9, fp
 80040ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040f2:	f04f 0100 	mov.w	r1, #0
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004102:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004106:	4689      	mov	r9, r1
 8004108:	4692      	mov	sl, r2
 800410a:	eb1b 0509 	adds.w	r5, fp, r9
 800410e:	eb4c 060a 	adc.w	r6, ip, sl
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4619      	mov	r1, r3
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	f04f 0400 	mov.w	r4, #0
 8004124:	0094      	lsls	r4, r2, #2
 8004126:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800412a:	008b      	lsls	r3, r1, #2
 800412c:	461a      	mov	r2, r3
 800412e:	4623      	mov	r3, r4
 8004130:	4628      	mov	r0, r5
 8004132:	4631      	mov	r1, r6
 8004134:	f7fc f850 	bl	80001d8 <__aeabi_uldivmod>
 8004138:	4603      	mov	r3, r0
 800413a:	460c      	mov	r4, r1
 800413c:	461a      	mov	r2, r3
 800413e:	4b32      	ldr	r3, [pc, #200]	; (8004208 <UART_SetConfig+0x6f4>)
 8004140:	fba3 1302 	umull	r1, r3, r3, r2
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	2164      	movs	r1, #100	; 0x64
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	3332      	adds	r3, #50	; 0x32
 8004152:	4a2d      	ldr	r2, [pc, #180]	; (8004208 <UART_SetConfig+0x6f4>)
 8004154:	fba2 2303 	umull	r2, r3, r2, r3
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800415e:	4498      	add	r8, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	469b      	mov	fp, r3
 8004164:	f04f 0c00 	mov.w	ip, #0
 8004168:	46d9      	mov	r9, fp
 800416a:	46e2      	mov	sl, ip
 800416c:	eb19 0309 	adds.w	r3, r9, r9
 8004170:	eb4a 040a 	adc.w	r4, sl, sl
 8004174:	4699      	mov	r9, r3
 8004176:	46a2      	mov	sl, r4
 8004178:	eb19 090b 	adds.w	r9, r9, fp
 800417c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004180:	f04f 0100 	mov.w	r1, #0
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800418c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004190:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004194:	4689      	mov	r9, r1
 8004196:	4692      	mov	sl, r2
 8004198:	eb1b 0509 	adds.w	r5, fp, r9
 800419c:	eb4c 060a 	adc.w	r6, ip, sl
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4619      	mov	r1, r3
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	f04f 0400 	mov.w	r4, #0
 80041b2:	0094      	lsls	r4, r2, #2
 80041b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041b8:	008b      	lsls	r3, r1, #2
 80041ba:	461a      	mov	r2, r3
 80041bc:	4623      	mov	r3, r4
 80041be:	4628      	mov	r0, r5
 80041c0:	4631      	mov	r1, r6
 80041c2:	f7fc f809 	bl	80001d8 <__aeabi_uldivmod>
 80041c6:	4603      	mov	r3, r0
 80041c8:	460c      	mov	r4, r1
 80041ca:	461a      	mov	r2, r3
 80041cc:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <UART_SetConfig+0x6f4>)
 80041ce:	fba3 1302 	umull	r1, r3, r3, r2
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	2164      	movs	r1, #100	; 0x64
 80041d6:	fb01 f303 	mul.w	r3, r1, r3
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	3332      	adds	r3, #50	; 0x32
 80041e0:	4a09      	ldr	r2, [pc, #36]	; (8004208 <UART_SetConfig+0x6f4>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	f003 020f 	and.w	r2, r3, #15
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4442      	add	r2, r8
 80041f2:	609a      	str	r2, [r3, #8]
}
 80041f4:	e7ff      	b.n	80041f6 <UART_SetConfig+0x6e2>
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004200:	40011000 	.word	0x40011000
 8004204:	40011400 	.word	0x40011400
 8004208:	51eb851f 	.word	0x51eb851f

0800420c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800420c:	b084      	sub	sp, #16
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	f107 001c 	add.w	r0, r7, #28
 800421a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	2b01      	cmp	r3, #1
 8004222:	d122      	bne.n	800426a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800424c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800424e:	2b01      	cmp	r3, #1
 8004250:	d105      	bne.n	800425e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f001 fac6 	bl	80057f0 <USB_CoreReset>
 8004264:	4603      	mov	r3, r0
 8004266:	73fb      	strb	r3, [r7, #15]
 8004268:	e01a      	b.n	80042a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f001 faba 	bl	80057f0 <USB_CoreReset>
 800427c:	4603      	mov	r3, r0
 800427e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	639a      	str	r2, [r3, #56]	; 0x38
 8004292:	e005      	b.n	80042a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d10b      	bne.n	80042be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f043 0206 	orr.w	r2, r3, #6
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f043 0220 	orr.w	r2, r3, #32
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042be:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042ca:	b004      	add	sp, #16
 80042cc:	4770      	bx	lr
	...

080042d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	4613      	mov	r3, r2
 80042dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d165      	bne.n	80043b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4a41      	ldr	r2, [pc, #260]	; (80043ec <USB_SetTurnaroundTime+0x11c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d906      	bls.n	80042fa <USB_SetTurnaroundTime+0x2a>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4a40      	ldr	r2, [pc, #256]	; (80043f0 <USB_SetTurnaroundTime+0x120>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d802      	bhi.n	80042fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80042f4:	230f      	movs	r3, #15
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	e062      	b.n	80043c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4a3c      	ldr	r2, [pc, #240]	; (80043f0 <USB_SetTurnaroundTime+0x120>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d906      	bls.n	8004310 <USB_SetTurnaroundTime+0x40>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	4a3b      	ldr	r2, [pc, #236]	; (80043f4 <USB_SetTurnaroundTime+0x124>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d802      	bhi.n	8004310 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800430a:	230e      	movs	r3, #14
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	e057      	b.n	80043c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4a38      	ldr	r2, [pc, #224]	; (80043f4 <USB_SetTurnaroundTime+0x124>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d906      	bls.n	8004326 <USB_SetTurnaroundTime+0x56>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4a37      	ldr	r2, [pc, #220]	; (80043f8 <USB_SetTurnaroundTime+0x128>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d802      	bhi.n	8004326 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004320:	230d      	movs	r3, #13
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	e04c      	b.n	80043c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4a33      	ldr	r2, [pc, #204]	; (80043f8 <USB_SetTurnaroundTime+0x128>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d906      	bls.n	800433c <USB_SetTurnaroundTime+0x6c>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4a32      	ldr	r2, [pc, #200]	; (80043fc <USB_SetTurnaroundTime+0x12c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d802      	bhi.n	800433c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004336:	230c      	movs	r3, #12
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	e041      	b.n	80043c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4a2f      	ldr	r2, [pc, #188]	; (80043fc <USB_SetTurnaroundTime+0x12c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d906      	bls.n	8004352 <USB_SetTurnaroundTime+0x82>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4a2e      	ldr	r2, [pc, #184]	; (8004400 <USB_SetTurnaroundTime+0x130>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d802      	bhi.n	8004352 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800434c:	230b      	movs	r3, #11
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	e036      	b.n	80043c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4a2a      	ldr	r2, [pc, #168]	; (8004400 <USB_SetTurnaroundTime+0x130>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d906      	bls.n	8004368 <USB_SetTurnaroundTime+0x98>
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4a29      	ldr	r2, [pc, #164]	; (8004404 <USB_SetTurnaroundTime+0x134>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d802      	bhi.n	8004368 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004362:	230a      	movs	r3, #10
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	e02b      	b.n	80043c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4a26      	ldr	r2, [pc, #152]	; (8004404 <USB_SetTurnaroundTime+0x134>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d906      	bls.n	800437e <USB_SetTurnaroundTime+0xae>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4a25      	ldr	r2, [pc, #148]	; (8004408 <USB_SetTurnaroundTime+0x138>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d802      	bhi.n	800437e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004378:	2309      	movs	r3, #9
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	e020      	b.n	80043c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	4a21      	ldr	r2, [pc, #132]	; (8004408 <USB_SetTurnaroundTime+0x138>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d906      	bls.n	8004394 <USB_SetTurnaroundTime+0xc4>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4a20      	ldr	r2, [pc, #128]	; (800440c <USB_SetTurnaroundTime+0x13c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d802      	bhi.n	8004394 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800438e:	2308      	movs	r3, #8
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	e015      	b.n	80043c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4a1d      	ldr	r2, [pc, #116]	; (800440c <USB_SetTurnaroundTime+0x13c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d906      	bls.n	80043aa <USB_SetTurnaroundTime+0xda>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4a1c      	ldr	r2, [pc, #112]	; (8004410 <USB_SetTurnaroundTime+0x140>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d802      	bhi.n	80043aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80043a4:	2307      	movs	r3, #7
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	e00a      	b.n	80043c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80043aa:	2306      	movs	r3, #6
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	e007      	b.n	80043c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d102      	bne.n	80043bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80043b6:	2309      	movs	r3, #9
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	e001      	b.n	80043c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80043bc:	2309      	movs	r3, #9
 80043be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	029b      	lsls	r3, r3, #10
 80043d4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80043d8:	431a      	orrs	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	00d8acbf 	.word	0x00d8acbf
 80043f0:	00e4e1bf 	.word	0x00e4e1bf
 80043f4:	00f423ff 	.word	0x00f423ff
 80043f8:	0106737f 	.word	0x0106737f
 80043fc:	011a499f 	.word	0x011a499f
 8004400:	01312cff 	.word	0x01312cff
 8004404:	014ca43f 	.word	0x014ca43f
 8004408:	016e35ff 	.word	0x016e35ff
 800440c:	01a6ab1f 	.word	0x01a6ab1f
 8004410:	01e847ff 	.word	0x01e847ff

08004414 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f043 0201 	orr.w	r2, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f023 0201 	bic.w	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d106      	bne.n	8004484 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	60da      	str	r2, [r3, #12]
 8004482:	e00b      	b.n	800449c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	60da      	str	r2, [r3, #12]
 8004496:	e001      	b.n	800449c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e003      	b.n	80044a4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800449c:	2032      	movs	r0, #50	; 0x32
 800449e:	f7fc fc8b 	bl	8000db8 <HAL_Delay>

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044ac:	b084      	sub	sp, #16
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b086      	sub	sp, #24
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044c6:	2300      	movs	r3, #0
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	e009      	b.n	80044e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	3340      	adds	r3, #64	; 0x40
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	2200      	movs	r2, #0
 80044d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	3301      	adds	r3, #1
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	2b0e      	cmp	r3, #14
 80044e4:	d9f2      	bls.n	80044cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d11c      	bne.n	8004526 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044fa:	f043 0302 	orr.w	r3, r3, #2
 80044fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	639a      	str	r2, [r3, #56]	; 0x38
 8004524:	e00b      	b.n	800453e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004544:	461a      	mov	r2, r3
 8004546:	2300      	movs	r3, #0
 8004548:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004550:	4619      	mov	r1, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004558:	461a      	mov	r2, r3
 800455a:	680b      	ldr	r3, [r1, #0]
 800455c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	2b01      	cmp	r3, #1
 8004562:	d10c      	bne.n	800457e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d104      	bne.n	8004574 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800456a:	2100      	movs	r1, #0
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f949 	bl	8004804 <USB_SetDevSpeed>
 8004572:	e008      	b.n	8004586 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004574:	2101      	movs	r1, #1
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f944 	bl	8004804 <USB_SetDevSpeed>
 800457c:	e003      	b.n	8004586 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800457e:	2103      	movs	r1, #3
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f93f 	bl	8004804 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004586:	2110      	movs	r1, #16
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f8f3 	bl	8004774 <USB_FlushTxFifo>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f911 	bl	80047c0 <USB_FlushRxFifo>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ae:	461a      	mov	r2, r3
 80045b0:	2300      	movs	r3, #0
 80045b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ba:	461a      	mov	r2, r3
 80045bc:	2300      	movs	r3, #0
 80045be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c6:	461a      	mov	r2, r3
 80045c8:	2300      	movs	r3, #0
 80045ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	e043      	b.n	800465a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045e8:	d118      	bne.n	800461c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	461a      	mov	r2, r3
 80045fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	e013      	b.n	800462e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004612:	461a      	mov	r2, r3
 8004614:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e008      	b.n	800462e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004628:	461a      	mov	r2, r3
 800462a:	2300      	movs	r3, #0
 800462c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463a:	461a      	mov	r2, r3
 800463c:	2300      	movs	r3, #0
 800463e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464c:	461a      	mov	r2, r3
 800464e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004652:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	3301      	adds	r3, #1
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	429a      	cmp	r2, r3
 8004660:	d3b7      	bcc.n	80045d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004662:	2300      	movs	r3, #0
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	e043      	b.n	80046f0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800467a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800467e:	d118      	bne.n	80046b2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10a      	bne.n	800469c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004692:	461a      	mov	r2, r3
 8004694:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e013      	b.n	80046c4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	461a      	mov	r2, r3
 80046aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	e008      	b.n	80046c4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046be:	461a      	mov	r2, r3
 80046c0:	2300      	movs	r3, #0
 80046c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d0:	461a      	mov	r2, r3
 80046d2:	2300      	movs	r3, #0
 80046d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e2:	461a      	mov	r2, r3
 80046e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3301      	adds	r3, #1
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d3b7      	bcc.n	8004668 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800470a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004718:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	2b00      	cmp	r3, #0
 800471e:	d105      	bne.n	800472c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	f043 0210 	orr.w	r2, r3, #16
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699a      	ldr	r2, [r3, #24]
 8004730:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <USB_DevInit+0x2c4>)
 8004732:	4313      	orrs	r3, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	f043 0208 	orr.w	r2, r3, #8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800474a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800474c:	2b01      	cmp	r3, #1
 800474e:	d107      	bne.n	8004760 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004758:	f043 0304 	orr.w	r3, r3, #4
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004760:	7dfb      	ldrb	r3, [r7, #23]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800476c:	b004      	add	sp, #16
 800476e:	4770      	bx	lr
 8004770:	803c3800 	.word	0x803c3800

08004774 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	019b      	lsls	r3, r3, #6
 8004786:	f043 0220 	orr.w	r2, r3, #32
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3301      	adds	r3, #1
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4a09      	ldr	r2, [pc, #36]	; (80047bc <USB_FlushTxFifo+0x48>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d901      	bls.n	80047a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e006      	b.n	80047ae <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d0f0      	beq.n	800478e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	00030d40 	.word	0x00030d40

080047c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2210      	movs	r2, #16
 80047d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3301      	adds	r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4a09      	ldr	r2, [pc, #36]	; (8004800 <USB_FlushRxFifo+0x40>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d901      	bls.n	80047e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e006      	b.n	80047f2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b10      	cmp	r3, #16
 80047ee:	d0f0      	beq.n	80047d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	00030d40 	.word	0x00030d40

08004804 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	68f9      	ldr	r1, [r7, #12]
 8004820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004824:	4313      	orrs	r3, r2
 8004826:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004836:	b480      	push	{r7}
 8004838:	b087      	sub	sp, #28
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0306 	and.w	r3, r3, #6
 800484e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d102      	bne.n	800485c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004856:	2300      	movs	r3, #0
 8004858:	75fb      	strb	r3, [r7, #23]
 800485a:	e00a      	b.n	8004872 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d002      	beq.n	8004868 <USB_GetDevSpeed+0x32>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b06      	cmp	r3, #6
 8004866:	d102      	bne.n	800486e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004868:	2302      	movs	r3, #2
 800486a:	75fb      	strb	r3, [r7, #23]
 800486c:	e001      	b.n	8004872 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800486e:	230f      	movs	r3, #15
 8004870:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004872:	7dfb      	ldrb	r3, [r7, #23]
}
 8004874:	4618      	mov	r0, r3
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	785b      	ldrb	r3, [r3, #1]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d13a      	bne.n	8004912 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	2101      	movs	r1, #1
 80048ae:	fa01 f303 	lsl.w	r3, r1, r3
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	68f9      	ldr	r1, [r7, #12]
 80048b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048ba:	4313      	orrs	r3, r2
 80048bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d155      	bne.n	8004980 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	78db      	ldrb	r3, [r3, #3]
 80048ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	059b      	lsls	r3, r3, #22
 80048f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048f8:	4313      	orrs	r3, r2
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	0151      	lsls	r1, r2, #5
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	440a      	add	r2, r1
 8004902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800490a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	e036      	b.n	8004980 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004918:	69da      	ldr	r2, [r3, #28]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	2101      	movs	r1, #1
 8004924:	fa01 f303 	lsl.w	r3, r1, r3
 8004928:	041b      	lsls	r3, r3, #16
 800492a:	68f9      	ldr	r1, [r7, #12]
 800492c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004930:	4313      	orrs	r3, r2
 8004932:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d11a      	bne.n	8004980 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	78db      	ldrb	r3, [r3, #3]
 8004964:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004966:	430b      	orrs	r3, r1
 8004968:	4313      	orrs	r3, r2
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	0151      	lsls	r1, r2, #5
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	440a      	add	r2, r1
 8004972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800497e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d161      	bne.n	8004a70 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049c2:	d11f      	bne.n	8004a04 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	0151      	lsls	r1, r2, #5
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	440a      	add	r2, r1
 80049da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	0151      	lsls	r1, r2, #5
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	440a      	add	r2, r1
 80049fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	2101      	movs	r1, #1
 8004a16:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	68f9      	ldr	r1, [r7, #12]
 8004a20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a24:	4013      	ands	r3, r2
 8004a26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2e:	69da      	ldr	r2, [r3, #28]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	2101      	movs	r1, #1
 8004a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	43db      	mvns	r3, r3
 8004a42:	68f9      	ldr	r1, [r7, #12]
 8004a44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	0159      	lsls	r1, r3, #5
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	440b      	add	r3, r1
 8004a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a66:	4619      	mov	r1, r3
 8004a68:	4b35      	ldr	r3, [pc, #212]	; (8004b40 <USB_DeactivateEndpoint+0x1b0>)
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	600b      	str	r3, [r1, #0]
 8004a6e:	e060      	b.n	8004b32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a86:	d11f      	bne.n	8004ac8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	0151      	lsls	r1, r2, #5
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	440a      	add	r2, r1
 8004a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004aa6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	0151      	lsls	r1, r2, #5
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	440a      	add	r2, r1
 8004abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ac6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	2101      	movs	r1, #1
 8004ada:	fa01 f303 	lsl.w	r3, r1, r3
 8004ade:	041b      	lsls	r3, r3, #16
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	68f9      	ldr	r1, [r7, #12]
 8004ae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ae8:	4013      	ands	r3, r2
 8004aea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af2:	69da      	ldr	r2, [r3, #28]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	2101      	movs	r1, #1
 8004afe:	fa01 f303 	lsl.w	r3, r1, r3
 8004b02:	041b      	lsls	r3, r3, #16
 8004b04:	43db      	mvns	r3, r3
 8004b06:	68f9      	ldr	r1, [r7, #12]
 8004b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	0159      	lsls	r1, r3, #5
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	440b      	add	r3, r1
 8004b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <USB_DeactivateEndpoint+0x1b4>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	ec337800 	.word	0xec337800
 8004b44:	eff37800 	.word	0xeff37800

08004b48 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08a      	sub	sp, #40	; 0x28
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	4613      	mov	r3, r2
 8004b54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	785b      	ldrb	r3, [r3, #1]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	f040 815c 	bne.w	8004e22 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d132      	bne.n	8004bd8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	0151      	lsls	r1, r2, #5
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	440a      	add	r2, r1
 8004b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	0151      	lsls	r1, r2, #5
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	440a      	add	r2, r1
 8004bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	0151      	lsls	r1, r2, #5
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	440a      	add	r2, r1
 8004bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd0:	0cdb      	lsrs	r3, r3, #19
 8004bd2:	04db      	lsls	r3, r3, #19
 8004bd4:	6113      	str	r3, [r2, #16]
 8004bd6:	e074      	b.n	8004cc2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	0151      	lsls	r1, r2, #5
 8004bea:	69fa      	ldr	r2, [r7, #28]
 8004bec:	440a      	add	r2, r1
 8004bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf2:	0cdb      	lsrs	r3, r3, #19
 8004bf4:	04db      	lsls	r3, r3, #19
 8004bf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c28:	691a      	ldr	r2, [r3, #16]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	6959      	ldr	r1, [r3, #20]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	440b      	add	r3, r1
 8004c34:	1e59      	subs	r1, r3, #1
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c3e:	04d9      	lsls	r1, r3, #19
 8004c40:	4b9d      	ldr	r3, [pc, #628]	; (8004eb8 <USB_EPStartXfer+0x370>)
 8004c42:	400b      	ands	r3, r1
 8004c44:	69b9      	ldr	r1, [r7, #24]
 8004c46:	0148      	lsls	r0, r1, #5
 8004c48:	69f9      	ldr	r1, [r7, #28]
 8004c4a:	4401      	add	r1, r0
 8004c4c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c50:	4313      	orrs	r3, r2
 8004c52:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c60:	691a      	ldr	r2, [r3, #16]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c6a:	69b9      	ldr	r1, [r7, #24]
 8004c6c:	0148      	lsls	r0, r1, #5
 8004c6e:	69f9      	ldr	r1, [r7, #28]
 8004c70:	4401      	add	r1, r0
 8004c72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c76:	4313      	orrs	r3, r2
 8004c78:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	78db      	ldrb	r3, [r3, #3]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d11f      	bne.n	8004cc2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ca0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	0151      	lsls	r1, r2, #5
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	440a      	add	r2, r1
 8004cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cc0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d14b      	bne.n	8004d60 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d009      	beq.n	8004ce4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cdc:	461a      	mov	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	78db      	ldrb	r3, [r3, #3]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d128      	bne.n	8004d3e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d110      	bne.n	8004d1e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	0151      	lsls	r1, r2, #5
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	440a      	add	r2, r1
 8004d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	e00f      	b.n	8004d3e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	0151      	lsls	r1, r2, #5
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	440a      	add	r2, r1
 8004d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	0151      	lsls	r1, r2, #5
 8004d50:	69fa      	ldr	r2, [r7, #28]
 8004d52:	440a      	add	r2, r1
 8004d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	e12f      	b.n	8004fc0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	0151      	lsls	r1, r2, #5
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	440a      	add	r2, r1
 8004d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d7e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	78db      	ldrb	r3, [r3, #3]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d015      	beq.n	8004db4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8117 	beq.w	8004fc0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	2101      	movs	r1, #1
 8004da4:	fa01 f303 	lsl.w	r3, r1, r3
 8004da8:	69f9      	ldr	r1, [r7, #28]
 8004daa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dae:	4313      	orrs	r3, r2
 8004db0:	634b      	str	r3, [r1, #52]	; 0x34
 8004db2:	e105      	b.n	8004fc0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d110      	bne.n	8004de6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	0151      	lsls	r1, r2, #5
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	440a      	add	r2, r1
 8004dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	e00f      	b.n	8004e06 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	0151      	lsls	r1, r2, #5
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	440a      	add	r2, r1
 8004dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e04:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	68d9      	ldr	r1, [r3, #12]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	781a      	ldrb	r2, [r3, #0]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	b298      	uxth	r0, r3
 8004e14:	79fb      	ldrb	r3, [r7, #7]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	4603      	mov	r3, r0
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 fa2b 	bl	8005276 <USB_WritePacket>
 8004e20:	e0ce      	b.n	8004fc0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	0151      	lsls	r1, r2, #5
 8004e34:	69fa      	ldr	r2, [r7, #28]
 8004e36:	440a      	add	r2, r1
 8004e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e3c:	0cdb      	lsrs	r3, r3, #19
 8004e3e:	04db      	lsls	r3, r3, #19
 8004e40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	0151      	lsls	r1, r2, #5
 8004e54:	69fa      	ldr	r2, [r7, #28]
 8004e56:	440a      	add	r2, r1
 8004e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e64:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d126      	bne.n	8004ebc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e84:	69b9      	ldr	r1, [r7, #24]
 8004e86:	0148      	lsls	r0, r1, #5
 8004e88:	69f9      	ldr	r1, [r7, #28]
 8004e8a:	4401      	add	r1, r0
 8004e8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e90:	4313      	orrs	r3, r2
 8004e92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eb2:	6113      	str	r3, [r2, #16]
 8004eb4:	e036      	b.n	8004f24 <USB_EPStartXfer+0x3dc>
 8004eb6:	bf00      	nop
 8004eb8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	695a      	ldr	r2, [r3, #20]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	1e5a      	subs	r2, r3, #1
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	8afb      	ldrh	r3, [r7, #22]
 8004ee2:	04d9      	lsls	r1, r3, #19
 8004ee4:	4b39      	ldr	r3, [pc, #228]	; (8004fcc <USB_EPStartXfer+0x484>)
 8004ee6:	400b      	ands	r3, r1
 8004ee8:	69b9      	ldr	r1, [r7, #24]
 8004eea:	0148      	lsls	r0, r1, #5
 8004eec:	69f9      	ldr	r1, [r7, #28]
 8004eee:	4401      	add	r1, r0
 8004ef0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	8af9      	ldrh	r1, [r7, #22]
 8004f0c:	fb01 f303 	mul.w	r3, r1, r3
 8004f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f14:	69b9      	ldr	r1, [r7, #24]
 8004f16:	0148      	lsls	r0, r1, #5
 8004f18:	69f9      	ldr	r1, [r7, #28]
 8004f1a:	4401      	add	r1, r0
 8004f1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f20:	4313      	orrs	r3, r2
 8004f22:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d10d      	bne.n	8004f46 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	68d9      	ldr	r1, [r3, #12]
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f42:	460a      	mov	r2, r1
 8004f44:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	78db      	ldrb	r3, [r3, #3]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d128      	bne.n	8004fa0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d110      	bne.n	8004f80 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	0151      	lsls	r1, r2, #5
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	440a      	add	r2, r1
 8004f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	e00f      	b.n	8004fa0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	0151      	lsls	r1, r2, #5
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	440a      	add	r2, r1
 8004f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	0151      	lsls	r1, r2, #5
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	440a      	add	r2, r1
 8004fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3720      	adds	r7, #32
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	1ff80000 	.word	0x1ff80000

08004fd0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	785b      	ldrb	r3, [r3, #1]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	f040 80cd 	bne.w	800518c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d132      	bne.n	8005060 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	0151      	lsls	r1, r2, #5
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	440a      	add	r2, r1
 8005010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005014:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005018:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800501c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	0151      	lsls	r1, r2, #5
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	440a      	add	r2, r1
 8005034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005038:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800503c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	0151      	lsls	r1, r2, #5
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	440a      	add	r2, r1
 8005054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005058:	0cdb      	lsrs	r3, r3, #19
 800505a:	04db      	lsls	r3, r3, #19
 800505c:	6113      	str	r3, [r2, #16]
 800505e:	e04e      	b.n	80050fe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	0151      	lsls	r1, r2, #5
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	440a      	add	r2, r1
 8005076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507a:	0cdb      	lsrs	r3, r3, #19
 800507c:	04db      	lsls	r3, r3, #19
 800507e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	440a      	add	r2, r1
 8005096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800509a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800509e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050a2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	695a      	ldr	r2, [r3, #20]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d903      	bls.n	80050b8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	0151      	lsls	r1, r2, #5
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	440a      	add	r2, r1
 80050ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e4:	691a      	ldr	r2, [r3, #16]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ee:	6939      	ldr	r1, [r7, #16]
 80050f0:	0148      	lsls	r0, r1, #5
 80050f2:	6979      	ldr	r1, [r7, #20]
 80050f4:	4401      	add	r1, r0
 80050f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050fa:	4313      	orrs	r3, r2
 80050fc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d11e      	bne.n	8005142 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d009      	beq.n	8005120 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005118:	461a      	mov	r2, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	0151      	lsls	r1, r2, #5
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	440a      	add	r2, r1
 8005136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800513a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	e092      	b.n	8005268 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	0151      	lsls	r1, r2, #5
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	440a      	add	r2, r1
 8005158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800515c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005160:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d07e      	beq.n	8005268 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	2101      	movs	r1, #1
 800517c:	fa01 f303 	lsl.w	r3, r1, r3
 8005180:	6979      	ldr	r1, [r7, #20]
 8005182:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005186:	4313      	orrs	r3, r2
 8005188:	634b      	str	r3, [r1, #52]	; 0x34
 800518a:	e06d      	b.n	8005268 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	0151      	lsls	r1, r2, #5
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	440a      	add	r2, r1
 80051a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a6:	0cdb      	lsrs	r3, r3, #19
 80051a8:	04db      	lsls	r3, r3, #19
 80051aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	0151      	lsls	r1, r2, #5
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	440a      	add	r2, r1
 80051c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051ce:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520c:	691a      	ldr	r2, [r3, #16]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005216:	6939      	ldr	r1, [r7, #16]
 8005218:	0148      	lsls	r0, r1, #5
 800521a:	6979      	ldr	r1, [r7, #20]
 800521c:	4401      	add	r1, r0
 800521e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005222:	4313      	orrs	r3, r2
 8005224:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d10d      	bne.n	8005248 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d009      	beq.n	8005248 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	68d9      	ldr	r1, [r3, #12]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005244:	460a      	mov	r2, r1
 8005246:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	440a      	add	r2, r1
 800525e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005262:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005266:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005276:	b480      	push	{r7}
 8005278:	b089      	sub	sp, #36	; 0x24
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	4611      	mov	r1, r2
 8005282:	461a      	mov	r2, r3
 8005284:	460b      	mov	r3, r1
 8005286:	71fb      	strb	r3, [r7, #7]
 8005288:	4613      	mov	r3, r2
 800528a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005294:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005298:	2b00      	cmp	r3, #0
 800529a:	d11a      	bne.n	80052d2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800529c:	88bb      	ldrh	r3, [r7, #4]
 800529e:	3303      	adds	r3, #3
 80052a0:	089b      	lsrs	r3, r3, #2
 80052a2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80052a4:	2300      	movs	r3, #0
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	e00f      	b.n	80052ca <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	031a      	lsls	r2, r3, #12
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b6:	461a      	mov	r2, r3
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	3304      	adds	r3, #4
 80052c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	3301      	adds	r3, #1
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d3eb      	bcc.n	80052aa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3724      	adds	r7, #36	; 0x24
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b089      	sub	sp, #36	; 0x24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80052f6:	88fb      	ldrh	r3, [r7, #6]
 80052f8:	3303      	adds	r3, #3
 80052fa:	089b      	lsrs	r3, r3, #2
 80052fc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80052fe:	2300      	movs	r3, #0
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	e00b      	b.n	800531c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	3304      	adds	r3, #4
 8005314:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	3301      	adds	r3, #1
 800531a:	61bb      	str	r3, [r7, #24]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	429a      	cmp	r2, r3
 8005322:	d3ef      	bcc.n	8005304 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005324:	69fb      	ldr	r3, [r7, #28]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3724      	adds	r7, #36	; 0x24
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005332:	b480      	push	{r7}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d12c      	bne.n	80053a8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	db12      	blt.n	8005386 <USB_EPSetStall+0x54>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00f      	beq.n	8005386 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	0151      	lsls	r1, r2, #5
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	440a      	add	r2, r1
 800537c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005380:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005384:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	0151      	lsls	r1, r2, #5
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	440a      	add	r2, r1
 800539c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	e02b      	b.n	8005400 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	db12      	blt.n	80053e0 <USB_EPSetStall+0xae>
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00f      	beq.n	80053e0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	0151      	lsls	r1, r2, #5
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	440a      	add	r2, r1
 80053d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053de:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	0151      	lsls	r1, r2, #5
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	440a      	add	r2, r1
 80053f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800540e:	b480      	push	{r7}
 8005410:	b085      	sub	sp, #20
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d128      	bne.n	800547c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	0151      	lsls	r1, r2, #5
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	440a      	add	r2, r1
 8005440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005444:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005448:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	78db      	ldrb	r3, [r3, #3]
 800544e:	2b03      	cmp	r3, #3
 8005450:	d003      	beq.n	800545a <USB_EPClearStall+0x4c>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	78db      	ldrb	r3, [r3, #3]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d138      	bne.n	80054cc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	0151      	lsls	r1, r2, #5
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	440a      	add	r2, r1
 8005470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	e027      	b.n	80054cc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	0151      	lsls	r1, r2, #5
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	440a      	add	r2, r1
 8005492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005496:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800549a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	78db      	ldrb	r3, [r3, #3]
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d003      	beq.n	80054ac <USB_EPClearStall+0x9e>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	78db      	ldrb	r3, [r3, #3]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d10f      	bne.n	80054cc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	0151      	lsls	r1, r2, #5
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	440a      	add	r2, r1
 80054c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ca:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	460b      	mov	r3, r1
 80054e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054f8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054fc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800550e:	68f9      	ldr	r1, [r7, #12]
 8005510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005514:	4313      	orrs	r3, r2
 8005516:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005526:	b480      	push	{r7}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005540:	f023 0303 	bic.w	r3, r3, #3
 8005544:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005554:	f023 0302 	bic.w	r3, r3, #2
 8005558:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005596:	f043 0302 	orr.w	r3, r3, #2
 800559a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4013      	ands	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055c2:	68fb      	ldr	r3, [r7, #12]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4013      	ands	r3, r2
 80055f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	0c1b      	lsrs	r3, r3, #16
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4013      	ands	r3, r2
 8005626:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	b29b      	uxth	r3, r3
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	4013      	ands	r3, r2
 8005664:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005666:	68bb      	ldr	r3, [r7, #8]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005696:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	fa22 f303 	lsr.w	r3, r2, r3
 80056a4:	01db      	lsls	r3, r3, #7
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80056ae:	78fb      	ldrb	r3, [r7, #3]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4013      	ands	r3, r2
 80056c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056c2:	68bb      	ldr	r3, [r7, #8]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	f003 0301 	and.w	r3, r3, #1
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005706:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800570a:	f023 0307 	bic.w	r3, r3, #7
 800570e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800571e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005722:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
	...

08005734 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	460b      	mov	r3, r1
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	333c      	adds	r3, #60	; 0x3c
 800574a:	3304      	adds	r3, #4
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4a26      	ldr	r2, [pc, #152]	; (80057ec <USB_EP0_OutStart+0xb8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d90a      	bls.n	800576e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005768:	d101      	bne.n	800576e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	e037      	b.n	80057de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005774:	461a      	mov	r2, r3
 8005776:	2300      	movs	r3, #0
 8005778:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800578c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579c:	f043 0318 	orr.w	r3, r3, #24
 80057a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80057b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80057b6:	7afb      	ldrb	r3, [r7, #11]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d10f      	bne.n	80057dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c2:	461a      	mov	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80057da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	4f54300a 	.word	0x4f54300a

080057f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3301      	adds	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4a13      	ldr	r2, [pc, #76]	; (8005854 <USB_CoreReset+0x64>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d901      	bls.n	800580e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e01b      	b.n	8005846 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	daf2      	bge.n	80057fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f043 0201 	orr.w	r2, r3, #1
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3301      	adds	r3, #1
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4a09      	ldr	r2, [pc, #36]	; (8005854 <USB_CoreReset+0x64>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d901      	bls.n	8005838 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e006      	b.n	8005846 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b01      	cmp	r3, #1
 8005842:	d0f0      	beq.n	8005826 <USB_CoreReset+0x36>

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	00030d40 	.word	0x00030d40

08005858 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005864:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005868:	f002 f8dc 	bl	8007a24 <malloc>
 800586c:	4603      	mov	r3, r0
 800586e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d105      	bne.n	8005882 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800587e:	2302      	movs	r3, #2
 8005880:	e066      	b.n	8005950 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	7c1b      	ldrb	r3, [r3, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d119      	bne.n	80058c6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005896:	2202      	movs	r2, #2
 8005898:	2181      	movs	r1, #129	; 0x81
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f001 ff49 	bl	8007732 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80058a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058aa:	2202      	movs	r2, #2
 80058ac:	2101      	movs	r1, #1
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f001 ff3f 	bl	8007732 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2210      	movs	r2, #16
 80058c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80058c4:	e016      	b.n	80058f4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80058c6:	2340      	movs	r3, #64	; 0x40
 80058c8:	2202      	movs	r2, #2
 80058ca:	2181      	movs	r1, #129	; 0x81
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f001 ff30 	bl	8007732 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80058d8:	2340      	movs	r3, #64	; 0x40
 80058da:	2202      	movs	r2, #2
 80058dc:	2101      	movs	r1, #1
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f001 ff27 	bl	8007732 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2210      	movs	r2, #16
 80058f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80058f4:	2308      	movs	r3, #8
 80058f6:	2203      	movs	r2, #3
 80058f8:	2182      	movs	r1, #130	; 0x82
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f001 ff19 	bl	8007732 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	7c1b      	ldrb	r3, [r3, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d109      	bne.n	800593e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005934:	2101      	movs	r1, #1
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f001 ffea 	bl	8007910 <USBD_LL_PrepareReceive>
 800593c:	e007      	b.n	800594e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005944:	2340      	movs	r3, #64	; 0x40
 8005946:	2101      	movs	r1, #1
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f001 ffe1 	bl	8007910 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005968:	2181      	movs	r1, #129	; 0x81
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f001 ff07 	bl	800777e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005976:	2101      	movs	r1, #1
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f001 ff00 	bl	800777e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005986:	2182      	movs	r1, #130	; 0x82
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 fef8 	bl	800777e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00e      	beq.n	80059c6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059b8:	4618      	mov	r0, r3
 80059ba:	f002 f83b 	bl	8007a34 <free>
    pdev->pClassData = NULL;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059e0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d03a      	beq.n	8005a70 <USBD_CDC_Setup+0xa0>
 80059fa:	2b20      	cmp	r3, #32
 80059fc:	f040 8097 	bne.w	8005b2e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	88db      	ldrh	r3, [r3, #6]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d029      	beq.n	8005a5c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	b25b      	sxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	da11      	bge.n	8005a36 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005a1e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	88d2      	ldrh	r2, [r2, #6]
 8005a24:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005a26:	6939      	ldr	r1, [r7, #16]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	88db      	ldrh	r3, [r3, #6]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f001 fa6d 	bl	8006f0e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005a34:	e082      	b.n	8005b3c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	785a      	ldrb	r2, [r3, #1]
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	88db      	ldrh	r3, [r3, #6]
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005a4c:	6939      	ldr	r1, [r7, #16]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	88db      	ldrh	r3, [r3, #6]
 8005a52:	461a      	mov	r2, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f001 fa86 	bl	8006f66 <USBD_CtlPrepareRx>
    break;
 8005a5a:	e06f      	b.n	8005b3c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	7850      	ldrb	r0, [r2, #1]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	6839      	ldr	r1, [r7, #0]
 8005a6c:	4798      	blx	r3
    break;
 8005a6e:	e065      	b.n	8005b3c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	785b      	ldrb	r3, [r3, #1]
 8005a74:	2b0b      	cmp	r3, #11
 8005a76:	d84f      	bhi.n	8005b18 <USBD_CDC_Setup+0x148>
 8005a78:	a201      	add	r2, pc, #4	; (adr r2, 8005a80 <USBD_CDC_Setup+0xb0>)
 8005a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7e:	bf00      	nop
 8005a80:	08005ab1 	.word	0x08005ab1
 8005a84:	08005b27 	.word	0x08005b27
 8005a88:	08005b19 	.word	0x08005b19
 8005a8c:	08005b19 	.word	0x08005b19
 8005a90:	08005b19 	.word	0x08005b19
 8005a94:	08005b19 	.word	0x08005b19
 8005a98:	08005b19 	.word	0x08005b19
 8005a9c:	08005b19 	.word	0x08005b19
 8005aa0:	08005b19 	.word	0x08005b19
 8005aa4:	08005b19 	.word	0x08005b19
 8005aa8:	08005ad9 	.word	0x08005ad9
 8005aac:	08005b01 	.word	0x08005b01
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d107      	bne.n	8005aca <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005aba:	f107 030c 	add.w	r3, r7, #12
 8005abe:	2202      	movs	r2, #2
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f001 fa23 	bl	8006f0e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005ac8:	e030      	b.n	8005b2c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 f9ad 	bl	8006e2c <USBD_CtlError>
        ret = USBD_FAIL;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ad6:	e029      	b.n	8005b2c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d107      	bne.n	8005af2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005ae2:	f107 030f 	add.w	r3, r7, #15
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f001 fa0f 	bl	8006f0e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005af0:	e01c      	b.n	8005b2c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005af2:	6839      	ldr	r1, [r7, #0]
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f001 f999 	bl	8006e2c <USBD_CtlError>
        ret = USBD_FAIL;
 8005afa:	2303      	movs	r3, #3
 8005afc:	75fb      	strb	r3, [r7, #23]
      break;
 8005afe:	e015      	b.n	8005b2c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d00f      	beq.n	8005b2a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f001 f98d 	bl	8006e2c <USBD_CtlError>
        ret = USBD_FAIL;
 8005b12:	2303      	movs	r3, #3
 8005b14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005b16:	e008      	b.n	8005b2a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005b18:	6839      	ldr	r1, [r7, #0]
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f001 f986 	bl	8006e2c <USBD_CtlError>
      ret = USBD_FAIL;
 8005b20:	2303      	movs	r3, #3
 8005b22:	75fb      	strb	r3, [r7, #23]
      break;
 8005b24:	e002      	b.n	8005b2c <USBD_CDC_Setup+0x15c>
      break;
 8005b26:	bf00      	nop
 8005b28:	e008      	b.n	8005b3c <USBD_CDC_Setup+0x16c>
      break;
 8005b2a:	bf00      	nop
    }
    break;
 8005b2c:	e006      	b.n	8005b3c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005b2e:	6839      	ldr	r1, [r7, #0]
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f001 f97b 	bl	8006e2c <USBD_CtlError>
    ret = USBD_FAIL;
 8005b36:	2303      	movs	r3, #3
 8005b38:	75fb      	strb	r3, [r7, #23]
    break;
 8005b3a:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop

08005b48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005b5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e049      	b.n	8005bfe <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005b72:	78fa      	ldrb	r2, [r7, #3]
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	4613      	mov	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	440b      	add	r3, r1
 8005b80:	3318      	adds	r3, #24
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d029      	beq.n	8005bdc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005b88:	78fa      	ldrb	r2, [r7, #3]
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	440b      	add	r3, r1
 8005b96:	3318      	adds	r3, #24
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	78f9      	ldrb	r1, [r7, #3]
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	1a5b      	subs	r3, r3, r1
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4403      	add	r3, r0
 8005ba8:	3344      	adds	r3, #68	; 0x44
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	fbb2 f1f3 	udiv	r1, r2, r3
 8005bb0:	fb03 f301 	mul.w	r3, r3, r1
 8005bb4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d110      	bne.n	8005bdc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005bba:	78fa      	ldrb	r2, [r7, #3]
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	440b      	add	r3, r1
 8005bc8:	3318      	adds	r3, #24
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005bce:	78f9      	ldrb	r1, [r7, #3]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f001 fe7a 	bl	80078ce <USBD_LL_Transmit>
 8005bda:	e00f      	b.n	8005bfc <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005bf8:	78fa      	ldrb	r2, [r7, #3]
 8005bfa:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e015      	b.n	8005c54 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f001 fe90 	bl	8007952 <USBD_LL_GetRxDataSize>
 8005c32:	4602      	mov	r2, r0
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005c4e:	4611      	mov	r1, r2
 8005c50:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c6a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d015      	beq.n	8005ca2 <USBD_CDC_EP0_RxReady+0x46>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005c7c:	2bff      	cmp	r3, #255	; 0xff
 8005c7e:	d010      	beq.n	8005ca2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005c8e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c96:	b292      	uxth	r2, r2
 8005c98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	22ff      	movs	r2, #255	; 0xff
 8005c9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2243      	movs	r2, #67	; 0x43
 8005cb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005cba:	4b03      	ldr	r3, [pc, #12]	; (8005cc8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	20000094 	.word	0x20000094

08005ccc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2243      	movs	r2, #67	; 0x43
 8005cd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005cda:	4b03      	ldr	r3, [pc, #12]	; (8005ce8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	20000050 	.word	0x20000050

08005cec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2243      	movs	r2, #67	; 0x43
 8005cf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005cfa:	4b03      	ldr	r3, [pc, #12]	; (8005d08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	200000d8 	.word	0x200000d8

08005d0c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	220a      	movs	r2, #10
 8005d18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005d1a:	4b03      	ldr	r3, [pc, #12]	; (8005d28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	2000000c 	.word	0x2000000c

08005d2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e004      	b.n	8005d4a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b087      	sub	sp, #28
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	60f8      	str	r0, [r7, #12]
 8005d5e:	60b9      	str	r1, [r7, #8]
 8005d60:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d68:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	371c      	adds	r7, #28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d98:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dbe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e016      	b.n	8005dfc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	7c1b      	ldrb	r3, [r3, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005de0:	2101      	movs	r1, #1
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f001 fd94 	bl	8007910 <USBD_LL_PrepareReceive>
 8005de8:	e007      	b.n	8005dfa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005df0:	2340      	movs	r3, #64	; 0x40
 8005df2:	2101      	movs	r1, #1
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f001 fd8b 	bl	8007910 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e025      	b.n	8005e68 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	79fa      	ldrb	r2, [r7, #7]
 8005e5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f001 fc01 	bl	8007664 <USBD_LL_Init>
 8005e62:	4603      	mov	r3, r0
 8005e64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e010      	b.n	8005eaa <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	f107 020e 	add.w	r2, r7, #14
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4798      	blx	r3
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f001 fc1e 	bl	80076fc <USBD_LL_Start>
 8005ec0:	4603      	mov	r3, r0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005eec:	2303      	movs	r3, #3
 8005eee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d009      	beq.n	8005f0e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	78fa      	ldrb	r2, [r7, #3]
 8005f04:	4611      	mov	r1, r2
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d007      	beq.n	8005f3e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	78fa      	ldrb	r2, [r7, #3]
 8005f38:	4611      	mov	r1, r2
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	4798      	blx	r3
  }

  return USBD_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 ff2c 	bl	8006db8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005f6e:	461a      	mov	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f7c:	f003 031f 	and.w	r3, r3, #31
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d00e      	beq.n	8005fa2 <USBD_LL_SetupStage+0x5a>
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d302      	bcc.n	8005f8e <USBD_LL_SetupStage+0x46>
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d014      	beq.n	8005fb6 <USBD_LL_SetupStage+0x6e>
 8005f8c:	e01d      	b.n	8005fca <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fa18 	bl	80063cc <USBD_StdDevReq>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa0:	e020      	b.n	8005fe4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fa7c 	bl	80064a8 <USBD_StdItfReq>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fb4:	e016      	b.n	8005fe4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fab8 	bl	8006534 <USBD_StdEPReq>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc8:	e00c      	b.n	8005fe4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 fbef 	bl	80077bc <USBD_LL_StallEP>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe2:	bf00      	nop
  }

  return ret;
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b086      	sub	sp, #24
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	607a      	str	r2, [r7, #4]
 8005ffa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ffc:	7afb      	ldrb	r3, [r7, #11]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d137      	bne.n	8006072 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006008:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006010:	2b03      	cmp	r3, #3
 8006012:	d14a      	bne.n	80060aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	429a      	cmp	r2, r3
 800601e:	d913      	bls.n	8006048 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	1ad2      	subs	r2, r2, r3
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	4293      	cmp	r3, r2
 8006038:	bf28      	it	cs
 800603a:	4613      	movcs	r3, r2
 800603c:	461a      	mov	r2, r3
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 ffad 	bl	8006fa0 <USBD_CtlContinueRx>
 8006046:	e030      	b.n	80060aa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00a      	beq.n	800606a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800605a:	2b03      	cmp	r3, #3
 800605c:	d105      	bne.n	800606a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 ffa9 	bl	8006fc2 <USBD_CtlSendStatus>
 8006070:	e01b      	b.n	80060aa <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d013      	beq.n	80060a6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006084:	2b03      	cmp	r3, #3
 8006086:	d10e      	bne.n	80060a6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	7afa      	ldrb	r2, [r7, #11]
 8006092:	4611      	mov	r1, r2
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	4798      	blx	r3
 8006098:	4603      	mov	r3, r0
 800609a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800609c:	7dfb      	ldrb	r3, [r7, #23]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80060a2:	7dfb      	ldrb	r3, [r7, #23]
 80060a4:	e002      	b.n	80060ac <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e000      	b.n	80060ac <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	460b      	mov	r3, r1
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80060c2:	7afb      	ldrb	r3, [r7, #11]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d16a      	bne.n	800619e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3314      	adds	r3, #20
 80060cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d155      	bne.n	8006184 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d914      	bls.n	800610e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	1ad2      	subs	r2, r2, r3
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	461a      	mov	r2, r3
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 ff22 	bl	8006f44 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006100:	2300      	movs	r3, #0
 8006102:	2200      	movs	r2, #0
 8006104:	2100      	movs	r1, #0
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f001 fc02 	bl	8007910 <USBD_LL_PrepareReceive>
 800610c:	e03a      	b.n	8006184 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	429a      	cmp	r2, r3
 8006118:	d11c      	bne.n	8006154 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006122:	429a      	cmp	r2, r3
 8006124:	d316      	bcc.n	8006154 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006130:	429a      	cmp	r2, r3
 8006132:	d20f      	bcs.n	8006154 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006134:	2200      	movs	r2, #0
 8006136:	2100      	movs	r1, #0
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 ff03 	bl	8006f44 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006146:	2300      	movs	r3, #0
 8006148:	2200      	movs	r2, #0
 800614a:	2100      	movs	r1, #0
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f001 fbdf 	bl	8007910 <USBD_LL_PrepareReceive>
 8006152:	e017      	b.n	8006184 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006166:	2b03      	cmp	r3, #3
 8006168:	d105      	bne.n	8006176 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006176:	2180      	movs	r1, #128	; 0x80
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f001 fb1f 	bl	80077bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 ff32 	bl	8006fe8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800618a:	2b01      	cmp	r3, #1
 800618c:	d123      	bne.n	80061d6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f7ff fe9b 	bl	8005eca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800619c:	e01b      	b.n	80061d6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d013      	beq.n	80061d2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80061b0:	2b03      	cmp	r3, #3
 80061b2:	d10e      	bne.n	80061d2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	7afa      	ldrb	r2, [r7, #11]
 80061be:	4611      	mov	r1, r2
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	4798      	blx	r3
 80061c4:	4603      	mov	r3, r0
 80061c6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	e002      	b.n	80061d8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e000      	b.n	80061d8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800620c:	2b00      	cmp	r3, #0
 800620e:	d009      	beq.n	8006224 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6852      	ldr	r2, [r2, #4]
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	4611      	mov	r1, r2
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006224:	2340      	movs	r3, #64	; 0x40
 8006226:	2200      	movs	r2, #0
 8006228:	2100      	movs	r1, #0
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f001 fa81 	bl	8007732 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2240      	movs	r2, #64	; 0x40
 800623c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006240:	2340      	movs	r3, #64	; 0x40
 8006242:	2200      	movs	r2, #0
 8006244:	2180      	movs	r1, #128	; 0x80
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f001 fa73 	bl	8007732 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2240      	movs	r2, #64	; 0x40
 8006256:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	460b      	mov	r3, r1
 800626c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	78fa      	ldrb	r2, [r7, #3]
 8006272:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2204      	movs	r2, #4
 800629a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d105      	bne.n	80062ca <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d10b      	bne.n	8006302 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d005      	beq.n	8006302 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	460b      	mov	r3, r1
 8006330:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636c:	2b00      	cmp	r3, #0
 800636e:	d009      	beq.n	8006384 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6852      	ldr	r2, [r2, #4]
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	4611      	mov	r1, r2
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	4798      	blx	r3
  }

  return USBD_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800638e:	b480      	push	{r7}
 8006390:	b087      	sub	sp, #28
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	3301      	adds	r3, #1
 80063a4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80063ac:	8a3b      	ldrh	r3, [r7, #16]
 80063ae:	021b      	lsls	r3, r3, #8
 80063b0:	b21a      	sxth	r2, r3
 80063b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	b21b      	sxth	r3, r3
 80063ba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80063bc:	89fb      	ldrh	r3, [r7, #14]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
	...

080063cc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d004      	beq.n	80063f0 <USBD_StdDevReq+0x24>
 80063e6:	2b40      	cmp	r3, #64	; 0x40
 80063e8:	d002      	beq.n	80063f0 <USBD_StdDevReq+0x24>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <USBD_StdDevReq+0x38>
 80063ee:	e050      	b.n	8006492 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	4798      	blx	r3
 80063fe:	4603      	mov	r3, r0
 8006400:	73fb      	strb	r3, [r7, #15]
    break;
 8006402:	e04b      	b.n	800649c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	785b      	ldrb	r3, [r3, #1]
 8006408:	2b09      	cmp	r3, #9
 800640a:	d83c      	bhi.n	8006486 <USBD_StdDevReq+0xba>
 800640c:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <USBD_StdDevReq+0x48>)
 800640e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006412:	bf00      	nop
 8006414:	08006469 	.word	0x08006469
 8006418:	0800647d 	.word	0x0800647d
 800641c:	08006487 	.word	0x08006487
 8006420:	08006473 	.word	0x08006473
 8006424:	08006487 	.word	0x08006487
 8006428:	08006447 	.word	0x08006447
 800642c:	0800643d 	.word	0x0800643d
 8006430:	08006487 	.word	0x08006487
 8006434:	0800645f 	.word	0x0800645f
 8006438:	08006451 	.word	0x08006451
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f9ce 	bl	80067e0 <USBD_GetDescriptor>
      break;
 8006444:	e024      	b.n	8006490 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fb33 	bl	8006ab4 <USBD_SetAddress>
      break;
 800644e:	e01f      	b.n	8006490 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fb70 	bl	8006b38 <USBD_SetConfig>
 8006458:	4603      	mov	r3, r0
 800645a:	73fb      	strb	r3, [r7, #15]
      break;
 800645c:	e018      	b.n	8006490 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fc0d 	bl	8006c80 <USBD_GetConfig>
      break;
 8006466:	e013      	b.n	8006490 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fc3c 	bl	8006ce8 <USBD_GetStatus>
      break;
 8006470:	e00e      	b.n	8006490 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fc6a 	bl	8006d4e <USBD_SetFeature>
      break;
 800647a:	e009      	b.n	8006490 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fc79 	bl	8006d76 <USBD_ClrFeature>
      break;
 8006484:	e004      	b.n	8006490 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fccf 	bl	8006e2c <USBD_CtlError>
      break;
 800648e:	bf00      	nop
    }
    break;
 8006490:	e004      	b.n	800649c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006492:	6839      	ldr	r1, [r7, #0]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fcc9 	bl	8006e2c <USBD_CtlError>
    break;
 800649a:	bf00      	nop
  }

  return ret;
 800649c:	7bfb      	ldrb	r3, [r7, #15]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop

080064a8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d003      	beq.n	80064ca <USBD_StdItfReq+0x22>
 80064c2:	2b40      	cmp	r3, #64	; 0x40
 80064c4:	d001      	beq.n	80064ca <USBD_StdItfReq+0x22>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d12a      	bne.n	8006520 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d0:	3b01      	subs	r3, #1
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d81d      	bhi.n	8006512 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	889b      	ldrh	r3, [r3, #4]
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d813      	bhi.n	8006508 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	4798      	blx	r3
 80064ee:	4603      	mov	r3, r0
 80064f0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	88db      	ldrh	r3, [r3, #6]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d110      	bne.n	800651c <USBD_StdItfReq+0x74>
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10d      	bne.n	800651c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fd5e 	bl	8006fc2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006506:	e009      	b.n	800651c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fc8e 	bl	8006e2c <USBD_CtlError>
      break;
 8006510:	e004      	b.n	800651c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fc89 	bl	8006e2c <USBD_CtlError>
      break;
 800651a:	e000      	b.n	800651e <USBD_StdItfReq+0x76>
      break;
 800651c:	bf00      	nop
    }
    break;
 800651e:	e004      	b.n	800652a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fc82 	bl	8006e2c <USBD_CtlError>
    break;
 8006528:	bf00      	nop
  }

  return ret;
 800652a:	7bfb      	ldrb	r3, [r7, #15]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	889b      	ldrh	r3, [r3, #4]
 8006546:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006550:	2b20      	cmp	r3, #32
 8006552:	d004      	beq.n	800655e <USBD_StdEPReq+0x2a>
 8006554:	2b40      	cmp	r3, #64	; 0x40
 8006556:	d002      	beq.n	800655e <USBD_StdEPReq+0x2a>
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00a      	beq.n	8006572 <USBD_StdEPReq+0x3e>
 800655c:	e135      	b.n	80067ca <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	4798      	blx	r3
 800656c:	4603      	mov	r3, r0
 800656e:	73fb      	strb	r3, [r7, #15]
    break;
 8006570:	e130      	b.n	80067d4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	785b      	ldrb	r3, [r3, #1]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d03e      	beq.n	80065f8 <USBD_StdEPReq+0xc4>
 800657a:	2b03      	cmp	r3, #3
 800657c:	d002      	beq.n	8006584 <USBD_StdEPReq+0x50>
 800657e:	2b00      	cmp	r3, #0
 8006580:	d077      	beq.n	8006672 <USBD_StdEPReq+0x13e>
 8006582:	e11c      	b.n	80067be <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800658a:	2b02      	cmp	r3, #2
 800658c:	d002      	beq.n	8006594 <USBD_StdEPReq+0x60>
 800658e:	2b03      	cmp	r3, #3
 8006590:	d015      	beq.n	80065be <USBD_StdEPReq+0x8a>
 8006592:	e02b      	b.n	80065ec <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006594:	7bbb      	ldrb	r3, [r7, #14]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00c      	beq.n	80065b4 <USBD_StdEPReq+0x80>
 800659a:	7bbb      	ldrb	r3, [r7, #14]
 800659c:	2b80      	cmp	r3, #128	; 0x80
 800659e:	d009      	beq.n	80065b4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80065a0:	7bbb      	ldrb	r3, [r7, #14]
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 f909 	bl	80077bc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065aa:	2180      	movs	r1, #128	; 0x80
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 f905 	bl	80077bc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80065b2:	e020      	b.n	80065f6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80065b4:	6839      	ldr	r1, [r7, #0]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fc38 	bl	8006e2c <USBD_CtlError>
        break;
 80065bc:	e01b      	b.n	80065f6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	885b      	ldrh	r3, [r3, #2]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10e      	bne.n	80065e4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80065c6:	7bbb      	ldrb	r3, [r7, #14]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00b      	beq.n	80065e4 <USBD_StdEPReq+0xb0>
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
 80065ce:	2b80      	cmp	r3, #128	; 0x80
 80065d0:	d008      	beq.n	80065e4 <USBD_StdEPReq+0xb0>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	88db      	ldrh	r3, [r3, #6]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d104      	bne.n	80065e4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	4619      	mov	r1, r3
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f001 f8ec 	bl	80077bc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fcec 	bl	8006fc2 <USBD_CtlSendStatus>

        break;
 80065ea:	e004      	b.n	80065f6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fc1c 	bl	8006e2c <USBD_CtlError>
        break;
 80065f4:	bf00      	nop
      }
      break;
 80065f6:	e0e7      	b.n	80067c8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d002      	beq.n	8006608 <USBD_StdEPReq+0xd4>
 8006602:	2b03      	cmp	r3, #3
 8006604:	d015      	beq.n	8006632 <USBD_StdEPReq+0xfe>
 8006606:	e02d      	b.n	8006664 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00c      	beq.n	8006628 <USBD_StdEPReq+0xf4>
 800660e:	7bbb      	ldrb	r3, [r7, #14]
 8006610:	2b80      	cmp	r3, #128	; 0x80
 8006612:	d009      	beq.n	8006628 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 f8cf 	bl	80077bc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800661e:	2180      	movs	r1, #128	; 0x80
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 f8cb 	bl	80077bc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006626:	e023      	b.n	8006670 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fbfe 	bl	8006e2c <USBD_CtlError>
        break;
 8006630:	e01e      	b.n	8006670 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	885b      	ldrh	r3, [r3, #2]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d119      	bne.n	800666e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006640:	2b00      	cmp	r3, #0
 8006642:	d004      	beq.n	800664e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006644:	7bbb      	ldrb	r3, [r7, #14]
 8006646:	4619      	mov	r1, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 f8d6 	bl	80077fa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fcb7 	bl	8006fc2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	4798      	blx	r3
        }
        break;
 8006662:	e004      	b.n	800666e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fbe0 	bl	8006e2c <USBD_CtlError>
        break;
 800666c:	e000      	b.n	8006670 <USBD_StdEPReq+0x13c>
        break;
 800666e:	bf00      	nop
      }
      break;
 8006670:	e0aa      	b.n	80067c8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006678:	2b02      	cmp	r3, #2
 800667a:	d002      	beq.n	8006682 <USBD_StdEPReq+0x14e>
 800667c:	2b03      	cmp	r3, #3
 800667e:	d032      	beq.n	80066e6 <USBD_StdEPReq+0x1b2>
 8006680:	e097      	b.n	80067b2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006682:	7bbb      	ldrb	r3, [r7, #14]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d007      	beq.n	8006698 <USBD_StdEPReq+0x164>
 8006688:	7bbb      	ldrb	r3, [r7, #14]
 800668a:	2b80      	cmp	r3, #128	; 0x80
 800668c:	d004      	beq.n	8006698 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fbcb 	bl	8006e2c <USBD_CtlError>
          break;
 8006696:	e091      	b.n	80067bc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800669c:	2b00      	cmp	r3, #0
 800669e:	da0b      	bge.n	80066b8 <USBD_StdEPReq+0x184>
 80066a0:	7bbb      	ldrb	r3, [r7, #14]
 80066a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	3310      	adds	r3, #16
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	4413      	add	r3, r2
 80066b4:	3304      	adds	r3, #4
 80066b6:	e00b      	b.n	80066d0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80066b8:	7bbb      	ldrb	r3, [r7, #14]
 80066ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	4413      	add	r3, r2
 80066ce:	3304      	adds	r3, #4
 80066d0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2200      	movs	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2202      	movs	r2, #2
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fc15 	bl	8006f0e <USBD_CtlSendData>
        break;
 80066e4:	e06a      	b.n	80067bc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80066e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	da11      	bge.n	8006712 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066ee:	7bbb      	ldrb	r3, [r7, #14]
 80066f0:	f003 020f 	and.w	r2, r3, #15
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	3324      	adds	r3, #36	; 0x24
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d117      	bne.n	8006738 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fb8e 	bl	8006e2c <USBD_CtlError>
            break;
 8006710:	e054      	b.n	80067bc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	f003 020f 	and.w	r2, r3, #15
 8006718:	6879      	ldr	r1, [r7, #4]
 800671a:	4613      	mov	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	440b      	add	r3, r1
 8006724:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d104      	bne.n	8006738 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fb7b 	bl	8006e2c <USBD_CtlError>
            break;
 8006736:	e041      	b.n	80067bc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800673c:	2b00      	cmp	r3, #0
 800673e:	da0b      	bge.n	8006758 <USBD_StdEPReq+0x224>
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006746:	4613      	mov	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	3310      	adds	r3, #16
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	4413      	add	r3, r2
 8006754:	3304      	adds	r3, #4
 8006756:	e00b      	b.n	8006770 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006758:	7bbb      	ldrb	r3, [r7, #14]
 800675a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800675e:	4613      	mov	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	4413      	add	r3, r2
 800676e:	3304      	adds	r3, #4
 8006770:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <USBD_StdEPReq+0x24a>
 8006778:	7bbb      	ldrb	r3, [r7, #14]
 800677a:	2b80      	cmp	r3, #128	; 0x80
 800677c:	d103      	bne.n	8006786 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	e00e      	b.n	80067a4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006786:	7bbb      	ldrb	r3, [r7, #14]
 8006788:	4619      	mov	r1, r3
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f001 f854 	bl	8007838 <USBD_LL_IsStallEP>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2201      	movs	r2, #1
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	e002      	b.n	80067a4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2202      	movs	r2, #2
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fbaf 	bl	8006f0e <USBD_CtlSendData>
          break;
 80067b0:	e004      	b.n	80067bc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80067b2:	6839      	ldr	r1, [r7, #0]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fb39 	bl	8006e2c <USBD_CtlError>
        break;
 80067ba:	bf00      	nop
      }
      break;
 80067bc:	e004      	b.n	80067c8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fb33 	bl	8006e2c <USBD_CtlError>
      break;
 80067c6:	bf00      	nop
    }
    break;
 80067c8:	e004      	b.n	80067d4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fb2d 	bl	8006e2c <USBD_CtlError>
    break;
 80067d2:	bf00      	nop
  }

  return ret;
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	885b      	ldrh	r3, [r3, #2]
 80067fa:	0a1b      	lsrs	r3, r3, #8
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	3b01      	subs	r3, #1
 8006800:	2b06      	cmp	r3, #6
 8006802:	f200 8128 	bhi.w	8006a56 <USBD_GetDescriptor+0x276>
 8006806:	a201      	add	r2, pc, #4	; (adr r2, 800680c <USBD_GetDescriptor+0x2c>)
 8006808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680c:	08006829 	.word	0x08006829
 8006810:	08006841 	.word	0x08006841
 8006814:	08006881 	.word	0x08006881
 8006818:	08006a57 	.word	0x08006a57
 800681c:	08006a57 	.word	0x08006a57
 8006820:	080069f7 	.word	0x080069f7
 8006824:	08006a23 	.word	0x08006a23
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	7c12      	ldrb	r2, [r2, #16]
 8006834:	f107 0108 	add.w	r1, r7, #8
 8006838:	4610      	mov	r0, r2
 800683a:	4798      	blx	r3
 800683c:	60f8      	str	r0, [r7, #12]
    break;
 800683e:	e112      	b.n	8006a66 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	7c1b      	ldrb	r3, [r3, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10d      	bne.n	8006864 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	f107 0208 	add.w	r2, r7, #8
 8006854:	4610      	mov	r0, r2
 8006856:	4798      	blx	r3
 8006858:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3301      	adds	r3, #1
 800685e:	2202      	movs	r2, #2
 8006860:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006862:	e100      	b.n	8006a66 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	f107 0208 	add.w	r2, r7, #8
 8006870:	4610      	mov	r0, r2
 8006872:	4798      	blx	r3
 8006874:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3301      	adds	r3, #1
 800687a:	2202      	movs	r2, #2
 800687c:	701a      	strb	r2, [r3, #0]
    break;
 800687e:	e0f2      	b.n	8006a66 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	885b      	ldrh	r3, [r3, #2]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b05      	cmp	r3, #5
 8006888:	f200 80ac 	bhi.w	80069e4 <USBD_GetDescriptor+0x204>
 800688c:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <USBD_GetDescriptor+0xb4>)
 800688e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006892:	bf00      	nop
 8006894:	080068ad 	.word	0x080068ad
 8006898:	080068e1 	.word	0x080068e1
 800689c:	08006915 	.word	0x08006915
 80068a0:	08006949 	.word	0x08006949
 80068a4:	0800697d 	.word	0x0800697d
 80068a8:	080069b1 	.word	0x080069b1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00b      	beq.n	80068d0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	7c12      	ldrb	r2, [r2, #16]
 80068c4:	f107 0108 	add.w	r1, r7, #8
 80068c8:	4610      	mov	r0, r2
 80068ca:	4798      	blx	r3
 80068cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068ce:	e091      	b.n	80069f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 faaa 	bl	8006e2c <USBD_CtlError>
        err++;
 80068d8:	7afb      	ldrb	r3, [r7, #11]
 80068da:	3301      	adds	r3, #1
 80068dc:	72fb      	strb	r3, [r7, #11]
      break;
 80068de:	e089      	b.n	80069f4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00b      	beq.n	8006904 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	7c12      	ldrb	r2, [r2, #16]
 80068f8:	f107 0108 	add.w	r1, r7, #8
 80068fc:	4610      	mov	r0, r2
 80068fe:	4798      	blx	r3
 8006900:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006902:	e077      	b.n	80069f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fa90 	bl	8006e2c <USBD_CtlError>
        err++;
 800690c:	7afb      	ldrb	r3, [r7, #11]
 800690e:	3301      	adds	r3, #1
 8006910:	72fb      	strb	r3, [r7, #11]
      break;
 8006912:	e06f      	b.n	80069f4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00b      	beq.n	8006938 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	7c12      	ldrb	r2, [r2, #16]
 800692c:	f107 0108 	add.w	r1, r7, #8
 8006930:	4610      	mov	r0, r2
 8006932:	4798      	blx	r3
 8006934:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006936:	e05d      	b.n	80069f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fa76 	bl	8006e2c <USBD_CtlError>
        err++;
 8006940:	7afb      	ldrb	r3, [r7, #11]
 8006942:	3301      	adds	r3, #1
 8006944:	72fb      	strb	r3, [r7, #11]
      break;
 8006946:	e055      	b.n	80069f4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00b      	beq.n	800696c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	7c12      	ldrb	r2, [r2, #16]
 8006960:	f107 0108 	add.w	r1, r7, #8
 8006964:	4610      	mov	r0, r2
 8006966:	4798      	blx	r3
 8006968:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800696a:	e043      	b.n	80069f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa5c 	bl	8006e2c <USBD_CtlError>
        err++;
 8006974:	7afb      	ldrb	r3, [r7, #11]
 8006976:	3301      	adds	r3, #1
 8006978:	72fb      	strb	r3, [r7, #11]
      break;
 800697a:	e03b      	b.n	80069f4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00b      	beq.n	80069a0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	7c12      	ldrb	r2, [r2, #16]
 8006994:	f107 0108 	add.w	r1, r7, #8
 8006998:	4610      	mov	r0, r2
 800699a:	4798      	blx	r3
 800699c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800699e:	e029      	b.n	80069f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fa42 	bl	8006e2c <USBD_CtlError>
        err++;
 80069a8:	7afb      	ldrb	r3, [r7, #11]
 80069aa:	3301      	adds	r3, #1
 80069ac:	72fb      	strb	r3, [r7, #11]
      break;
 80069ae:	e021      	b.n	80069f4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00b      	beq.n	80069d4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	7c12      	ldrb	r2, [r2, #16]
 80069c8:	f107 0108 	add.w	r1, r7, #8
 80069cc:	4610      	mov	r0, r2
 80069ce:	4798      	blx	r3
 80069d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069d2:	e00f      	b.n	80069f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa28 	bl	8006e2c <USBD_CtlError>
        err++;
 80069dc:	7afb      	ldrb	r3, [r7, #11]
 80069de:	3301      	adds	r3, #1
 80069e0:	72fb      	strb	r3, [r7, #11]
      break;
 80069e2:	e007      	b.n	80069f4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fa20 	bl	8006e2c <USBD_CtlError>
      err++;
 80069ec:	7afb      	ldrb	r3, [r7, #11]
 80069ee:	3301      	adds	r3, #1
 80069f0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80069f2:	bf00      	nop
    }
    break;
 80069f4:	e037      	b.n	8006a66 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	7c1b      	ldrb	r3, [r3, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d109      	bne.n	8006a12 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a06:	f107 0208 	add.w	r2, r7, #8
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	4798      	blx	r3
 8006a0e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006a10:	e029      	b.n	8006a66 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fa09 	bl	8006e2c <USBD_CtlError>
      err++;
 8006a1a:	7afb      	ldrb	r3, [r7, #11]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	72fb      	strb	r3, [r7, #11]
    break;
 8006a20:	e021      	b.n	8006a66 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	7c1b      	ldrb	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10d      	bne.n	8006a46 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	f107 0208 	add.w	r2, r7, #8
 8006a36:	4610      	mov	r0, r2
 8006a38:	4798      	blx	r3
 8006a3a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	2207      	movs	r2, #7
 8006a42:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006a44:	e00f      	b.n	8006a66 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f9ef 	bl	8006e2c <USBD_CtlError>
      err++;
 8006a4e:	7afb      	ldrb	r3, [r7, #11]
 8006a50:	3301      	adds	r3, #1
 8006a52:	72fb      	strb	r3, [r7, #11]
    break;
 8006a54:	e007      	b.n	8006a66 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f9e7 	bl	8006e2c <USBD_CtlError>
    err++;
 8006a5e:	7afb      	ldrb	r3, [r7, #11]
 8006a60:	3301      	adds	r3, #1
 8006a62:	72fb      	strb	r3, [r7, #11]
    break;
 8006a64:	bf00      	nop
  }

  if (err != 0U)
 8006a66:	7afb      	ldrb	r3, [r7, #11]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d11e      	bne.n	8006aaa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	88db      	ldrh	r3, [r3, #6]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d016      	beq.n	8006aa2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006a74:	893b      	ldrh	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00e      	beq.n	8006a98 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	88da      	ldrh	r2, [r3, #6]
 8006a7e:	893b      	ldrh	r3, [r7, #8]
 8006a80:	4293      	cmp	r3, r2
 8006a82:	bf28      	it	cs
 8006a84:	4613      	movcs	r3, r2
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a8a:	893b      	ldrh	r3, [r7, #8]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	68f9      	ldr	r1, [r7, #12]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fa3c 	bl	8006f0e <USBD_CtlSendData>
 8006a96:	e009      	b.n	8006aac <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f9c6 	bl	8006e2c <USBD_CtlError>
 8006aa0:	e004      	b.n	8006aac <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fa8d 	bl	8006fc2 <USBD_CtlSendStatus>
 8006aa8:	e000      	b.n	8006aac <USBD_GetDescriptor+0x2cc>
    return;
 8006aaa:	bf00      	nop
    }
  }
}
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop

08006ab4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	889b      	ldrh	r3, [r3, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d130      	bne.n	8006b28 <USBD_SetAddress+0x74>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	88db      	ldrh	r3, [r3, #6]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d12c      	bne.n	8006b28 <USBD_SetAddress+0x74>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	885b      	ldrh	r3, [r3, #2]
 8006ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad4:	d828      	bhi.n	8006b28 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	885b      	ldrh	r3, [r3, #2]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d104      	bne.n	8006af6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f99c 	bl	8006e2c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006af4:	e01c      	b.n	8006b30 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	7bfa      	ldrb	r2, [r7, #15]
 8006afa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fec4 	bl	8007890 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fa5a 	bl	8006fc2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d004      	beq.n	8006b1e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b1c:	e008      	b.n	8006b30 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b26:	e003      	b.n	8006b30 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f97e 	bl	8006e2c <USBD_CtlError>
  }
}
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	885b      	ldrh	r3, [r3, #2]
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	4b4b      	ldr	r3, [pc, #300]	; (8006c7c <USBD_SetConfig+0x144>)
 8006b4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b50:	4b4a      	ldr	r3, [pc, #296]	; (8006c7c <USBD_SetConfig+0x144>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d905      	bls.n	8006b64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f966 	bl	8006e2c <USBD_CtlError>
    return USBD_FAIL;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e087      	b.n	8006c74 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d002      	beq.n	8006b74 <USBD_SetConfig+0x3c>
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d025      	beq.n	8006bbe <USBD_SetConfig+0x86>
 8006b72:	e071      	b.n	8006c58 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006b74:	4b41      	ldr	r3, [pc, #260]	; (8006c7c <USBD_SetConfig+0x144>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d01c      	beq.n	8006bb6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006b7c:	4b3f      	ldr	r3, [pc, #252]	; (8006c7c <USBD_SetConfig+0x144>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	461a      	mov	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b86:	4b3d      	ldr	r3, [pc, #244]	; (8006c7c <USBD_SetConfig+0x144>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff f9a7 	bl	8005ee0 <USBD_SetClassConfig>
 8006b92:	4603      	mov	r3, r0
 8006b94:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d004      	beq.n	8006ba6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f944 	bl	8006e2c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006ba4:	e065      	b.n	8006c72 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fa0b 	bl	8006fc2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2203      	movs	r2, #3
 8006bb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006bb4:	e05d      	b.n	8006c72 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fa03 	bl	8006fc2 <USBD_CtlSendStatus>
    break;
 8006bbc:	e059      	b.n	8006c72 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006bbe:	4b2f      	ldr	r3, [pc, #188]	; (8006c7c <USBD_SetConfig+0x144>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d112      	bne.n	8006bec <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2202      	movs	r2, #2
 8006bca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006bce:	4b2b      	ldr	r3, [pc, #172]	; (8006c7c <USBD_SetConfig+0x144>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006bd8:	4b28      	ldr	r3, [pc, #160]	; (8006c7c <USBD_SetConfig+0x144>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7ff f99a 	bl	8005f18 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f9ec 	bl	8006fc2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006bea:	e042      	b.n	8006c72 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006bec:	4b23      	ldr	r3, [pc, #140]	; (8006c7c <USBD_SetConfig+0x144>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d02a      	beq.n	8006c50 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff f988 	bl	8005f18 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006c08:	4b1c      	ldr	r3, [pc, #112]	; (8006c7c <USBD_SetConfig+0x144>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c12:	4b1a      	ldr	r3, [pc, #104]	; (8006c7c <USBD_SetConfig+0x144>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff f961 	bl	8005ee0 <USBD_SetClassConfig>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00f      	beq.n	8006c48 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f8fe 	bl	8006e2c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7ff f96d 	bl	8005f18 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2202      	movs	r2, #2
 8006c42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006c46:	e014      	b.n	8006c72 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f9ba 	bl	8006fc2 <USBD_CtlSendStatus>
    break;
 8006c4e:	e010      	b.n	8006c72 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f9b6 	bl	8006fc2 <USBD_CtlSendStatus>
    break;
 8006c56:	e00c      	b.n	8006c72 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f8e6 	bl	8006e2c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c60:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <USBD_SetConfig+0x144>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7ff f956 	bl	8005f18 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c70:	bf00      	nop
  }

  return ret;
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20000208 	.word	0x20000208

08006c80 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	88db      	ldrh	r3, [r3, #6]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d004      	beq.n	8006c9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f8c9 	bl	8006e2c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006c9a:	e021      	b.n	8006ce0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	db17      	blt.n	8006cd6 <USBD_GetConfig+0x56>
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	dd02      	ble.n	8006cb0 <USBD_GetConfig+0x30>
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d00b      	beq.n	8006cc6 <USBD_GetConfig+0x46>
 8006cae:	e012      	b.n	8006cd6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	3308      	adds	r3, #8
 8006cba:	2201      	movs	r2, #1
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f925 	bl	8006f0e <USBD_CtlSendData>
      break;
 8006cc4:	e00c      	b.n	8006ce0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3304      	adds	r3, #4
 8006cca:	2201      	movs	r2, #1
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f91d 	bl	8006f0e <USBD_CtlSendData>
      break;
 8006cd4:	e004      	b.n	8006ce0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f8a7 	bl	8006e2c <USBD_CtlError>
      break;
 8006cde:	bf00      	nop
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d81e      	bhi.n	8006d3c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	88db      	ldrh	r3, [r3, #6]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d004      	beq.n	8006d10 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f88f 	bl	8006e2c <USBD_CtlError>
      break;
 8006d0e:	e01a      	b.n	8006d46 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d005      	beq.n	8006d2c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f043 0202 	orr.w	r2, r3, #2
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	330c      	adds	r3, #12
 8006d30:	2202      	movs	r2, #2
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f8ea 	bl	8006f0e <USBD_CtlSendData>
    break;
 8006d3a:	e004      	b.n	8006d46 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f874 	bl	8006e2c <USBD_CtlError>
    break;
 8006d44:	bf00      	nop
  }
}
 8006d46:	bf00      	nop
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b082      	sub	sp, #8
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	885b      	ldrh	r3, [r3, #2]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d106      	bne.n	8006d6e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f92a 	bl	8006fc2 <USBD_CtlSendStatus>
  }
}
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d86:	3b01      	subs	r3, #1
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d80b      	bhi.n	8006da4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	885b      	ldrh	r3, [r3, #2]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d10c      	bne.n	8006dae <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f910 	bl	8006fc2 <USBD_CtlSendStatus>
      }
      break;
 8006da2:	e004      	b.n	8006dae <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f840 	bl	8006e2c <USBD_CtlError>
      break;
 8006dac:	e000      	b.n	8006db0 <USBD_ClrFeature+0x3a>
      break;
 8006dae:	bf00      	nop
  }
}
 8006db0:	bf00      	nop
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	781a      	ldrb	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	781a      	ldrb	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3301      	adds	r3, #1
 8006de0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f7ff fad3 	bl	800638e <SWAPBYTE>
 8006de8:	4603      	mov	r3, r0
 8006dea:	461a      	mov	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3301      	adds	r3, #1
 8006df4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff fac6 	bl	800638e <SWAPBYTE>
 8006e02:	4603      	mov	r3, r0
 8006e04:	461a      	mov	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3301      	adds	r3, #1
 8006e14:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f7ff fab9 	bl	800638e <SWAPBYTE>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	461a      	mov	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	80da      	strh	r2, [r3, #6]
}
 8006e24:	bf00      	nop
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e36:	2180      	movs	r1, #128	; 0x80
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fcbf 	bl	80077bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e3e:	2100      	movs	r1, #0
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fcbb 	bl	80077bc <USBD_LL_StallEP>
}
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b086      	sub	sp, #24
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	60f8      	str	r0, [r7, #12]
 8006e56:	60b9      	str	r1, [r7, #8]
 8006e58:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d036      	beq.n	8006ed2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006e68:	6938      	ldr	r0, [r7, #16]
 8006e6a:	f000 f836 	bl	8006eda <USBD_GetLen>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	3301      	adds	r3, #1
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	4413      	add	r3, r2
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	7812      	ldrb	r2, [r2, #0]
 8006e86:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006e8e:	7dfb      	ldrb	r3, [r7, #23]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	4413      	add	r3, r2
 8006e94:	2203      	movs	r2, #3
 8006e96:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006e9e:	e013      	b.n	8006ec8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	7812      	ldrb	r2, [r2, #0]
 8006eaa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	613b      	str	r3, [r7, #16]
    idx++;
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e7      	bne.n	8006ea0 <USBD_GetString+0x52>
 8006ed0:	e000      	b.n	8006ed4 <USBD_GetString+0x86>
    return;
 8006ed2:	bf00      	nop
  }
}
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b085      	sub	sp, #20
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006eea:	e005      	b.n	8006ef8 <USBD_GetLen+0x1e>
  {
    len++;
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1f5      	bne.n	8006eec <USBD_GetLen+0x12>
  }

  return len;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	2100      	movs	r1, #0
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 fcca 	bl	80078ce <USBD_LL_Transmit>

  return USBD_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	2100      	movs	r1, #0
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 fcb9 	bl	80078ce <USBD_LL_Transmit>

  return USBD_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b084      	sub	sp, #16
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	60f8      	str	r0, [r7, #12]
 8006f6e:	60b9      	str	r1, [r7, #8]
 8006f70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2203      	movs	r2, #3
 8006f76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	2100      	movs	r1, #0
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 fcbd 	bl	8007910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f000 fcac 	bl	8007910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2204      	movs	r2, #4
 8006fce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fc78 	bl	80078ce <USBD_LL_Transmit>

  return USBD_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2205      	movs	r2, #5
 8006ff4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fc86 	bl	8007910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007014:	2200      	movs	r2, #0
 8007016:	4912      	ldr	r1, [pc, #72]	; (8007060 <MX_USB_DEVICE_Init+0x50>)
 8007018:	4812      	ldr	r0, [pc, #72]	; (8007064 <MX_USB_DEVICE_Init+0x54>)
 800701a:	f7fe fef3 	bl	8005e04 <USBD_Init>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007024:	f7f9 fc8c 	bl	8000940 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007028:	490f      	ldr	r1, [pc, #60]	; (8007068 <MX_USB_DEVICE_Init+0x58>)
 800702a:	480e      	ldr	r0, [pc, #56]	; (8007064 <MX_USB_DEVICE_Init+0x54>)
 800702c:	f7fe ff20 	bl	8005e70 <USBD_RegisterClass>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007036:	f7f9 fc83 	bl	8000940 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800703a:	490c      	ldr	r1, [pc, #48]	; (800706c <MX_USB_DEVICE_Init+0x5c>)
 800703c:	4809      	ldr	r0, [pc, #36]	; (8007064 <MX_USB_DEVICE_Init+0x54>)
 800703e:	f7fe fe75 	bl	8005d2c <USBD_CDC_RegisterInterface>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007048:	f7f9 fc7a 	bl	8000940 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800704c:	4805      	ldr	r0, [pc, #20]	; (8007064 <MX_USB_DEVICE_Init+0x54>)
 800704e:	f7fe ff30 	bl	8005eb2 <USBD_Start>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007058:	f7f9 fc72 	bl	8000940 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800705c:	bf00      	nop
 800705e:	bd80      	pop	{r7, pc}
 8007060:	20000130 	.word	0x20000130
 8007064:	200002f4 	.word	0x200002f4
 8007068:	20000018 	.word	0x20000018
 800706c:	2000011c 	.word	0x2000011c

08007070 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007074:	2200      	movs	r2, #0
 8007076:	4905      	ldr	r1, [pc, #20]	; (800708c <CDC_Init_FS+0x1c>)
 8007078:	4805      	ldr	r0, [pc, #20]	; (8007090 <CDC_Init_FS+0x20>)
 800707a:	f7fe fe6c 	bl	8005d56 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800707e:	4905      	ldr	r1, [pc, #20]	; (8007094 <CDC_Init_FS+0x24>)
 8007080:	4803      	ldr	r0, [pc, #12]	; (8007090 <CDC_Init_FS+0x20>)
 8007082:	f7fe fe81 	bl	8005d88 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007086:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007088:	4618      	mov	r0, r3
 800708a:	bd80      	pop	{r7, pc}
 800708c:	20000dc4 	.word	0x20000dc4
 8007090:	200002f4 	.word	0x200002f4
 8007094:	200005c4 	.word	0x200005c4

08007098 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800709c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800709e:	4618      	mov	r0, r3
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	6039      	str	r1, [r7, #0]
 80070b2:	71fb      	strb	r3, [r7, #7]
 80070b4:	4613      	mov	r3, r2
 80070b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80070b8:	79fb      	ldrb	r3, [r7, #7]
 80070ba:	2b23      	cmp	r3, #35	; 0x23
 80070bc:	d84a      	bhi.n	8007154 <CDC_Control_FS+0xac>
 80070be:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <CDC_Control_FS+0x1c>)
 80070c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c4:	08007155 	.word	0x08007155
 80070c8:	08007155 	.word	0x08007155
 80070cc:	08007155 	.word	0x08007155
 80070d0:	08007155 	.word	0x08007155
 80070d4:	08007155 	.word	0x08007155
 80070d8:	08007155 	.word	0x08007155
 80070dc:	08007155 	.word	0x08007155
 80070e0:	08007155 	.word	0x08007155
 80070e4:	08007155 	.word	0x08007155
 80070e8:	08007155 	.word	0x08007155
 80070ec:	08007155 	.word	0x08007155
 80070f0:	08007155 	.word	0x08007155
 80070f4:	08007155 	.word	0x08007155
 80070f8:	08007155 	.word	0x08007155
 80070fc:	08007155 	.word	0x08007155
 8007100:	08007155 	.word	0x08007155
 8007104:	08007155 	.word	0x08007155
 8007108:	08007155 	.word	0x08007155
 800710c:	08007155 	.word	0x08007155
 8007110:	08007155 	.word	0x08007155
 8007114:	08007155 	.word	0x08007155
 8007118:	08007155 	.word	0x08007155
 800711c:	08007155 	.word	0x08007155
 8007120:	08007155 	.word	0x08007155
 8007124:	08007155 	.word	0x08007155
 8007128:	08007155 	.word	0x08007155
 800712c:	08007155 	.word	0x08007155
 8007130:	08007155 	.word	0x08007155
 8007134:	08007155 	.word	0x08007155
 8007138:	08007155 	.word	0x08007155
 800713c:	08007155 	.word	0x08007155
 8007140:	08007155 	.word	0x08007155
 8007144:	08007155 	.word	0x08007155
 8007148:	08007155 	.word	0x08007155
 800714c:	08007155 	.word	0x08007155
 8007150:	08007155 	.word	0x08007155
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007154:	bf00      	nop
  }

  return (USBD_OK);
 8007156:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	4808      	ldr	r0, [pc, #32]	; (8007194 <CDC_Receive_FS+0x30>)
 8007172:	f7fe fe09 	bl	8005d88 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007176:	4807      	ldr	r0, [pc, #28]	; (8007194 <CDC_Receive_FS+0x30>)
 8007178:	f7fe fe1a 	bl	8005db0 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, Len[0]);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f819 	bl	80071ba <CDC_ReceiveCallback>
  return (USBD_OK);
 8007188:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	200002f4 	.word	0x200002f4

08007198 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4613      	mov	r3, r2
 80071a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80071aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <CDC_ReceiveCallback>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
__weak void CDC_ReceiveCallback(uint8_t *buf, uint32_t len)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	6039      	str	r1, [r7, #0]

}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4603      	mov	r3, r0
 80071d8:	6039      	str	r1, [r7, #0]
 80071da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2212      	movs	r2, #18
 80071e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80071e2:	4b03      	ldr	r3, [pc, #12]	; (80071f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	2000014c 	.word	0x2000014c

080071f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4603      	mov	r3, r0
 80071fc:	6039      	str	r1, [r7, #0]
 80071fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	2204      	movs	r2, #4
 8007204:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007206:	4b03      	ldr	r3, [pc, #12]	; (8007214 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	20000160 	.word	0x20000160

08007218 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	4603      	mov	r3, r0
 8007220:	6039      	str	r1, [r7, #0]
 8007222:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007224:	79fb      	ldrb	r3, [r7, #7]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d105      	bne.n	8007236 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	4907      	ldr	r1, [pc, #28]	; (800724c <USBD_FS_ProductStrDescriptor+0x34>)
 800722e:	4808      	ldr	r0, [pc, #32]	; (8007250 <USBD_FS_ProductStrDescriptor+0x38>)
 8007230:	f7ff fe0d 	bl	8006e4e <USBD_GetString>
 8007234:	e004      	b.n	8007240 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	4904      	ldr	r1, [pc, #16]	; (800724c <USBD_FS_ProductStrDescriptor+0x34>)
 800723a:	4805      	ldr	r0, [pc, #20]	; (8007250 <USBD_FS_ProductStrDescriptor+0x38>)
 800723c:	f7ff fe07 	bl	8006e4e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007240:	4b02      	ldr	r3, [pc, #8]	; (800724c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	200015c4 	.word	0x200015c4
 8007250:	08007be0 	.word	0x08007be0

08007254 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	6039      	str	r1, [r7, #0]
 800725e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	4904      	ldr	r1, [pc, #16]	; (8007274 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007264:	4804      	ldr	r0, [pc, #16]	; (8007278 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007266:	f7ff fdf2 	bl	8006e4e <USBD_GetString>
  return USBD_StrDesc;
 800726a:	4b02      	ldr	r3, [pc, #8]	; (8007274 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	200015c4 	.word	0x200015c4
 8007278:	08007bf8 	.word	0x08007bf8

0800727c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	6039      	str	r1, [r7, #0]
 8007286:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	221a      	movs	r2, #26
 800728c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800728e:	f000 f843 	bl	8007318 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007292:	4b02      	ldr	r3, [pc, #8]	; (800729c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007294:	4618      	mov	r0, r3
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	20000164 	.word	0x20000164

080072a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	4603      	mov	r3, r0
 80072a8:	6039      	str	r1, [r7, #0]
 80072aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80072ac:	79fb      	ldrb	r3, [r7, #7]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d105      	bne.n	80072be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	4907      	ldr	r1, [pc, #28]	; (80072d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072b6:	4808      	ldr	r0, [pc, #32]	; (80072d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80072b8:	f7ff fdc9 	bl	8006e4e <USBD_GetString>
 80072bc:	e004      	b.n	80072c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	4904      	ldr	r1, [pc, #16]	; (80072d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072c2:	4805      	ldr	r0, [pc, #20]	; (80072d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80072c4:	f7ff fdc3 	bl	8006e4e <USBD_GetString>
  }
  return USBD_StrDesc;
 80072c8:	4b02      	ldr	r3, [pc, #8]	; (80072d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	200015c4 	.word	0x200015c4
 80072d8:	08007c0c 	.word	0x08007c0c

080072dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4603      	mov	r3, r0
 80072e4:	6039      	str	r1, [r7, #0]
 80072e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072e8:	79fb      	ldrb	r3, [r7, #7]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d105      	bne.n	80072fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	4907      	ldr	r1, [pc, #28]	; (8007310 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072f2:	4808      	ldr	r0, [pc, #32]	; (8007314 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072f4:	f7ff fdab 	bl	8006e4e <USBD_GetString>
 80072f8:	e004      	b.n	8007304 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	4904      	ldr	r1, [pc, #16]	; (8007310 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072fe:	4805      	ldr	r0, [pc, #20]	; (8007314 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007300:	f7ff fda5 	bl	8006e4e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007304:	4b02      	ldr	r3, [pc, #8]	; (8007310 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007306:	4618      	mov	r0, r3
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	200015c4 	.word	0x200015c4
 8007314:	08007c18 	.word	0x08007c18

08007318 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800731e:	4b0f      	ldr	r3, [pc, #60]	; (800735c <Get_SerialNum+0x44>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007324:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <Get_SerialNum+0x48>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800732a:	4b0e      	ldr	r3, [pc, #56]	; (8007364 <Get_SerialNum+0x4c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4413      	add	r3, r2
 8007336:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800733e:	2208      	movs	r2, #8
 8007340:	4909      	ldr	r1, [pc, #36]	; (8007368 <Get_SerialNum+0x50>)
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 f814 	bl	8007370 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007348:	2204      	movs	r2, #4
 800734a:	4908      	ldr	r1, [pc, #32]	; (800736c <Get_SerialNum+0x54>)
 800734c:	68b8      	ldr	r0, [r7, #8]
 800734e:	f000 f80f 	bl	8007370 <IntToUnicode>
  }
}
 8007352:	bf00      	nop
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	1fff7a10 	.word	0x1fff7a10
 8007360:	1fff7a14 	.word	0x1fff7a14
 8007364:	1fff7a18 	.word	0x1fff7a18
 8007368:	20000166 	.word	0x20000166
 800736c:	20000176 	.word	0x20000176

08007370 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	4613      	mov	r3, r2
 800737c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007382:	2300      	movs	r3, #0
 8007384:	75fb      	strb	r3, [r7, #23]
 8007386:	e027      	b.n	80073d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	0f1b      	lsrs	r3, r3, #28
 800738c:	2b09      	cmp	r3, #9
 800738e:	d80b      	bhi.n	80073a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	0f1b      	lsrs	r3, r3, #28
 8007394:	b2da      	uxtb	r2, r3
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	4619      	mov	r1, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	440b      	add	r3, r1
 80073a0:	3230      	adds	r2, #48	; 0x30
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	701a      	strb	r2, [r3, #0]
 80073a6:	e00a      	b.n	80073be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	0f1b      	lsrs	r3, r3, #28
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	4619      	mov	r1, r3
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	440b      	add	r3, r1
 80073b8:	3237      	adds	r2, #55	; 0x37
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80073c4:	7dfb      	ldrb	r3, [r7, #23]
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	3301      	adds	r3, #1
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	4413      	add	r3, r2
 80073ce:	2200      	movs	r2, #0
 80073d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80073d2:	7dfb      	ldrb	r3, [r7, #23]
 80073d4:	3301      	adds	r3, #1
 80073d6:	75fb      	strb	r3, [r7, #23]
 80073d8:	7dfa      	ldrb	r2, [r7, #23]
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d3d3      	bcc.n	8007388 <IntToUnicode+0x18>
  }
}
 80073e0:	bf00      	nop
 80073e2:	371c      	adds	r7, #28
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08a      	sub	sp, #40	; 0x28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073f4:	f107 0314 	add.w	r3, r7, #20
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	605a      	str	r2, [r3, #4]
 80073fe:	609a      	str	r2, [r3, #8]
 8007400:	60da      	str	r2, [r3, #12]
 8007402:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800740c:	d13a      	bne.n	8007484 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800740e:	2300      	movs	r3, #0
 8007410:	613b      	str	r3, [r7, #16]
 8007412:	4b1e      	ldr	r3, [pc, #120]	; (800748c <HAL_PCD_MspInit+0xa0>)
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	4a1d      	ldr	r2, [pc, #116]	; (800748c <HAL_PCD_MspInit+0xa0>)
 8007418:	f043 0301 	orr.w	r3, r3, #1
 800741c:	6313      	str	r3, [r2, #48]	; 0x30
 800741e:	4b1b      	ldr	r3, [pc, #108]	; (800748c <HAL_PCD_MspInit+0xa0>)
 8007420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	613b      	str	r3, [r7, #16]
 8007428:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800742a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800742e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007430:	2302      	movs	r3, #2
 8007432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007434:	2300      	movs	r3, #0
 8007436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007438:	2303      	movs	r3, #3
 800743a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800743c:	230a      	movs	r3, #10
 800743e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007440:	f107 0314 	add.w	r3, r7, #20
 8007444:	4619      	mov	r1, r3
 8007446:	4812      	ldr	r0, [pc, #72]	; (8007490 <HAL_PCD_MspInit+0xa4>)
 8007448:	f7f9 fdea 	bl	8001020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800744c:	4b0f      	ldr	r3, [pc, #60]	; (800748c <HAL_PCD_MspInit+0xa0>)
 800744e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007450:	4a0e      	ldr	r2, [pc, #56]	; (800748c <HAL_PCD_MspInit+0xa0>)
 8007452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007456:	6353      	str	r3, [r2, #52]	; 0x34
 8007458:	2300      	movs	r3, #0
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	4b0b      	ldr	r3, [pc, #44]	; (800748c <HAL_PCD_MspInit+0xa0>)
 800745e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007460:	4a0a      	ldr	r2, [pc, #40]	; (800748c <HAL_PCD_MspInit+0xa0>)
 8007462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007466:	6453      	str	r3, [r2, #68]	; 0x44
 8007468:	4b08      	ldr	r3, [pc, #32]	; (800748c <HAL_PCD_MspInit+0xa0>)
 800746a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800746c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007474:	2200      	movs	r2, #0
 8007476:	2100      	movs	r1, #0
 8007478:	2043      	movs	r0, #67	; 0x43
 800747a:	f7f9 fd9a 	bl	8000fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800747e:	2043      	movs	r0, #67	; 0x43
 8007480:	f7f9 fdb3 	bl	8000fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007484:	bf00      	nop
 8007486:	3728      	adds	r7, #40	; 0x28
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	40023800 	.word	0x40023800
 8007490:	40020000 	.word	0x40020000

08007494 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80074a8:	4619      	mov	r1, r3
 80074aa:	4610      	mov	r0, r2
 80074ac:	f7fe fd4c 	bl	8005f48 <USBD_LL_SetupStage>
}
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	460b      	mov	r3, r1
 80074c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80074ca:	78fa      	ldrb	r2, [r7, #3]
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	4613      	mov	r3, r2
 80074d0:	00db      	lsls	r3, r3, #3
 80074d2:	1a9b      	subs	r3, r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	440b      	add	r3, r1
 80074d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	78fb      	ldrb	r3, [r7, #3]
 80074e0:	4619      	mov	r1, r3
 80074e2:	f7fe fd84 	bl	8005fee <USBD_LL_DataOutStage>
}
 80074e6:	bf00      	nop
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b082      	sub	sp, #8
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	460b      	mov	r3, r1
 80074f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007500:	78fa      	ldrb	r2, [r7, #3]
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	4613      	mov	r3, r2
 8007506:	00db      	lsls	r3, r3, #3
 8007508:	1a9b      	subs	r3, r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	440b      	add	r3, r1
 800750e:	3348      	adds	r3, #72	; 0x48
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	4619      	mov	r1, r3
 8007516:	f7fe fdcd 	bl	80060b4 <USBD_LL_DataInStage>
}
 800751a:	bf00      	nop
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007530:	4618      	mov	r0, r3
 8007532:	f7fe fed1 	bl	80062d8 <USBD_LL_SOF>
}
 8007536:	bf00      	nop
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007546:	2301      	movs	r3, #1
 8007548:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	2b02      	cmp	r3, #2
 8007550:	d001      	beq.n	8007556 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007552:	f7f9 f9f5 	bl	8000940 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800755c:	7bfa      	ldrb	r2, [r7, #15]
 800755e:	4611      	mov	r1, r2
 8007560:	4618      	mov	r0, r3
 8007562:	f7fe fe7e 	bl	8006262 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800756c:	4618      	mov	r0, r3
 800756e:	f7fe fe37 	bl	80061e0 <USBD_LL_Reset>
}
 8007572:	bf00      	nop
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800758a:	4618      	mov	r0, r3
 800758c:	f7fe fe79 	bl	8006282 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	6812      	ldr	r2, [r2, #0]
 800759e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075a2:	f043 0301 	orr.w	r3, r3, #1
 80075a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a1b      	ldr	r3, [r3, #32]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d005      	beq.n	80075bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075b0:	4b04      	ldr	r3, [pc, #16]	; (80075c4 <HAL_PCD_SuspendCallback+0x48>)
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	4a03      	ldr	r2, [pc, #12]	; (80075c4 <HAL_PCD_SuspendCallback+0x48>)
 80075b6:	f043 0306 	orr.w	r3, r3, #6
 80075ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80075bc:	bf00      	nop
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	e000ed00 	.word	0xe000ed00

080075c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe fe68 	bl	80062ac <USBD_LL_Resume>
}
 80075dc:	bf00      	nop
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075f6:	78fa      	ldrb	r2, [r7, #3]
 80075f8:	4611      	mov	r1, r2
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe fe93 	bl	8006326 <USBD_LL_IsoOUTIncomplete>
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800761a:	78fa      	ldrb	r2, [r7, #3]
 800761c:	4611      	mov	r1, r2
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe fe74 	bl	800630c <USBD_LL_IsoINIncomplete>
}
 8007624:	bf00      	nop
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe fe80 	bl	8006340 <USBD_LL_DevConnected>
}
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe fe7d 	bl	8006356 <USBD_LL_DevDisconnected>
}
 800765c:	bf00      	nop
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d13c      	bne.n	80076ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007674:	4a20      	ldr	r2, [pc, #128]	; (80076f8 <USBD_LL_Init+0x94>)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a1e      	ldr	r2, [pc, #120]	; (80076f8 <USBD_LL_Init+0x94>)
 8007680:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007684:	4b1c      	ldr	r3, [pc, #112]	; (80076f8 <USBD_LL_Init+0x94>)
 8007686:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800768a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800768c:	4b1a      	ldr	r3, [pc, #104]	; (80076f8 <USBD_LL_Init+0x94>)
 800768e:	2204      	movs	r2, #4
 8007690:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007692:	4b19      	ldr	r3, [pc, #100]	; (80076f8 <USBD_LL_Init+0x94>)
 8007694:	2202      	movs	r2, #2
 8007696:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007698:	4b17      	ldr	r3, [pc, #92]	; (80076f8 <USBD_LL_Init+0x94>)
 800769a:	2200      	movs	r2, #0
 800769c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800769e:	4b16      	ldr	r3, [pc, #88]	; (80076f8 <USBD_LL_Init+0x94>)
 80076a0:	2202      	movs	r2, #2
 80076a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076a4:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <USBD_LL_Init+0x94>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80076aa:	4b13      	ldr	r3, [pc, #76]	; (80076f8 <USBD_LL_Init+0x94>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80076b0:	4b11      	ldr	r3, [pc, #68]	; (80076f8 <USBD_LL_Init+0x94>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80076b6:	4b10      	ldr	r3, [pc, #64]	; (80076f8 <USBD_LL_Init+0x94>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80076bc:	4b0e      	ldr	r3, [pc, #56]	; (80076f8 <USBD_LL_Init+0x94>)
 80076be:	2200      	movs	r2, #0
 80076c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80076c2:	480d      	ldr	r0, [pc, #52]	; (80076f8 <USBD_LL_Init+0x94>)
 80076c4:	f7f9 fe47 	bl	8001356 <HAL_PCD_Init>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80076ce:	f7f9 f937 	bl	8000940 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80076d2:	2180      	movs	r1, #128	; 0x80
 80076d4:	4808      	ldr	r0, [pc, #32]	; (80076f8 <USBD_LL_Init+0x94>)
 80076d6:	f7fa ffa4 	bl	8002622 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80076da:	2240      	movs	r2, #64	; 0x40
 80076dc:	2100      	movs	r1, #0
 80076de:	4806      	ldr	r0, [pc, #24]	; (80076f8 <USBD_LL_Init+0x94>)
 80076e0:	f7fa ff58 	bl	8002594 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80076e4:	2280      	movs	r2, #128	; 0x80
 80076e6:	2101      	movs	r1, #1
 80076e8:	4803      	ldr	r0, [pc, #12]	; (80076f8 <USBD_LL_Init+0x94>)
 80076ea:	f7fa ff53 	bl	8002594 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	200017c4 	.word	0x200017c4

080076fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007712:	4618      	mov	r0, r3
 8007714:	f7f9 ff3c 	bl	8001590 <HAL_PCD_Start>
 8007718:	4603      	mov	r3, r0
 800771a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800771c:	7bfb      	ldrb	r3, [r7, #15]
 800771e:	4618      	mov	r0, r3
 8007720:	f000 f92a 	bl	8007978 <USBD_Get_USB_Status>
 8007724:	4603      	mov	r3, r0
 8007726:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007728:	7bbb      	ldrb	r3, [r7, #14]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	4608      	mov	r0, r1
 800773c:	4611      	mov	r1, r2
 800773e:	461a      	mov	r2, r3
 8007740:	4603      	mov	r3, r0
 8007742:	70fb      	strb	r3, [r7, #3]
 8007744:	460b      	mov	r3, r1
 8007746:	70bb      	strb	r3, [r7, #2]
 8007748:	4613      	mov	r3, r2
 800774a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800775a:	78bb      	ldrb	r3, [r7, #2]
 800775c:	883a      	ldrh	r2, [r7, #0]
 800775e:	78f9      	ldrb	r1, [r7, #3]
 8007760:	f7fa fb20 	bl	8001da4 <HAL_PCD_EP_Open>
 8007764:	4603      	mov	r3, r0
 8007766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	4618      	mov	r0, r3
 800776c:	f000 f904 	bl	8007978 <USBD_Get_USB_Status>
 8007770:	4603      	mov	r3, r0
 8007772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007774:	7bbb      	ldrb	r3, [r7, #14]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b084      	sub	sp, #16
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	460b      	mov	r3, r1
 8007788:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007798:	78fa      	ldrb	r2, [r7, #3]
 800779a:	4611      	mov	r1, r2
 800779c:	4618      	mov	r0, r3
 800779e:	f7fa fb69 	bl	8001e74 <HAL_PCD_EP_Close>
 80077a2:	4603      	mov	r3, r0
 80077a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 f8e5 	bl	8007978 <USBD_Get_USB_Status>
 80077ae:	4603      	mov	r3, r0
 80077b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077d6:	78fa      	ldrb	r2, [r7, #3]
 80077d8:	4611      	mov	r1, r2
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fa fc41 	bl	8002062 <HAL_PCD_EP_SetStall>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 f8c6 	bl	8007978 <USBD_Get_USB_Status>
 80077ec:	4603      	mov	r3, r0
 80077ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	460b      	mov	r3, r1
 8007804:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007814:	78fa      	ldrb	r2, [r7, #3]
 8007816:	4611      	mov	r1, r2
 8007818:	4618      	mov	r0, r3
 800781a:	f7fa fc86 	bl	800212a <HAL_PCD_EP_ClrStall>
 800781e:	4603      	mov	r3, r0
 8007820:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007822:	7bfb      	ldrb	r3, [r7, #15]
 8007824:	4618      	mov	r0, r3
 8007826:	f000 f8a7 	bl	8007978 <USBD_Get_USB_Status>
 800782a:	4603      	mov	r3, r0
 800782c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800782e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	460b      	mov	r3, r1
 8007842:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800784a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800784c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007850:	2b00      	cmp	r3, #0
 8007852:	da0b      	bge.n	800786c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800785a:	68f9      	ldr	r1, [r7, #12]
 800785c:	4613      	mov	r3, r2
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	440b      	add	r3, r1
 8007866:	333e      	adds	r3, #62	; 0x3e
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	e00b      	b.n	8007884 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800786c:	78fb      	ldrb	r3, [r7, #3]
 800786e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007872:	68f9      	ldr	r1, [r7, #12]
 8007874:	4613      	mov	r3, r2
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	1a9b      	subs	r3, r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	440b      	add	r3, r1
 800787e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007882:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078aa:	78fa      	ldrb	r2, [r7, #3]
 80078ac:	4611      	mov	r1, r2
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fa fa53 	bl	8001d5a <HAL_PCD_SetAddress>
 80078b4:	4603      	mov	r3, r0
 80078b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 f85c 	bl	8007978 <USBD_Get_USB_Status>
 80078c0:	4603      	mov	r3, r0
 80078c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b086      	sub	sp, #24
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	60f8      	str	r0, [r7, #12]
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	603b      	str	r3, [r7, #0]
 80078da:	460b      	mov	r3, r1
 80078dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80078ec:	7af9      	ldrb	r1, [r7, #11]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	f7fa fb6c 	bl	8001fce <HAL_PCD_EP_Transmit>
 80078f6:	4603      	mov	r3, r0
 80078f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 f83b 	bl	8007978 <USBD_Get_USB_Status>
 8007902:	4603      	mov	r3, r0
 8007904:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007906:	7dbb      	ldrb	r3, [r7, #22]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3718      	adds	r7, #24
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	607a      	str	r2, [r7, #4]
 800791a:	603b      	str	r3, [r7, #0]
 800791c:	460b      	mov	r3, r1
 800791e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800792e:	7af9      	ldrb	r1, [r7, #11]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	f7fa fae8 	bl	8001f08 <HAL_PCD_EP_Receive>
 8007938:	4603      	mov	r3, r0
 800793a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800793c:	7dfb      	ldrb	r3, [r7, #23]
 800793e:	4618      	mov	r0, r3
 8007940:	f000 f81a 	bl	8007978 <USBD_Get_USB_Status>
 8007944:	4603      	mov	r3, r0
 8007946:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007948:	7dbb      	ldrb	r3, [r7, #22]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b082      	sub	sp, #8
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	460b      	mov	r3, r1
 800795c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007964:	78fa      	ldrb	r2, [r7, #3]
 8007966:	4611      	mov	r1, r2
 8007968:	4618      	mov	r0, r3
 800796a:	f7fa fb18 	bl	8001f9e <HAL_PCD_EP_GetRxCount>
 800796e:	4603      	mov	r3, r0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	4603      	mov	r3, r0
 8007980:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007986:	79fb      	ldrb	r3, [r7, #7]
 8007988:	2b03      	cmp	r3, #3
 800798a:	d817      	bhi.n	80079bc <USBD_Get_USB_Status+0x44>
 800798c:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <USBD_Get_USB_Status+0x1c>)
 800798e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007992:	bf00      	nop
 8007994:	080079a5 	.word	0x080079a5
 8007998:	080079ab 	.word	0x080079ab
 800799c:	080079b1 	.word	0x080079b1
 80079a0:	080079b7 	.word	0x080079b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	73fb      	strb	r3, [r7, #15]
    break;
 80079a8:	e00b      	b.n	80079c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079aa:	2303      	movs	r3, #3
 80079ac:	73fb      	strb	r3, [r7, #15]
    break;
 80079ae:	e008      	b.n	80079c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079b0:	2301      	movs	r3, #1
 80079b2:	73fb      	strb	r3, [r7, #15]
    break;
 80079b4:	e005      	b.n	80079c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079b6:	2303      	movs	r3, #3
 80079b8:	73fb      	strb	r3, [r7, #15]
    break;
 80079ba:	e002      	b.n	80079c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80079bc:	2303      	movs	r3, #3
 80079be:	73fb      	strb	r3, [r7, #15]
    break;
 80079c0:	bf00      	nop
  }
  return usb_status;
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <__errno>:
 80079d0:	4b01      	ldr	r3, [pc, #4]	; (80079d8 <__errno+0x8>)
 80079d2:	6818      	ldr	r0, [r3, #0]
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	20000180 	.word	0x20000180

080079dc <__libc_init_array>:
 80079dc:	b570      	push	{r4, r5, r6, lr}
 80079de:	4e0d      	ldr	r6, [pc, #52]	; (8007a14 <__libc_init_array+0x38>)
 80079e0:	4c0d      	ldr	r4, [pc, #52]	; (8007a18 <__libc_init_array+0x3c>)
 80079e2:	1ba4      	subs	r4, r4, r6
 80079e4:	10a4      	asrs	r4, r4, #2
 80079e6:	2500      	movs	r5, #0
 80079e8:	42a5      	cmp	r5, r4
 80079ea:	d109      	bne.n	8007a00 <__libc_init_array+0x24>
 80079ec:	4e0b      	ldr	r6, [pc, #44]	; (8007a1c <__libc_init_array+0x40>)
 80079ee:	4c0c      	ldr	r4, [pc, #48]	; (8007a20 <__libc_init_array+0x44>)
 80079f0:	f000 f8ea 	bl	8007bc8 <_init>
 80079f4:	1ba4      	subs	r4, r4, r6
 80079f6:	10a4      	asrs	r4, r4, #2
 80079f8:	2500      	movs	r5, #0
 80079fa:	42a5      	cmp	r5, r4
 80079fc:	d105      	bne.n	8007a0a <__libc_init_array+0x2e>
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a04:	4798      	blx	r3
 8007a06:	3501      	adds	r5, #1
 8007a08:	e7ee      	b.n	80079e8 <__libc_init_array+0xc>
 8007a0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a0e:	4798      	blx	r3
 8007a10:	3501      	adds	r5, #1
 8007a12:	e7f2      	b.n	80079fa <__libc_init_array+0x1e>
 8007a14:	08007c48 	.word	0x08007c48
 8007a18:	08007c48 	.word	0x08007c48
 8007a1c:	08007c48 	.word	0x08007c48
 8007a20:	08007c4c 	.word	0x08007c4c

08007a24 <malloc>:
 8007a24:	4b02      	ldr	r3, [pc, #8]	; (8007a30 <malloc+0xc>)
 8007a26:	4601      	mov	r1, r0
 8007a28:	6818      	ldr	r0, [r3, #0]
 8007a2a:	f000 b861 	b.w	8007af0 <_malloc_r>
 8007a2e:	bf00      	nop
 8007a30:	20000180 	.word	0x20000180

08007a34 <free>:
 8007a34:	4b02      	ldr	r3, [pc, #8]	; (8007a40 <free+0xc>)
 8007a36:	4601      	mov	r1, r0
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	f000 b80b 	b.w	8007a54 <_free_r>
 8007a3e:	bf00      	nop
 8007a40:	20000180 	.word	0x20000180

08007a44 <memset>:
 8007a44:	4402      	add	r2, r0
 8007a46:	4603      	mov	r3, r0
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d100      	bne.n	8007a4e <memset+0xa>
 8007a4c:	4770      	bx	lr
 8007a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a52:	e7f9      	b.n	8007a48 <memset+0x4>

08007a54 <_free_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4605      	mov	r5, r0
 8007a58:	2900      	cmp	r1, #0
 8007a5a:	d045      	beq.n	8007ae8 <_free_r+0x94>
 8007a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a60:	1f0c      	subs	r4, r1, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	bfb8      	it	lt
 8007a66:	18e4      	addlt	r4, r4, r3
 8007a68:	f000 f8ac 	bl	8007bc4 <__malloc_lock>
 8007a6c:	4a1f      	ldr	r2, [pc, #124]	; (8007aec <_free_r+0x98>)
 8007a6e:	6813      	ldr	r3, [r2, #0]
 8007a70:	4610      	mov	r0, r2
 8007a72:	b933      	cbnz	r3, 8007a82 <_free_r+0x2e>
 8007a74:	6063      	str	r3, [r4, #4]
 8007a76:	6014      	str	r4, [r2, #0]
 8007a78:	4628      	mov	r0, r5
 8007a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a7e:	f000 b8a2 	b.w	8007bc6 <__malloc_unlock>
 8007a82:	42a3      	cmp	r3, r4
 8007a84:	d90c      	bls.n	8007aa0 <_free_r+0x4c>
 8007a86:	6821      	ldr	r1, [r4, #0]
 8007a88:	1862      	adds	r2, r4, r1
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	bf04      	itt	eq
 8007a8e:	681a      	ldreq	r2, [r3, #0]
 8007a90:	685b      	ldreq	r3, [r3, #4]
 8007a92:	6063      	str	r3, [r4, #4]
 8007a94:	bf04      	itt	eq
 8007a96:	1852      	addeq	r2, r2, r1
 8007a98:	6022      	streq	r2, [r4, #0]
 8007a9a:	6004      	str	r4, [r0, #0]
 8007a9c:	e7ec      	b.n	8007a78 <_free_r+0x24>
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	b10a      	cbz	r2, 8007aa8 <_free_r+0x54>
 8007aa4:	42a2      	cmp	r2, r4
 8007aa6:	d9fa      	bls.n	8007a9e <_free_r+0x4a>
 8007aa8:	6819      	ldr	r1, [r3, #0]
 8007aaa:	1858      	adds	r0, r3, r1
 8007aac:	42a0      	cmp	r0, r4
 8007aae:	d10b      	bne.n	8007ac8 <_free_r+0x74>
 8007ab0:	6820      	ldr	r0, [r4, #0]
 8007ab2:	4401      	add	r1, r0
 8007ab4:	1858      	adds	r0, r3, r1
 8007ab6:	4282      	cmp	r2, r0
 8007ab8:	6019      	str	r1, [r3, #0]
 8007aba:	d1dd      	bne.n	8007a78 <_free_r+0x24>
 8007abc:	6810      	ldr	r0, [r2, #0]
 8007abe:	6852      	ldr	r2, [r2, #4]
 8007ac0:	605a      	str	r2, [r3, #4]
 8007ac2:	4401      	add	r1, r0
 8007ac4:	6019      	str	r1, [r3, #0]
 8007ac6:	e7d7      	b.n	8007a78 <_free_r+0x24>
 8007ac8:	d902      	bls.n	8007ad0 <_free_r+0x7c>
 8007aca:	230c      	movs	r3, #12
 8007acc:	602b      	str	r3, [r5, #0]
 8007ace:	e7d3      	b.n	8007a78 <_free_r+0x24>
 8007ad0:	6820      	ldr	r0, [r4, #0]
 8007ad2:	1821      	adds	r1, r4, r0
 8007ad4:	428a      	cmp	r2, r1
 8007ad6:	bf04      	itt	eq
 8007ad8:	6811      	ldreq	r1, [r2, #0]
 8007ada:	6852      	ldreq	r2, [r2, #4]
 8007adc:	6062      	str	r2, [r4, #4]
 8007ade:	bf04      	itt	eq
 8007ae0:	1809      	addeq	r1, r1, r0
 8007ae2:	6021      	streq	r1, [r4, #0]
 8007ae4:	605c      	str	r4, [r3, #4]
 8007ae6:	e7c7      	b.n	8007a78 <_free_r+0x24>
 8007ae8:	bd38      	pop	{r3, r4, r5, pc}
 8007aea:	bf00      	nop
 8007aec:	2000020c 	.word	0x2000020c

08007af0 <_malloc_r>:
 8007af0:	b570      	push	{r4, r5, r6, lr}
 8007af2:	1ccd      	adds	r5, r1, #3
 8007af4:	f025 0503 	bic.w	r5, r5, #3
 8007af8:	3508      	adds	r5, #8
 8007afa:	2d0c      	cmp	r5, #12
 8007afc:	bf38      	it	cc
 8007afe:	250c      	movcc	r5, #12
 8007b00:	2d00      	cmp	r5, #0
 8007b02:	4606      	mov	r6, r0
 8007b04:	db01      	blt.n	8007b0a <_malloc_r+0x1a>
 8007b06:	42a9      	cmp	r1, r5
 8007b08:	d903      	bls.n	8007b12 <_malloc_r+0x22>
 8007b0a:	230c      	movs	r3, #12
 8007b0c:	6033      	str	r3, [r6, #0]
 8007b0e:	2000      	movs	r0, #0
 8007b10:	bd70      	pop	{r4, r5, r6, pc}
 8007b12:	f000 f857 	bl	8007bc4 <__malloc_lock>
 8007b16:	4a21      	ldr	r2, [pc, #132]	; (8007b9c <_malloc_r+0xac>)
 8007b18:	6814      	ldr	r4, [r2, #0]
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	b991      	cbnz	r1, 8007b44 <_malloc_r+0x54>
 8007b1e:	4c20      	ldr	r4, [pc, #128]	; (8007ba0 <_malloc_r+0xb0>)
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	b91b      	cbnz	r3, 8007b2c <_malloc_r+0x3c>
 8007b24:	4630      	mov	r0, r6
 8007b26:	f000 f83d 	bl	8007ba4 <_sbrk_r>
 8007b2a:	6020      	str	r0, [r4, #0]
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f000 f838 	bl	8007ba4 <_sbrk_r>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d124      	bne.n	8007b82 <_malloc_r+0x92>
 8007b38:	230c      	movs	r3, #12
 8007b3a:	6033      	str	r3, [r6, #0]
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	f000 f842 	bl	8007bc6 <__malloc_unlock>
 8007b42:	e7e4      	b.n	8007b0e <_malloc_r+0x1e>
 8007b44:	680b      	ldr	r3, [r1, #0]
 8007b46:	1b5b      	subs	r3, r3, r5
 8007b48:	d418      	bmi.n	8007b7c <_malloc_r+0x8c>
 8007b4a:	2b0b      	cmp	r3, #11
 8007b4c:	d90f      	bls.n	8007b6e <_malloc_r+0x7e>
 8007b4e:	600b      	str	r3, [r1, #0]
 8007b50:	50cd      	str	r5, [r1, r3]
 8007b52:	18cc      	adds	r4, r1, r3
 8007b54:	4630      	mov	r0, r6
 8007b56:	f000 f836 	bl	8007bc6 <__malloc_unlock>
 8007b5a:	f104 000b 	add.w	r0, r4, #11
 8007b5e:	1d23      	adds	r3, r4, #4
 8007b60:	f020 0007 	bic.w	r0, r0, #7
 8007b64:	1ac3      	subs	r3, r0, r3
 8007b66:	d0d3      	beq.n	8007b10 <_malloc_r+0x20>
 8007b68:	425a      	negs	r2, r3
 8007b6a:	50e2      	str	r2, [r4, r3]
 8007b6c:	e7d0      	b.n	8007b10 <_malloc_r+0x20>
 8007b6e:	428c      	cmp	r4, r1
 8007b70:	684b      	ldr	r3, [r1, #4]
 8007b72:	bf16      	itet	ne
 8007b74:	6063      	strne	r3, [r4, #4]
 8007b76:	6013      	streq	r3, [r2, #0]
 8007b78:	460c      	movne	r4, r1
 8007b7a:	e7eb      	b.n	8007b54 <_malloc_r+0x64>
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	6849      	ldr	r1, [r1, #4]
 8007b80:	e7cc      	b.n	8007b1c <_malloc_r+0x2c>
 8007b82:	1cc4      	adds	r4, r0, #3
 8007b84:	f024 0403 	bic.w	r4, r4, #3
 8007b88:	42a0      	cmp	r0, r4
 8007b8a:	d005      	beq.n	8007b98 <_malloc_r+0xa8>
 8007b8c:	1a21      	subs	r1, r4, r0
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f000 f808 	bl	8007ba4 <_sbrk_r>
 8007b94:	3001      	adds	r0, #1
 8007b96:	d0cf      	beq.n	8007b38 <_malloc_r+0x48>
 8007b98:	6025      	str	r5, [r4, #0]
 8007b9a:	e7db      	b.n	8007b54 <_malloc_r+0x64>
 8007b9c:	2000020c 	.word	0x2000020c
 8007ba0:	20000210 	.word	0x20000210

08007ba4 <_sbrk_r>:
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	4c06      	ldr	r4, [pc, #24]	; (8007bc0 <_sbrk_r+0x1c>)
 8007ba8:	2300      	movs	r3, #0
 8007baa:	4605      	mov	r5, r0
 8007bac:	4608      	mov	r0, r1
 8007bae:	6023      	str	r3, [r4, #0]
 8007bb0:	f7f9 f81a 	bl	8000be8 <_sbrk>
 8007bb4:	1c43      	adds	r3, r0, #1
 8007bb6:	d102      	bne.n	8007bbe <_sbrk_r+0x1a>
 8007bb8:	6823      	ldr	r3, [r4, #0]
 8007bba:	b103      	cbz	r3, 8007bbe <_sbrk_r+0x1a>
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	bd38      	pop	{r3, r4, r5, pc}
 8007bc0:	20001bcc 	.word	0x20001bcc

08007bc4 <__malloc_lock>:
 8007bc4:	4770      	bx	lr

08007bc6 <__malloc_unlock>:
 8007bc6:	4770      	bx	lr

08007bc8 <_init>:
 8007bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bca:	bf00      	nop
 8007bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bce:	bc08      	pop	{r3}
 8007bd0:	469e      	mov	lr, r3
 8007bd2:	4770      	bx	lr

08007bd4 <_fini>:
 8007bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd6:	bf00      	nop
 8007bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bda:	bc08      	pop	{r3}
 8007bdc:	469e      	mov	lr, r3
 8007bde:	4770      	bx	lr
