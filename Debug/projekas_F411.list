
projekas_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081bc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008354  08008354  00018354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083b4  080083b4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080083b4  080083b4  000183b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083bc  080083bc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083bc  080083bc  000183bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083c0  080083c0  000183c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080083c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a30  200001e8  080085ac  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20001c18  080085ac  00021c18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9bc  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003754  00000000  00000000  0003abd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001518  00000000  00000000  0003e328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001380  00000000  00000000  0003f840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a746  00000000  00000000  00040bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001217c  00000000  00000000  0005b306  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097544  00000000  00000000  0006d482  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001049c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a2c  00000000  00000000  00104a44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001e8 	.word	0x200001e8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800833c 	.word	0x0800833c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001ec 	.word	0x200001ec
 80001d4:	0800833c 	.word	0x0800833c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <CDC_ReceiveCallback>:
static void MX_TIM4_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void CDC_ReceiveCallback(uint8_t *buf, uint32_t len){
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
	Receiveflag = 1;
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <CDC_ReceiveCallback+0x28>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	701a      	strb	r2, [r3, #0]
    memcpy(receivedData, buf, 4);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	461a      	mov	r2, r3
 80004ee:	4b05      	ldr	r3, [pc, #20]	; (8000504 <CDC_ReceiveCallback+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
	//CDC_Transmit_FS(buf, len);
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	2000029c 	.word	0x2000029c
 8000504:	20000000 	.word	0x20000000

08000508 <Motors_Control>:

void Motors_Control(int8_t DutyCycleA, int8_t DutyCycleB) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	460a      	mov	r2, r1
 8000512:	71fb      	strb	r3, [r7, #7]
 8000514:	4613      	mov	r3, r2
 8000516:	71bb      	strb	r3, [r7, #6]
	htim4.Instance->CCR1 = abs(DutyCycleA);  // Motor A speed control
 8000518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000520:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000524:	4b34      	ldr	r3, [pc, #208]	; (80005f8 <Motors_Control+0xf0>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = abs(DutyCycleB);  // Motor B speed control
 800052a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800052e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000532:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000536:	4b30      	ldr	r3, [pc, #192]	; (80005f8 <Motors_Control+0xf0>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	639a      	str	r2, [r3, #56]	; 0x38

	// moving forward
	if (DutyCycleA > 0 && DutyCycleB > 0) {
 800053c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	dd0d      	ble.n	8000560 <Motors_Control+0x58>
 8000544:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000548:	2b00      	cmp	r3, #0
 800054a:	dd09      	ble.n	8000560 <Motors_Control+0x58>
		in1_in3(GPIO_PIN_RESET); // in1 and in3
 800054c:	2200      	movs	r2, #0
 800054e:	2150      	movs	r1, #80	; 0x50
 8000550:	482a      	ldr	r0, [pc, #168]	; (80005fc <Motors_Control+0xf4>)
 8000552:	f001 fa87 	bl	8001a64 <HAL_GPIO_WritePin>
		in2_in4(GPIO_PIN_SET);   //in2 and in4
 8000556:	2201      	movs	r2, #1
 8000558:	21a0      	movs	r1, #160	; 0xa0
 800055a:	4828      	ldr	r0, [pc, #160]	; (80005fc <Motors_Control+0xf4>)
 800055c:	f001 fa82 	bl	8001a64 <HAL_GPIO_WritePin>

	}

	// moving backward
	if (DutyCycleA < 0 && DutyCycleB < 0) {
 8000560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	da0d      	bge.n	8000584 <Motors_Control+0x7c>
 8000568:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800056c:	2b00      	cmp	r3, #0
 800056e:	da09      	bge.n	8000584 <Motors_Control+0x7c>
		in1_in3(GPIO_PIN_SET); // in1 and in3
 8000570:	2201      	movs	r2, #1
 8000572:	2150      	movs	r1, #80	; 0x50
 8000574:	4821      	ldr	r0, [pc, #132]	; (80005fc <Motors_Control+0xf4>)
 8000576:	f001 fa75 	bl	8001a64 <HAL_GPIO_WritePin>
		in2_in4(GPIO_PIN_RESET);   //in2 and in4
 800057a:	2200      	movs	r2, #0
 800057c:	21a0      	movs	r1, #160	; 0xa0
 800057e:	481f      	ldr	r0, [pc, #124]	; (80005fc <Motors_Control+0xf4>)
 8000580:	f001 fa70 	bl	8001a64 <HAL_GPIO_WritePin>
	}

	// stop
	if (DutyCycleA == 0 && DutyCycleB == 0) {
 8000584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d10d      	bne.n	80005a8 <Motors_Control+0xa0>
 800058c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d109      	bne.n	80005a8 <Motors_Control+0xa0>
		in1_in3(GPIO_PIN_RESET); // in1 and in3
 8000594:	2200      	movs	r2, #0
 8000596:	2150      	movs	r1, #80	; 0x50
 8000598:	4818      	ldr	r0, [pc, #96]	; (80005fc <Motors_Control+0xf4>)
 800059a:	f001 fa63 	bl	8001a64 <HAL_GPIO_WritePin>
		in2_in4(GPIO_PIN_RESET);   //in2 and in4
 800059e:	2200      	movs	r2, #0
 80005a0:	21a0      	movs	r1, #160	; 0xa0
 80005a2:	4816      	ldr	r0, [pc, #88]	; (80005fc <Motors_Control+0xf4>)
 80005a4:	f001 fa5e 	bl	8001a64 <HAL_GPIO_WritePin>
	}

	// moving to left
	if(DutyCycleA < 0 && DutyCycleB > 0) {
 80005a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	da0d      	bge.n	80005cc <Motors_Control+0xc4>
 80005b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dd09      	ble.n	80005cc <Motors_Control+0xc4>
		in1_in4(GPIO_PIN_SET);   // in1 and in4
 80005b8:	2201      	movs	r2, #1
 80005ba:	2190      	movs	r1, #144	; 0x90
 80005bc:	480f      	ldr	r0, [pc, #60]	; (80005fc <Motors_Control+0xf4>)
 80005be:	f001 fa51 	bl	8001a64 <HAL_GPIO_WritePin>
		in2_in3(GPIO_PIN_RESET); // in2 and in3
 80005c2:	2200      	movs	r2, #0
 80005c4:	2160      	movs	r1, #96	; 0x60
 80005c6:	480d      	ldr	r0, [pc, #52]	; (80005fc <Motors_Control+0xf4>)
 80005c8:	f001 fa4c 	bl	8001a64 <HAL_GPIO_WritePin>
	}

	// moving to right
	if (DutyCycleA > 0 && DutyCycleB < 0) {
 80005cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	dd0d      	ble.n	80005f0 <Motors_Control+0xe8>
 80005d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	da09      	bge.n	80005f0 <Motors_Control+0xe8>
		in1_in4(GPIO_PIN_RESET);   // in1 and in4
 80005dc:	2200      	movs	r2, #0
 80005de:	2190      	movs	r1, #144	; 0x90
 80005e0:	4806      	ldr	r0, [pc, #24]	; (80005fc <Motors_Control+0xf4>)
 80005e2:	f001 fa3f 	bl	8001a64 <HAL_GPIO_WritePin>
		in2_in3(GPIO_PIN_SET); // in2 and in3
 80005e6:	2201      	movs	r2, #1
 80005e8:	2160      	movs	r1, #96	; 0x60
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <Motors_Control+0xf4>)
 80005ec:	f001 fa3a 	bl	8001a64 <HAL_GPIO_WritePin>
	}
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000214 	.word	0x20000214
 80005fc:	40020000 	.word	0x40020000

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fc94 	bl	8000f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f82c 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f9c4 	bl	8000998 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000610:	f000 f918 	bl	8000844 <MX_TIM4_Init>
  MX_SPI1_Init();
 8000614:	f000 f8e0 	bl	80007d8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000618:	f000 f994 	bl	8000944 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800061c:	f007 f8bc 	bl	8007798 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000620:	f000 f888 	bl	8000734 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000624:	2100      	movs	r1, #0
 8000626:	480c      	ldr	r0, [pc, #48]	; (8000658 <main+0x58>)
 8000628:	f003 f900 	bl	800382c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800062c:	2104      	movs	r1, #4
 800062e:	480a      	ldr	r0, [pc, #40]	; (8000658 <main+0x58>)
 8000630:	f003 f8fc 	bl	800382c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Receiveflag == 1)
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <main+0x5c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d1fb      	bne.n	8000634 <main+0x34>
	  		{
	  			Receiveflag = 0;
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <main+0x5c>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
	  			Motors_Control(receivedData[0], receivedData[2]);
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <main+0x60>)
 8000644:	f993 2000 	ldrsb.w	r2, [r3]
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <main+0x60>)
 800064a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800064e:	4619      	mov	r1, r3
 8000650:	4610      	mov	r0, r2
 8000652:	f7ff ff59 	bl	8000508 <Motors_Control>
	  if(Receiveflag == 1)
 8000656:	e7ed      	b.n	8000634 <main+0x34>
 8000658:	20000214 	.word	0x20000214
 800065c:	2000029c 	.word	0x2000029c
 8000660:	20000000 	.word	0x20000000

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f007 fda0 	bl	80081b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <SystemClock_Config+0xc8>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a26      	ldr	r2, [pc, #152]	; (800072c <SystemClock_Config+0xc8>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <SystemClock_Config+0xc8>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <SystemClock_Config+0xcc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a20      	ldr	r2, [pc, #128]	; (8000730 <SystemClock_Config+0xcc>)
 80006ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <SystemClock_Config+0xcc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006d4:	2310      	movs	r3, #16
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006d8:	23c0      	movs	r3, #192	; 0xc0
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006dc:	2304      	movs	r3, #4
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 fb7b 	bl	8002de4 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f4:	f000 fa00 	bl	8000af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2101      	movs	r1, #1
 8000712:	4618      	mov	r0, r3
 8000714:	f002 fdd6 	bl	80032c4 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800071e:	f000 f9eb 	bl	8000af8 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_ADC1_Init+0x98>)
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <MX_ADC1_Init+0x9c>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_ADC1_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_ADC1_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_ADC1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_ADC1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_ADC1_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_ADC1_Init+0x98>)
 8000774:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <MX_ADC1_Init+0xa0>)
 8000776:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_ADC1_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_ADC1_Init+0x98>)
 8000780:	2201      	movs	r2, #1
 8000782:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_ADC1_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_ADC1_Init+0x98>)
 800078e:	2201      	movs	r2, #1
 8000790:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <MX_ADC1_Init+0x98>)
 8000794:	f000 fc60 	bl	8001058 <HAL_ADC_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800079e:	f000 f9ab 	bl	8000af8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ae:	463b      	mov	r3, r7
 80007b0:	4619      	mov	r1, r3
 80007b2:	4806      	ldr	r0, [pc, #24]	; (80007cc <MX_ADC1_Init+0x98>)
 80007b4:	f000 fc94 	bl	80010e0 <HAL_ADC_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007be:	f000 f99b 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000254 	.word	0x20000254
 80007d0:	40012000 	.word	0x40012000
 80007d4:	0f000001 	.word	0x0f000001

080007d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_SPI1_Init+0x64>)
 80007de:	4a18      	ldr	r2, [pc, #96]	; (8000840 <MX_SPI1_Init+0x68>)
 80007e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_SPI1_Init+0x64>)
 80007e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_SPI1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_SPI1_Init+0x64>)
 8000804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000808:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_SPI1_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_SPI1_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_SPI1_Init+0x64>)
 8000824:	220a      	movs	r2, #10
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_SPI1_Init+0x64>)
 800082a:	f002 ff3b 	bl	80036a4 <HAL_SPI_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000834:	f000 f960 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200002e0 	.word	0x200002e0
 8000840:	40013000 	.word	0x40013000

08000844 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08e      	sub	sp, #56	; 0x38
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
 8000870:	615a      	str	r2, [r3, #20]
 8000872:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000874:	4b31      	ldr	r3, [pc, #196]	; (800093c <MX_TIM4_Init+0xf8>)
 8000876:	4a32      	ldr	r2, [pc, #200]	; (8000940 <MX_TIM4_Init+0xfc>)
 8000878:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 800087a:	4b30      	ldr	r3, [pc, #192]	; (800093c <MX_TIM4_Init+0xf8>)
 800087c:	2230      	movs	r2, #48	; 0x30
 800087e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b2e      	ldr	r3, [pc, #184]	; (800093c <MX_TIM4_Init+0xf8>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <MX_TIM4_Init+0xf8>)
 8000888:	2264      	movs	r2, #100	; 0x64
 800088a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	4b2b      	ldr	r3, [pc, #172]	; (800093c <MX_TIM4_Init+0xf8>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000892:	4b2a      	ldr	r3, [pc, #168]	; (800093c <MX_TIM4_Init+0xf8>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000898:	4828      	ldr	r0, [pc, #160]	; (800093c <MX_TIM4_Init+0xf8>)
 800089a:	f002 ff67 	bl	800376c <HAL_TIM_Base_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80008a4:	f000 f928 	bl	8000af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4821      	ldr	r0, [pc, #132]	; (800093c <MX_TIM4_Init+0xf8>)
 80008b6:	f003 f8b1 	bl	8003a1c <HAL_TIM_ConfigClockSource>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80008c0:	f000 f91a 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008c4:	481d      	ldr	r0, [pc, #116]	; (800093c <MX_TIM4_Init+0xf8>)
 80008c6:	f002 ff7c 	bl	80037c2 <HAL_TIM_PWM_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80008d0:	f000 f912 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008dc:	f107 0320 	add.w	r3, r7, #32
 80008e0:	4619      	mov	r1, r3
 80008e2:	4816      	ldr	r0, [pc, #88]	; (800093c <MX_TIM4_Init+0xf8>)
 80008e4:	f003 fc1e 	bl	8004124 <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80008ee:	f000 f903 	bl	8000af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f2:	2360      	movs	r3, #96	; 0x60
 80008f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_TIM4_Init+0xf8>)
 800090a:	f002 ffc1 	bl	8003890 <HAL_TIM_PWM_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000914:	f000 f8f0 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2204      	movs	r2, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4807      	ldr	r0, [pc, #28]	; (800093c <MX_TIM4_Init+0xf8>)
 8000920:	f002 ffb6 	bl	8003890 <HAL_TIM_PWM_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800092a:	f000 f8e5 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800092e:	4803      	ldr	r0, [pc, #12]	; (800093c <MX_TIM4_Init+0xf8>)
 8000930:	f000 f9c0 	bl	8000cb4 <HAL_TIM_MspPostInit>

}
 8000934:	bf00      	nop
 8000936:	3738      	adds	r7, #56	; 0x38
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000214 	.word	0x20000214
 8000940:	40000800 	.word	0x40000800

08000944 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <MX_USART1_UART_Init+0x50>)
 800094c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800097c:	f003 fc40 	bl	8004200 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000986:	f000 f8b7 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200002a0 	.word	0x200002a0
 8000994:	40011000 	.word	0x40011000

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b4c      	ldr	r3, [pc, #304]	; (8000ae4 <MX_GPIO_Init+0x14c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a4b      	ldr	r2, [pc, #300]	; (8000ae4 <MX_GPIO_Init+0x14c>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b49      	ldr	r3, [pc, #292]	; (8000ae4 <MX_GPIO_Init+0x14c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b45      	ldr	r3, [pc, #276]	; (8000ae4 <MX_GPIO_Init+0x14c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a44      	ldr	r2, [pc, #272]	; (8000ae4 <MX_GPIO_Init+0x14c>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b42      	ldr	r3, [pc, #264]	; (8000ae4 <MX_GPIO_Init+0x14c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b3e      	ldr	r3, [pc, #248]	; (8000ae4 <MX_GPIO_Init+0x14c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a3d      	ldr	r2, [pc, #244]	; (8000ae4 <MX_GPIO_Init+0x14c>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b3b      	ldr	r3, [pc, #236]	; (8000ae4 <MX_GPIO_Init+0x14c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b37      	ldr	r3, [pc, #220]	; (8000ae4 <MX_GPIO_Init+0x14c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a36      	ldr	r2, [pc, #216]	; (8000ae4 <MX_GPIO_Init+0x14c>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <MX_GPIO_Init+0x14c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b30      	ldr	r3, [pc, #192]	; (8000ae4 <MX_GPIO_Init+0x14c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a2f      	ldr	r2, [pc, #188]	; (8000ae4 <MX_GPIO_Init+0x14c>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <MX_GPIO_Init+0x14c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	21f0      	movs	r1, #240	; 0xf0
 8000a3e:	482a      	ldr	r0, [pc, #168]	; (8000ae8 <MX_GPIO_Init+0x150>)
 8000a40:	f001 f810 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2130      	movs	r1, #48	; 0x30
 8000a48:	4828      	ldr	r0, [pc, #160]	; (8000aec <MX_GPIO_Init+0x154>)
 8000a4a:	f001 f80b 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin|CS_M_Pin|CS_A_G_Pin
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f241 6103 	movw	r1, #5635	; 0x1603
 8000a54:	4826      	ldr	r0, [pc, #152]	; (8000af0 <MX_GPIO_Init+0x158>)
 8000a56:	f001 f805 	bl	8001a64 <HAL_GPIO_WritePin>
                          |DEN_A_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : OUT1_Pin OUT2_Pin OUT3_Pin OUT4_Pin */
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin;
 8000a5a:	23f0      	movs	r3, #240	; 0xf0
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	481d      	ldr	r0, [pc, #116]	; (8000ae8 <MX_GPIO_Init+0x150>)
 8000a72:	f000 fe75 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000a76:	2330      	movs	r3, #48	; 0x30
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4817      	ldr	r0, [pc, #92]	; (8000aec <MX_GPIO_Init+0x154>)
 8000a8e:	f000 fe67 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin CS_M_Pin CS_A_G_Pin
                           DEN_A_G_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|CS_M_Pin|CS_A_G_Pin
 8000a92:	f241 6303 	movw	r3, #5635	; 0x1603
 8000a96:	617b      	str	r3, [r7, #20]
                          |DEN_A_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4811      	ldr	r0, [pc, #68]	; (8000af0 <MX_GPIO_Init+0x158>)
 8000aac:	f000 fe58 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000ab0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_GPIO_Init+0x15c>)
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480a      	ldr	r0, [pc, #40]	; (8000af0 <MX_GPIO_Init+0x158>)
 8000ac6:	f000 fe4b 	bl	8001760 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	2017      	movs	r0, #23
 8000ad0:	f000 fe0f 	bl	80016f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ad4:	2017      	movs	r0, #23
 8000ad6:	f000 fe28 	bl	800172a <HAL_NVIC_EnableIRQ>

}
 8000ada:	bf00      	nop
 8000adc:	3728      	adds	r7, #40	; 0x28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40020800 	.word	0x40020800
 8000af0:	40020400 	.word	0x40020400
 8000af4:	10110000 	.word	0x10110000

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_ADC_MspInit+0x7c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d127      	bne.n	8000bca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <HAL_ADC_MspInit+0x80>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <HAL_ADC_MspInit+0x80>)
 8000b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <HAL_ADC_MspInit+0x80>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <HAL_ADC_MspInit+0x80>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <HAL_ADC_MspInit+0x80>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <HAL_ADC_MspInit+0x80>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <HAL_ADC_MspInit+0x84>)
 8000bc6:	f000 fdcb 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3728      	adds	r7, #40	; 0x28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40012000 	.word	0x40012000
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000

08000be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_SPI_MspInit+0x84>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d12b      	bne.n	8000c5a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000c3a:	2338      	movs	r3, #56	; 0x38
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <HAL_SPI_MspInit+0x8c>)
 8000c56:	f000 fd83 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	; 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40013000 	.word	0x40013000
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020400 	.word	0x40020400

08000c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <HAL_TIM_Base_MspInit+0x3c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d10d      	bne.n	8000c9e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_TIM_Base_MspInit+0x40>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a09      	ldr	r2, [pc, #36]	; (8000cb0 <HAL_TIM_Base_MspInit+0x40>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <HAL_TIM_Base_MspInit+0x40>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40000800 	.word	0x40000800
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b088      	sub	sp, #32
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <HAL_TIM_MspPostInit+0x68>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d11e      	bne.n	8000d14 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_TIM_MspPostInit+0x6c>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_TIM_MspPostInit+0x6c>)
 8000ce0:	f043 0308 	orr.w	r3, r3, #8
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_TIM_MspPostInit+0x6c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000cf2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cf6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_TIM_MspPostInit+0x70>)
 8000d10:	f000 fd26 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d14:	bf00      	nop
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40000800 	.word	0x40000800
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020c00 	.word	0x40020c00

08000d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a19      	ldr	r2, [pc, #100]	; (8000dac <HAL_UART_MspInit+0x84>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d12c      	bne.n	8000da4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d94:	2307      	movs	r3, #7
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <HAL_UART_MspInit+0x8c>)
 8000da0:	f000 fcde 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	; 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40011000 	.word	0x40011000
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0c:	f000 f8e2 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000e18:	2040      	movs	r0, #64	; 0x40
 8000e1a:	f000 fe3d 	bl	8001a98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000e1e:	2080      	movs	r0, #128	; 0x80
 8000e20:	f000 fe3a 	bl	8001a98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000e24:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e28:	f000 fe36 	bl	8001a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <OTG_FS_IRQHandler+0x10>)
 8000e36:	f000 ffa2 	bl	8001d7e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000180c 	.word	0x2000180c

08000e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e4c:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <_sbrk+0x5c>)
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <_sbrk+0x60>)
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <_sbrk+0x64>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <_sbrk+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d207      	bcs.n	8000e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e74:	f007 f966 	bl	8008144 <__errno>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e82:	e009      	b.n	8000e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <_sbrk+0x64>)
 8000e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e96:	68fb      	ldr	r3, [r7, #12]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20020000 	.word	0x20020000
 8000ea4:	00004000 	.word	0x00004000
 8000ea8:	20000204 	.word	0x20000204
 8000eac:	20001c18 	.word	0x20001c18

08000eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <SystemInit+0x28>)
 8000eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <SystemInit+0x28>)
 8000ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SystemInit+0x28>)
 8000ec6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eca:	609a      	str	r2, [r3, #8]
#endif
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ee0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ee2:	e003      	b.n	8000eec <LoopCopyDataInit>

08000ee4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ee6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ee8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000eea:	3104      	adds	r1, #4

08000eec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000eec:	480b      	ldr	r0, [pc, #44]	; (8000f1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ef0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ef2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ef4:	d3f6      	bcc.n	8000ee4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ef8:	e002      	b.n	8000f00 <LoopFillZerobss>

08000efa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000efa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000efc:	f842 3b04 	str.w	r3, [r2], #4

08000f00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f04:	d3f9      	bcc.n	8000efa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f06:	f7ff ffd3 	bl	8000eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f007 f921 	bl	8008150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0e:	f7ff fb77 	bl	8000600 <main>
  bx  lr    
 8000f12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f14:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f18:	080083c4 	.word	0x080083c4
  ldr  r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f20:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8000f24:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8000f28:	20001c18 	.word	0x20001c18

08000f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC_IRQHandler>
	...

08000f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0d      	ldr	r2, [pc, #52]	; (8000f70 <HAL_Init+0x40>)
 8000f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <HAL_Init+0x40>)
 8000f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <HAL_Init+0x40>)
 8000f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 fbbf 	bl	80016dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f000 f808 	bl	8000f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f64:	f7ff fdd0 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023c00 	.word	0x40023c00

08000f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x54>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_InitTick+0x58>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fbd7 	bl	8001746 <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00e      	b.n	8000fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d80a      	bhi.n	8000fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f000 fb9f 	bl	80016f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <HAL_InitTick+0x5c>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	2000000c 	.word	0x2000000c
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	2000000c 	.word	0x2000000c
 8000ff8:	20000338 	.word	0x20000338

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000338 	.word	0x20000338

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff ffee 	bl	8000ffc <HAL_GetTick>
 8001020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102c:	d005      	beq.n	800103a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_Delay+0x40>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103a:	bf00      	nop
 800103c:	f7ff ffde 	bl	8000ffc <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8f7      	bhi.n	800103c <HAL_Delay+0x28>
  {
  }
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2000000c 	.word	0x2000000c

08001058 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e033      	b.n	80010d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	2b00      	cmp	r3, #0
 8001074:	d109      	bne.n	800108a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fd6e 	bl	8000b58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	2b00      	cmp	r3, #0
 8001094:	d118      	bne.n	80010c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800109e:	f023 0302 	bic.w	r3, r3, #2
 80010a2:	f043 0202 	orr.w	r2, r3, #2
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 f94a 	bl	8001344 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f023 0303 	bic.w	r3, r3, #3
 80010be:	f043 0201 	orr.w	r2, r3, #1
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	641a      	str	r2, [r3, #64]	; 0x40
 80010c6:	e001      	b.n	80010cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d101      	bne.n	80010fc <HAL_ADC_ConfigChannel+0x1c>
 80010f8:	2302      	movs	r3, #2
 80010fa:	e113      	b.n	8001324 <HAL_ADC_ConfigChannel+0x244>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b09      	cmp	r3, #9
 800110a:	d925      	bls.n	8001158 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68d9      	ldr	r1, [r3, #12]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	b29b      	uxth	r3, r3
 8001118:	461a      	mov	r2, r3
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	3b1e      	subs	r3, #30
 8001122:	2207      	movs	r2, #7
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43da      	mvns	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	400a      	ands	r2, r1
 8001130:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68d9      	ldr	r1, [r3, #12]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	b29b      	uxth	r3, r3
 8001142:	4618      	mov	r0, r3
 8001144:	4603      	mov	r3, r0
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4403      	add	r3, r0
 800114a:	3b1e      	subs	r3, #30
 800114c:	409a      	lsls	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	e022      	b.n	800119e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6919      	ldr	r1, [r3, #16]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	2207      	movs	r2, #7
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	400a      	ands	r2, r1
 800117a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6919      	ldr	r1, [r3, #16]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	4603      	mov	r3, r0
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4403      	add	r3, r0
 8001194:	409a      	lsls	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d824      	bhi.n	80011f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	3b05      	subs	r3, #5
 80011b8:	221f      	movs	r2, #31
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	400a      	ands	r2, r1
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	4618      	mov	r0, r3
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	3b05      	subs	r3, #5
 80011e2:	fa00 f203 	lsl.w	r2, r0, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
 80011ee:	e04c      	b.n	800128a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b0c      	cmp	r3, #12
 80011f6:	d824      	bhi.n	8001242 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	3b23      	subs	r3, #35	; 0x23
 800120a:	221f      	movs	r2, #31
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43da      	mvns	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	400a      	ands	r2, r1
 8001218:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	3b23      	subs	r3, #35	; 0x23
 8001234:	fa00 f203 	lsl.w	r2, r0, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	631a      	str	r2, [r3, #48]	; 0x30
 8001240:	e023      	b.n	800128a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	3b41      	subs	r3, #65	; 0x41
 8001254:	221f      	movs	r2, #31
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	400a      	ands	r2, r1
 8001262:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	3b41      	subs	r3, #65	; 0x41
 800127e:	fa00 f203 	lsl.w	r2, r0, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <HAL_ADC_ConfigChannel+0x250>)
 800128c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a28      	ldr	r2, [pc, #160]	; (8001334 <HAL_ADC_ConfigChannel+0x254>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d10f      	bne.n	80012b8 <HAL_ADC_ConfigChannel+0x1d8>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b12      	cmp	r3, #18
 800129e:	d10b      	bne.n	80012b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a1d      	ldr	r2, [pc, #116]	; (8001334 <HAL_ADC_ConfigChannel+0x254>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d12b      	bne.n	800131a <HAL_ADC_ConfigChannel+0x23a>
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <HAL_ADC_ConfigChannel+0x258>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d003      	beq.n	80012d4 <HAL_ADC_ConfigChannel+0x1f4>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b11      	cmp	r3, #17
 80012d2:	d122      	bne.n	800131a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a11      	ldr	r2, [pc, #68]	; (8001338 <HAL_ADC_ConfigChannel+0x258>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d111      	bne.n	800131a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_ADC_ConfigChannel+0x25c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a11      	ldr	r2, [pc, #68]	; (8001340 <HAL_ADC_ConfigChannel+0x260>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	0c9a      	lsrs	r2, r3, #18
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800130c:	e002      	b.n	8001314 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	3b01      	subs	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f9      	bne.n	800130e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40012300 	.word	0x40012300
 8001334:	40012000 	.word	0x40012000
 8001338:	10000012 	.word	0x10000012
 800133c:	20000004 	.word	0x20000004
 8001340:	431bde83 	.word	0x431bde83

08001344 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800134c:	4b79      	ldr	r3, [pc, #484]	; (8001534 <ADC_Init+0x1f0>)
 800134e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	431a      	orrs	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001378:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6859      	ldr	r1, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	021a      	lsls	r2, r3, #8
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800139c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6859      	ldr	r1, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6899      	ldr	r1, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	4a58      	ldr	r2, [pc, #352]	; (8001538 <ADC_Init+0x1f4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d022      	beq.n	8001422 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6899      	ldr	r1, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800140c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6899      	ldr	r1, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	e00f      	b.n	8001442 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001430:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001440:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0202 	bic.w	r2, r2, #2
 8001450:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6899      	ldr	r1, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7e1b      	ldrb	r3, [r3, #24]
 800145c:	005a      	lsls	r2, r3, #1
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3020 	ldrb.w	r3, [r3, #32]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d01b      	beq.n	80014a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800147e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800148e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6859      	ldr	r1, [r3, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	3b01      	subs	r3, #1
 800149c:	035a      	lsls	r2, r3, #13
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	e007      	b.n	80014b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	051a      	lsls	r2, r3, #20
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6899      	ldr	r1, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014fa:	025a      	lsls	r2, r3, #9
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001512:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6899      	ldr	r1, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	029a      	lsls	r2, r3, #10
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	609a      	str	r2, [r3, #8]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	40012300 	.word	0x40012300
 8001538:	0f000001 	.word	0x0f000001

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4907      	ldr	r1, [pc, #28]	; (80015d8 <__NVIC_EnableIRQ+0x38>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000e100 	.word	0xe000e100

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db0a      	blt.n	8001606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	490c      	ldr	r1, [pc, #48]	; (8001628 <__NVIC_SetPriority+0x4c>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001604:	e00a      	b.n	800161c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4908      	ldr	r1, [pc, #32]	; (800162c <__NVIC_SetPriority+0x50>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	3b04      	subs	r3, #4
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	440b      	add	r3, r1
 800161a:	761a      	strb	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1c3 0307 	rsb	r3, r3, #7
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf28      	it	cs
 800164e:	2304      	movcs	r3, #4
 8001650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3304      	adds	r3, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d902      	bls.n	8001660 <NVIC_EncodePriority+0x30>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b03      	subs	r3, #3
 800165e:	e000      	b.n	8001662 <NVIC_EncodePriority+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001678:	f04f 31ff 	mov.w	r1, #4294967295
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	43d9      	mvns	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	4313      	orrs	r3, r2
         );
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a8:	d301      	bcc.n	80016ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00f      	b.n	80016ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <SysTick_Config+0x40>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b6:	210f      	movs	r1, #15
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f7ff ff8e 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <SysTick_Config+0x40>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <SysTick_Config+0x40>)
 80016c8:	2207      	movs	r2, #7
 80016ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	e000e010 	.word	0xe000e010

080016dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff29 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001704:	f7ff ff3e 	bl	8001584 <__NVIC_GetPriorityGrouping>
 8001708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f7ff ff8e 	bl	8001630 <NVIC_EncodePriority>
 8001714:	4602      	mov	r2, r0
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff5d 	bl	80015dc <__NVIC_SetPriority>
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff31 	bl	80015a0 <__NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffa2 	bl	8001698 <SysTick_Config>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	e159      	b.n	8001a30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800177c:	2201      	movs	r2, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	429a      	cmp	r2, r3
 8001796:	f040 8148 	bne.w	8001a2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d00b      	beq.n	80017ba <HAL_GPIO_Init+0x5a>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d007      	beq.n	80017ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ae:	2b11      	cmp	r3, #17
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d130      	bne.n	800181c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	2203      	movs	r2, #3
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	091b      	lsrs	r3, r3, #4
 8001806:	f003 0201 	and.w	r2, r3, #1
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0xfc>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b12      	cmp	r3, #18
 800185a:	d123      	bne.n	80018a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	08da      	lsrs	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3208      	adds	r2, #8
 8001864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	08da      	lsrs	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3208      	adds	r2, #8
 800189e:	69b9      	ldr	r1, [r7, #24]
 80018a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0203 	and.w	r2, r3, #3
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80a2 	beq.w	8001a2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b56      	ldr	r3, [pc, #344]	; (8001a44 <HAL_GPIO_Init+0x2e4>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	4a55      	ldr	r2, [pc, #340]	; (8001a44 <HAL_GPIO_Init+0x2e4>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f4:	6453      	str	r3, [r2, #68]	; 0x44
 80018f6:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_GPIO_Init+0x2e4>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001902:	4a51      	ldr	r2, [pc, #324]	; (8001a48 <HAL_GPIO_Init+0x2e8>)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a48      	ldr	r2, [pc, #288]	; (8001a4c <HAL_GPIO_Init+0x2ec>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d019      	beq.n	8001962 <HAL_GPIO_Init+0x202>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a47      	ldr	r2, [pc, #284]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_GPIO_Init+0x1fe>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a46      	ldr	r2, [pc, #280]	; (8001a54 <HAL_GPIO_Init+0x2f4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00d      	beq.n	800195a <HAL_GPIO_Init+0x1fa>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a45      	ldr	r2, [pc, #276]	; (8001a58 <HAL_GPIO_Init+0x2f8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d007      	beq.n	8001956 <HAL_GPIO_Init+0x1f6>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a44      	ldr	r2, [pc, #272]	; (8001a5c <HAL_GPIO_Init+0x2fc>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d101      	bne.n	8001952 <HAL_GPIO_Init+0x1f2>
 800194e:	2304      	movs	r3, #4
 8001950:	e008      	b.n	8001964 <HAL_GPIO_Init+0x204>
 8001952:	2307      	movs	r3, #7
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x204>
 8001956:	2303      	movs	r3, #3
 8001958:	e004      	b.n	8001964 <HAL_GPIO_Init+0x204>
 800195a:	2302      	movs	r3, #2
 800195c:	e002      	b.n	8001964 <HAL_GPIO_Init+0x204>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x204>
 8001962:	2300      	movs	r3, #0
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	f002 0203 	and.w	r2, r2, #3
 800196a:	0092      	lsls	r2, r2, #2
 800196c:	4093      	lsls	r3, r2
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001974:	4934      	ldr	r1, [pc, #208]	; (8001a48 <HAL_GPIO_Init+0x2e8>)
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001982:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <HAL_GPIO_Init+0x300>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019a6:	4a2e      	ldr	r2, [pc, #184]	; (8001a60 <HAL_GPIO_Init+0x300>)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019ac:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <HAL_GPIO_Init+0x300>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d0:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <HAL_GPIO_Init+0x300>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d6:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <HAL_GPIO_Init+0x300>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019fa:	4a19      	ldr	r2, [pc, #100]	; (8001a60 <HAL_GPIO_Init+0x300>)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_GPIO_Init+0x300>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a24:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <HAL_GPIO_Init+0x300>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	2b0f      	cmp	r3, #15
 8001a34:	f67f aea2 	bls.w	800177c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a38:	bf00      	nop
 8001a3a:	3724      	adds	r7, #36	; 0x24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40013800 	.word	0x40013800
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	40020400 	.word	0x40020400
 8001a54:	40020800 	.word	0x40020800
 8001a58:	40020c00 	.word	0x40020c00
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40013c00 	.word	0x40013c00

08001a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
 8001a70:	4613      	mov	r3, r2
 8001a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a74:	787b      	ldrb	r3, [r7, #1]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a80:	e003      	b.n	8001a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a82:	887b      	ldrh	r3, [r7, #2]
 8001a84:	041a      	lsls	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	619a      	str	r2, [r3, #24]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d006      	beq.n	8001abc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f806 	bl	8001ac8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40013c00 	.word	0x40013c00

08001ac8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae0:	b08f      	sub	sp, #60	; 0x3c
 8001ae2:	af0a      	add	r7, sp, #40	; 0x28
 8001ae4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e10f      	b.n	8001d10 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d106      	bne.n	8001b10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f006 f828 	bl	8007b60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2203      	movs	r2, #3
 8001b14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 f845 	bl	8004bbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	687e      	ldr	r6, [r7, #4]
 8001b3c:	466d      	mov	r5, sp
 8001b3e:	f106 0410 	add.w	r4, r6, #16
 8001b42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b52:	1d33      	adds	r3, r6, #4
 8001b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b56:	6838      	ldr	r0, [r7, #0]
 8001b58:	f002 ff1c 	bl	8004994 <USB_CoreInit>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d005      	beq.n	8001b6e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2202      	movs	r2, #2
 8001b66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e0d0      	b.n	8001d10 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 f833 	bl	8004be0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]
 8001b7e:	e04a      	b.n	8001c16 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b80:	7bfa      	ldrb	r2, [r7, #15]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	1a9b      	subs	r3, r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	333d      	adds	r3, #61	; 0x3d
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	1a9b      	subs	r3, r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	333c      	adds	r3, #60	; 0x3c
 8001ba4:	7bfa      	ldrb	r2, [r7, #15]
 8001ba6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	b298      	uxth	r0, r3
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	1a9b      	subs	r3, r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	3342      	adds	r3, #66	; 0x42
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bc0:	7bfa      	ldrb	r2, [r7, #15]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	333f      	adds	r3, #63	; 0x3f
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bd4:	7bfa      	ldrb	r2, [r7, #15]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	3344      	adds	r3, #68	; 0x44
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3348      	adds	r3, #72	; 0x48
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	3350      	adds	r3, #80	; 0x50
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	3301      	adds	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d3af      	bcc.n	8001b80 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e044      	b.n	8001cb0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	1a9b      	subs	r3, r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c52:	7bfa      	ldrb	r2, [r7, #15]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c7e:	7bfa      	ldrb	r2, [r7, #15]
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	1a9b      	subs	r3, r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	3301      	adds	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d3b5      	bcc.n	8001c26 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	687e      	ldr	r6, [r7, #4]
 8001cc2:	466d      	mov	r5, sp
 8001cc4:	f106 0410 	add.w	r4, r6, #16
 8001cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cd8:	1d33      	adds	r3, r6, #4
 8001cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cdc:	6838      	ldr	r0, [r7, #0]
 8001cde:	f002 ffa9 	bl	8004c34 <USB_DevInit>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e00d      	b.n	8001d10 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fff1 	bl	8005cf0 <USB_DevDisconnect>

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d18 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_PCD_Start+0x1c>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e020      	b.n	8001d76 <HAL_PCD_Start+0x5e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d109      	bne.n	8001d58 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d005      	beq.n	8001d58 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f002 ff1d 	bl	8004b9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 ffa1 	bl	8005cae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d7e:	b590      	push	{r4, r7, lr}
 8001d80:	b08d      	sub	sp, #52	; 0x34
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f004 f85f 	bl	8005e58 <USB_GetMode>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f040 839d 	bne.w	80024dc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f003 ffc3 	bl	8005d32 <USB_ReadInterrupts>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8393 	beq.w	80024da <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 ffba 	bl	8005d32 <USB_ReadInterrupts>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d107      	bne.n	8001dd8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f002 0202 	and.w	r2, r2, #2
 8001dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 ffa8 	bl	8005d32 <USB_ReadInterrupts>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d161      	bne.n	8001eb0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0210 	bic.w	r2, r2, #16
 8001dfa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	f003 020f 	and.w	r2, r3, #15
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	4413      	add	r3, r2
 8001e18:	3304      	adds	r3, #4
 8001e1a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	0c5b      	lsrs	r3, r3, #17
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d124      	bne.n	8001e72 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d035      	beq.n	8001ea0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	091b      	lsrs	r3, r3, #4
 8001e3c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	6a38      	ldr	r0, [r7, #32]
 8001e48:	f003 fe0e 	bl	8005a68 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e58:	441a      	add	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e6a:	441a      	add	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	619a      	str	r2, [r3, #24]
 8001e70:	e016      	b.n	8001ea0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	0c5b      	lsrs	r3, r3, #17
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d110      	bne.n	8001ea0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e84:	2208      	movs	r2, #8
 8001e86:	4619      	mov	r1, r3
 8001e88:	6a38      	ldr	r0, [r7, #32]
 8001e8a:	f003 fded 	bl	8005a68 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	699a      	ldr	r2, [r3, #24]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e9a:	441a      	add	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699a      	ldr	r2, [r3, #24]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0210 	orr.w	r2, r2, #16
 8001eae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f003 ff3c 	bl	8005d32 <USB_ReadInterrupts>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ec4:	d16e      	bne.n	8001fa4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f003 ff42 	bl	8005d58 <USB_ReadDevAllOutEpInterrupt>
 8001ed4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ed6:	e062      	b.n	8001f9e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d057      	beq.n	8001f92 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 ff67 	bl	8005dc0 <USB_ReadDevOutEPInterrupt>
 8001ef2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00c      	beq.n	8001f18 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fdb0 	bl	8002a78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2308      	movs	r3, #8
 8001f32:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 feaa 	bl	8002c90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f52:	461a      	mov	r2, r3
 8001f54:	2310      	movs	r3, #16
 8001f56:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d008      	beq.n	8001f74 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f6e:	461a      	mov	r2, r3
 8001f70:	2320      	movs	r3, #32
 8001f72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d009      	beq.n	8001f92 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f90:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	3301      	adds	r3, #1
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	085b      	lsrs	r3, r3, #1
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d199      	bne.n	8001ed8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 fec2 	bl	8005d32 <USB_ReadInterrupts>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001fb8:	f040 80c0 	bne.w	800213c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 fee3 	bl	8005d8c <USB_ReadDevAllInEpInterrupt>
 8001fc6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001fcc:	e0b2      	b.n	8002134 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80a7 	beq.w	8002128 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f003 ff09 	bl	8005dfc <USB_ReadDevInEPInterrupt>
 8001fea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d057      	beq.n	80020a6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800200a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	43db      	mvns	r3, r3
 8002010:	69f9      	ldr	r1, [r7, #28]
 8002012:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002016:	4013      	ands	r3, r2
 8002018:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	4413      	add	r3, r2
 8002022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002026:	461a      	mov	r2, r3
 8002028:	2301      	movs	r3, #1
 800202a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d132      	bne.n	800209a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	3348      	adds	r3, #72	; 0x48
 8002044:	6819      	ldr	r1, [r3, #0]
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204a:	4613      	mov	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4403      	add	r3, r0
 8002054:	3344      	adds	r3, #68	; 0x44
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4419      	add	r1, r3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4403      	add	r3, r0
 8002068:	3348      	adds	r3, #72	; 0x48
 800206a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	2b00      	cmp	r3, #0
 8002070:	d113      	bne.n	800209a <HAL_PCD_IRQHandler+0x31c>
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	3350      	adds	r3, #80	; 0x50
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d108      	bne.n	800209a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002092:	461a      	mov	r2, r3
 8002094:	2101      	movs	r1, #1
 8002096:	f003 ff11 	bl	8005ebc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	b2db      	uxtb	r3, r3
 800209e:	4619      	mov	r1, r3
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f005 fdde 	bl	8007c62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020bc:	461a      	mov	r2, r3
 80020be:	2308      	movs	r3, #8
 80020c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d8:	461a      	mov	r2, r3
 80020da:	2310      	movs	r3, #16
 80020dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d008      	beq.n	80020fa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020f4:	461a      	mov	r2, r3
 80020f6:	2340      	movs	r3, #64	; 0x40
 80020f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	4413      	add	r3, r2
 800210c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002110:	461a      	mov	r2, r3
 8002112:	2302      	movs	r3, #2
 8002114:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fc1b 	bl	800295e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	3301      	adds	r3, #1
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002130:	085b      	lsrs	r3, r3, #1
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002136:	2b00      	cmp	r3, #0
 8002138:	f47f af49 	bne.w	8001fce <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f003 fdf6 	bl	8005d32 <USB_ReadInterrupts>
 8002146:	4603      	mov	r3, r0
 8002148:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800214c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002150:	d122      	bne.n	8002198 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800216c:	2b01      	cmp	r3, #1
 800216e:	d108      	bne.n	8002182 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002178:	2100      	movs	r1, #0
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 fe26 	bl	8002dcc <HAL_PCDEx_LPM_Callback>
 8002180:	e002      	b.n	8002188 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f005 fdda 	bl	8007d3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002196:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f003 fdc8 	bl	8005d32 <USB_ReadInterrupts>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021ac:	d112      	bne.n	80021d4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d102      	bne.n	80021c4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f005 fd96 	bl	8007cf0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80021d2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f003 fdaa 	bl	8005d32 <USB_ReadInterrupts>
 80021de:	4603      	mov	r3, r0
 80021e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e8:	f040 80c7 	bne.w	800237a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	69fa      	ldr	r2, [r7, #28]
 80021f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021fa:	f023 0301 	bic.w	r3, r3, #1
 80021fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2110      	movs	r1, #16
 8002206:	4618      	mov	r0, r3
 8002208:	f002 fe78 	bl	8004efc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220c:	2300      	movs	r3, #0
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002210:	e056      	b.n	80022c0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800221e:	461a      	mov	r2, r3
 8002220:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002224:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	4413      	add	r3, r2
 800222e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002236:	0151      	lsls	r1, r2, #5
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	440a      	add	r2, r1
 800223c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002240:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002244:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	4413      	add	r3, r2
 800224e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002256:	0151      	lsls	r1, r2, #5
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	440a      	add	r2, r1
 800225c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002260:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002264:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	4413      	add	r3, r2
 800226e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002272:	461a      	mov	r2, r3
 8002274:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002278:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	4413      	add	r3, r2
 8002282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800228a:	0151      	lsls	r1, r2, #5
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	440a      	add	r2, r1
 8002290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002294:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002298:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800229a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022aa:	0151      	lsls	r1, r2, #5
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	440a      	add	r2, r1
 80022b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	3301      	adds	r3, #1
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d3a3      	bcc.n	8002212 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	69fa      	ldr	r2, [r7, #28]
 80022d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022d8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80022dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d016      	beq.n	8002314 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022f6:	f043 030b 	orr.w	r3, r3, #11
 80022fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800230c:	f043 030b 	orr.w	r3, r3, #11
 8002310:	6453      	str	r3, [r2, #68]	; 0x44
 8002312:	e015      	b.n	8002340 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002322:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002326:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800232a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800233a:	f043 030b 	orr.w	r3, r3, #11
 800233e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800234e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002352:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002364:	461a      	mov	r2, r3
 8002366:	f003 fda9 	bl	8005ebc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002378:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f003 fcd7 	bl	8005d32 <USB_ReadInterrupts>
 8002384:	4603      	mov	r3, r0
 8002386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800238a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800238e:	d124      	bne.n	80023da <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f003 fd6d 	bl	8005e74 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 fe0d 	bl	8004fbe <USB_GetDevSpeed>
 80023a4:	4603      	mov	r3, r0
 80023a6:	461a      	mov	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681c      	ldr	r4, [r3, #0]
 80023b0:	f001 f944 	bl	800363c <HAL_RCC_GetHCLKFreq>
 80023b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	4620      	mov	r0, r4
 80023c0:	f002 fb4a 	bl	8004a58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f005 fc74 	bl	8007cb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695a      	ldr	r2, [r3, #20]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80023d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 fca7 	bl	8005d32 <USB_ReadInterrupts>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d10a      	bne.n	8002404 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f005 fc51 	bl	8007c96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f002 0208 	and.w	r2, r2, #8
 8002402:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f003 fc92 	bl	8005d32 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002418:	d10f      	bne.n	800243a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	b2db      	uxtb	r3, r3
 8002422:	4619      	mov	r1, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f005 fca9 	bl	8007d7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002438:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f003 fc77 	bl	8005d32 <USB_ReadInterrupts>
 8002444:	4603      	mov	r3, r0
 8002446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800244a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800244e:	d10f      	bne.n	8002470 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	b2db      	uxtb	r3, r3
 8002458:	4619      	mov	r1, r3
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f005 fc7c 	bl	8007d58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800246e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f003 fc5c 	bl	8005d32 <USB_ReadInterrupts>
 800247a:	4603      	mov	r3, r0
 800247c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002484:	d10a      	bne.n	800249c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f005 fc8a 	bl	8007da0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800249a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f003 fc46 	bl	8005d32 <USB_ReadInterrupts>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d115      	bne.n	80024dc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f005 fc7a 	bl	8007dbc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	e000      	b.n	80024dc <HAL_PCD_IRQHandler+0x75e>
      return;
 80024da:	bf00      	nop
    }
  }
}
 80024dc:	3734      	adds	r7, #52	; 0x34
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd90      	pop	{r4, r7, pc}

080024e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	460b      	mov	r3, r1
 80024ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_PCD_SetAddress+0x1a>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e013      	b.n	8002524 <HAL_PCD_SetAddress+0x42>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f003 fba4 	bl	8005c62 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	4608      	mov	r0, r1
 8002536:	4611      	mov	r1, r2
 8002538:	461a      	mov	r2, r3
 800253a:	4603      	mov	r3, r0
 800253c:	70fb      	strb	r3, [r7, #3]
 800253e:	460b      	mov	r3, r1
 8002540:	803b      	strh	r3, [r7, #0]
 8002542:	4613      	mov	r3, r2
 8002544:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800254a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800254e:	2b00      	cmp	r3, #0
 8002550:	da0f      	bge.n	8002572 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	f003 020f 	and.w	r2, r3, #15
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	3338      	adds	r3, #56	; 0x38
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	3304      	adds	r3, #4
 8002568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2201      	movs	r2, #1
 800256e:	705a      	strb	r2, [r3, #1]
 8002570:	e00f      	b.n	8002592 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	f003 020f 	and.w	r2, r3, #15
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	4413      	add	r3, r2
 8002588:	3304      	adds	r3, #4
 800258a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	b2da      	uxtb	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800259e:	883a      	ldrh	r2, [r7, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	78ba      	ldrb	r2, [r7, #2]
 80025a8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	785b      	ldrb	r3, [r3, #1]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025bc:	78bb      	ldrb	r3, [r7, #2]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d102      	bne.n	80025c8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_PCD_EP_Open+0xaa>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e00e      	b.n	80025f4 <HAL_PCD_EP_Open+0xc8>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68f9      	ldr	r1, [r7, #12]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 fd0f 	bl	8005008 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80025f2:	7afb      	ldrb	r3, [r7, #11]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800260c:	2b00      	cmp	r3, #0
 800260e:	da0f      	bge.n	8002630 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	f003 020f 	and.w	r2, r3, #15
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	3338      	adds	r3, #56	; 0x38
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	4413      	add	r3, r2
 8002624:	3304      	adds	r3, #4
 8002626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	705a      	strb	r2, [r3, #1]
 800262e:	e00f      	b.n	8002650 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	f003 020f 	and.w	r2, r3, #15
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	3304      	adds	r3, #4
 8002648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	b2da      	uxtb	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_PCD_EP_Close+0x6e>
 8002666:	2302      	movs	r3, #2
 8002668:	e00e      	b.n	8002688 <HAL_PCD_EP_Close+0x8c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68f9      	ldr	r1, [r7, #12]
 8002678:	4618      	mov	r0, r3
 800267a:	f002 fd4d 	bl	8005118 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	460b      	mov	r3, r1
 800269e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026a0:	7afb      	ldrb	r3, [r7, #11]
 80026a2:	f003 020f 	and.w	r2, r3, #15
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4413      	add	r3, r2
 80026b6:	3304      	adds	r3, #4
 80026b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	2200      	movs	r2, #0
 80026d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026d2:	7afb      	ldrb	r3, [r7, #11]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d102      	bne.n	80026ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026ec:	7afb      	ldrb	r3, [r7, #11]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	6979      	ldr	r1, [r7, #20]
 8002704:	f003 f828 	bl	8005758 <USB_EP0StartXfer>
 8002708:	e008      	b.n	800271c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	6979      	ldr	r1, [r7, #20]
 8002718:	f002 fdda 	bl	80052d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	460b      	mov	r3, r1
 8002730:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	f003 020f 	and.w	r2, r3, #15
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002748:	681b      	ldr	r3, [r3, #0]
}
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b086      	sub	sp, #24
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	460b      	mov	r3, r1
 8002764:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002766:	7afb      	ldrb	r3, [r7, #11]
 8002768:	f003 020f 	and.w	r2, r3, #15
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	3338      	adds	r3, #56	; 0x38
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4413      	add	r3, r2
 800277a:	3304      	adds	r3, #4
 800277c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2201      	movs	r2, #1
 8002794:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002796:	7afb      	ldrb	r3, [r7, #11]
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	b2da      	uxtb	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d102      	bne.n	80027b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027b0:	7afb      	ldrb	r3, [r7, #11]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	6979      	ldr	r1, [r7, #20]
 80027c8:	f002 ffc6 	bl	8005758 <USB_EP0StartXfer>
 80027cc:	e008      	b.n	80027e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	6979      	ldr	r1, [r7, #20]
 80027dc:	f002 fd78 	bl	80052d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	f003 020f 	and.w	r2, r3, #15
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	429a      	cmp	r2, r3
 8002802:	d901      	bls.n	8002808 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e050      	b.n	80028aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800280c:	2b00      	cmp	r3, #0
 800280e:	da0f      	bge.n	8002830 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	f003 020f 	and.w	r2, r3, #15
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	3338      	adds	r3, #56	; 0x38
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	3304      	adds	r3, #4
 8002826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	705a      	strb	r2, [r3, #1]
 800282e:	e00d      	b.n	800284c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	3304      	adds	r3, #4
 8002844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	b2da      	uxtb	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_PCD_EP_SetStall+0x82>
 8002868:	2302      	movs	r3, #2
 800286a:	e01e      	b.n	80028aa <HAL_PCD_EP_SetStall+0xc0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68f9      	ldr	r1, [r7, #12]
 800287a:	4618      	mov	r0, r3
 800287c:	f003 f91d 	bl	8005aba <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	b2d9      	uxtb	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800289a:	461a      	mov	r2, r3
 800289c:	f003 fb0e 	bl	8005ebc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	f003 020f 	and.w	r2, r3, #15
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d901      	bls.n	80028d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e042      	b.n	8002956 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	da0f      	bge.n	80028f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	f003 020f 	and.w	r2, r3, #15
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	3338      	adds	r3, #56	; 0x38
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4413      	add	r3, r2
 80028ec:	3304      	adds	r3, #4
 80028ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	705a      	strb	r2, [r3, #1]
 80028f6:	e00f      	b.n	8002918 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	f003 020f 	and.w	r2, r3, #15
 80028fe:	4613      	mov	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	3304      	adds	r3, #4
 8002910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	b2da      	uxtb	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_PCD_EP_ClrStall+0x86>
 8002934:	2302      	movs	r3, #2
 8002936:	e00e      	b.n	8002956 <HAL_PCD_EP_ClrStall+0xa4>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68f9      	ldr	r1, [r7, #12]
 8002946:	4618      	mov	r0, r3
 8002948:	f003 f925 	bl	8005b96 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b08a      	sub	sp, #40	; 0x28
 8002962:	af02      	add	r7, sp, #8
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	3338      	adds	r3, #56	; 0x38
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	3304      	adds	r3, #4
 8002984:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	429a      	cmp	r2, r3
 8002990:	d901      	bls.n	8002996 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e06c      	b.n	8002a70 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d902      	bls.n	80029b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3303      	adds	r3, #3
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029ba:	e02b      	b.n	8002a14 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d902      	bls.n	80029d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	3303      	adds	r3, #3
 80029dc:	089b      	lsrs	r3, r3, #2
 80029de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	68d9      	ldr	r1, [r3, #12]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	4603      	mov	r3, r0
 80029f6:	6978      	ldr	r0, [r7, #20]
 80029f8:	f003 f801 	bl	80059fe <USB_WritePacket>

    ep->xfer_buff  += len;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	441a      	add	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	441a      	add	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d809      	bhi.n	8002a3e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	699a      	ldr	r2, [r3, #24]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d203      	bcs.n	8002a3e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1be      	bne.n	80029bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d811      	bhi.n	8002a6e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	2201      	movs	r2, #1
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	6939      	ldr	r1, [r7, #16]
 8002a66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3720      	adds	r7, #32
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	333c      	adds	r3, #60	; 0x3c
 8002a90:	3304      	adds	r3, #4
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	015a      	lsls	r2, r3, #5
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	f040 80a0 	bne.w	8002bf0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d015      	beq.n	8002ae6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4a72      	ldr	r2, [pc, #456]	; (8002c88 <PCD_EP_OutXfrComplete_int+0x210>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	f240 80dd 	bls.w	8002c7e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80d7 	beq.w	8002c7e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002adc:	461a      	mov	r2, r3
 8002ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ae2:	6093      	str	r3, [r2, #8]
 8002ae4:	e0cb      	b.n	8002c7e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afc:	461a      	mov	r2, r3
 8002afe:	2320      	movs	r3, #32
 8002b00:	6093      	str	r3, [r2, #8]
 8002b02:	e0bc      	b.n	8002c7e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f040 80b7 	bne.w	8002c7e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4a5d      	ldr	r2, [pc, #372]	; (8002c88 <PCD_EP_OutXfrComplete_int+0x210>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d90f      	bls.n	8002b38 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b34:	6093      	str	r3, [r2, #8]
 8002b36:	e0a2      	b.n	8002c7e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b4a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	0159      	lsls	r1, r3, #5
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	440b      	add	r3, r1
 8002b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002b5e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4403      	add	r3, r0
 8002b6e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b72:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b86:	6819      	ldr	r1, [r3, #0]
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4403      	add	r3, r0
 8002b96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4419      	add	r1, r3
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4403      	add	r3, r0
 8002bac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bb0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d114      	bne.n	8002be2 <PCD_EP_OutXfrComplete_int+0x16a>
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d108      	bne.n	8002be2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2101      	movs	r1, #1
 8002bde:	f003 f96d 	bl	8005ebc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	4619      	mov	r1, r3
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f005 f81f 	bl	8007c2c <HAL_PCD_DataOutStageCallback>
 8002bee:	e046      	b.n	8002c7e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a26      	ldr	r2, [pc, #152]	; (8002c8c <PCD_EP_OutXfrComplete_int+0x214>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d124      	bne.n	8002c42 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c14:	6093      	str	r3, [r2, #8]
 8002c16:	e032      	b.n	8002c7e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2320      	movs	r3, #32
 8002c32:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	4619      	mov	r1, r3
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f004 fff6 	bl	8007c2c <HAL_PCD_DataOutStageCallback>
 8002c40:	e01d      	b.n	8002c7e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d114      	bne.n	8002c72 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d108      	bne.n	8002c72 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	f003 f925 	bl	8005ebc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	4619      	mov	r1, r3
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f004 ffd7 	bl	8007c2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	4f54300a 	.word	0x4f54300a
 8002c8c:	4f54310a 	.word	0x4f54310a

08002c90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	333c      	adds	r3, #60	; 0x3c
 8002ca8:	3304      	adds	r3, #4
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <PCD_EP_OutSetupPacket_int+0x88>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d90e      	bls.n	8002ce4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d009      	beq.n	8002ce4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ce2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f004 ff8f 	bl	8007c08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <PCD_EP_OutSetupPacket_int+0x88>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d90c      	bls.n	8002d0c <PCD_EP_OutSetupPacket_int+0x7c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d108      	bne.n	8002d0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d04:	461a      	mov	r2, r3
 8002d06:	2101      	movs	r1, #1
 8002d08:	f003 f8d8 	bl	8005ebc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	4f54300a 	.word	0x4f54300a

08002d1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d107      	bne.n	8002d4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d3a:	883b      	ldrh	r3, [r7, #0]
 8002d3c:	0419      	lsls	r1, r3, #16
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28
 8002d48:	e028      	b.n	8002d9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	4413      	add	r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	73fb      	strb	r3, [r7, #15]
 8002d5c:	e00d      	b.n	8002d7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	3340      	adds	r3, #64	; 0x40
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	0c1b      	lsrs	r3, r3, #16
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	4413      	add	r3, r2
 8002d72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	3301      	adds	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
 8002d7a:	7bfa      	ldrb	r2, [r7, #15]
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d3ec      	bcc.n	8002d5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d84:	883b      	ldrh	r3, [r7, #0]
 8002d86:	0418      	lsls	r0, r3, #16
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6819      	ldr	r1, [r3, #0]
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	4302      	orrs	r2, r0
 8002d94:	3340      	adds	r3, #64	; 0x40
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	460b      	mov	r3, r1
 8002db4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	887a      	ldrh	r2, [r7, #2]
 8002dbc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e25b      	b.n	80032ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d075      	beq.n	8002eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e02:	4ba3      	ldr	r3, [pc, #652]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d00c      	beq.n	8002e28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e0e:	4ba0      	ldr	r3, [pc, #640]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d112      	bne.n	8002e40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e1a:	4b9d      	ldr	r3, [pc, #628]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e26:	d10b      	bne.n	8002e40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e28:	4b99      	ldr	r3, [pc, #612]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d05b      	beq.n	8002eec <HAL_RCC_OscConfig+0x108>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d157      	bne.n	8002eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e236      	b.n	80032ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e48:	d106      	bne.n	8002e58 <HAL_RCC_OscConfig+0x74>
 8002e4a:	4b91      	ldr	r3, [pc, #580]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a90      	ldr	r2, [pc, #576]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	e01d      	b.n	8002e94 <HAL_RCC_OscConfig+0xb0>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x98>
 8002e62:	4b8b      	ldr	r3, [pc, #556]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a8a      	ldr	r2, [pc, #552]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4b88      	ldr	r3, [pc, #544]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a87      	ldr	r2, [pc, #540]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCC_OscConfig+0xb0>
 8002e7c:	4b84      	ldr	r3, [pc, #528]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a83      	ldr	r2, [pc, #524]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	4b81      	ldr	r3, [pc, #516]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a80      	ldr	r2, [pc, #512]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d013      	beq.n	8002ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fe f8ae 	bl	8000ffc <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea4:	f7fe f8aa 	bl	8000ffc <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	; 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e1fb      	b.n	80032ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	4b76      	ldr	r3, [pc, #472]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0xc0>
 8002ec2:	e014      	b.n	8002eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe f89a 	bl	8000ffc <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7fe f896 	bl	8000ffc <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e1e7      	b.n	80032ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	4b6c      	ldr	r3, [pc, #432]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0xe8>
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d063      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002efa:	4b65      	ldr	r3, [pc, #404]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f06:	4b62      	ldr	r3, [pc, #392]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d11c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f12:	4b5f      	ldr	r3, [pc, #380]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d116      	bne.n	8002f4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1e:	4b5c      	ldr	r3, [pc, #368]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <HAL_RCC_OscConfig+0x152>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d001      	beq.n	8002f36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e1bb      	b.n	80032ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f36:	4b56      	ldr	r3, [pc, #344]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4952      	ldr	r1, [pc, #328]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4a:	e03a      	b.n	8002fc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d020      	beq.n	8002f96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f54:	4b4f      	ldr	r3, [pc, #316]	; (8003094 <HAL_RCC_OscConfig+0x2b0>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5a:	f7fe f84f 	bl	8000ffc <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f62:	f7fe f84b 	bl	8000ffc <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e19c      	b.n	80032ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	4b46      	ldr	r3, [pc, #280]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f80:	4b43      	ldr	r3, [pc, #268]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4940      	ldr	r1, [pc, #256]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	600b      	str	r3, [r1, #0]
 8002f94:	e015      	b.n	8002fc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f96:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <HAL_RCC_OscConfig+0x2b0>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe f82e 	bl	8000ffc <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa4:	f7fe f82a 	bl	8000ffc <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e17b      	b.n	80032ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb6:	4b36      	ldr	r3, [pc, #216]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d030      	beq.n	8003030 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d016      	beq.n	8003004 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd6:	4b30      	ldr	r3, [pc, #192]	; (8003098 <HAL_RCC_OscConfig+0x2b4>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fdc:	f7fe f80e 	bl	8000ffc <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe4:	f7fe f80a 	bl	8000ffc <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e15b      	b.n	80032ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff6:	4b26      	ldr	r3, [pc, #152]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x200>
 8003002:	e015      	b.n	8003030 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003004:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_OscConfig+0x2b4>)
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300a:	f7fd fff7 	bl	8000ffc <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003012:	f7fd fff3 	bl	8000ffc <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e144      	b.n	80032ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8003026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f0      	bne.n	8003012 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80a0 	beq.w	800317e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003042:	4b13      	ldr	r3, [pc, #76]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10f      	bne.n	800306e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	4a0e      	ldr	r2, [pc, #56]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8003058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305c:	6413      	str	r3, [r2, #64]	; 0x40
 800305e:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800306a:	2301      	movs	r3, #1
 800306c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306e:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_OscConfig+0x2b8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003076:	2b00      	cmp	r3, #0
 8003078:	d121      	bne.n	80030be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800307a:	4b08      	ldr	r3, [pc, #32]	; (800309c <HAL_RCC_OscConfig+0x2b8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a07      	ldr	r2, [pc, #28]	; (800309c <HAL_RCC_OscConfig+0x2b8>)
 8003080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003086:	f7fd ffb9 	bl	8000ffc <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308c:	e011      	b.n	80030b2 <HAL_RCC_OscConfig+0x2ce>
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	42470000 	.word	0x42470000
 8003098:	42470e80 	.word	0x42470e80
 800309c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a0:	f7fd ffac 	bl	8000ffc <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e0fd      	b.n	80032ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b2:	4b81      	ldr	r3, [pc, #516]	; (80032b8 <HAL_RCC_OscConfig+0x4d4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d106      	bne.n	80030d4 <HAL_RCC_OscConfig+0x2f0>
 80030c6:	4b7d      	ldr	r3, [pc, #500]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ca:	4a7c      	ldr	r2, [pc, #496]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6713      	str	r3, [r2, #112]	; 0x70
 80030d2:	e01c      	b.n	800310e <HAL_RCC_OscConfig+0x32a>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b05      	cmp	r3, #5
 80030da:	d10c      	bne.n	80030f6 <HAL_RCC_OscConfig+0x312>
 80030dc:	4b77      	ldr	r3, [pc, #476]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e0:	4a76      	ldr	r2, [pc, #472]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 80030e2:	f043 0304 	orr.w	r3, r3, #4
 80030e6:	6713      	str	r3, [r2, #112]	; 0x70
 80030e8:	4b74      	ldr	r3, [pc, #464]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	4a73      	ldr	r2, [pc, #460]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6713      	str	r3, [r2, #112]	; 0x70
 80030f4:	e00b      	b.n	800310e <HAL_RCC_OscConfig+0x32a>
 80030f6:	4b71      	ldr	r3, [pc, #452]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	4a70      	ldr	r2, [pc, #448]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	6713      	str	r3, [r2, #112]	; 0x70
 8003102:	4b6e      	ldr	r3, [pc, #440]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	4a6d      	ldr	r2, [pc, #436]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 8003108:	f023 0304 	bic.w	r3, r3, #4
 800310c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d015      	beq.n	8003142 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003116:	f7fd ff71 	bl	8000ffc <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311c:	e00a      	b.n	8003134 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800311e:	f7fd ff6d 	bl	8000ffc <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	; 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e0bc      	b.n	80032ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003134:	4b61      	ldr	r3, [pc, #388]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0ee      	beq.n	800311e <HAL_RCC_OscConfig+0x33a>
 8003140:	e014      	b.n	800316c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003142:	f7fd ff5b 	bl	8000ffc <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003148:	e00a      	b.n	8003160 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314a:	f7fd ff57 	bl	8000ffc <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	f241 3288 	movw	r2, #5000	; 0x1388
 8003158:	4293      	cmp	r3, r2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e0a6      	b.n	80032ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003160:	4b56      	ldr	r3, [pc, #344]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1ee      	bne.n	800314a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800316c:	7dfb      	ldrb	r3, [r7, #23]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d105      	bne.n	800317e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003172:	4b52      	ldr	r3, [pc, #328]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	4a51      	ldr	r2, [pc, #324]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 8003178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800317c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8092 	beq.w	80032ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003188:	4b4c      	ldr	r3, [pc, #304]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 030c 	and.w	r3, r3, #12
 8003190:	2b08      	cmp	r3, #8
 8003192:	d05c      	beq.n	800324e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d141      	bne.n	8003220 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319c:	4b48      	ldr	r3, [pc, #288]	; (80032c0 <HAL_RCC_OscConfig+0x4dc>)
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a2:	f7fd ff2b 	bl	8000ffc <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031aa:	f7fd ff27 	bl	8000ffc <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e078      	b.n	80032ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031bc:	4b3f      	ldr	r3, [pc, #252]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	019b      	lsls	r3, r3, #6
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	085b      	lsrs	r3, r3, #1
 80031e0:	3b01      	subs	r3, #1
 80031e2:	041b      	lsls	r3, r3, #16
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	061b      	lsls	r3, r3, #24
 80031ec:	4933      	ldr	r1, [pc, #204]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f2:	4b33      	ldr	r3, [pc, #204]	; (80032c0 <HAL_RCC_OscConfig+0x4dc>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7fd ff00 	bl	8000ffc <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003200:	f7fd fefc 	bl	8000ffc <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e04d      	b.n	80032ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003212:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x41c>
 800321e:	e045      	b.n	80032ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003220:	4b27      	ldr	r3, [pc, #156]	; (80032c0 <HAL_RCC_OscConfig+0x4dc>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003226:	f7fd fee9 	bl	8000ffc <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800322e:	f7fd fee5 	bl	8000ffc <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e036      	b.n	80032ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003240:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f0      	bne.n	800322e <HAL_RCC_OscConfig+0x44a>
 800324c:	e02e      	b.n	80032ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e029      	b.n	80032ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800325a:	4b18      	ldr	r3, [pc, #96]	; (80032bc <HAL_RCC_OscConfig+0x4d8>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	429a      	cmp	r2, r3
 800326c:	d11c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d115      	bne.n	80032a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003282:	4013      	ands	r3, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003288:	4293      	cmp	r3, r2
 800328a:	d10d      	bne.n	80032a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003296:	429a      	cmp	r2, r3
 8003298:	d106      	bne.n	80032a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40007000 	.word	0x40007000
 80032bc:	40023800 	.word	0x40023800
 80032c0:	42470060 	.word	0x42470060

080032c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0cc      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032d8:	4b68      	ldr	r3, [pc, #416]	; (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d90c      	bls.n	8003300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b65      	ldr	r3, [pc, #404]	; (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ee:	4b63      	ldr	r3, [pc, #396]	; (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d001      	beq.n	8003300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0b8      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d020      	beq.n	800334e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003318:	4b59      	ldr	r3, [pc, #356]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	4a58      	ldr	r2, [pc, #352]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003322:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003330:	4b53      	ldr	r3, [pc, #332]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4a52      	ldr	r2, [pc, #328]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800333a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800333c:	4b50      	ldr	r3, [pc, #320]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	494d      	ldr	r1, [pc, #308]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d044      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d107      	bne.n	8003372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003362:	4b47      	ldr	r3, [pc, #284]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d119      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e07f      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d003      	beq.n	8003382 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800337e:	2b03      	cmp	r3, #3
 8003380:	d107      	bne.n	8003392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003382:	4b3f      	ldr	r3, [pc, #252]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e06f      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003392:	4b3b      	ldr	r3, [pc, #236]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e067      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a2:	4b37      	ldr	r3, [pc, #220]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f023 0203 	bic.w	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	4934      	ldr	r1, [pc, #208]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b4:	f7fd fe22 	bl	8000ffc <HAL_GetTick>
 80033b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033bc:	f7fd fe1e 	bl	8000ffc <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e04f      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	4b2b      	ldr	r3, [pc, #172]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 020c 	and.w	r2, r3, #12
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d1eb      	bne.n	80033bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033e4:	4b25      	ldr	r3, [pc, #148]	; (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d20c      	bcs.n	800340c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f2:	4b22      	ldr	r3, [pc, #136]	; (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e032      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4916      	ldr	r1, [pc, #88]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	490e      	ldr	r1, [pc, #56]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800344a:	f000 f821 	bl	8003490 <HAL_RCC_GetSysClockFreq>
 800344e:	4601      	mov	r1, r0
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 800345c:	5cd3      	ldrb	r3, [r2, r3]
 800345e:	fa21 f303 	lsr.w	r3, r1, r3
 8003462:	4a09      	ldr	r2, [pc, #36]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <HAL_RCC_ClockConfig+0x1c8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f7fd fd82 	bl	8000f74 <HAL_InitTick>

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40023c00 	.word	0x40023c00
 8003480:	40023800 	.word	0x40023800
 8003484:	0800839c 	.word	0x0800839c
 8003488:	20000004 	.word	0x20000004
 800348c:	20000008 	.word	0x20000008

08003490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	2300      	movs	r3, #0
 80034a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034a6:	4b63      	ldr	r3, [pc, #396]	; (8003634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d007      	beq.n	80034c2 <HAL_RCC_GetSysClockFreq+0x32>
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d008      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x38>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f040 80b4 	bne.w	8003624 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034bc:	4b5e      	ldr	r3, [pc, #376]	; (8003638 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80034be:	60bb      	str	r3, [r7, #8]
       break;
 80034c0:	e0b3      	b.n	800362a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034c2:	4b5d      	ldr	r3, [pc, #372]	; (8003638 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80034c4:	60bb      	str	r3, [r7, #8]
      break;
 80034c6:	e0b0      	b.n	800362a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034c8:	4b5a      	ldr	r3, [pc, #360]	; (8003634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034d2:	4b58      	ldr	r3, [pc, #352]	; (8003634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d04a      	beq.n	8003574 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034de:	4b55      	ldr	r3, [pc, #340]	; (8003634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	099b      	lsrs	r3, r3, #6
 80034e4:	f04f 0400 	mov.w	r4, #0
 80034e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	ea03 0501 	and.w	r5, r3, r1
 80034f4:	ea04 0602 	and.w	r6, r4, r2
 80034f8:	4629      	mov	r1, r5
 80034fa:	4632      	mov	r2, r6
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	f04f 0400 	mov.w	r4, #0
 8003504:	0154      	lsls	r4, r2, #5
 8003506:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800350a:	014b      	lsls	r3, r1, #5
 800350c:	4619      	mov	r1, r3
 800350e:	4622      	mov	r2, r4
 8003510:	1b49      	subs	r1, r1, r5
 8003512:	eb62 0206 	sbc.w	r2, r2, r6
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	f04f 0400 	mov.w	r4, #0
 800351e:	0194      	lsls	r4, r2, #6
 8003520:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003524:	018b      	lsls	r3, r1, #6
 8003526:	1a5b      	subs	r3, r3, r1
 8003528:	eb64 0402 	sbc.w	r4, r4, r2
 800352c:	f04f 0100 	mov.w	r1, #0
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	00e2      	lsls	r2, r4, #3
 8003536:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800353a:	00d9      	lsls	r1, r3, #3
 800353c:	460b      	mov	r3, r1
 800353e:	4614      	mov	r4, r2
 8003540:	195b      	adds	r3, r3, r5
 8003542:	eb44 0406 	adc.w	r4, r4, r6
 8003546:	f04f 0100 	mov.w	r1, #0
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	02a2      	lsls	r2, r4, #10
 8003550:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003554:	0299      	lsls	r1, r3, #10
 8003556:	460b      	mov	r3, r1
 8003558:	4614      	mov	r4, r2
 800355a:	4618      	mov	r0, r3
 800355c:	4621      	mov	r1, r4
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f04f 0400 	mov.w	r4, #0
 8003564:	461a      	mov	r2, r3
 8003566:	4623      	mov	r3, r4
 8003568:	f7fc fe36 	bl	80001d8 <__aeabi_uldivmod>
 800356c:	4603      	mov	r3, r0
 800356e:	460c      	mov	r4, r1
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	e049      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003574:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	099b      	lsrs	r3, r3, #6
 800357a:	f04f 0400 	mov.w	r4, #0
 800357e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	ea03 0501 	and.w	r5, r3, r1
 800358a:	ea04 0602 	and.w	r6, r4, r2
 800358e:	4629      	mov	r1, r5
 8003590:	4632      	mov	r2, r6
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	f04f 0400 	mov.w	r4, #0
 800359a:	0154      	lsls	r4, r2, #5
 800359c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035a0:	014b      	lsls	r3, r1, #5
 80035a2:	4619      	mov	r1, r3
 80035a4:	4622      	mov	r2, r4
 80035a6:	1b49      	subs	r1, r1, r5
 80035a8:	eb62 0206 	sbc.w	r2, r2, r6
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	f04f 0400 	mov.w	r4, #0
 80035b4:	0194      	lsls	r4, r2, #6
 80035b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035ba:	018b      	lsls	r3, r1, #6
 80035bc:	1a5b      	subs	r3, r3, r1
 80035be:	eb64 0402 	sbc.w	r4, r4, r2
 80035c2:	f04f 0100 	mov.w	r1, #0
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	00e2      	lsls	r2, r4, #3
 80035cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035d0:	00d9      	lsls	r1, r3, #3
 80035d2:	460b      	mov	r3, r1
 80035d4:	4614      	mov	r4, r2
 80035d6:	195b      	adds	r3, r3, r5
 80035d8:	eb44 0406 	adc.w	r4, r4, r6
 80035dc:	f04f 0100 	mov.w	r1, #0
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	02a2      	lsls	r2, r4, #10
 80035e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80035ea:	0299      	lsls	r1, r3, #10
 80035ec:	460b      	mov	r3, r1
 80035ee:	4614      	mov	r4, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	4621      	mov	r1, r4
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f04f 0400 	mov.w	r4, #0
 80035fa:	461a      	mov	r2, r3
 80035fc:	4623      	mov	r3, r4
 80035fe:	f7fc fdeb 	bl	80001d8 <__aeabi_uldivmod>
 8003602:	4603      	mov	r3, r0
 8003604:	460c      	mov	r4, r1
 8003606:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003608:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	0c1b      	lsrs	r3, r3, #16
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	3301      	adds	r3, #1
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003620:	60bb      	str	r3, [r7, #8]
      break;
 8003622:	e002      	b.n	800362a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003626:	60bb      	str	r3, [r7, #8]
      break;
 8003628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800362a:	68bb      	ldr	r3, [r7, #8]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003634:	40023800 	.word	0x40023800
 8003638:	00f42400 	.word	0x00f42400

0800363c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003640:	4b03      	ldr	r3, [pc, #12]	; (8003650 <HAL_RCC_GetHCLKFreq+0x14>)
 8003642:	681b      	ldr	r3, [r3, #0]
}
 8003644:	4618      	mov	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20000004 	.word	0x20000004

08003654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003658:	f7ff fff0 	bl	800363c <HAL_RCC_GetHCLKFreq>
 800365c:	4601      	mov	r1, r0
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	0a9b      	lsrs	r3, r3, #10
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	4a03      	ldr	r2, [pc, #12]	; (8003678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800366a:	5cd3      	ldrb	r3, [r2, r3]
 800366c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40023800 	.word	0x40023800
 8003678:	080083ac 	.word	0x080083ac

0800367c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003680:	f7ff ffdc 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8003684:	4601      	mov	r1, r0
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	0b5b      	lsrs	r3, r3, #13
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4a03      	ldr	r2, [pc, #12]	; (80036a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003692:	5cd3      	ldrb	r3, [r2, r3]
 8003694:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	080083ac 	.word	0x080083ac

080036a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e056      	b.n	8003764 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d106      	bne.n	80036d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7fd fa85 	bl	8000be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2202      	movs	r2, #2
 80036da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	ea42 0103 	orr.w	r1, r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	0c1b      	lsrs	r3, r3, #16
 8003734:	f003 0104 	and.w	r1, r3, #4
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	69da      	ldr	r2, [r3, #28]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003752:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e01d      	b.n	80037ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd fa6c 	bl	8000c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	4619      	mov	r1, r3
 80037aa:	4610      	mov	r0, r2
 80037ac:	f000 f9ee 	bl	8003b8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e01d      	b.n	8003810 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f815 	bl	8003818 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2202      	movs	r2, #2
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3304      	adds	r3, #4
 80037fe:	4619      	mov	r1, r3
 8003800:	4610      	mov	r0, r2
 8003802:	f000 f9c3 	bl	8003b8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2201      	movs	r2, #1
 800383c:	6839      	ldr	r1, [r7, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fc4a 	bl	80040d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a10      	ldr	r2, [pc, #64]	; (800388c <HAL_TIM_PWM_Start+0x60>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d107      	bne.n	800385e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b06      	cmp	r3, #6
 800386e:	d007      	beq.n	8003880 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40010000 	.word	0x40010000

08003890 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e0b4      	b.n	8003a14 <HAL_TIM_PWM_ConfigChannel+0x184>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2202      	movs	r2, #2
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b0c      	cmp	r3, #12
 80038be:	f200 809f 	bhi.w	8003a00 <HAL_TIM_PWM_ConfigChannel+0x170>
 80038c2:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80038c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c8:	080038fd 	.word	0x080038fd
 80038cc:	08003a01 	.word	0x08003a01
 80038d0:	08003a01 	.word	0x08003a01
 80038d4:	08003a01 	.word	0x08003a01
 80038d8:	0800393d 	.word	0x0800393d
 80038dc:	08003a01 	.word	0x08003a01
 80038e0:	08003a01 	.word	0x08003a01
 80038e4:	08003a01 	.word	0x08003a01
 80038e8:	0800397f 	.word	0x0800397f
 80038ec:	08003a01 	.word	0x08003a01
 80038f0:	08003a01 	.word	0x08003a01
 80038f4:	08003a01 	.word	0x08003a01
 80038f8:	080039bf 	.word	0x080039bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f9c2 	bl	8003c8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0208 	orr.w	r2, r2, #8
 8003916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0204 	bic.w	r2, r2, #4
 8003926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6999      	ldr	r1, [r3, #24]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	619a      	str	r2, [r3, #24]
      break;
 800393a:	e062      	b.n	8003a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fa08 	bl	8003d58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6999      	ldr	r1, [r3, #24]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	021a      	lsls	r2, r3, #8
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	619a      	str	r2, [r3, #24]
      break;
 800397c:	e041      	b.n	8003a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68b9      	ldr	r1, [r7, #8]
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fa53 	bl	8003e30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0208 	orr.w	r2, r2, #8
 8003998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69da      	ldr	r2, [r3, #28]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0204 	bic.w	r2, r2, #4
 80039a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69d9      	ldr	r1, [r3, #28]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	61da      	str	r2, [r3, #28]
      break;
 80039bc:	e021      	b.n	8003a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fa9d 	bl	8003f04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69d9      	ldr	r1, [r3, #28]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	021a      	lsls	r2, r3, #8
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	61da      	str	r2, [r3, #28]
      break;
 80039fe:	e000      	b.n	8003a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003a00:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIM_ConfigClockSource+0x18>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e0a6      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x166>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d067      	beq.n	8003b3c <HAL_TIM_ConfigClockSource+0x120>
 8003a6c:	2b40      	cmp	r3, #64	; 0x40
 8003a6e:	d80b      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x6c>
 8003a70:	2b10      	cmp	r3, #16
 8003a72:	d073      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0x140>
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d802      	bhi.n	8003a7e <HAL_TIM_ConfigClockSource+0x62>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d06f      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003a7c:	e078      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	d06c      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0x140>
 8003a82:	2b30      	cmp	r3, #48	; 0x30
 8003a84:	d06a      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003a86:	e073      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a88:	2b70      	cmp	r3, #112	; 0x70
 8003a8a:	d00d      	beq.n	8003aa8 <HAL_TIM_ConfigClockSource+0x8c>
 8003a8c:	2b70      	cmp	r3, #112	; 0x70
 8003a8e:	d804      	bhi.n	8003a9a <HAL_TIM_ConfigClockSource+0x7e>
 8003a90:	2b50      	cmp	r3, #80	; 0x50
 8003a92:	d033      	beq.n	8003afc <HAL_TIM_ConfigClockSource+0xe0>
 8003a94:	2b60      	cmp	r3, #96	; 0x60
 8003a96:	d041      	beq.n	8003b1c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003a98:	e06a      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9e:	d066      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0x152>
 8003aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa4:	d017      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003aa6:	e063      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	6899      	ldr	r1, [r3, #8]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f000 faee 	bl	8004098 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003aca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	609a      	str	r2, [r3, #8]
      break;
 8003ad4:	e04c      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6899      	ldr	r1, [r3, #8]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f000 fad7 	bl	8004098 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003af8:	609a      	str	r2, [r3, #8]
      break;
 8003afa:	e039      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f000 fa4b 	bl	8003fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2150      	movs	r1, #80	; 0x50
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 faa4 	bl	8004062 <TIM_ITRx_SetConfig>
      break;
 8003b1a:	e029      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	f000 fa6a 	bl	8004002 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2160      	movs	r1, #96	; 0x60
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fa94 	bl	8004062 <TIM_ITRx_SetConfig>
      break;
 8003b3a:	e019      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	6859      	ldr	r1, [r3, #4]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f000 fa2b 	bl	8003fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2140      	movs	r1, #64	; 0x40
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fa84 	bl	8004062 <TIM_ITRx_SetConfig>
      break;
 8003b5a:	e009      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4619      	mov	r1, r3
 8003b66:	4610      	mov	r0, r2
 8003b68:	f000 fa7b 	bl	8004062 <TIM_ITRx_SetConfig>
      break;
 8003b6c:	e000      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a34      	ldr	r2, [pc, #208]	; (8003c70 <TIM_Base_SetConfig+0xe4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00f      	beq.n	8003bc4 <TIM_Base_SetConfig+0x38>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003baa:	d00b      	beq.n	8003bc4 <TIM_Base_SetConfig+0x38>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a31      	ldr	r2, [pc, #196]	; (8003c74 <TIM_Base_SetConfig+0xe8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d007      	beq.n	8003bc4 <TIM_Base_SetConfig+0x38>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a30      	ldr	r2, [pc, #192]	; (8003c78 <TIM_Base_SetConfig+0xec>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d003      	beq.n	8003bc4 <TIM_Base_SetConfig+0x38>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a2f      	ldr	r2, [pc, #188]	; (8003c7c <TIM_Base_SetConfig+0xf0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d108      	bne.n	8003bd6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a25      	ldr	r2, [pc, #148]	; (8003c70 <TIM_Base_SetConfig+0xe4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d01b      	beq.n	8003c16 <TIM_Base_SetConfig+0x8a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be4:	d017      	beq.n	8003c16 <TIM_Base_SetConfig+0x8a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a22      	ldr	r2, [pc, #136]	; (8003c74 <TIM_Base_SetConfig+0xe8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d013      	beq.n	8003c16 <TIM_Base_SetConfig+0x8a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a21      	ldr	r2, [pc, #132]	; (8003c78 <TIM_Base_SetConfig+0xec>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00f      	beq.n	8003c16 <TIM_Base_SetConfig+0x8a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a20      	ldr	r2, [pc, #128]	; (8003c7c <TIM_Base_SetConfig+0xf0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00b      	beq.n	8003c16 <TIM_Base_SetConfig+0x8a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a1f      	ldr	r2, [pc, #124]	; (8003c80 <TIM_Base_SetConfig+0xf4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d007      	beq.n	8003c16 <TIM_Base_SetConfig+0x8a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <TIM_Base_SetConfig+0xf8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d003      	beq.n	8003c16 <TIM_Base_SetConfig+0x8a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <TIM_Base_SetConfig+0xfc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d108      	bne.n	8003c28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a08      	ldr	r2, [pc, #32]	; (8003c70 <TIM_Base_SetConfig+0xe4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d103      	bne.n	8003c5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	615a      	str	r2, [r3, #20]
}
 8003c62:	bf00      	nop
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	40010000 	.word	0x40010000
 8003c74:	40000400 	.word	0x40000400
 8003c78:	40000800 	.word	0x40000800
 8003c7c:	40000c00 	.word	0x40000c00
 8003c80:	40014000 	.word	0x40014000
 8003c84:	40014400 	.word	0x40014400
 8003c88:	40014800 	.word	0x40014800

08003c8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f023 0201 	bic.w	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f023 0302 	bic.w	r3, r3, #2
 8003cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a1c      	ldr	r2, [pc, #112]	; (8003d54 <TIM_OC1_SetConfig+0xc8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d10c      	bne.n	8003d02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0308 	bic.w	r3, r3, #8
 8003cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 0304 	bic.w	r3, r3, #4
 8003d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a13      	ldr	r2, [pc, #76]	; (8003d54 <TIM_OC1_SetConfig+0xc8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d111      	bne.n	8003d2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	621a      	str	r2, [r3, #32]
}
 8003d48:	bf00      	nop
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40010000 	.word	0x40010000

08003d58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	f023 0210 	bic.w	r2, r3, #16
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	021b      	lsls	r3, r3, #8
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f023 0320 	bic.w	r3, r3, #32
 8003da2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a1e      	ldr	r2, [pc, #120]	; (8003e2c <TIM_OC2_SetConfig+0xd4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d10d      	bne.n	8003dd4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <TIM_OC2_SetConfig+0xd4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d113      	bne.n	8003e04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003de2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40010000 	.word	0x40010000

08003e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a1d      	ldr	r2, [pc, #116]	; (8003f00 <TIM_OC3_SetConfig+0xd0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d10d      	bne.n	8003eaa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a14      	ldr	r2, [pc, #80]	; (8003f00 <TIM_OC3_SetConfig+0xd0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d113      	bne.n	8003eda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	621a      	str	r2, [r3, #32]
}
 8003ef4:	bf00      	nop
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	40010000 	.word	0x40010000

08003f04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	031b      	lsls	r3, r3, #12
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a10      	ldr	r2, [pc, #64]	; (8003fa0 <TIM_OC4_SetConfig+0x9c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d109      	bne.n	8003f78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	019b      	lsls	r3, r3, #6
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	621a      	str	r2, [r3, #32]
}
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40010000 	.word	0x40010000

08003fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f023 0201 	bic.w	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f023 030a 	bic.w	r3, r3, #10
 8003fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	621a      	str	r2, [r3, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004002:	b480      	push	{r7}
 8004004:	b087      	sub	sp, #28
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f023 0210 	bic.w	r2, r3, #16
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800402c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	031b      	lsls	r3, r3, #12
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800403e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	621a      	str	r2, [r3, #32]
}
 8004056:	bf00      	nop
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004062:	b480      	push	{r7}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	f043 0307 	orr.w	r3, r3, #7
 8004084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	609a      	str	r2, [r3, #8]
}
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	021a      	lsls	r2, r3, #8
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4313      	orrs	r3, r2
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	609a      	str	r2, [r3, #8]
}
 80040cc:	bf00      	nop
 80040ce:	371c      	adds	r7, #28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 031f 	and.w	r3, r3, #31
 80040ea:	2201      	movs	r2, #1
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a1a      	ldr	r2, [r3, #32]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	401a      	ands	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a1a      	ldr	r2, [r3, #32]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	fa01 f303 	lsl.w	r3, r1, r3
 8004110:	431a      	orrs	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	621a      	str	r2, [r3, #32]
}
 8004116:	bf00      	nop
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004138:	2302      	movs	r3, #2
 800413a:	e050      	b.n	80041de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a1c      	ldr	r2, [pc, #112]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d018      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004188:	d013      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a18      	ldr	r2, [pc, #96]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d00e      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a16      	ldr	r2, [pc, #88]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d009      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a15      	ldr	r2, [pc, #84]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d004      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a13      	ldr	r2, [pc, #76]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d10c      	bne.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40000800 	.word	0x40000800
 80041f8:	40000c00 	.word	0x40000c00
 80041fc:	40014000 	.word	0x40014000

08004200 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e03f      	b.n	8004292 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fc fd7e 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2224      	movs	r2, #36	; 0x24
 8004230:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004242:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f829 	bl	800429c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004258:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004268:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004278:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80042de:	f023 030c 	bic.w	r3, r3, #12
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6812      	ldr	r2, [r2, #0]
 80042e6:	68f9      	ldr	r1, [r7, #12]
 80042e8:	430b      	orrs	r3, r1
 80042ea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430a:	f040 818b 	bne.w	8004624 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4ac1      	ldr	r2, [pc, #772]	; (8004618 <UART_SetConfig+0x37c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d005      	beq.n	8004324 <UART_SetConfig+0x88>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4abf      	ldr	r2, [pc, #764]	; (800461c <UART_SetConfig+0x380>)
 800431e:	4293      	cmp	r3, r2
 8004320:	f040 80bd 	bne.w	800449e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004324:	f7ff f9aa 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 8004328:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	461d      	mov	r5, r3
 800432e:	f04f 0600 	mov.w	r6, #0
 8004332:	46a8      	mov	r8, r5
 8004334:	46b1      	mov	r9, r6
 8004336:	eb18 0308 	adds.w	r3, r8, r8
 800433a:	eb49 0409 	adc.w	r4, r9, r9
 800433e:	4698      	mov	r8, r3
 8004340:	46a1      	mov	r9, r4
 8004342:	eb18 0805 	adds.w	r8, r8, r5
 8004346:	eb49 0906 	adc.w	r9, r9, r6
 800434a:	f04f 0100 	mov.w	r1, #0
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004356:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800435a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800435e:	4688      	mov	r8, r1
 8004360:	4691      	mov	r9, r2
 8004362:	eb18 0005 	adds.w	r0, r8, r5
 8004366:	eb49 0106 	adc.w	r1, r9, r6
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	461d      	mov	r5, r3
 8004370:	f04f 0600 	mov.w	r6, #0
 8004374:	196b      	adds	r3, r5, r5
 8004376:	eb46 0406 	adc.w	r4, r6, r6
 800437a:	461a      	mov	r2, r3
 800437c:	4623      	mov	r3, r4
 800437e:	f7fb ff2b 	bl	80001d8 <__aeabi_uldivmod>
 8004382:	4603      	mov	r3, r0
 8004384:	460c      	mov	r4, r1
 8004386:	461a      	mov	r2, r3
 8004388:	4ba5      	ldr	r3, [pc, #660]	; (8004620 <UART_SetConfig+0x384>)
 800438a:	fba3 2302 	umull	r2, r3, r3, r2
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	461d      	mov	r5, r3
 8004398:	f04f 0600 	mov.w	r6, #0
 800439c:	46a9      	mov	r9, r5
 800439e:	46b2      	mov	sl, r6
 80043a0:	eb19 0309 	adds.w	r3, r9, r9
 80043a4:	eb4a 040a 	adc.w	r4, sl, sl
 80043a8:	4699      	mov	r9, r3
 80043aa:	46a2      	mov	sl, r4
 80043ac:	eb19 0905 	adds.w	r9, r9, r5
 80043b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80043b4:	f04f 0100 	mov.w	r1, #0
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043c8:	4689      	mov	r9, r1
 80043ca:	4692      	mov	sl, r2
 80043cc:	eb19 0005 	adds.w	r0, r9, r5
 80043d0:	eb4a 0106 	adc.w	r1, sl, r6
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	461d      	mov	r5, r3
 80043da:	f04f 0600 	mov.w	r6, #0
 80043de:	196b      	adds	r3, r5, r5
 80043e0:	eb46 0406 	adc.w	r4, r6, r6
 80043e4:	461a      	mov	r2, r3
 80043e6:	4623      	mov	r3, r4
 80043e8:	f7fb fef6 	bl	80001d8 <__aeabi_uldivmod>
 80043ec:	4603      	mov	r3, r0
 80043ee:	460c      	mov	r4, r1
 80043f0:	461a      	mov	r2, r3
 80043f2:	4b8b      	ldr	r3, [pc, #556]	; (8004620 <UART_SetConfig+0x384>)
 80043f4:	fba3 1302 	umull	r1, r3, r3, r2
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	2164      	movs	r1, #100	; 0x64
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	3332      	adds	r3, #50	; 0x32
 8004406:	4a86      	ldr	r2, [pc, #536]	; (8004620 <UART_SetConfig+0x384>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004414:	4498      	add	r8, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	461d      	mov	r5, r3
 800441a:	f04f 0600 	mov.w	r6, #0
 800441e:	46a9      	mov	r9, r5
 8004420:	46b2      	mov	sl, r6
 8004422:	eb19 0309 	adds.w	r3, r9, r9
 8004426:	eb4a 040a 	adc.w	r4, sl, sl
 800442a:	4699      	mov	r9, r3
 800442c:	46a2      	mov	sl, r4
 800442e:	eb19 0905 	adds.w	r9, r9, r5
 8004432:	eb4a 0a06 	adc.w	sl, sl, r6
 8004436:	f04f 0100 	mov.w	r1, #0
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004442:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004446:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800444a:	4689      	mov	r9, r1
 800444c:	4692      	mov	sl, r2
 800444e:	eb19 0005 	adds.w	r0, r9, r5
 8004452:	eb4a 0106 	adc.w	r1, sl, r6
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	461d      	mov	r5, r3
 800445c:	f04f 0600 	mov.w	r6, #0
 8004460:	196b      	adds	r3, r5, r5
 8004462:	eb46 0406 	adc.w	r4, r6, r6
 8004466:	461a      	mov	r2, r3
 8004468:	4623      	mov	r3, r4
 800446a:	f7fb feb5 	bl	80001d8 <__aeabi_uldivmod>
 800446e:	4603      	mov	r3, r0
 8004470:	460c      	mov	r4, r1
 8004472:	461a      	mov	r2, r3
 8004474:	4b6a      	ldr	r3, [pc, #424]	; (8004620 <UART_SetConfig+0x384>)
 8004476:	fba3 1302 	umull	r1, r3, r3, r2
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2164      	movs	r1, #100	; 0x64
 800447e:	fb01 f303 	mul.w	r3, r1, r3
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	3332      	adds	r3, #50	; 0x32
 8004488:	4a65      	ldr	r2, [pc, #404]	; (8004620 <UART_SetConfig+0x384>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	f003 0207 	and.w	r2, r3, #7
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4442      	add	r2, r8
 800449a:	609a      	str	r2, [r3, #8]
 800449c:	e26f      	b.n	800497e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800449e:	f7ff f8d9 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 80044a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	461d      	mov	r5, r3
 80044a8:	f04f 0600 	mov.w	r6, #0
 80044ac:	46a8      	mov	r8, r5
 80044ae:	46b1      	mov	r9, r6
 80044b0:	eb18 0308 	adds.w	r3, r8, r8
 80044b4:	eb49 0409 	adc.w	r4, r9, r9
 80044b8:	4698      	mov	r8, r3
 80044ba:	46a1      	mov	r9, r4
 80044bc:	eb18 0805 	adds.w	r8, r8, r5
 80044c0:	eb49 0906 	adc.w	r9, r9, r6
 80044c4:	f04f 0100 	mov.w	r1, #0
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044d8:	4688      	mov	r8, r1
 80044da:	4691      	mov	r9, r2
 80044dc:	eb18 0005 	adds.w	r0, r8, r5
 80044e0:	eb49 0106 	adc.w	r1, r9, r6
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	461d      	mov	r5, r3
 80044ea:	f04f 0600 	mov.w	r6, #0
 80044ee:	196b      	adds	r3, r5, r5
 80044f0:	eb46 0406 	adc.w	r4, r6, r6
 80044f4:	461a      	mov	r2, r3
 80044f6:	4623      	mov	r3, r4
 80044f8:	f7fb fe6e 	bl	80001d8 <__aeabi_uldivmod>
 80044fc:	4603      	mov	r3, r0
 80044fe:	460c      	mov	r4, r1
 8004500:	461a      	mov	r2, r3
 8004502:	4b47      	ldr	r3, [pc, #284]	; (8004620 <UART_SetConfig+0x384>)
 8004504:	fba3 2302 	umull	r2, r3, r3, r2
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	461d      	mov	r5, r3
 8004512:	f04f 0600 	mov.w	r6, #0
 8004516:	46a9      	mov	r9, r5
 8004518:	46b2      	mov	sl, r6
 800451a:	eb19 0309 	adds.w	r3, r9, r9
 800451e:	eb4a 040a 	adc.w	r4, sl, sl
 8004522:	4699      	mov	r9, r3
 8004524:	46a2      	mov	sl, r4
 8004526:	eb19 0905 	adds.w	r9, r9, r5
 800452a:	eb4a 0a06 	adc.w	sl, sl, r6
 800452e:	f04f 0100 	mov.w	r1, #0
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800453a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800453e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004542:	4689      	mov	r9, r1
 8004544:	4692      	mov	sl, r2
 8004546:	eb19 0005 	adds.w	r0, r9, r5
 800454a:	eb4a 0106 	adc.w	r1, sl, r6
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	461d      	mov	r5, r3
 8004554:	f04f 0600 	mov.w	r6, #0
 8004558:	196b      	adds	r3, r5, r5
 800455a:	eb46 0406 	adc.w	r4, r6, r6
 800455e:	461a      	mov	r2, r3
 8004560:	4623      	mov	r3, r4
 8004562:	f7fb fe39 	bl	80001d8 <__aeabi_uldivmod>
 8004566:	4603      	mov	r3, r0
 8004568:	460c      	mov	r4, r1
 800456a:	461a      	mov	r2, r3
 800456c:	4b2c      	ldr	r3, [pc, #176]	; (8004620 <UART_SetConfig+0x384>)
 800456e:	fba3 1302 	umull	r1, r3, r3, r2
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2164      	movs	r1, #100	; 0x64
 8004576:	fb01 f303 	mul.w	r3, r1, r3
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	3332      	adds	r3, #50	; 0x32
 8004580:	4a27      	ldr	r2, [pc, #156]	; (8004620 <UART_SetConfig+0x384>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800458e:	4498      	add	r8, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	461d      	mov	r5, r3
 8004594:	f04f 0600 	mov.w	r6, #0
 8004598:	46a9      	mov	r9, r5
 800459a:	46b2      	mov	sl, r6
 800459c:	eb19 0309 	adds.w	r3, r9, r9
 80045a0:	eb4a 040a 	adc.w	r4, sl, sl
 80045a4:	4699      	mov	r9, r3
 80045a6:	46a2      	mov	sl, r4
 80045a8:	eb19 0905 	adds.w	r9, r9, r5
 80045ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80045b0:	f04f 0100 	mov.w	r1, #0
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045c4:	4689      	mov	r9, r1
 80045c6:	4692      	mov	sl, r2
 80045c8:	eb19 0005 	adds.w	r0, r9, r5
 80045cc:	eb4a 0106 	adc.w	r1, sl, r6
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	461d      	mov	r5, r3
 80045d6:	f04f 0600 	mov.w	r6, #0
 80045da:	196b      	adds	r3, r5, r5
 80045dc:	eb46 0406 	adc.w	r4, r6, r6
 80045e0:	461a      	mov	r2, r3
 80045e2:	4623      	mov	r3, r4
 80045e4:	f7fb fdf8 	bl	80001d8 <__aeabi_uldivmod>
 80045e8:	4603      	mov	r3, r0
 80045ea:	460c      	mov	r4, r1
 80045ec:	461a      	mov	r2, r3
 80045ee:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <UART_SetConfig+0x384>)
 80045f0:	fba3 1302 	umull	r1, r3, r3, r2
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	2164      	movs	r1, #100	; 0x64
 80045f8:	fb01 f303 	mul.w	r3, r1, r3
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	3332      	adds	r3, #50	; 0x32
 8004602:	4a07      	ldr	r2, [pc, #28]	; (8004620 <UART_SetConfig+0x384>)
 8004604:	fba2 2303 	umull	r2, r3, r2, r3
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	f003 0207 	and.w	r2, r3, #7
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4442      	add	r2, r8
 8004614:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004616:	e1b2      	b.n	800497e <UART_SetConfig+0x6e2>
 8004618:	40011000 	.word	0x40011000
 800461c:	40011400 	.word	0x40011400
 8004620:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4ad7      	ldr	r2, [pc, #860]	; (8004988 <UART_SetConfig+0x6ec>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d005      	beq.n	800463a <UART_SetConfig+0x39e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4ad6      	ldr	r2, [pc, #856]	; (800498c <UART_SetConfig+0x6f0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	f040 80d1 	bne.w	80047dc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800463a:	f7ff f81f 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 800463e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	469a      	mov	sl, r3
 8004644:	f04f 0b00 	mov.w	fp, #0
 8004648:	46d0      	mov	r8, sl
 800464a:	46d9      	mov	r9, fp
 800464c:	eb18 0308 	adds.w	r3, r8, r8
 8004650:	eb49 0409 	adc.w	r4, r9, r9
 8004654:	4698      	mov	r8, r3
 8004656:	46a1      	mov	r9, r4
 8004658:	eb18 080a 	adds.w	r8, r8, sl
 800465c:	eb49 090b 	adc.w	r9, r9, fp
 8004660:	f04f 0100 	mov.w	r1, #0
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800466c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004670:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004674:	4688      	mov	r8, r1
 8004676:	4691      	mov	r9, r2
 8004678:	eb1a 0508 	adds.w	r5, sl, r8
 800467c:	eb4b 0609 	adc.w	r6, fp, r9
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	4619      	mov	r1, r3
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	f04f 0400 	mov.w	r4, #0
 8004692:	0094      	lsls	r4, r2, #2
 8004694:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004698:	008b      	lsls	r3, r1, #2
 800469a:	461a      	mov	r2, r3
 800469c:	4623      	mov	r3, r4
 800469e:	4628      	mov	r0, r5
 80046a0:	4631      	mov	r1, r6
 80046a2:	f7fb fd99 	bl	80001d8 <__aeabi_uldivmod>
 80046a6:	4603      	mov	r3, r0
 80046a8:	460c      	mov	r4, r1
 80046aa:	461a      	mov	r2, r3
 80046ac:	4bb8      	ldr	r3, [pc, #736]	; (8004990 <UART_SetConfig+0x6f4>)
 80046ae:	fba3 2302 	umull	r2, r3, r3, r2
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	469b      	mov	fp, r3
 80046bc:	f04f 0c00 	mov.w	ip, #0
 80046c0:	46d9      	mov	r9, fp
 80046c2:	46e2      	mov	sl, ip
 80046c4:	eb19 0309 	adds.w	r3, r9, r9
 80046c8:	eb4a 040a 	adc.w	r4, sl, sl
 80046cc:	4699      	mov	r9, r3
 80046ce:	46a2      	mov	sl, r4
 80046d0:	eb19 090b 	adds.w	r9, r9, fp
 80046d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046d8:	f04f 0100 	mov.w	r1, #0
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046ec:	4689      	mov	r9, r1
 80046ee:	4692      	mov	sl, r2
 80046f0:	eb1b 0509 	adds.w	r5, fp, r9
 80046f4:	eb4c 060a 	adc.w	r6, ip, sl
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4619      	mov	r1, r3
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	f04f 0400 	mov.w	r4, #0
 800470a:	0094      	lsls	r4, r2, #2
 800470c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004710:	008b      	lsls	r3, r1, #2
 8004712:	461a      	mov	r2, r3
 8004714:	4623      	mov	r3, r4
 8004716:	4628      	mov	r0, r5
 8004718:	4631      	mov	r1, r6
 800471a:	f7fb fd5d 	bl	80001d8 <__aeabi_uldivmod>
 800471e:	4603      	mov	r3, r0
 8004720:	460c      	mov	r4, r1
 8004722:	461a      	mov	r2, r3
 8004724:	4b9a      	ldr	r3, [pc, #616]	; (8004990 <UART_SetConfig+0x6f4>)
 8004726:	fba3 1302 	umull	r1, r3, r3, r2
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	2164      	movs	r1, #100	; 0x64
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	3332      	adds	r3, #50	; 0x32
 8004738:	4a95      	ldr	r2, [pc, #596]	; (8004990 <UART_SetConfig+0x6f4>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004744:	4498      	add	r8, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	469b      	mov	fp, r3
 800474a:	f04f 0c00 	mov.w	ip, #0
 800474e:	46d9      	mov	r9, fp
 8004750:	46e2      	mov	sl, ip
 8004752:	eb19 0309 	adds.w	r3, r9, r9
 8004756:	eb4a 040a 	adc.w	r4, sl, sl
 800475a:	4699      	mov	r9, r3
 800475c:	46a2      	mov	sl, r4
 800475e:	eb19 090b 	adds.w	r9, r9, fp
 8004762:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004766:	f04f 0100 	mov.w	r1, #0
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004772:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004776:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800477a:	4689      	mov	r9, r1
 800477c:	4692      	mov	sl, r2
 800477e:	eb1b 0509 	adds.w	r5, fp, r9
 8004782:	eb4c 060a 	adc.w	r6, ip, sl
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	4619      	mov	r1, r3
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	f04f 0400 	mov.w	r4, #0
 8004798:	0094      	lsls	r4, r2, #2
 800479a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800479e:	008b      	lsls	r3, r1, #2
 80047a0:	461a      	mov	r2, r3
 80047a2:	4623      	mov	r3, r4
 80047a4:	4628      	mov	r0, r5
 80047a6:	4631      	mov	r1, r6
 80047a8:	f7fb fd16 	bl	80001d8 <__aeabi_uldivmod>
 80047ac:	4603      	mov	r3, r0
 80047ae:	460c      	mov	r4, r1
 80047b0:	461a      	mov	r2, r3
 80047b2:	4b77      	ldr	r3, [pc, #476]	; (8004990 <UART_SetConfig+0x6f4>)
 80047b4:	fba3 1302 	umull	r1, r3, r3, r2
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	2164      	movs	r1, #100	; 0x64
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	3332      	adds	r3, #50	; 0x32
 80047c6:	4a72      	ldr	r2, [pc, #456]	; (8004990 <UART_SetConfig+0x6f4>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	f003 020f 	and.w	r2, r3, #15
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4442      	add	r2, r8
 80047d8:	609a      	str	r2, [r3, #8]
 80047da:	e0d0      	b.n	800497e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80047dc:	f7fe ff3a 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 80047e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	469a      	mov	sl, r3
 80047e6:	f04f 0b00 	mov.w	fp, #0
 80047ea:	46d0      	mov	r8, sl
 80047ec:	46d9      	mov	r9, fp
 80047ee:	eb18 0308 	adds.w	r3, r8, r8
 80047f2:	eb49 0409 	adc.w	r4, r9, r9
 80047f6:	4698      	mov	r8, r3
 80047f8:	46a1      	mov	r9, r4
 80047fa:	eb18 080a 	adds.w	r8, r8, sl
 80047fe:	eb49 090b 	adc.w	r9, r9, fp
 8004802:	f04f 0100 	mov.w	r1, #0
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800480e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004812:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004816:	4688      	mov	r8, r1
 8004818:	4691      	mov	r9, r2
 800481a:	eb1a 0508 	adds.w	r5, sl, r8
 800481e:	eb4b 0609 	adc.w	r6, fp, r9
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	4619      	mov	r1, r3
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	f04f 0400 	mov.w	r4, #0
 8004834:	0094      	lsls	r4, r2, #2
 8004836:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800483a:	008b      	lsls	r3, r1, #2
 800483c:	461a      	mov	r2, r3
 800483e:	4623      	mov	r3, r4
 8004840:	4628      	mov	r0, r5
 8004842:	4631      	mov	r1, r6
 8004844:	f7fb fcc8 	bl	80001d8 <__aeabi_uldivmod>
 8004848:	4603      	mov	r3, r0
 800484a:	460c      	mov	r4, r1
 800484c:	461a      	mov	r2, r3
 800484e:	4b50      	ldr	r3, [pc, #320]	; (8004990 <UART_SetConfig+0x6f4>)
 8004850:	fba3 2302 	umull	r2, r3, r3, r2
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	469b      	mov	fp, r3
 800485e:	f04f 0c00 	mov.w	ip, #0
 8004862:	46d9      	mov	r9, fp
 8004864:	46e2      	mov	sl, ip
 8004866:	eb19 0309 	adds.w	r3, r9, r9
 800486a:	eb4a 040a 	adc.w	r4, sl, sl
 800486e:	4699      	mov	r9, r3
 8004870:	46a2      	mov	sl, r4
 8004872:	eb19 090b 	adds.w	r9, r9, fp
 8004876:	eb4a 0a0c 	adc.w	sl, sl, ip
 800487a:	f04f 0100 	mov.w	r1, #0
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004886:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800488a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800488e:	4689      	mov	r9, r1
 8004890:	4692      	mov	sl, r2
 8004892:	eb1b 0509 	adds.w	r5, fp, r9
 8004896:	eb4c 060a 	adc.w	r6, ip, sl
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4619      	mov	r1, r3
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	f04f 0400 	mov.w	r4, #0
 80048ac:	0094      	lsls	r4, r2, #2
 80048ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048b2:	008b      	lsls	r3, r1, #2
 80048b4:	461a      	mov	r2, r3
 80048b6:	4623      	mov	r3, r4
 80048b8:	4628      	mov	r0, r5
 80048ba:	4631      	mov	r1, r6
 80048bc:	f7fb fc8c 	bl	80001d8 <__aeabi_uldivmod>
 80048c0:	4603      	mov	r3, r0
 80048c2:	460c      	mov	r4, r1
 80048c4:	461a      	mov	r2, r3
 80048c6:	4b32      	ldr	r3, [pc, #200]	; (8004990 <UART_SetConfig+0x6f4>)
 80048c8:	fba3 1302 	umull	r1, r3, r3, r2
 80048cc:	095b      	lsrs	r3, r3, #5
 80048ce:	2164      	movs	r1, #100	; 0x64
 80048d0:	fb01 f303 	mul.w	r3, r1, r3
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	3332      	adds	r3, #50	; 0x32
 80048da:	4a2d      	ldr	r2, [pc, #180]	; (8004990 <UART_SetConfig+0x6f4>)
 80048dc:	fba2 2303 	umull	r2, r3, r2, r3
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048e6:	4498      	add	r8, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	469b      	mov	fp, r3
 80048ec:	f04f 0c00 	mov.w	ip, #0
 80048f0:	46d9      	mov	r9, fp
 80048f2:	46e2      	mov	sl, ip
 80048f4:	eb19 0309 	adds.w	r3, r9, r9
 80048f8:	eb4a 040a 	adc.w	r4, sl, sl
 80048fc:	4699      	mov	r9, r3
 80048fe:	46a2      	mov	sl, r4
 8004900:	eb19 090b 	adds.w	r9, r9, fp
 8004904:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004908:	f04f 0100 	mov.w	r1, #0
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004914:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004918:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800491c:	4689      	mov	r9, r1
 800491e:	4692      	mov	sl, r2
 8004920:	eb1b 0509 	adds.w	r5, fp, r9
 8004924:	eb4c 060a 	adc.w	r6, ip, sl
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4619      	mov	r1, r3
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	f04f 0400 	mov.w	r4, #0
 800493a:	0094      	lsls	r4, r2, #2
 800493c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004940:	008b      	lsls	r3, r1, #2
 8004942:	461a      	mov	r2, r3
 8004944:	4623      	mov	r3, r4
 8004946:	4628      	mov	r0, r5
 8004948:	4631      	mov	r1, r6
 800494a:	f7fb fc45 	bl	80001d8 <__aeabi_uldivmod>
 800494e:	4603      	mov	r3, r0
 8004950:	460c      	mov	r4, r1
 8004952:	461a      	mov	r2, r3
 8004954:	4b0e      	ldr	r3, [pc, #56]	; (8004990 <UART_SetConfig+0x6f4>)
 8004956:	fba3 1302 	umull	r1, r3, r3, r2
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	2164      	movs	r1, #100	; 0x64
 800495e:	fb01 f303 	mul.w	r3, r1, r3
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	3332      	adds	r3, #50	; 0x32
 8004968:	4a09      	ldr	r2, [pc, #36]	; (8004990 <UART_SetConfig+0x6f4>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	f003 020f 	and.w	r2, r3, #15
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4442      	add	r2, r8
 800497a:	609a      	str	r2, [r3, #8]
}
 800497c:	e7ff      	b.n	800497e <UART_SetConfig+0x6e2>
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004988:	40011000 	.word	0x40011000
 800498c:	40011400 	.word	0x40011400
 8004990:	51eb851f 	.word	0x51eb851f

08004994 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004994:	b084      	sub	sp, #16
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	f107 001c 	add.w	r0, r7, #28
 80049a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d122      	bne.n	80049f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d105      	bne.n	80049e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f001 fac6 	bl	8005f78 <USB_CoreReset>
 80049ec:	4603      	mov	r3, r0
 80049ee:	73fb      	strb	r3, [r7, #15]
 80049f0:	e01a      	b.n	8004a28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f001 faba 	bl	8005f78 <USB_CoreReset>
 8004a04:	4603      	mov	r3, r0
 8004a06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38
 8004a1a:	e005      	b.n	8004a28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d10b      	bne.n	8004a46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f043 0206 	orr.w	r2, r3, #6
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f043 0220 	orr.w	r2, r3, #32
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a52:	b004      	add	sp, #16
 8004a54:	4770      	bx	lr
	...

08004a58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	4613      	mov	r3, r2
 8004a64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d165      	bne.n	8004b38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4a41      	ldr	r2, [pc, #260]	; (8004b74 <USB_SetTurnaroundTime+0x11c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d906      	bls.n	8004a82 <USB_SetTurnaroundTime+0x2a>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4a40      	ldr	r2, [pc, #256]	; (8004b78 <USB_SetTurnaroundTime+0x120>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d802      	bhi.n	8004a82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a7c:	230f      	movs	r3, #15
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	e062      	b.n	8004b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	4a3c      	ldr	r2, [pc, #240]	; (8004b78 <USB_SetTurnaroundTime+0x120>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d906      	bls.n	8004a98 <USB_SetTurnaroundTime+0x40>
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	4a3b      	ldr	r2, [pc, #236]	; (8004b7c <USB_SetTurnaroundTime+0x124>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d802      	bhi.n	8004a98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a92:	230e      	movs	r3, #14
 8004a94:	617b      	str	r3, [r7, #20]
 8004a96:	e057      	b.n	8004b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4a38      	ldr	r2, [pc, #224]	; (8004b7c <USB_SetTurnaroundTime+0x124>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d906      	bls.n	8004aae <USB_SetTurnaroundTime+0x56>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4a37      	ldr	r2, [pc, #220]	; (8004b80 <USB_SetTurnaroundTime+0x128>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d802      	bhi.n	8004aae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004aa8:	230d      	movs	r3, #13
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	e04c      	b.n	8004b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	4a33      	ldr	r2, [pc, #204]	; (8004b80 <USB_SetTurnaroundTime+0x128>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d906      	bls.n	8004ac4 <USB_SetTurnaroundTime+0x6c>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	4a32      	ldr	r2, [pc, #200]	; (8004b84 <USB_SetTurnaroundTime+0x12c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d802      	bhi.n	8004ac4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004abe:	230c      	movs	r3, #12
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	e041      	b.n	8004b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4a2f      	ldr	r2, [pc, #188]	; (8004b84 <USB_SetTurnaroundTime+0x12c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d906      	bls.n	8004ada <USB_SetTurnaroundTime+0x82>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	4a2e      	ldr	r2, [pc, #184]	; (8004b88 <USB_SetTurnaroundTime+0x130>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d802      	bhi.n	8004ada <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ad4:	230b      	movs	r3, #11
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	e036      	b.n	8004b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4a2a      	ldr	r2, [pc, #168]	; (8004b88 <USB_SetTurnaroundTime+0x130>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d906      	bls.n	8004af0 <USB_SetTurnaroundTime+0x98>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	4a29      	ldr	r2, [pc, #164]	; (8004b8c <USB_SetTurnaroundTime+0x134>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d802      	bhi.n	8004af0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004aea:	230a      	movs	r3, #10
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	e02b      	b.n	8004b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4a26      	ldr	r2, [pc, #152]	; (8004b8c <USB_SetTurnaroundTime+0x134>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d906      	bls.n	8004b06 <USB_SetTurnaroundTime+0xae>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4a25      	ldr	r2, [pc, #148]	; (8004b90 <USB_SetTurnaroundTime+0x138>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d802      	bhi.n	8004b06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b00:	2309      	movs	r3, #9
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e020      	b.n	8004b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4a21      	ldr	r2, [pc, #132]	; (8004b90 <USB_SetTurnaroundTime+0x138>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d906      	bls.n	8004b1c <USB_SetTurnaroundTime+0xc4>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4a20      	ldr	r2, [pc, #128]	; (8004b94 <USB_SetTurnaroundTime+0x13c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d802      	bhi.n	8004b1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b16:	2308      	movs	r3, #8
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	e015      	b.n	8004b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4a1d      	ldr	r2, [pc, #116]	; (8004b94 <USB_SetTurnaroundTime+0x13c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d906      	bls.n	8004b32 <USB_SetTurnaroundTime+0xda>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4a1c      	ldr	r2, [pc, #112]	; (8004b98 <USB_SetTurnaroundTime+0x140>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d802      	bhi.n	8004b32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b2c:	2307      	movs	r3, #7
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	e00a      	b.n	8004b48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b32:	2306      	movs	r3, #6
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	e007      	b.n	8004b48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d102      	bne.n	8004b44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b3e:	2309      	movs	r3, #9
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	e001      	b.n	8004b48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b44:	2309      	movs	r3, #9
 8004b46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	029b      	lsls	r3, r3, #10
 8004b5c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b60:	431a      	orrs	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	00d8acbf 	.word	0x00d8acbf
 8004b78:	00e4e1bf 	.word	0x00e4e1bf
 8004b7c:	00f423ff 	.word	0x00f423ff
 8004b80:	0106737f 	.word	0x0106737f
 8004b84:	011a499f 	.word	0x011a499f
 8004b88:	01312cff 	.word	0x01312cff
 8004b8c:	014ca43f 	.word	0x014ca43f
 8004b90:	016e35ff 	.word	0x016e35ff
 8004b94:	01a6ab1f 	.word	0x01a6ab1f
 8004b98:	01e847ff 	.word	0x01e847ff

08004b9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f043 0201 	orr.w	r2, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f023 0201 	bic.w	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d106      	bne.n	8004c0c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	60da      	str	r2, [r3, #12]
 8004c0a:	e00b      	b.n	8004c24 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	60da      	str	r2, [r3, #12]
 8004c1e:	e001      	b.n	8004c24 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e003      	b.n	8004c2c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004c24:	2032      	movs	r0, #50	; 0x32
 8004c26:	f7fc f9f5 	bl	8001014 <HAL_Delay>

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c34:	b084      	sub	sp, #16
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b086      	sub	sp, #24
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c4e:	2300      	movs	r3, #0
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	e009      	b.n	8004c68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	3340      	adds	r3, #64	; 0x40
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	2200      	movs	r2, #0
 8004c60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	3301      	adds	r3, #1
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2b0e      	cmp	r3, #14
 8004c6c:	d9f2      	bls.n	8004c54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d11c      	bne.n	8004cae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c82:	f043 0302 	orr.w	r3, r3, #2
 8004c86:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38
 8004cac:	e00b      	b.n	8004cc6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ccc:	461a      	mov	r2, r3
 8004cce:	2300      	movs	r3, #0
 8004cd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd8:	4619      	mov	r1, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	680b      	ldr	r3, [r1, #0]
 8004ce4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d10c      	bne.n	8004d06 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f949 	bl	8004f8c <USB_SetDevSpeed>
 8004cfa:	e008      	b.n	8004d0e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f944 	bl	8004f8c <USB_SetDevSpeed>
 8004d04:	e003      	b.n	8004d0e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d06:	2103      	movs	r1, #3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f93f 	bl	8004f8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d0e:	2110      	movs	r1, #16
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f8f3 	bl	8004efc <USB_FlushTxFifo>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f911 	bl	8004f48 <USB_FlushRxFifo>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d36:	461a      	mov	r2, r3
 8004d38:	2300      	movs	r3, #0
 8004d3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d42:	461a      	mov	r2, r3
 8004d44:	2300      	movs	r3, #0
 8004d46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4e:	461a      	mov	r2, r3
 8004d50:	2300      	movs	r3, #0
 8004d52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	e043      	b.n	8004de2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d70:	d118      	bne.n	8004da4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d84:	461a      	mov	r2, r3
 8004d86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	e013      	b.n	8004db6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	e008      	b.n	8004db6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	461a      	mov	r2, r3
 8004db2:	2300      	movs	r3, #0
 8004db4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004dda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	3301      	adds	r3, #1
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d3b7      	bcc.n	8004d5a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	e043      	b.n	8004e78 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e06:	d118      	bne.n	8004e3a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	e013      	b.n	8004e4c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e30:	461a      	mov	r2, r3
 8004e32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	e008      	b.n	8004e4c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e46:	461a      	mov	r2, r3
 8004e48:	2300      	movs	r3, #0
 8004e4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e58:	461a      	mov	r2, r3
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	3301      	adds	r3, #1
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d3b7      	bcc.n	8004df0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ea0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d105      	bne.n	8004eb4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	f043 0210 	orr.w	r2, r3, #16
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699a      	ldr	r2, [r3, #24]
 8004eb8:	4b0f      	ldr	r3, [pc, #60]	; (8004ef8 <USB_DevInit+0x2c4>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f043 0208 	orr.w	r2, r3, #8
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d107      	bne.n	8004ee8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ee0:	f043 0304 	orr.w	r3, r3, #4
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ef4:	b004      	add	sp, #16
 8004ef6:	4770      	bx	lr
 8004ef8:	803c3800 	.word	0x803c3800

08004efc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	019b      	lsls	r3, r3, #6
 8004f0e:	f043 0220 	orr.w	r2, r3, #32
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <USB_FlushTxFifo+0x48>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d901      	bls.n	8004f28 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e006      	b.n	8004f36 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	d0f0      	beq.n	8004f16 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	00030d40 	.word	0x00030d40

08004f48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2210      	movs	r2, #16
 8004f58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a09      	ldr	r2, [pc, #36]	; (8004f88 <USB_FlushRxFifo+0x40>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d901      	bls.n	8004f6c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e006      	b.n	8004f7a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	d0f0      	beq.n	8004f5a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	00030d40 	.word	0x00030d40

08004f8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	68f9      	ldr	r1, [r7, #12]
 8004fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fac:	4313      	orrs	r3, r2
 8004fae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b087      	sub	sp, #28
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 0306 	and.w	r3, r3, #6
 8004fd6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d102      	bne.n	8004fe4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	75fb      	strb	r3, [r7, #23]
 8004fe2:	e00a      	b.n	8004ffa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d002      	beq.n	8004ff0 <USB_GetDevSpeed+0x32>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b06      	cmp	r3, #6
 8004fee:	d102      	bne.n	8004ff6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	75fb      	strb	r3, [r7, #23]
 8004ff4:	e001      	b.n	8004ffa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ff6:	230f      	movs	r3, #15
 8004ff8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	371c      	adds	r7, #28
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	785b      	ldrb	r3, [r3, #1]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d13a      	bne.n	800509a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502a:	69da      	ldr	r2, [r3, #28]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	f003 030f 	and.w	r3, r3, #15
 8005034:	2101      	movs	r1, #1
 8005036:	fa01 f303 	lsl.w	r3, r1, r3
 800503a:	b29b      	uxth	r3, r3
 800503c:	68f9      	ldr	r1, [r7, #12]
 800503e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005042:	4313      	orrs	r3, r2
 8005044:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d155      	bne.n	8005108 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	78db      	ldrb	r3, [r3, #3]
 8005076:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005078:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	059b      	lsls	r3, r3, #22
 800507e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005080:	4313      	orrs	r3, r2
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	0151      	lsls	r1, r2, #5
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	440a      	add	r2, r1
 800508a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800508e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	e036      	b.n	8005108 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a0:	69da      	ldr	r2, [r3, #28]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	2101      	movs	r1, #1
 80050ac:	fa01 f303 	lsl.w	r3, r1, r3
 80050b0:	041b      	lsls	r3, r3, #16
 80050b2:	68f9      	ldr	r1, [r7, #12]
 80050b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050b8:	4313      	orrs	r3, r2
 80050ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d11a      	bne.n	8005108 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	78db      	ldrb	r3, [r3, #3]
 80050ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050ee:	430b      	orrs	r3, r1
 80050f0:	4313      	orrs	r3, r2
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005106:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d161      	bne.n	80051f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005146:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800514a:	d11f      	bne.n	800518c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	0151      	lsls	r1, r2, #5
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	440a      	add	r2, r1
 8005162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005166:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800516a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	0151      	lsls	r1, r2, #5
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	440a      	add	r2, r1
 8005182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005186:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800518a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	2101      	movs	r1, #1
 800519e:	fa01 f303 	lsl.w	r3, r1, r3
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	43db      	mvns	r3, r3
 80051a6:	68f9      	ldr	r1, [r7, #12]
 80051a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051ac:	4013      	ands	r3, r2
 80051ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b6:	69da      	ldr	r2, [r3, #28]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	2101      	movs	r1, #1
 80051c2:	fa01 f303 	lsl.w	r3, r1, r3
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	43db      	mvns	r3, r3
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d0:	4013      	ands	r3, r2
 80051d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	0159      	lsls	r1, r3, #5
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	440b      	add	r3, r1
 80051ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ee:	4619      	mov	r1, r3
 80051f0:	4b35      	ldr	r3, [pc, #212]	; (80052c8 <USB_DeactivateEndpoint+0x1b0>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	600b      	str	r3, [r1, #0]
 80051f6:	e060      	b.n	80052ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800520a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800520e:	d11f      	bne.n	8005250 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	0151      	lsls	r1, r2, #5
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	440a      	add	r2, r1
 8005226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800522a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800522e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	0151      	lsls	r1, r2, #5
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	440a      	add	r2, r1
 8005246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800524a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800524e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	f003 030f 	and.w	r3, r3, #15
 8005260:	2101      	movs	r1, #1
 8005262:	fa01 f303 	lsl.w	r3, r1, r3
 8005266:	041b      	lsls	r3, r3, #16
 8005268:	43db      	mvns	r3, r3
 800526a:	68f9      	ldr	r1, [r7, #12]
 800526c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005270:	4013      	ands	r3, r2
 8005272:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	2101      	movs	r1, #1
 8005286:	fa01 f303 	lsl.w	r3, r1, r3
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	43db      	mvns	r3, r3
 800528e:	68f9      	ldr	r1, [r7, #12]
 8005290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005294:	4013      	ands	r3, r2
 8005296:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	0159      	lsls	r1, r3, #5
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	440b      	add	r3, r1
 80052ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b2:	4619      	mov	r1, r3
 80052b4:	4b05      	ldr	r3, [pc, #20]	; (80052cc <USB_DeactivateEndpoint+0x1b4>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	ec337800 	.word	0xec337800
 80052cc:	eff37800 	.word	0xeff37800

080052d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08a      	sub	sp, #40	; 0x28
 80052d4:	af02      	add	r7, sp, #8
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	4613      	mov	r3, r2
 80052dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	f040 815c 	bne.w	80055aa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d132      	bne.n	8005360 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005314:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005318:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800531c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	0151      	lsls	r1, r2, #5
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	440a      	add	r2, r1
 8005334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005338:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800533c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	0151      	lsls	r1, r2, #5
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	440a      	add	r2, r1
 8005354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005358:	0cdb      	lsrs	r3, r3, #19
 800535a:	04db      	lsls	r3, r3, #19
 800535c:	6113      	str	r3, [r2, #16]
 800535e:	e074      	b.n	800544a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	0151      	lsls	r1, r2, #5
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	440a      	add	r2, r1
 8005376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537a:	0cdb      	lsrs	r3, r3, #19
 800537c:	04db      	lsls	r3, r3, #19
 800537e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	0151      	lsls	r1, r2, #5
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	440a      	add	r2, r1
 8005396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800539e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	6959      	ldr	r1, [r3, #20]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	440b      	add	r3, r1
 80053bc:	1e59      	subs	r1, r3, #1
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80053c6:	04d9      	lsls	r1, r3, #19
 80053c8:	4b9d      	ldr	r3, [pc, #628]	; (8005640 <USB_EPStartXfer+0x370>)
 80053ca:	400b      	ands	r3, r1
 80053cc:	69b9      	ldr	r1, [r7, #24]
 80053ce:	0148      	lsls	r0, r1, #5
 80053d0:	69f9      	ldr	r1, [r7, #28]
 80053d2:	4401      	add	r1, r0
 80053d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053d8:	4313      	orrs	r3, r2
 80053da:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e8:	691a      	ldr	r2, [r3, #16]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f2:	69b9      	ldr	r1, [r7, #24]
 80053f4:	0148      	lsls	r0, r1, #5
 80053f6:	69f9      	ldr	r1, [r7, #28]
 80053f8:	4401      	add	r1, r0
 80053fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053fe:	4313      	orrs	r3, r2
 8005400:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	78db      	ldrb	r3, [r3, #3]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d11f      	bne.n	800544a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	0151      	lsls	r1, r2, #5
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	440a      	add	r2, r1
 8005420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005424:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005428:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	0151      	lsls	r1, r2, #5
 800543c:	69fa      	ldr	r2, [r7, #28]
 800543e:	440a      	add	r2, r1
 8005440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005444:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005448:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d14b      	bne.n	80054e8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d009      	beq.n	800546c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005464:	461a      	mov	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	78db      	ldrb	r3, [r3, #3]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d128      	bne.n	80054c6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005480:	2b00      	cmp	r3, #0
 8005482:	d110      	bne.n	80054a6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	0151      	lsls	r1, r2, #5
 8005496:	69fa      	ldr	r2, [r7, #28]
 8005498:	440a      	add	r2, r1
 800549a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800549e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	e00f      	b.n	80054c6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	0151      	lsls	r1, r2, #5
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	440a      	add	r2, r1
 80054dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	e12f      	b.n	8005748 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	0151      	lsls	r1, r2, #5
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	440a      	add	r2, r1
 80054fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005502:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005506:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	78db      	ldrb	r3, [r3, #3]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d015      	beq.n	800553c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8117 	beq.w	8005748 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	2101      	movs	r1, #1
 800552c:	fa01 f303 	lsl.w	r3, r1, r3
 8005530:	69f9      	ldr	r1, [r7, #28]
 8005532:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005536:	4313      	orrs	r3, r2
 8005538:	634b      	str	r3, [r1, #52]	; 0x34
 800553a:	e105      	b.n	8005748 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d110      	bne.n	800556e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	0151      	lsls	r1, r2, #5
 800555e:	69fa      	ldr	r2, [r7, #28]
 8005560:	440a      	add	r2, r1
 8005562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005566:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	e00f      	b.n	800558e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	440a      	add	r2, r1
 8005584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800558c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	68d9      	ldr	r1, [r3, #12]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	781a      	ldrb	r2, [r3, #0]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	b298      	uxth	r0, r3
 800559c:	79fb      	ldrb	r3, [r7, #7]
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	4603      	mov	r3, r0
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 fa2b 	bl	80059fe <USB_WritePacket>
 80055a8:	e0ce      	b.n	8005748 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	0151      	lsls	r1, r2, #5
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	440a      	add	r2, r1
 80055c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c4:	0cdb      	lsrs	r3, r3, #19
 80055c6:	04db      	lsls	r3, r3, #19
 80055c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	0151      	lsls	r1, r2, #5
 80055dc:	69fa      	ldr	r2, [r7, #28]
 80055de:	440a      	add	r2, r1
 80055e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d126      	bne.n	8005644 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800560c:	69b9      	ldr	r1, [r7, #24]
 800560e:	0148      	lsls	r0, r1, #5
 8005610:	69f9      	ldr	r1, [r7, #28]
 8005612:	4401      	add	r1, r0
 8005614:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005618:	4313      	orrs	r3, r2
 800561a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	0151      	lsls	r1, r2, #5
 800562e:	69fa      	ldr	r2, [r7, #28]
 8005630:	440a      	add	r2, r1
 8005632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005636:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800563a:	6113      	str	r3, [r2, #16]
 800563c:	e036      	b.n	80056ac <USB_EPStartXfer+0x3dc>
 800563e:	bf00      	nop
 8005640:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	695a      	ldr	r2, [r3, #20]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	4413      	add	r3, r2
 800564e:	1e5a      	subs	r2, r3, #1
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	fbb2 f3f3 	udiv	r3, r2, r3
 8005658:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	8afb      	ldrh	r3, [r7, #22]
 800566a:	04d9      	lsls	r1, r3, #19
 800566c:	4b39      	ldr	r3, [pc, #228]	; (8005754 <USB_EPStartXfer+0x484>)
 800566e:	400b      	ands	r3, r1
 8005670:	69b9      	ldr	r1, [r7, #24]
 8005672:	0148      	lsls	r0, r1, #5
 8005674:	69f9      	ldr	r1, [r7, #28]
 8005676:	4401      	add	r1, r0
 8005678:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800567c:	4313      	orrs	r3, r2
 800567e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568c:	691a      	ldr	r2, [r3, #16]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	8af9      	ldrh	r1, [r7, #22]
 8005694:	fb01 f303 	mul.w	r3, r1, r3
 8005698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800569c:	69b9      	ldr	r1, [r7, #24]
 800569e:	0148      	lsls	r0, r1, #5
 80056a0:	69f9      	ldr	r1, [r7, #28]
 80056a2:	4401      	add	r1, r0
 80056a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056a8:	4313      	orrs	r3, r2
 80056aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056ac:	79fb      	ldrb	r3, [r7, #7]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d10d      	bne.n	80056ce <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d009      	beq.n	80056ce <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	68d9      	ldr	r1, [r3, #12]
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ca:	460a      	mov	r2, r1
 80056cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	78db      	ldrb	r3, [r3, #3]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d128      	bne.n	8005728 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d110      	bne.n	8005708 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005700:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	e00f      	b.n	8005728 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	0151      	lsls	r1, r2, #5
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	440a      	add	r2, r1
 800571e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005726:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	0151      	lsls	r1, r2, #5
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	440a      	add	r2, r1
 800573e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005742:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005746:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	1ff80000 	.word	0x1ff80000

08005758 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	4613      	mov	r3, r2
 8005764:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	785b      	ldrb	r3, [r3, #1]
 8005774:	2b01      	cmp	r3, #1
 8005776:	f040 80cd 	bne.w	8005914 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d132      	bne.n	80057e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	440a      	add	r2, r1
 8005798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800579c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	0151      	lsls	r1, r2, #5
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	440a      	add	r2, r1
 80057bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	0151      	lsls	r1, r2, #5
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	440a      	add	r2, r1
 80057dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e0:	0cdb      	lsrs	r3, r3, #19
 80057e2:	04db      	lsls	r3, r3, #19
 80057e4:	6113      	str	r3, [r2, #16]
 80057e6:	e04e      	b.n	8005886 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005802:	0cdb      	lsrs	r3, r3, #19
 8005804:	04db      	lsls	r3, r3, #19
 8005806:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	0151      	lsls	r1, r2, #5
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	440a      	add	r2, r1
 800581e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005822:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005826:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800582a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	695a      	ldr	r2, [r3, #20]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	429a      	cmp	r2, r3
 8005836:	d903      	bls.n	8005840 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	440a      	add	r2, r1
 8005856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800585e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005876:	6939      	ldr	r1, [r7, #16]
 8005878:	0148      	lsls	r0, r1, #5
 800587a:	6979      	ldr	r1, [r7, #20]
 800587c:	4401      	add	r1, r0
 800587e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005882:	4313      	orrs	r3, r2
 8005884:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d11e      	bne.n	80058ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d009      	beq.n	80058a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a0:	461a      	mov	r2, r3
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	0151      	lsls	r1, r2, #5
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	440a      	add	r2, r1
 80058be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058c6:	6013      	str	r3, [r2, #0]
 80058c8:	e092      	b.n	80059f0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	0151      	lsls	r1, r2, #5
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	440a      	add	r2, r1
 80058e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d07e      	beq.n	80059f0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	2101      	movs	r1, #1
 8005904:	fa01 f303 	lsl.w	r3, r1, r3
 8005908:	6979      	ldr	r1, [r7, #20]
 800590a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800590e:	4313      	orrs	r3, r2
 8005910:	634b      	str	r3, [r1, #52]	; 0x34
 8005912:	e06d      	b.n	80059f0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	0151      	lsls	r1, r2, #5
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	440a      	add	r2, r1
 800592a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800592e:	0cdb      	lsrs	r3, r3, #19
 8005930:	04db      	lsls	r3, r3, #19
 8005932:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	0151      	lsls	r1, r2, #5
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	440a      	add	r2, r1
 800594a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005952:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005956:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	0151      	lsls	r1, r2, #5
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	440a      	add	r2, r1
 800597e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005982:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005986:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800599e:	6939      	ldr	r1, [r7, #16]
 80059a0:	0148      	lsls	r0, r1, #5
 80059a2:	6979      	ldr	r1, [r7, #20]
 80059a4:	4401      	add	r1, r0
 80059a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059aa:	4313      	orrs	r3, r2
 80059ac:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80059ae:	79fb      	ldrb	r3, [r7, #7]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d10d      	bne.n	80059d0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d009      	beq.n	80059d0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	68d9      	ldr	r1, [r3, #12]
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059cc:	460a      	mov	r2, r1
 80059ce:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	0151      	lsls	r1, r2, #5
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	440a      	add	r2, r1
 80059e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	371c      	adds	r7, #28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b089      	sub	sp, #36	; 0x24
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	4611      	mov	r1, r2
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	71fb      	strb	r3, [r7, #7]
 8005a10:	4613      	mov	r3, r2
 8005a12:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005a1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d11a      	bne.n	8005a5a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a24:	88bb      	ldrh	r3, [r7, #4]
 8005a26:	3303      	adds	r3, #3
 8005a28:	089b      	lsrs	r3, r3, #2
 8005a2a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61bb      	str	r3, [r7, #24]
 8005a30:	e00f      	b.n	8005a52 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	031a      	lsls	r2, r3, #12
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a3e:	461a      	mov	r2, r3
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	3304      	adds	r3, #4
 8005a4a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	61bb      	str	r3, [r7, #24]
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d3eb      	bcc.n	8005a32 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3724      	adds	r7, #36	; 0x24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b089      	sub	sp, #36	; 0x24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	3303      	adds	r3, #3
 8005a82:	089b      	lsrs	r3, r3, #2
 8005a84:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005a86:	2300      	movs	r3, #0
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	e00b      	b.n	8005aa4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	61bb      	str	r3, [r7, #24]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d3ef      	bcc.n	8005a8c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005aac:	69fb      	ldr	r3, [r7, #28]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3724      	adds	r7, #36	; 0x24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b085      	sub	sp, #20
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	785b      	ldrb	r3, [r3, #1]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d12c      	bne.n	8005b30 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	db12      	blt.n	8005b0e <USB_EPSetStall+0x54>
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00f      	beq.n	8005b0e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b0c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	e02b      	b.n	8005b88 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	db12      	blt.n	8005b68 <USB_EPSetStall+0xae>
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00f      	beq.n	8005b68 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b66:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b085      	sub	sp, #20
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	785b      	ldrb	r3, [r3, #1]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d128      	bne.n	8005c04 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	0151      	lsls	r1, r2, #5
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bd0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	78db      	ldrb	r3, [r3, #3]
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d003      	beq.n	8005be2 <USB_EPClearStall+0x4c>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	78db      	ldrb	r3, [r3, #3]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d138      	bne.n	8005c54 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	e027      	b.n	8005c54 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	0151      	lsls	r1, r2, #5
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	440a      	add	r2, r1
 8005c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	78db      	ldrb	r3, [r3, #3]
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d003      	beq.n	8005c34 <USB_EPClearStall+0x9e>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	78db      	ldrb	r3, [r3, #3]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d10f      	bne.n	8005c54 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c52:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c80:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c84:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	78fb      	ldrb	r3, [r7, #3]
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005c96:	68f9      	ldr	r1, [r7, #12]
 8005c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cc8:	f023 0303 	bic.w	r3, r3, #3
 8005ccc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cdc:	f023 0302 	bic.w	r3, r3, #2
 8005ce0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d0a:	f023 0303 	bic.w	r3, r3, #3
 8005d0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d1e:	f043 0302 	orr.w	r3, r3, #2
 8005d22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b085      	sub	sp, #20
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4013      	ands	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	0c1b      	lsrs	r3, r3, #16
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	4013      	ands	r3, r2
 8005dae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	b29b      	uxth	r3, r3
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	4013      	ands	r3, r2
 8005dec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005dee:	68bb      	ldr	r3, [r7, #8]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	460b      	mov	r3, r1
 8005e06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2c:	01db      	lsls	r3, r3, #7
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4013      	ands	r3, r2
 8005e48:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	f003 0301 	and.w	r3, r3, #1
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e92:	f023 0307 	bic.w	r3, r3, #7
 8005e96:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eaa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
	...

08005ebc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	333c      	adds	r3, #60	; 0x3c
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	4a26      	ldr	r2, [pc, #152]	; (8005f74 <USB_EP0_OutStart+0xb8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d90a      	bls.n	8005ef6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef0:	d101      	bne.n	8005ef6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e037      	b.n	8005f66 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efc:	461a      	mov	r2, r3
 8005efe:	2300      	movs	r3, #0
 8005f00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f24:	f043 0318 	orr.w	r3, r3, #24
 8005f28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f38:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005f3c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f3e:	7afb      	ldrb	r3, [r7, #11]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d10f      	bne.n	8005f64 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f5e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	4f54300a 	.word	0x4f54300a

08005f78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3301      	adds	r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4a13      	ldr	r2, [pc, #76]	; (8005fdc <USB_CoreReset+0x64>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d901      	bls.n	8005f96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e01b      	b.n	8005fce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	daf2      	bge.n	8005f84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f043 0201 	orr.w	r2, r3, #1
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4a09      	ldr	r2, [pc, #36]	; (8005fdc <USB_CoreReset+0x64>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d901      	bls.n	8005fc0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e006      	b.n	8005fce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d0f0      	beq.n	8005fae <USB_CoreReset+0x36>

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	00030d40 	.word	0x00030d40

08005fe0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ff0:	f002 f8d2 	bl	8008198 <malloc>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d105      	bne.n	800600a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006006:	2302      	movs	r3, #2
 8006008:	e066      	b.n	80060d8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	7c1b      	ldrb	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d119      	bne.n	800604e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800601a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800601e:	2202      	movs	r2, #2
 8006020:	2181      	movs	r1, #129	; 0x81
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f001 ff3f 	bl	8007ea6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800602e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006032:	2202      	movs	r2, #2
 8006034:	2101      	movs	r1, #1
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f001 ff35 	bl	8007ea6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2210      	movs	r2, #16
 8006048:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800604c:	e016      	b.n	800607c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800604e:	2340      	movs	r3, #64	; 0x40
 8006050:	2202      	movs	r2, #2
 8006052:	2181      	movs	r1, #129	; 0x81
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 ff26 	bl	8007ea6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006060:	2340      	movs	r3, #64	; 0x40
 8006062:	2202      	movs	r2, #2
 8006064:	2101      	movs	r1, #1
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f001 ff1d 	bl	8007ea6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2210      	movs	r2, #16
 8006078:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800607c:	2308      	movs	r3, #8
 800607e:	2203      	movs	r2, #3
 8006080:	2182      	movs	r1, #130	; 0x82
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f001 ff0f 	bl	8007ea6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	7c1b      	ldrb	r3, [r3, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d109      	bne.n	80060c6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060bc:	2101      	movs	r1, #1
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f001 ffe0 	bl	8008084 <USBD_LL_PrepareReceive>
 80060c4:	e007      	b.n	80060d6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060cc:	2340      	movs	r3, #64	; 0x40
 80060ce:	2101      	movs	r1, #1
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f001 ffd7 	bl	8008084 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80060f0:	2181      	movs	r1, #129	; 0x81
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f001 fefd 	bl	8007ef2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80060fe:	2101      	movs	r1, #1
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 fef6 	bl	8007ef2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800610e:	2182      	movs	r1, #130	; 0x82
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 feee 	bl	8007ef2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00e      	beq.n	800614e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006140:	4618      	mov	r0, r3
 8006142:	f002 f831 	bl	80081a8 <free>
    pdev->pClassData = NULL;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800614e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006168:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800617e:	2b00      	cmp	r3, #0
 8006180:	d03a      	beq.n	80061f8 <USBD_CDC_Setup+0xa0>
 8006182:	2b20      	cmp	r3, #32
 8006184:	f040 8097 	bne.w	80062b6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	88db      	ldrh	r3, [r3, #6]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d029      	beq.n	80061e4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	b25b      	sxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	da11      	bge.n	80061be <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80061a6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	88d2      	ldrh	r2, [r2, #6]
 80061ac:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80061ae:	6939      	ldr	r1, [r7, #16]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	88db      	ldrh	r3, [r3, #6]
 80061b4:	461a      	mov	r2, r3
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f001 fa6d 	bl	8007696 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80061bc:	e082      	b.n	80062c4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	785a      	ldrb	r2, [r3, #1]
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	88db      	ldrh	r3, [r3, #6]
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80061d4:	6939      	ldr	r1, [r7, #16]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	88db      	ldrh	r3, [r3, #6]
 80061da:	461a      	mov	r2, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 fa86 	bl	80076ee <USBD_CtlPrepareRx>
    break;
 80061e2:	e06f      	b.n	80062c4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	7850      	ldrb	r0, [r2, #1]
 80061f0:	2200      	movs	r2, #0
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	4798      	blx	r3
    break;
 80061f6:	e065      	b.n	80062c4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	785b      	ldrb	r3, [r3, #1]
 80061fc:	2b0b      	cmp	r3, #11
 80061fe:	d84f      	bhi.n	80062a0 <USBD_CDC_Setup+0x148>
 8006200:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <USBD_CDC_Setup+0xb0>)
 8006202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006206:	bf00      	nop
 8006208:	08006239 	.word	0x08006239
 800620c:	080062af 	.word	0x080062af
 8006210:	080062a1 	.word	0x080062a1
 8006214:	080062a1 	.word	0x080062a1
 8006218:	080062a1 	.word	0x080062a1
 800621c:	080062a1 	.word	0x080062a1
 8006220:	080062a1 	.word	0x080062a1
 8006224:	080062a1 	.word	0x080062a1
 8006228:	080062a1 	.word	0x080062a1
 800622c:	080062a1 	.word	0x080062a1
 8006230:	08006261 	.word	0x08006261
 8006234:	08006289 	.word	0x08006289
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800623e:	2b03      	cmp	r3, #3
 8006240:	d107      	bne.n	8006252 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006242:	f107 030c 	add.w	r3, r7, #12
 8006246:	2202      	movs	r2, #2
 8006248:	4619      	mov	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f001 fa23 	bl	8007696 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006250:	e030      	b.n	80062b4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006252:	6839      	ldr	r1, [r7, #0]
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 f9ad 	bl	80075b4 <USBD_CtlError>
        ret = USBD_FAIL;
 800625a:	2303      	movs	r3, #3
 800625c:	75fb      	strb	r3, [r7, #23]
      break;
 800625e:	e029      	b.n	80062b4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006266:	2b03      	cmp	r3, #3
 8006268:	d107      	bne.n	800627a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800626a:	f107 030f 	add.w	r3, r7, #15
 800626e:	2201      	movs	r2, #1
 8006270:	4619      	mov	r1, r3
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f001 fa0f 	bl	8007696 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006278:	e01c      	b.n	80062b4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800627a:	6839      	ldr	r1, [r7, #0]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f001 f999 	bl	80075b4 <USBD_CtlError>
        ret = USBD_FAIL;
 8006282:	2303      	movs	r3, #3
 8006284:	75fb      	strb	r3, [r7, #23]
      break;
 8006286:	e015      	b.n	80062b4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800628e:	2b03      	cmp	r3, #3
 8006290:	d00f      	beq.n	80062b2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 f98d 	bl	80075b4 <USBD_CtlError>
        ret = USBD_FAIL;
 800629a:	2303      	movs	r3, #3
 800629c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800629e:	e008      	b.n	80062b2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f001 f986 	bl	80075b4 <USBD_CtlError>
      ret = USBD_FAIL;
 80062a8:	2303      	movs	r3, #3
 80062aa:	75fb      	strb	r3, [r7, #23]
      break;
 80062ac:	e002      	b.n	80062b4 <USBD_CDC_Setup+0x15c>
      break;
 80062ae:	bf00      	nop
 80062b0:	e008      	b.n	80062c4 <USBD_CDC_Setup+0x16c>
      break;
 80062b2:	bf00      	nop
    }
    break;
 80062b4:	e006      	b.n	80062c4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80062b6:	6839      	ldr	r1, [r7, #0]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f001 f97b 	bl	80075b4 <USBD_CtlError>
    ret = USBD_FAIL;
 80062be:	2303      	movs	r3, #3
 80062c0:	75fb      	strb	r3, [r7, #23]
    break;
 80062c2:	bf00      	nop
  }

  return (uint8_t)ret;
 80062c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop

080062d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e049      	b.n	8006386 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80062fa:	78fa      	ldrb	r2, [r7, #3]
 80062fc:	6879      	ldr	r1, [r7, #4]
 80062fe:	4613      	mov	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	440b      	add	r3, r1
 8006308:	3318      	adds	r3, #24
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d029      	beq.n	8006364 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006310:	78fa      	ldrb	r2, [r7, #3]
 8006312:	6879      	ldr	r1, [r7, #4]
 8006314:	4613      	mov	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	440b      	add	r3, r1
 800631e:	3318      	adds	r3, #24
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	78f9      	ldrb	r1, [r7, #3]
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	460b      	mov	r3, r1
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	1a5b      	subs	r3, r3, r1
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4403      	add	r3, r0
 8006330:	3344      	adds	r3, #68	; 0x44
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	fbb2 f1f3 	udiv	r1, r2, r3
 8006338:	fb03 f301 	mul.w	r3, r3, r1
 800633c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800633e:	2b00      	cmp	r3, #0
 8006340:	d110      	bne.n	8006364 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006342:	78fa      	ldrb	r2, [r7, #3]
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	440b      	add	r3, r1
 8006350:	3318      	adds	r3, #24
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006356:	78f9      	ldrb	r1, [r7, #3]
 8006358:	2300      	movs	r3, #0
 800635a:	2200      	movs	r2, #0
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f001 fe70 	bl	8008042 <USBD_LL_Transmit>
 8006362:	e00f      	b.n	8006384 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2200      	movs	r2, #0
 8006368:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006380:	78fa      	ldrb	r2, [r7, #3]
 8006382:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	460b      	mov	r3, r1
 8006398:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e015      	b.n	80063dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 fe86 	bl	80080c6 <USBD_LL_GetRxDataSize>
 80063ba:	4602      	mov	r2, r0
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80063d6:	4611      	mov	r1, r2
 80063d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063f2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d015      	beq.n	800642a <USBD_CDC_EP0_RxReady+0x46>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006404:	2bff      	cmp	r3, #255	; 0xff
 8006406:	d010      	beq.n	800642a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006416:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800641e:	b292      	uxth	r2, r2
 8006420:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	22ff      	movs	r2, #255	; 0xff
 8006426:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2243      	movs	r2, #67	; 0x43
 8006440:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006442:	4b03      	ldr	r3, [pc, #12]	; (8006450 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	20000098 	.word	0x20000098

08006454 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2243      	movs	r2, #67	; 0x43
 8006460:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006462:	4b03      	ldr	r3, [pc, #12]	; (8006470 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006464:	4618      	mov	r0, r3
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	20000054 	.word	0x20000054

08006474 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2243      	movs	r2, #67	; 0x43
 8006480:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006482:	4b03      	ldr	r3, [pc, #12]	; (8006490 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006484:	4618      	mov	r0, r3
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	200000dc 	.word	0x200000dc

08006494 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	220a      	movs	r2, #10
 80064a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80064a2:	4b03      	ldr	r3, [pc, #12]	; (80064b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	20000010 	.word	0x20000010

080064b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e004      	b.n	80064d2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80064de:	b480      	push	{r7}
 80064e0:	b087      	sub	sp, #28
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	371c      	adds	r7, #28
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006520:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006546:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006552:	2303      	movs	r3, #3
 8006554:	e016      	b.n	8006584 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	7c1b      	ldrb	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d109      	bne.n	8006572 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006568:	2101      	movs	r1, #1
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f001 fd8a 	bl	8008084 <USBD_LL_PrepareReceive>
 8006570:	e007      	b.n	8006582 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006578:	2340      	movs	r3, #64	; 0x40
 800657a:	2101      	movs	r1, #1
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 fd81 	bl	8008084 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	4613      	mov	r3, r2
 8006598:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e025      	b.n	80065f0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	79fa      	ldrb	r2, [r7, #7]
 80065e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f001 fbf7 	bl	8007dd8 <USBD_LL_Init>
 80065ea:	4603      	mov	r3, r0
 80065ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800660c:	2303      	movs	r3, #3
 800660e:	e010      	b.n	8006632 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	f107 020e 	add.w	r2, r7, #14
 8006624:	4610      	mov	r0, r2
 8006626:	4798      	blx	r3
 8006628:	4602      	mov	r2, r0
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b082      	sub	sp, #8
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 fc14 	bl	8007e70 <USBD_LL_Start>
 8006648:	4603      	mov	r3, r0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006674:	2303      	movs	r3, #3
 8006676:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	78fa      	ldrb	r2, [r7, #3]
 800668c:	4611      	mov	r1, r2
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	4798      	blx	r3
 8006692:	4603      	mov	r3, r0
 8006694:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006696:	7bfb      	ldrb	r3, [r7, #15]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d007      	beq.n	80066c6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	78fa      	ldrb	r2, [r7, #3]
 80066c0:	4611      	mov	r1, r2
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	4798      	blx	r3
  }

  return USBD_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 ff2c 	bl	8007540 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80066f6:	461a      	mov	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006704:	f003 031f 	and.w	r3, r3, #31
 8006708:	2b01      	cmp	r3, #1
 800670a:	d00e      	beq.n	800672a <USBD_LL_SetupStage+0x5a>
 800670c:	2b01      	cmp	r3, #1
 800670e:	d302      	bcc.n	8006716 <USBD_LL_SetupStage+0x46>
 8006710:	2b02      	cmp	r3, #2
 8006712:	d014      	beq.n	800673e <USBD_LL_SetupStage+0x6e>
 8006714:	e01d      	b.n	8006752 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800671c:	4619      	mov	r1, r3
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fa18 	bl	8006b54 <USBD_StdDevReq>
 8006724:	4603      	mov	r3, r0
 8006726:	73fb      	strb	r3, [r7, #15]
      break;
 8006728:	e020      	b.n	800676c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa7c 	bl	8006c30 <USBD_StdItfReq>
 8006738:	4603      	mov	r3, r0
 800673a:	73fb      	strb	r3, [r7, #15]
      break;
 800673c:	e016      	b.n	800676c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006744:	4619      	mov	r1, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fab8 	bl	8006cbc <USBD_StdEPReq>
 800674c:	4603      	mov	r3, r0
 800674e:	73fb      	strb	r3, [r7, #15]
      break;
 8006750:	e00c      	b.n	800676c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006758:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800675c:	b2db      	uxtb	r3, r3
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 fbe5 	bl	8007f30 <USBD_LL_StallEP>
 8006766:	4603      	mov	r3, r0
 8006768:	73fb      	strb	r3, [r7, #15]
      break;
 800676a:	bf00      	nop
  }

  return ret;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b086      	sub	sp, #24
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	460b      	mov	r3, r1
 8006780:	607a      	str	r2, [r7, #4]
 8006782:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006784:	7afb      	ldrb	r3, [r7, #11]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d137      	bne.n	80067fa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006790:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006798:	2b03      	cmp	r3, #3
 800679a:	d14a      	bne.n	8006832 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d913      	bls.n	80067d0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	1ad2      	subs	r2, r2, r3
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	4293      	cmp	r3, r2
 80067c0:	bf28      	it	cs
 80067c2:	4613      	movcs	r3, r2
 80067c4:	461a      	mov	r2, r3
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 ffad 	bl	8007728 <USBD_CtlContinueRx>
 80067ce:	e030      	b.n	8006832 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d105      	bne.n	80067f2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 ffa9 	bl	800774a <USBD_CtlSendStatus>
 80067f8:	e01b      	b.n	8006832 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d013      	beq.n	800682e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800680c:	2b03      	cmp	r3, #3
 800680e:	d10e      	bne.n	800682e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	7afa      	ldrb	r2, [r7, #11]
 800681a:	4611      	mov	r1, r2
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	4798      	blx	r3
 8006820:	4603      	mov	r3, r0
 8006822:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800682a:	7dfb      	ldrb	r3, [r7, #23]
 800682c:	e002      	b.n	8006834 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800682e:	2303      	movs	r3, #3
 8006830:	e000      	b.n	8006834 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	460b      	mov	r3, r1
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800684a:	7afb      	ldrb	r3, [r7, #11]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d16a      	bne.n	8006926 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3314      	adds	r3, #20
 8006854:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800685c:	2b02      	cmp	r3, #2
 800685e:	d155      	bne.n	800690c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	429a      	cmp	r2, r3
 800686a:	d914      	bls.n	8006896 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	1ad2      	subs	r2, r2, r3
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	461a      	mov	r2, r3
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 ff22 	bl	80076cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006888:	2300      	movs	r3, #0
 800688a:	2200      	movs	r2, #0
 800688c:	2100      	movs	r1, #0
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f001 fbf8 	bl	8008084 <USBD_LL_PrepareReceive>
 8006894:	e03a      	b.n	800690c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d11c      	bne.n	80068dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d316      	bcc.n	80068dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d20f      	bcs.n	80068dc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068bc:	2200      	movs	r2, #0
 80068be:	2100      	movs	r1, #0
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 ff03 	bl	80076cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068ce:	2300      	movs	r3, #0
 80068d0:	2200      	movs	r2, #0
 80068d2:	2100      	movs	r1, #0
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f001 fbd5 	bl	8008084 <USBD_LL_PrepareReceive>
 80068da:	e017      	b.n	800690c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00a      	beq.n	80068fe <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d105      	bne.n	80068fe <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80068fe:	2180      	movs	r1, #128	; 0x80
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f001 fb15 	bl	8007f30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 ff32 	bl	8007770 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006912:	2b01      	cmp	r3, #1
 8006914:	d123      	bne.n	800695e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f7ff fe9b 	bl	8006652 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006924:	e01b      	b.n	800695e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d013      	beq.n	800695a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006938:	2b03      	cmp	r3, #3
 800693a:	d10e      	bne.n	800695a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	7afa      	ldrb	r2, [r7, #11]
 8006946:	4611      	mov	r1, r2
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	4798      	blx	r3
 800694c:	4603      	mov	r3, r0
 800694e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006950:	7dfb      	ldrb	r3, [r7, #23]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006956:	7dfb      	ldrb	r3, [r7, #23]
 8006958:	e002      	b.n	8006960 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800695a:	2303      	movs	r3, #3
 800695c:	e000      	b.n	8006960 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006994:	2b00      	cmp	r3, #0
 8006996:	d009      	beq.n	80069ac <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6852      	ldr	r2, [r2, #4]
 80069a4:	b2d2      	uxtb	r2, r2
 80069a6:	4611      	mov	r1, r2
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069ac:	2340      	movs	r3, #64	; 0x40
 80069ae:	2200      	movs	r2, #0
 80069b0:	2100      	movs	r1, #0
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f001 fa77 	bl	8007ea6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2240      	movs	r2, #64	; 0x40
 80069c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069c8:	2340      	movs	r3, #64	; 0x40
 80069ca:	2200      	movs	r2, #0
 80069cc:	2180      	movs	r1, #128	; 0x80
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f001 fa69 	bl	8007ea6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2240      	movs	r2, #64	; 0x40
 80069de:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	78fa      	ldrb	r2, [r7, #3]
 80069fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b083      	sub	sp, #12
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2204      	movs	r2, #4
 8006a22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d105      	bne.n	8006a52 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d10b      	bne.n	8006a8a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d005      	beq.n	8006a8a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d009      	beq.n	8006b0c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6852      	ldr	r2, [r2, #4]
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	4611      	mov	r1, r2
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	4798      	blx	r3
  }

  return USBD_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b087      	sub	sp, #28
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006b34:	8a3b      	ldrh	r3, [r7, #16]
 8006b36:	021b      	lsls	r3, r3, #8
 8006b38:	b21a      	sxth	r2, r3
 8006b3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	b21b      	sxth	r3, r3
 8006b42:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006b44:	89fb      	ldrh	r3, [r7, #14]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
	...

08006b54 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d004      	beq.n	8006b78 <USBD_StdDevReq+0x24>
 8006b6e:	2b40      	cmp	r3, #64	; 0x40
 8006b70:	d002      	beq.n	8006b78 <USBD_StdDevReq+0x24>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00a      	beq.n	8006b8c <USBD_StdDevReq+0x38>
 8006b76:	e050      	b.n	8006c1a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	4798      	blx	r3
 8006b86:	4603      	mov	r3, r0
 8006b88:	73fb      	strb	r3, [r7, #15]
    break;
 8006b8a:	e04b      	b.n	8006c24 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	785b      	ldrb	r3, [r3, #1]
 8006b90:	2b09      	cmp	r3, #9
 8006b92:	d83c      	bhi.n	8006c0e <USBD_StdDevReq+0xba>
 8006b94:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <USBD_StdDevReq+0x48>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006bf1 	.word	0x08006bf1
 8006ba0:	08006c05 	.word	0x08006c05
 8006ba4:	08006c0f 	.word	0x08006c0f
 8006ba8:	08006bfb 	.word	0x08006bfb
 8006bac:	08006c0f 	.word	0x08006c0f
 8006bb0:	08006bcf 	.word	0x08006bcf
 8006bb4:	08006bc5 	.word	0x08006bc5
 8006bb8:	08006c0f 	.word	0x08006c0f
 8006bbc:	08006be7 	.word	0x08006be7
 8006bc0:	08006bd9 	.word	0x08006bd9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f9ce 	bl	8006f68 <USBD_GetDescriptor>
      break;
 8006bcc:	e024      	b.n	8006c18 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fb33 	bl	800723c <USBD_SetAddress>
      break;
 8006bd6:	e01f      	b.n	8006c18 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fb70 	bl	80072c0 <USBD_SetConfig>
 8006be0:	4603      	mov	r3, r0
 8006be2:	73fb      	strb	r3, [r7, #15]
      break;
 8006be4:	e018      	b.n	8006c18 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fc0d 	bl	8007408 <USBD_GetConfig>
      break;
 8006bee:	e013      	b.n	8006c18 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fc3c 	bl	8007470 <USBD_GetStatus>
      break;
 8006bf8:	e00e      	b.n	8006c18 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fc6a 	bl	80074d6 <USBD_SetFeature>
      break;
 8006c02:	e009      	b.n	8006c18 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fc79 	bl	80074fe <USBD_ClrFeature>
      break;
 8006c0c:	e004      	b.n	8006c18 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fccf 	bl	80075b4 <USBD_CtlError>
      break;
 8006c16:	bf00      	nop
    }
    break;
 8006c18:	e004      	b.n	8006c24 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fcc9 	bl	80075b4 <USBD_CtlError>
    break;
 8006c22:	bf00      	nop
  }

  return ret;
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop

08006c30 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c46:	2b20      	cmp	r3, #32
 8006c48:	d003      	beq.n	8006c52 <USBD_StdItfReq+0x22>
 8006c4a:	2b40      	cmp	r3, #64	; 0x40
 8006c4c:	d001      	beq.n	8006c52 <USBD_StdItfReq+0x22>
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d12a      	bne.n	8006ca8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d81d      	bhi.n	8006c9a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	889b      	ldrh	r3, [r3, #4]
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d813      	bhi.n	8006c90 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	4798      	blx	r3
 8006c76:	4603      	mov	r3, r0
 8006c78:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	88db      	ldrh	r3, [r3, #6]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d110      	bne.n	8006ca4 <USBD_StdItfReq+0x74>
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10d      	bne.n	8006ca4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fd5e 	bl	800774a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006c8e:	e009      	b.n	8006ca4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fc8e 	bl	80075b4 <USBD_CtlError>
      break;
 8006c98:	e004      	b.n	8006ca4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fc89 	bl	80075b4 <USBD_CtlError>
      break;
 8006ca2:	e000      	b.n	8006ca6 <USBD_StdItfReq+0x76>
      break;
 8006ca4:	bf00      	nop
    }
    break;
 8006ca6:	e004      	b.n	8006cb2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fc82 	bl	80075b4 <USBD_CtlError>
    break;
 8006cb0:	bf00      	nop
  }

  return ret;
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	889b      	ldrh	r3, [r3, #4]
 8006cce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cd8:	2b20      	cmp	r3, #32
 8006cda:	d004      	beq.n	8006ce6 <USBD_StdEPReq+0x2a>
 8006cdc:	2b40      	cmp	r3, #64	; 0x40
 8006cde:	d002      	beq.n	8006ce6 <USBD_StdEPReq+0x2a>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00a      	beq.n	8006cfa <USBD_StdEPReq+0x3e>
 8006ce4:	e135      	b.n	8006f52 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	4798      	blx	r3
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	73fb      	strb	r3, [r7, #15]
    break;
 8006cf8:	e130      	b.n	8006f5c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	785b      	ldrb	r3, [r3, #1]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d03e      	beq.n	8006d80 <USBD_StdEPReq+0xc4>
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	d002      	beq.n	8006d0c <USBD_StdEPReq+0x50>
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d077      	beq.n	8006dfa <USBD_StdEPReq+0x13e>
 8006d0a:	e11c      	b.n	8006f46 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d002      	beq.n	8006d1c <USBD_StdEPReq+0x60>
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d015      	beq.n	8006d46 <USBD_StdEPReq+0x8a>
 8006d1a:	e02b      	b.n	8006d74 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00c      	beq.n	8006d3c <USBD_StdEPReq+0x80>
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	2b80      	cmp	r3, #128	; 0x80
 8006d26:	d009      	beq.n	8006d3c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 f8ff 	bl	8007f30 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d32:	2180      	movs	r1, #128	; 0x80
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 f8fb 	bl	8007f30 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006d3a:	e020      	b.n	8006d7e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fc38 	bl	80075b4 <USBD_CtlError>
        break;
 8006d44:	e01b      	b.n	8006d7e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	885b      	ldrh	r3, [r3, #2]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10e      	bne.n	8006d6c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00b      	beq.n	8006d6c <USBD_StdEPReq+0xb0>
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
 8006d56:	2b80      	cmp	r3, #128	; 0x80
 8006d58:	d008      	beq.n	8006d6c <USBD_StdEPReq+0xb0>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	88db      	ldrh	r3, [r3, #6]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d104      	bne.n	8006d6c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 f8e2 	bl	8007f30 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fcec 	bl	800774a <USBD_CtlSendStatus>

        break;
 8006d72:	e004      	b.n	8006d7e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fc1c 	bl	80075b4 <USBD_CtlError>
        break;
 8006d7c:	bf00      	nop
      }
      break;
 8006d7e:	e0e7      	b.n	8006f50 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d002      	beq.n	8006d90 <USBD_StdEPReq+0xd4>
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	d015      	beq.n	8006dba <USBD_StdEPReq+0xfe>
 8006d8e:	e02d      	b.n	8006dec <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00c      	beq.n	8006db0 <USBD_StdEPReq+0xf4>
 8006d96:	7bbb      	ldrb	r3, [r7, #14]
 8006d98:	2b80      	cmp	r3, #128	; 0x80
 8006d9a:	d009      	beq.n	8006db0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d9c:	7bbb      	ldrb	r3, [r7, #14]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 f8c5 	bl	8007f30 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006da6:	2180      	movs	r1, #128	; 0x80
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 f8c1 	bl	8007f30 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006dae:	e023      	b.n	8006df8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fbfe 	bl	80075b4 <USBD_CtlError>
        break;
 8006db8:	e01e      	b.n	8006df8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	885b      	ldrh	r3, [r3, #2]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d119      	bne.n	8006df6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006dc2:	7bbb      	ldrb	r3, [r7, #14]
 8006dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d004      	beq.n	8006dd6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006dcc:	7bbb      	ldrb	r3, [r7, #14]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f001 f8cc 	bl	8007f6e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fcb7 	bl	800774a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	4798      	blx	r3
        }
        break;
 8006dea:	e004      	b.n	8006df6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fbe0 	bl	80075b4 <USBD_CtlError>
        break;
 8006df4:	e000      	b.n	8006df8 <USBD_StdEPReq+0x13c>
        break;
 8006df6:	bf00      	nop
      }
      break;
 8006df8:	e0aa      	b.n	8006f50 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d002      	beq.n	8006e0a <USBD_StdEPReq+0x14e>
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	d032      	beq.n	8006e6e <USBD_StdEPReq+0x1b2>
 8006e08:	e097      	b.n	8006f3a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d007      	beq.n	8006e20 <USBD_StdEPReq+0x164>
 8006e10:	7bbb      	ldrb	r3, [r7, #14]
 8006e12:	2b80      	cmp	r3, #128	; 0x80
 8006e14:	d004      	beq.n	8006e20 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fbcb 	bl	80075b4 <USBD_CtlError>
          break;
 8006e1e:	e091      	b.n	8006f44 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	da0b      	bge.n	8006e40 <USBD_StdEPReq+0x184>
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
 8006e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	3310      	adds	r3, #16
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	e00b      	b.n	8006e58 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006e40:	7bbb      	ldrb	r3, [r7, #14]
 8006e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e46:	4613      	mov	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	4413      	add	r3, r2
 8006e56:	3304      	adds	r3, #4
 8006e58:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2202      	movs	r2, #2
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fc15 	bl	8007696 <USBD_CtlSendData>
        break;
 8006e6c:	e06a      	b.n	8006f44 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006e6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	da11      	bge.n	8006e9a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	f003 020f 	and.w	r2, r3, #15
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	440b      	add	r3, r1
 8006e88:	3324      	adds	r3, #36	; 0x24
 8006e8a:	881b      	ldrh	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d117      	bne.n	8006ec0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fb8e 	bl	80075b4 <USBD_CtlError>
            break;
 8006e98:	e054      	b.n	8006f44 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e9a:	7bbb      	ldrb	r3, [r7, #14]
 8006e9c:	f003 020f 	and.w	r2, r3, #15
 8006ea0:	6879      	ldr	r1, [r7, #4]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	440b      	add	r3, r1
 8006eac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d104      	bne.n	8006ec0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fb7b 	bl	80075b4 <USBD_CtlError>
            break;
 8006ebe:	e041      	b.n	8006f44 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ec0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	da0b      	bge.n	8006ee0 <USBD_StdEPReq+0x224>
 8006ec8:	7bbb      	ldrb	r3, [r7, #14]
 8006eca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ece:	4613      	mov	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	3310      	adds	r3, #16
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	4413      	add	r3, r2
 8006edc:	3304      	adds	r3, #4
 8006ede:	e00b      	b.n	8006ef8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <USBD_StdEPReq+0x24a>
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	2b80      	cmp	r3, #128	; 0x80
 8006f04:	d103      	bne.n	8006f0e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	e00e      	b.n	8006f2c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 f84a 	bl	8007fac <USBD_LL_IsStallEP>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2201      	movs	r2, #1
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	e002      	b.n	8006f2c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fbaf 	bl	8007696 <USBD_CtlSendData>
          break;
 8006f38:	e004      	b.n	8006f44 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fb39 	bl	80075b4 <USBD_CtlError>
        break;
 8006f42:	bf00      	nop
      }
      break;
 8006f44:	e004      	b.n	8006f50 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fb33 	bl	80075b4 <USBD_CtlError>
      break;
 8006f4e:	bf00      	nop
    }
    break;
 8006f50:	e004      	b.n	8006f5c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fb2d 	bl	80075b4 <USBD_CtlError>
    break;
 8006f5a:	bf00      	nop
  }

  return ret;
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f76:	2300      	movs	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	885b      	ldrh	r3, [r3, #2]
 8006f82:	0a1b      	lsrs	r3, r3, #8
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	3b01      	subs	r3, #1
 8006f88:	2b06      	cmp	r3, #6
 8006f8a:	f200 8128 	bhi.w	80071de <USBD_GetDescriptor+0x276>
 8006f8e:	a201      	add	r2, pc, #4	; (adr r2, 8006f94 <USBD_GetDescriptor+0x2c>)
 8006f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f94:	08006fb1 	.word	0x08006fb1
 8006f98:	08006fc9 	.word	0x08006fc9
 8006f9c:	08007009 	.word	0x08007009
 8006fa0:	080071df 	.word	0x080071df
 8006fa4:	080071df 	.word	0x080071df
 8006fa8:	0800717f 	.word	0x0800717f
 8006fac:	080071ab 	.word	0x080071ab
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	7c12      	ldrb	r2, [r2, #16]
 8006fbc:	f107 0108 	add.w	r1, r7, #8
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	4798      	blx	r3
 8006fc4:	60f8      	str	r0, [r7, #12]
    break;
 8006fc6:	e112      	b.n	80071ee <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	7c1b      	ldrb	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10d      	bne.n	8006fec <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd8:	f107 0208 	add.w	r2, r7, #8
 8006fdc:	4610      	mov	r0, r2
 8006fde:	4798      	blx	r3
 8006fe0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006fea:	e100      	b.n	80071ee <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff4:	f107 0208 	add.w	r2, r7, #8
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4798      	blx	r3
 8006ffc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3301      	adds	r3, #1
 8007002:	2202      	movs	r2, #2
 8007004:	701a      	strb	r2, [r3, #0]
    break;
 8007006:	e0f2      	b.n	80071ee <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	885b      	ldrh	r3, [r3, #2]
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b05      	cmp	r3, #5
 8007010:	f200 80ac 	bhi.w	800716c <USBD_GetDescriptor+0x204>
 8007014:	a201      	add	r2, pc, #4	; (adr r2, 800701c <USBD_GetDescriptor+0xb4>)
 8007016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701a:	bf00      	nop
 800701c:	08007035 	.word	0x08007035
 8007020:	08007069 	.word	0x08007069
 8007024:	0800709d 	.word	0x0800709d
 8007028:	080070d1 	.word	0x080070d1
 800702c:	08007105 	.word	0x08007105
 8007030:	08007139 	.word	0x08007139
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00b      	beq.n	8007058 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	7c12      	ldrb	r2, [r2, #16]
 800704c:	f107 0108 	add.w	r1, r7, #8
 8007050:	4610      	mov	r0, r2
 8007052:	4798      	blx	r3
 8007054:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007056:	e091      	b.n	800717c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 faaa 	bl	80075b4 <USBD_CtlError>
        err++;
 8007060:	7afb      	ldrb	r3, [r7, #11]
 8007062:	3301      	adds	r3, #1
 8007064:	72fb      	strb	r3, [r7, #11]
      break;
 8007066:	e089      	b.n	800717c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	7c12      	ldrb	r2, [r2, #16]
 8007080:	f107 0108 	add.w	r1, r7, #8
 8007084:	4610      	mov	r0, r2
 8007086:	4798      	blx	r3
 8007088:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800708a:	e077      	b.n	800717c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fa90 	bl	80075b4 <USBD_CtlError>
        err++;
 8007094:	7afb      	ldrb	r3, [r7, #11]
 8007096:	3301      	adds	r3, #1
 8007098:	72fb      	strb	r3, [r7, #11]
      break;
 800709a:	e06f      	b.n	800717c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00b      	beq.n	80070c0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	7c12      	ldrb	r2, [r2, #16]
 80070b4:	f107 0108 	add.w	r1, r7, #8
 80070b8:	4610      	mov	r0, r2
 80070ba:	4798      	blx	r3
 80070bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070be:	e05d      	b.n	800717c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fa76 	bl	80075b4 <USBD_CtlError>
        err++;
 80070c8:	7afb      	ldrb	r3, [r7, #11]
 80070ca:	3301      	adds	r3, #1
 80070cc:	72fb      	strb	r3, [r7, #11]
      break;
 80070ce:	e055      	b.n	800717c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00b      	beq.n	80070f4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	7c12      	ldrb	r2, [r2, #16]
 80070e8:	f107 0108 	add.w	r1, r7, #8
 80070ec:	4610      	mov	r0, r2
 80070ee:	4798      	blx	r3
 80070f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070f2:	e043      	b.n	800717c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fa5c 	bl	80075b4 <USBD_CtlError>
        err++;
 80070fc:	7afb      	ldrb	r3, [r7, #11]
 80070fe:	3301      	adds	r3, #1
 8007100:	72fb      	strb	r3, [r7, #11]
      break;
 8007102:	e03b      	b.n	800717c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	7c12      	ldrb	r2, [r2, #16]
 800711c:	f107 0108 	add.w	r1, r7, #8
 8007120:	4610      	mov	r0, r2
 8007122:	4798      	blx	r3
 8007124:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007126:	e029      	b.n	800717c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fa42 	bl	80075b4 <USBD_CtlError>
        err++;
 8007130:	7afb      	ldrb	r3, [r7, #11]
 8007132:	3301      	adds	r3, #1
 8007134:	72fb      	strb	r3, [r7, #11]
      break;
 8007136:	e021      	b.n	800717c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00b      	beq.n	800715c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	7c12      	ldrb	r2, [r2, #16]
 8007150:	f107 0108 	add.w	r1, r7, #8
 8007154:	4610      	mov	r0, r2
 8007156:	4798      	blx	r3
 8007158:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800715a:	e00f      	b.n	800717c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fa28 	bl	80075b4 <USBD_CtlError>
        err++;
 8007164:	7afb      	ldrb	r3, [r7, #11]
 8007166:	3301      	adds	r3, #1
 8007168:	72fb      	strb	r3, [r7, #11]
      break;
 800716a:	e007      	b.n	800717c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fa20 	bl	80075b4 <USBD_CtlError>
      err++;
 8007174:	7afb      	ldrb	r3, [r7, #11]
 8007176:	3301      	adds	r3, #1
 8007178:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800717a:	bf00      	nop
    }
    break;
 800717c:	e037      	b.n	80071ee <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	7c1b      	ldrb	r3, [r3, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d109      	bne.n	800719a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718e:	f107 0208 	add.w	r2, r7, #8
 8007192:	4610      	mov	r0, r2
 8007194:	4798      	blx	r3
 8007196:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007198:	e029      	b.n	80071ee <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fa09 	bl	80075b4 <USBD_CtlError>
      err++;
 80071a2:	7afb      	ldrb	r3, [r7, #11]
 80071a4:	3301      	adds	r3, #1
 80071a6:	72fb      	strb	r3, [r7, #11]
    break;
 80071a8:	e021      	b.n	80071ee <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	7c1b      	ldrb	r3, [r3, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10d      	bne.n	80071ce <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	f107 0208 	add.w	r2, r7, #8
 80071be:	4610      	mov	r0, r2
 80071c0:	4798      	blx	r3
 80071c2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3301      	adds	r3, #1
 80071c8:	2207      	movs	r2, #7
 80071ca:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80071cc:	e00f      	b.n	80071ee <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f9ef 	bl	80075b4 <USBD_CtlError>
      err++;
 80071d6:	7afb      	ldrb	r3, [r7, #11]
 80071d8:	3301      	adds	r3, #1
 80071da:	72fb      	strb	r3, [r7, #11]
    break;
 80071dc:	e007      	b.n	80071ee <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f9e7 	bl	80075b4 <USBD_CtlError>
    err++;
 80071e6:	7afb      	ldrb	r3, [r7, #11]
 80071e8:	3301      	adds	r3, #1
 80071ea:	72fb      	strb	r3, [r7, #11]
    break;
 80071ec:	bf00      	nop
  }

  if (err != 0U)
 80071ee:	7afb      	ldrb	r3, [r7, #11]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d11e      	bne.n	8007232 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	88db      	ldrh	r3, [r3, #6]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d016      	beq.n	800722a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80071fc:	893b      	ldrh	r3, [r7, #8]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00e      	beq.n	8007220 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	88da      	ldrh	r2, [r3, #6]
 8007206:	893b      	ldrh	r3, [r7, #8]
 8007208:	4293      	cmp	r3, r2
 800720a:	bf28      	it	cs
 800720c:	4613      	movcs	r3, r2
 800720e:	b29b      	uxth	r3, r3
 8007210:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007212:	893b      	ldrh	r3, [r7, #8]
 8007214:	461a      	mov	r2, r3
 8007216:	68f9      	ldr	r1, [r7, #12]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fa3c 	bl	8007696 <USBD_CtlSendData>
 800721e:	e009      	b.n	8007234 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007220:	6839      	ldr	r1, [r7, #0]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f9c6 	bl	80075b4 <USBD_CtlError>
 8007228:	e004      	b.n	8007234 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fa8d 	bl	800774a <USBD_CtlSendStatus>
 8007230:	e000      	b.n	8007234 <USBD_GetDescriptor+0x2cc>
    return;
 8007232:	bf00      	nop
    }
  }
}
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop

0800723c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	889b      	ldrh	r3, [r3, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d130      	bne.n	80072b0 <USBD_SetAddress+0x74>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	88db      	ldrh	r3, [r3, #6]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d12c      	bne.n	80072b0 <USBD_SetAddress+0x74>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	885b      	ldrh	r3, [r3, #2]
 800725a:	2b7f      	cmp	r3, #127	; 0x7f
 800725c:	d828      	bhi.n	80072b0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	885b      	ldrh	r3, [r3, #2]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007268:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007270:	2b03      	cmp	r3, #3
 8007272:	d104      	bne.n	800727e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f99c 	bl	80075b4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727c:	e01c      	b.n	80072b8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	7bfa      	ldrb	r2, [r7, #15]
 8007282:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 feba 	bl	8008004 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fa5a 	bl	800774a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007296:	7bfb      	ldrb	r3, [r7, #15]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d004      	beq.n	80072a6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2202      	movs	r2, #2
 80072a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a4:	e008      	b.n	80072b8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ae:	e003      	b.n	80072b8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f97e 	bl	80075b4 <USBD_CtlError>
  }
}
 80072b8:	bf00      	nop
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	885b      	ldrh	r3, [r3, #2]
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	4b4b      	ldr	r3, [pc, #300]	; (8007404 <USBD_SetConfig+0x144>)
 80072d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80072d8:	4b4a      	ldr	r3, [pc, #296]	; (8007404 <USBD_SetConfig+0x144>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d905      	bls.n	80072ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f966 	bl	80075b4 <USBD_CtlError>
    return USBD_FAIL;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e087      	b.n	80073fc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d002      	beq.n	80072fc <USBD_SetConfig+0x3c>
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	d025      	beq.n	8007346 <USBD_SetConfig+0x86>
 80072fa:	e071      	b.n	80073e0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80072fc:	4b41      	ldr	r3, [pc, #260]	; (8007404 <USBD_SetConfig+0x144>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01c      	beq.n	800733e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007304:	4b3f      	ldr	r3, [pc, #252]	; (8007404 <USBD_SetConfig+0x144>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	461a      	mov	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800730e:	4b3d      	ldr	r3, [pc, #244]	; (8007404 <USBD_SetConfig+0x144>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7ff f9a7 	bl	8006668 <USBD_SetClassConfig>
 800731a:	4603      	mov	r3, r0
 800731c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800731e:	7bfb      	ldrb	r3, [r7, #15]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d004      	beq.n	800732e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f944 	bl	80075b4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800732c:	e065      	b.n	80073fa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fa0b 	bl	800774a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2203      	movs	r2, #3
 8007338:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800733c:	e05d      	b.n	80073fa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fa03 	bl	800774a <USBD_CtlSendStatus>
    break;
 8007344:	e059      	b.n	80073fa <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007346:	4b2f      	ldr	r3, [pc, #188]	; (8007404 <USBD_SetConfig+0x144>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d112      	bne.n	8007374 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2202      	movs	r2, #2
 8007352:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007356:	4b2b      	ldr	r3, [pc, #172]	; (8007404 <USBD_SetConfig+0x144>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	461a      	mov	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007360:	4b28      	ldr	r3, [pc, #160]	; (8007404 <USBD_SetConfig+0x144>)
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff f99a 	bl	80066a0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f9ec 	bl	800774a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007372:	e042      	b.n	80073fa <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007374:	4b23      	ldr	r3, [pc, #140]	; (8007404 <USBD_SetConfig+0x144>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	429a      	cmp	r2, r3
 8007380:	d02a      	beq.n	80073d8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	b2db      	uxtb	r3, r3
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7ff f988 	bl	80066a0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007390:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <USBD_SetConfig+0x144>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	461a      	mov	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800739a:	4b1a      	ldr	r3, [pc, #104]	; (8007404 <USBD_SetConfig+0x144>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff f961 	bl	8006668 <USBD_SetClassConfig>
 80073a6:	4603      	mov	r3, r0
 80073a8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00f      	beq.n	80073d0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f8fe 	bl	80075b4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff f96d 	bl	80066a0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2202      	movs	r2, #2
 80073ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80073ce:	e014      	b.n	80073fa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f9ba 	bl	800774a <USBD_CtlSendStatus>
    break;
 80073d6:	e010      	b.n	80073fa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f9b6 	bl	800774a <USBD_CtlSendStatus>
    break;
 80073de:	e00c      	b.n	80073fa <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f8e6 	bl	80075b4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073e8:	4b06      	ldr	r3, [pc, #24]	; (8007404 <USBD_SetConfig+0x144>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	4619      	mov	r1, r3
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7ff f956 	bl	80066a0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80073f4:	2303      	movs	r3, #3
 80073f6:	73fb      	strb	r3, [r7, #15]
    break;
 80073f8:	bf00      	nop
  }

  return ret;
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	20000208 	.word	0x20000208

08007408 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	88db      	ldrh	r3, [r3, #6]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d004      	beq.n	8007424 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f8c9 	bl	80075b4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007422:	e021      	b.n	8007468 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800742a:	2b01      	cmp	r3, #1
 800742c:	db17      	blt.n	800745e <USBD_GetConfig+0x56>
 800742e:	2b02      	cmp	r3, #2
 8007430:	dd02      	ble.n	8007438 <USBD_GetConfig+0x30>
 8007432:	2b03      	cmp	r3, #3
 8007434:	d00b      	beq.n	800744e <USBD_GetConfig+0x46>
 8007436:	e012      	b.n	800745e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3308      	adds	r3, #8
 8007442:	2201      	movs	r2, #1
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f925 	bl	8007696 <USBD_CtlSendData>
      break;
 800744c:	e00c      	b.n	8007468 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3304      	adds	r3, #4
 8007452:	2201      	movs	r2, #1
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f91d 	bl	8007696 <USBD_CtlSendData>
      break;
 800745c:	e004      	b.n	8007468 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f8a7 	bl	80075b4 <USBD_CtlError>
      break;
 8007466:	bf00      	nop
}
 8007468:	bf00      	nop
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007480:	3b01      	subs	r3, #1
 8007482:	2b02      	cmp	r3, #2
 8007484:	d81e      	bhi.n	80074c4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	88db      	ldrh	r3, [r3, #6]
 800748a:	2b02      	cmp	r3, #2
 800748c:	d004      	beq.n	8007498 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f88f 	bl	80075b4 <USBD_CtlError>
      break;
 8007496:	e01a      	b.n	80074ce <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d005      	beq.n	80074b4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f043 0202 	orr.w	r2, r3, #2
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	330c      	adds	r3, #12
 80074b8:	2202      	movs	r2, #2
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f8ea 	bl	8007696 <USBD_CtlSendData>
    break;
 80074c2:	e004      	b.n	80074ce <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f874 	bl	80075b4 <USBD_CtlError>
    break;
 80074cc:	bf00      	nop
  }
}
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	885b      	ldrh	r3, [r3, #2]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d106      	bne.n	80074f6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f92a 	bl	800774a <USBD_CtlSendStatus>
  }
}
 80074f6:	bf00      	nop
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b082      	sub	sp, #8
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800750e:	3b01      	subs	r3, #1
 8007510:	2b02      	cmp	r3, #2
 8007512:	d80b      	bhi.n	800752c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	885b      	ldrh	r3, [r3, #2]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d10c      	bne.n	8007536 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f910 	bl	800774a <USBD_CtlSendStatus>
      }
      break;
 800752a:	e004      	b.n	8007536 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f840 	bl	80075b4 <USBD_CtlError>
      break;
 8007534:	e000      	b.n	8007538 <USBD_ClrFeature+0x3a>
      break;
 8007536:	bf00      	nop
  }
}
 8007538:	bf00      	nop
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	781a      	ldrb	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	3301      	adds	r3, #1
 800755a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	781a      	ldrb	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3301      	adds	r3, #1
 8007568:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f7ff fad3 	bl	8006b16 <SWAPBYTE>
 8007570:	4603      	mov	r3, r0
 8007572:	461a      	mov	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	3301      	adds	r3, #1
 800757c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3301      	adds	r3, #1
 8007582:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f7ff fac6 	bl	8006b16 <SWAPBYTE>
 800758a:	4603      	mov	r3, r0
 800758c:	461a      	mov	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	3301      	adds	r3, #1
 8007596:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	3301      	adds	r3, #1
 800759c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f7ff fab9 	bl	8006b16 <SWAPBYTE>
 80075a4:	4603      	mov	r3, r0
 80075a6:	461a      	mov	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	80da      	strh	r2, [r3, #6]
}
 80075ac:	bf00      	nop
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80075be:	2180      	movs	r1, #128	; 0x80
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fcb5 	bl	8007f30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80075c6:	2100      	movs	r1, #0
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fcb1 	bl	8007f30 <USBD_LL_StallEP>
}
 80075ce:	bf00      	nop
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b086      	sub	sp, #24
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d036      	beq.n	800765a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80075f0:	6938      	ldr	r0, [r7, #16]
 80075f2:	f000 f836 	bl	8007662 <USBD_GetLen>
 80075f6:	4603      	mov	r3, r0
 80075f8:	3301      	adds	r3, #1
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007604:	7dfb      	ldrb	r3, [r7, #23]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	4413      	add	r3, r2
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	7812      	ldrb	r2, [r2, #0]
 800760e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	3301      	adds	r3, #1
 8007614:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	4413      	add	r3, r2
 800761c:	2203      	movs	r2, #3
 800761e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	3301      	adds	r3, #1
 8007624:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007626:	e013      	b.n	8007650 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007628:	7dfb      	ldrb	r3, [r7, #23]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	4413      	add	r3, r2
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	7812      	ldrb	r2, [r2, #0]
 8007632:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	3301      	adds	r3, #1
 8007638:	613b      	str	r3, [r7, #16]
    idx++;
 800763a:	7dfb      	ldrb	r3, [r7, #23]
 800763c:	3301      	adds	r3, #1
 800763e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007640:	7dfb      	ldrb	r3, [r7, #23]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	4413      	add	r3, r2
 8007646:	2200      	movs	r2, #0
 8007648:	701a      	strb	r2, [r3, #0]
    idx++;
 800764a:	7dfb      	ldrb	r3, [r7, #23]
 800764c:	3301      	adds	r3, #1
 800764e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e7      	bne.n	8007628 <USBD_GetString+0x52>
 8007658:	e000      	b.n	800765c <USBD_GetString+0x86>
    return;
 800765a:	bf00      	nop
  }
}
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007662:	b480      	push	{r7}
 8007664:	b085      	sub	sp, #20
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007672:	e005      	b.n	8007680 <USBD_GetLen+0x1e>
  {
    len++;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	3301      	adds	r3, #1
 8007678:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	3301      	adds	r3, #1
 800767e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1f5      	bne.n	8007674 <USBD_GetLen+0x12>
  }

  return len;
 8007688:	7bfb      	ldrb	r3, [r7, #15]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2202      	movs	r2, #2
 80076a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	2100      	movs	r1, #0
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 fcc0 	bl	8008042 <USBD_LL_Transmit>

  return USBD_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	2100      	movs	r1, #0
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 fcaf 	bl	8008042 <USBD_LL_Transmit>

  return USBD_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b084      	sub	sp, #16
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	60b9      	str	r1, [r7, #8]
 80076f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2203      	movs	r2, #3
 80076fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	2100      	movs	r1, #0
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 fcb3 	bl	8008084 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	2100      	movs	r1, #0
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 fca2 	bl	8008084 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b082      	sub	sp, #8
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2204      	movs	r2, #4
 8007756:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800775a:	2300      	movs	r3, #0
 800775c:	2200      	movs	r2, #0
 800775e:	2100      	movs	r1, #0
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fc6e 	bl	8008042 <USBD_LL_Transmit>

  return USBD_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2205      	movs	r2, #5
 800777c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007780:	2300      	movs	r3, #0
 8007782:	2200      	movs	r2, #0
 8007784:	2100      	movs	r1, #0
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fc7c 	bl	8008084 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
	...

08007798 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800779c:	2200      	movs	r2, #0
 800779e:	4912      	ldr	r1, [pc, #72]	; (80077e8 <MX_USB_DEVICE_Init+0x50>)
 80077a0:	4812      	ldr	r0, [pc, #72]	; (80077ec <MX_USB_DEVICE_Init+0x54>)
 80077a2:	f7fe fef3 	bl	800658c <USBD_Init>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80077ac:	f7f9 f9a4 	bl	8000af8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80077b0:	490f      	ldr	r1, [pc, #60]	; (80077f0 <MX_USB_DEVICE_Init+0x58>)
 80077b2:	480e      	ldr	r0, [pc, #56]	; (80077ec <MX_USB_DEVICE_Init+0x54>)
 80077b4:	f7fe ff20 	bl	80065f8 <USBD_RegisterClass>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80077be:	f7f9 f99b 	bl	8000af8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80077c2:	490c      	ldr	r1, [pc, #48]	; (80077f4 <MX_USB_DEVICE_Init+0x5c>)
 80077c4:	4809      	ldr	r0, [pc, #36]	; (80077ec <MX_USB_DEVICE_Init+0x54>)
 80077c6:	f7fe fe75 	bl	80064b4 <USBD_CDC_RegisterInterface>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80077d0:	f7f9 f992 	bl	8000af8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80077d4:	4805      	ldr	r0, [pc, #20]	; (80077ec <MX_USB_DEVICE_Init+0x54>)
 80077d6:	f7fe ff30 	bl	800663a <USBD_Start>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80077e0:	f7f9 f98a 	bl	8000af8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077e4:	bf00      	nop
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20000134 	.word	0x20000134
 80077ec:	2000033c 	.word	0x2000033c
 80077f0:	2000001c 	.word	0x2000001c
 80077f4:	20000120 	.word	0x20000120

080077f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80077fc:	2200      	movs	r2, #0
 80077fe:	4905      	ldr	r1, [pc, #20]	; (8007814 <CDC_Init_FS+0x1c>)
 8007800:	4805      	ldr	r0, [pc, #20]	; (8007818 <CDC_Init_FS+0x20>)
 8007802:	f7fe fe6c 	bl	80064de <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007806:	4905      	ldr	r1, [pc, #20]	; (800781c <CDC_Init_FS+0x24>)
 8007808:	4803      	ldr	r0, [pc, #12]	; (8007818 <CDC_Init_FS+0x20>)
 800780a:	f7fe fe81 	bl	8006510 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800780e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007810:	4618      	mov	r0, r3
 8007812:	bd80      	pop	{r7, pc}
 8007814:	20000e0c 	.word	0x20000e0c
 8007818:	2000033c 	.word	0x2000033c
 800781c:	2000060c 	.word	0x2000060c

08007820 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007824:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007826:	4618      	mov	r0, r3
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	4603      	mov	r3, r0
 8007838:	6039      	str	r1, [r7, #0]
 800783a:	71fb      	strb	r3, [r7, #7]
 800783c:	4613      	mov	r3, r2
 800783e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007840:	79fb      	ldrb	r3, [r7, #7]
 8007842:	2b23      	cmp	r3, #35	; 0x23
 8007844:	d84a      	bhi.n	80078dc <CDC_Control_FS+0xac>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <CDC_Control_FS+0x1c>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	080078dd 	.word	0x080078dd
 8007850:	080078dd 	.word	0x080078dd
 8007854:	080078dd 	.word	0x080078dd
 8007858:	080078dd 	.word	0x080078dd
 800785c:	080078dd 	.word	0x080078dd
 8007860:	080078dd 	.word	0x080078dd
 8007864:	080078dd 	.word	0x080078dd
 8007868:	080078dd 	.word	0x080078dd
 800786c:	080078dd 	.word	0x080078dd
 8007870:	080078dd 	.word	0x080078dd
 8007874:	080078dd 	.word	0x080078dd
 8007878:	080078dd 	.word	0x080078dd
 800787c:	080078dd 	.word	0x080078dd
 8007880:	080078dd 	.word	0x080078dd
 8007884:	080078dd 	.word	0x080078dd
 8007888:	080078dd 	.word	0x080078dd
 800788c:	080078dd 	.word	0x080078dd
 8007890:	080078dd 	.word	0x080078dd
 8007894:	080078dd 	.word	0x080078dd
 8007898:	080078dd 	.word	0x080078dd
 800789c:	080078dd 	.word	0x080078dd
 80078a0:	080078dd 	.word	0x080078dd
 80078a4:	080078dd 	.word	0x080078dd
 80078a8:	080078dd 	.word	0x080078dd
 80078ac:	080078dd 	.word	0x080078dd
 80078b0:	080078dd 	.word	0x080078dd
 80078b4:	080078dd 	.word	0x080078dd
 80078b8:	080078dd 	.word	0x080078dd
 80078bc:	080078dd 	.word	0x080078dd
 80078c0:	080078dd 	.word	0x080078dd
 80078c4:	080078dd 	.word	0x080078dd
 80078c8:	080078dd 	.word	0x080078dd
 80078cc:	080078dd 	.word	0x080078dd
 80078d0:	080078dd 	.word	0x080078dd
 80078d4:	080078dd 	.word	0x080078dd
 80078d8:	080078dd 	.word	0x080078dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80078dc:	bf00      	nop
  }

  return (USBD_OK);
 80078de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80078f6:	6879      	ldr	r1, [r7, #4]
 80078f8:	4808      	ldr	r0, [pc, #32]	; (800791c <CDC_Receive_FS+0x30>)
 80078fa:	f7fe fe09 	bl	8006510 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80078fe:	4807      	ldr	r0, [pc, #28]	; (800791c <CDC_Receive_FS+0x30>)
 8007900:	f7fe fe1a 	bl	8006538 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, Len[0]);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4619      	mov	r1, r3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7f8 fde4 	bl	80004d8 <CDC_ReceiveCallback>
  return (USBD_OK);
 8007910:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	2000033c 	.word	0x2000033c

08007920 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	4613      	mov	r3, r2
 800792c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007932:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007936:	4618      	mov	r0, r3
 8007938:	371c      	adds	r7, #28
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
	...

08007944 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	6039      	str	r1, [r7, #0]
 800794e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2212      	movs	r2, #18
 8007954:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007956:	4b03      	ldr	r3, [pc, #12]	; (8007964 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007958:	4618      	mov	r0, r3
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	20000150 	.word	0x20000150

08007968 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	4603      	mov	r3, r0
 8007970:	6039      	str	r1, [r7, #0]
 8007972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2204      	movs	r2, #4
 8007978:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800797a:	4b03      	ldr	r3, [pc, #12]	; (8007988 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	20000164 	.word	0x20000164

0800798c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	6039      	str	r1, [r7, #0]
 8007996:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007998:	79fb      	ldrb	r3, [r7, #7]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d105      	bne.n	80079aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	4907      	ldr	r1, [pc, #28]	; (80079c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80079a2:	4808      	ldr	r0, [pc, #32]	; (80079c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80079a4:	f7ff fe17 	bl	80075d6 <USBD_GetString>
 80079a8:	e004      	b.n	80079b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	4904      	ldr	r1, [pc, #16]	; (80079c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80079ae:	4805      	ldr	r0, [pc, #20]	; (80079c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80079b0:	f7ff fe11 	bl	80075d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079b4:	4b02      	ldr	r3, [pc, #8]	; (80079c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	2000160c 	.word	0x2000160c
 80079c4:	08008354 	.word	0x08008354

080079c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	6039      	str	r1, [r7, #0]
 80079d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	4904      	ldr	r1, [pc, #16]	; (80079e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80079d8:	4804      	ldr	r0, [pc, #16]	; (80079ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80079da:	f7ff fdfc 	bl	80075d6 <USBD_GetString>
  return USBD_StrDesc;
 80079de:	4b02      	ldr	r3, [pc, #8]	; (80079e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	2000160c 	.word	0x2000160c
 80079ec:	0800836c 	.word	0x0800836c

080079f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	6039      	str	r1, [r7, #0]
 80079fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	221a      	movs	r2, #26
 8007a00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a02:	f000 f843 	bl	8007a8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007a06:	4b02      	ldr	r3, [pc, #8]	; (8007a10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	20000168 	.word	0x20000168

08007a14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	6039      	str	r1, [r7, #0]
 8007a1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a20:	79fb      	ldrb	r3, [r7, #7]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d105      	bne.n	8007a32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	4907      	ldr	r1, [pc, #28]	; (8007a48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a2a:	4808      	ldr	r0, [pc, #32]	; (8007a4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a2c:	f7ff fdd3 	bl	80075d6 <USBD_GetString>
 8007a30:	e004      	b.n	8007a3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	4904      	ldr	r1, [pc, #16]	; (8007a48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a36:	4805      	ldr	r0, [pc, #20]	; (8007a4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a38:	f7ff fdcd 	bl	80075d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a3c:	4b02      	ldr	r3, [pc, #8]	; (8007a48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	2000160c 	.word	0x2000160c
 8007a4c:	08008380 	.word	0x08008380

08007a50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	4603      	mov	r3, r0
 8007a58:	6039      	str	r1, [r7, #0]
 8007a5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a5c:	79fb      	ldrb	r3, [r7, #7]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d105      	bne.n	8007a6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	4907      	ldr	r1, [pc, #28]	; (8007a84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a66:	4808      	ldr	r0, [pc, #32]	; (8007a88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a68:	f7ff fdb5 	bl	80075d6 <USBD_GetString>
 8007a6c:	e004      	b.n	8007a78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	4904      	ldr	r1, [pc, #16]	; (8007a84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a72:	4805      	ldr	r0, [pc, #20]	; (8007a88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a74:	f7ff fdaf 	bl	80075d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a78:	4b02      	ldr	r3, [pc, #8]	; (8007a84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	2000160c 	.word	0x2000160c
 8007a88:	0800838c 	.word	0x0800838c

08007a8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a92:	4b0f      	ldr	r3, [pc, #60]	; (8007ad0 <Get_SerialNum+0x44>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a98:	4b0e      	ldr	r3, [pc, #56]	; (8007ad4 <Get_SerialNum+0x48>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a9e:	4b0e      	ldr	r3, [pc, #56]	; (8007ad8 <Get_SerialNum+0x4c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d009      	beq.n	8007ac6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ab2:	2208      	movs	r2, #8
 8007ab4:	4909      	ldr	r1, [pc, #36]	; (8007adc <Get_SerialNum+0x50>)
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 f814 	bl	8007ae4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007abc:	2204      	movs	r2, #4
 8007abe:	4908      	ldr	r1, [pc, #32]	; (8007ae0 <Get_SerialNum+0x54>)
 8007ac0:	68b8      	ldr	r0, [r7, #8]
 8007ac2:	f000 f80f 	bl	8007ae4 <IntToUnicode>
  }
}
 8007ac6:	bf00      	nop
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	1fff7a10 	.word	0x1fff7a10
 8007ad4:	1fff7a14 	.word	0x1fff7a14
 8007ad8:	1fff7a18 	.word	0x1fff7a18
 8007adc:	2000016a 	.word	0x2000016a
 8007ae0:	2000017a 	.word	0x2000017a

08007ae4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	4613      	mov	r3, r2
 8007af0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007af6:	2300      	movs	r3, #0
 8007af8:	75fb      	strb	r3, [r7, #23]
 8007afa:	e027      	b.n	8007b4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	0f1b      	lsrs	r3, r3, #28
 8007b00:	2b09      	cmp	r3, #9
 8007b02:	d80b      	bhi.n	8007b1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	0f1b      	lsrs	r3, r3, #28
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	7dfb      	ldrb	r3, [r7, #23]
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	4619      	mov	r1, r3
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	440b      	add	r3, r1
 8007b14:	3230      	adds	r2, #48	; 0x30
 8007b16:	b2d2      	uxtb	r2, r2
 8007b18:	701a      	strb	r2, [r3, #0]
 8007b1a:	e00a      	b.n	8007b32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	0f1b      	lsrs	r3, r3, #28
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	4619      	mov	r1, r3
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	440b      	add	r3, r1
 8007b2c:	3237      	adds	r2, #55	; 0x37
 8007b2e:	b2d2      	uxtb	r2, r2
 8007b30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	4413      	add	r3, r2
 8007b42:	2200      	movs	r2, #0
 8007b44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	75fb      	strb	r3, [r7, #23]
 8007b4c:	7dfa      	ldrb	r2, [r7, #23]
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d3d3      	bcc.n	8007afc <IntToUnicode+0x18>
  }
}
 8007b54:	bf00      	nop
 8007b56:	371c      	adds	r7, #28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b08a      	sub	sp, #40	; 0x28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b68:	f107 0314 	add.w	r3, r7, #20
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	605a      	str	r2, [r3, #4]
 8007b72:	609a      	str	r2, [r3, #8]
 8007b74:	60da      	str	r2, [r3, #12]
 8007b76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b80:	d13a      	bne.n	8007bf8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b82:	2300      	movs	r3, #0
 8007b84:	613b      	str	r3, [r7, #16]
 8007b86:	4b1e      	ldr	r3, [pc, #120]	; (8007c00 <HAL_PCD_MspInit+0xa0>)
 8007b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8a:	4a1d      	ldr	r2, [pc, #116]	; (8007c00 <HAL_PCD_MspInit+0xa0>)
 8007b8c:	f043 0301 	orr.w	r3, r3, #1
 8007b90:	6313      	str	r3, [r2, #48]	; 0x30
 8007b92:	4b1b      	ldr	r3, [pc, #108]	; (8007c00 <HAL_PCD_MspInit+0xa0>)
 8007b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	613b      	str	r3, [r7, #16]
 8007b9c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bac:	2303      	movs	r3, #3
 8007bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007bb0:	230a      	movs	r3, #10
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bb4:	f107 0314 	add.w	r3, r7, #20
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4812      	ldr	r0, [pc, #72]	; (8007c04 <HAL_PCD_MspInit+0xa4>)
 8007bbc:	f7f9 fdd0 	bl	8001760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007bc0:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <HAL_PCD_MspInit+0xa0>)
 8007bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc4:	4a0e      	ldr	r2, [pc, #56]	; (8007c00 <HAL_PCD_MspInit+0xa0>)
 8007bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bca:	6353      	str	r3, [r2, #52]	; 0x34
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60fb      	str	r3, [r7, #12]
 8007bd0:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <HAL_PCD_MspInit+0xa0>)
 8007bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd4:	4a0a      	ldr	r2, [pc, #40]	; (8007c00 <HAL_PCD_MspInit+0xa0>)
 8007bd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bda:	6453      	str	r3, [r2, #68]	; 0x44
 8007bdc:	4b08      	ldr	r3, [pc, #32]	; (8007c00 <HAL_PCD_MspInit+0xa0>)
 8007bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007be8:	2200      	movs	r2, #0
 8007bea:	2100      	movs	r1, #0
 8007bec:	2043      	movs	r0, #67	; 0x43
 8007bee:	f7f9 fd80 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007bf2:	2043      	movs	r0, #67	; 0x43
 8007bf4:	f7f9 fd99 	bl	800172a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007bf8:	bf00      	nop
 8007bfa:	3728      	adds	r7, #40	; 0x28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	40023800 	.word	0x40023800
 8007c04:	40020000 	.word	0x40020000

08007c08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4610      	mov	r0, r2
 8007c20:	f7fe fd56 	bl	80066d0 <USBD_LL_SetupStage>
}
 8007c24:	bf00      	nop
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007c3e:	78fa      	ldrb	r2, [r7, #3]
 8007c40:	6879      	ldr	r1, [r7, #4]
 8007c42:	4613      	mov	r3, r2
 8007c44:	00db      	lsls	r3, r3, #3
 8007c46:	1a9b      	subs	r3, r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	440b      	add	r3, r1
 8007c4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	78fb      	ldrb	r3, [r7, #3]
 8007c54:	4619      	mov	r1, r3
 8007c56:	f7fe fd8e 	bl	8006776 <USBD_LL_DataOutStage>
}
 8007c5a:	bf00      	nop
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007c74:	78fa      	ldrb	r2, [r7, #3]
 8007c76:	6879      	ldr	r1, [r7, #4]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	00db      	lsls	r3, r3, #3
 8007c7c:	1a9b      	subs	r3, r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	440b      	add	r3, r1
 8007c82:	3348      	adds	r3, #72	; 0x48
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	78fb      	ldrb	r3, [r7, #3]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	f7fe fdd7 	bl	800683c <USBD_LL_DataInStage>
}
 8007c8e:	bf00      	nop
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b082      	sub	sp, #8
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fe fedb 	bl	8006a60 <USBD_LL_SOF>
}
 8007caa:	bf00      	nop
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b084      	sub	sp, #16
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d001      	beq.n	8007cca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007cc6:	f7f8 ff17 	bl	8000af8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cd0:	7bfa      	ldrb	r2, [r7, #15]
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fe fe88 	bl	80069ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fe fe41 	bl	8006968 <USBD_LL_Reset>
}
 8007ce6:	bf00      	nop
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fe fe83 	bl	8006a0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	6812      	ldr	r2, [r2, #0]
 8007d12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d16:	f043 0301 	orr.w	r3, r3, #1
 8007d1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d005      	beq.n	8007d30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d24:	4b04      	ldr	r3, [pc, #16]	; (8007d38 <HAL_PCD_SuspendCallback+0x48>)
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	4a03      	ldr	r2, [pc, #12]	; (8007d38 <HAL_PCD_SuspendCallback+0x48>)
 8007d2a:	f043 0306 	orr.w	r3, r3, #6
 8007d2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	e000ed00 	.word	0xe000ed00

08007d3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe fe72 	bl	8006a34 <USBD_LL_Resume>
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	460b      	mov	r3, r1
 8007d62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d6a:	78fa      	ldrb	r2, [r7, #3]
 8007d6c:	4611      	mov	r1, r2
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fe fe9d 	bl	8006aae <USBD_LL_IsoOUTIncomplete>
}
 8007d74:	bf00      	nop
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d8e:	78fa      	ldrb	r2, [r7, #3]
 8007d90:	4611      	mov	r1, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fe fe7e 	bl	8006a94 <USBD_LL_IsoINIncomplete>
}
 8007d98:	bf00      	nop
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fe fe8a 	bl	8006ac8 <USBD_LL_DevConnected>
}
 8007db4:	bf00      	nop
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe fe87 	bl	8006ade <USBD_LL_DevDisconnected>
}
 8007dd0:	bf00      	nop
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d13c      	bne.n	8007e62 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007de8:	4a20      	ldr	r2, [pc, #128]	; (8007e6c <USBD_LL_Init+0x94>)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a1e      	ldr	r2, [pc, #120]	; (8007e6c <USBD_LL_Init+0x94>)
 8007df4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007df8:	4b1c      	ldr	r3, [pc, #112]	; (8007e6c <USBD_LL_Init+0x94>)
 8007dfa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007dfe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007e00:	4b1a      	ldr	r3, [pc, #104]	; (8007e6c <USBD_LL_Init+0x94>)
 8007e02:	2204      	movs	r2, #4
 8007e04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007e06:	4b19      	ldr	r3, [pc, #100]	; (8007e6c <USBD_LL_Init+0x94>)
 8007e08:	2202      	movs	r2, #2
 8007e0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e0c:	4b17      	ldr	r3, [pc, #92]	; (8007e6c <USBD_LL_Init+0x94>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e12:	4b16      	ldr	r3, [pc, #88]	; (8007e6c <USBD_LL_Init+0x94>)
 8007e14:	2202      	movs	r2, #2
 8007e16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e18:	4b14      	ldr	r3, [pc, #80]	; (8007e6c <USBD_LL_Init+0x94>)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007e1e:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <USBD_LL_Init+0x94>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007e24:	4b11      	ldr	r3, [pc, #68]	; (8007e6c <USBD_LL_Init+0x94>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007e2a:	4b10      	ldr	r3, [pc, #64]	; (8007e6c <USBD_LL_Init+0x94>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007e30:	4b0e      	ldr	r3, [pc, #56]	; (8007e6c <USBD_LL_Init+0x94>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007e36:	480d      	ldr	r0, [pc, #52]	; (8007e6c <USBD_LL_Init+0x94>)
 8007e38:	f7f9 fe51 	bl	8001ade <HAL_PCD_Init>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007e42:	f7f8 fe59 	bl	8000af8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007e46:	2180      	movs	r1, #128	; 0x80
 8007e48:	4808      	ldr	r0, [pc, #32]	; (8007e6c <USBD_LL_Init+0x94>)
 8007e4a:	f7fa ffae 	bl	8002daa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e4e:	2240      	movs	r2, #64	; 0x40
 8007e50:	2100      	movs	r1, #0
 8007e52:	4806      	ldr	r0, [pc, #24]	; (8007e6c <USBD_LL_Init+0x94>)
 8007e54:	f7fa ff62 	bl	8002d1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e58:	2280      	movs	r2, #128	; 0x80
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	4803      	ldr	r0, [pc, #12]	; (8007e6c <USBD_LL_Init+0x94>)
 8007e5e:	f7fa ff5d 	bl	8002d1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	2000180c 	.word	0x2000180c

08007e70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7f9 ff46 	bl	8001d18 <HAL_PCD_Start>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 f92a 	bl	80080ec <USBD_Get_USB_Status>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	4608      	mov	r0, r1
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	70fb      	strb	r3, [r7, #3]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70bb      	strb	r3, [r7, #2]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ece:	78bb      	ldrb	r3, [r7, #2]
 8007ed0:	883a      	ldrh	r2, [r7, #0]
 8007ed2:	78f9      	ldrb	r1, [r7, #3]
 8007ed4:	f7fa fb2a 	bl	800252c <HAL_PCD_EP_Open>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 f904 	bl	80080ec <USBD_Get_USB_Status>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ee8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	460b      	mov	r3, r1
 8007efc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f0c:	78fa      	ldrb	r2, [r7, #3]
 8007f0e:	4611      	mov	r1, r2
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fa fb73 	bl	80025fc <HAL_PCD_EP_Close>
 8007f16:	4603      	mov	r3, r0
 8007f18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 f8e5 	bl	80080ec <USBD_Get_USB_Status>
 8007f22:	4603      	mov	r3, r0
 8007f24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f4a:	78fa      	ldrb	r2, [r7, #3]
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fa fc4b 	bl	80027ea <HAL_PCD_EP_SetStall>
 8007f54:	4603      	mov	r3, r0
 8007f56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 f8c6 	bl	80080ec <USBD_Get_USB_Status>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	460b      	mov	r3, r1
 8007f78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f88:	78fa      	ldrb	r2, [r7, #3]
 8007f8a:	4611      	mov	r1, r2
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fa fc90 	bl	80028b2 <HAL_PCD_EP_ClrStall>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 f8a7 	bl	80080ec <USBD_Get_USB_Status>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	da0b      	bge.n	8007fe0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fce:	68f9      	ldr	r1, [r7, #12]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	00db      	lsls	r3, r3, #3
 8007fd4:	1a9b      	subs	r3, r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	440b      	add	r3, r1
 8007fda:	333e      	adds	r3, #62	; 0x3e
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	e00b      	b.n	8007ff8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fe6:	68f9      	ldr	r1, [r7, #12]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	1a9b      	subs	r3, r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ff6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800801e:	78fa      	ldrb	r2, [r7, #3]
 8008020:	4611      	mov	r1, r2
 8008022:	4618      	mov	r0, r3
 8008024:	f7fa fa5d 	bl	80024e2 <HAL_PCD_SetAddress>
 8008028:	4603      	mov	r3, r0
 800802a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	4618      	mov	r0, r3
 8008030:	f000 f85c 	bl	80080ec <USBD_Get_USB_Status>
 8008034:	4603      	mov	r3, r0
 8008036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008038:	7bbb      	ldrb	r3, [r7, #14]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b086      	sub	sp, #24
 8008046:	af00      	add	r7, sp, #0
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	607a      	str	r2, [r7, #4]
 800804c:	603b      	str	r3, [r7, #0]
 800804e:	460b      	mov	r3, r1
 8008050:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008060:	7af9      	ldrb	r1, [r7, #11]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	f7fa fb76 	bl	8002756 <HAL_PCD_EP_Transmit>
 800806a:	4603      	mov	r3, r0
 800806c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	4618      	mov	r0, r3
 8008072:	f000 f83b 	bl	80080ec <USBD_Get_USB_Status>
 8008076:	4603      	mov	r3, r0
 8008078:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800807a:	7dbb      	ldrb	r3, [r7, #22]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3718      	adds	r7, #24
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	607a      	str	r2, [r7, #4]
 800808e:	603b      	str	r3, [r7, #0]
 8008090:	460b      	mov	r3, r1
 8008092:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80080a2:	7af9      	ldrb	r1, [r7, #11]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	f7fa faf2 	bl	8002690 <HAL_PCD_EP_Receive>
 80080ac:	4603      	mov	r3, r0
 80080ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 f81a 	bl	80080ec <USBD_Get_USB_Status>
 80080b8:	4603      	mov	r3, r0
 80080ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3718      	adds	r7, #24
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b082      	sub	sp, #8
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	460b      	mov	r3, r1
 80080d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080d8:	78fa      	ldrb	r2, [r7, #3]
 80080da:	4611      	mov	r1, r2
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fa fb22 	bl	8002726 <HAL_PCD_EP_GetRxCount>
 80080e2:	4603      	mov	r3, r0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	4603      	mov	r3, r0
 80080f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080fa:	79fb      	ldrb	r3, [r7, #7]
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d817      	bhi.n	8008130 <USBD_Get_USB_Status+0x44>
 8008100:	a201      	add	r2, pc, #4	; (adr r2, 8008108 <USBD_Get_USB_Status+0x1c>)
 8008102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008106:	bf00      	nop
 8008108:	08008119 	.word	0x08008119
 800810c:	0800811f 	.word	0x0800811f
 8008110:	08008125 	.word	0x08008125
 8008114:	0800812b 	.word	0x0800812b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	73fb      	strb	r3, [r7, #15]
    break;
 800811c:	e00b      	b.n	8008136 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800811e:	2303      	movs	r3, #3
 8008120:	73fb      	strb	r3, [r7, #15]
    break;
 8008122:	e008      	b.n	8008136 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008124:	2301      	movs	r3, #1
 8008126:	73fb      	strb	r3, [r7, #15]
    break;
 8008128:	e005      	b.n	8008136 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800812a:	2303      	movs	r3, #3
 800812c:	73fb      	strb	r3, [r7, #15]
    break;
 800812e:	e002      	b.n	8008136 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008130:	2303      	movs	r3, #3
 8008132:	73fb      	strb	r3, [r7, #15]
    break;
 8008134:	bf00      	nop
  }
  return usb_status;
 8008136:	7bfb      	ldrb	r3, [r7, #15]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <__errno>:
 8008144:	4b01      	ldr	r3, [pc, #4]	; (800814c <__errno+0x8>)
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	20000184 	.word	0x20000184

08008150 <__libc_init_array>:
 8008150:	b570      	push	{r4, r5, r6, lr}
 8008152:	4e0d      	ldr	r6, [pc, #52]	; (8008188 <__libc_init_array+0x38>)
 8008154:	4c0d      	ldr	r4, [pc, #52]	; (800818c <__libc_init_array+0x3c>)
 8008156:	1ba4      	subs	r4, r4, r6
 8008158:	10a4      	asrs	r4, r4, #2
 800815a:	2500      	movs	r5, #0
 800815c:	42a5      	cmp	r5, r4
 800815e:	d109      	bne.n	8008174 <__libc_init_array+0x24>
 8008160:	4e0b      	ldr	r6, [pc, #44]	; (8008190 <__libc_init_array+0x40>)
 8008162:	4c0c      	ldr	r4, [pc, #48]	; (8008194 <__libc_init_array+0x44>)
 8008164:	f000 f8ea 	bl	800833c <_init>
 8008168:	1ba4      	subs	r4, r4, r6
 800816a:	10a4      	asrs	r4, r4, #2
 800816c:	2500      	movs	r5, #0
 800816e:	42a5      	cmp	r5, r4
 8008170:	d105      	bne.n	800817e <__libc_init_array+0x2e>
 8008172:	bd70      	pop	{r4, r5, r6, pc}
 8008174:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008178:	4798      	blx	r3
 800817a:	3501      	adds	r5, #1
 800817c:	e7ee      	b.n	800815c <__libc_init_array+0xc>
 800817e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008182:	4798      	blx	r3
 8008184:	3501      	adds	r5, #1
 8008186:	e7f2      	b.n	800816e <__libc_init_array+0x1e>
 8008188:	080083bc 	.word	0x080083bc
 800818c:	080083bc 	.word	0x080083bc
 8008190:	080083bc 	.word	0x080083bc
 8008194:	080083c0 	.word	0x080083c0

08008198 <malloc>:
 8008198:	4b02      	ldr	r3, [pc, #8]	; (80081a4 <malloc+0xc>)
 800819a:	4601      	mov	r1, r0
 800819c:	6818      	ldr	r0, [r3, #0]
 800819e:	f000 b861 	b.w	8008264 <_malloc_r>
 80081a2:	bf00      	nop
 80081a4:	20000184 	.word	0x20000184

080081a8 <free>:
 80081a8:	4b02      	ldr	r3, [pc, #8]	; (80081b4 <free+0xc>)
 80081aa:	4601      	mov	r1, r0
 80081ac:	6818      	ldr	r0, [r3, #0]
 80081ae:	f000 b80b 	b.w	80081c8 <_free_r>
 80081b2:	bf00      	nop
 80081b4:	20000184 	.word	0x20000184

080081b8 <memset>:
 80081b8:	4402      	add	r2, r0
 80081ba:	4603      	mov	r3, r0
 80081bc:	4293      	cmp	r3, r2
 80081be:	d100      	bne.n	80081c2 <memset+0xa>
 80081c0:	4770      	bx	lr
 80081c2:	f803 1b01 	strb.w	r1, [r3], #1
 80081c6:	e7f9      	b.n	80081bc <memset+0x4>

080081c8 <_free_r>:
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	4605      	mov	r5, r0
 80081cc:	2900      	cmp	r1, #0
 80081ce:	d045      	beq.n	800825c <_free_r+0x94>
 80081d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d4:	1f0c      	subs	r4, r1, #4
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	bfb8      	it	lt
 80081da:	18e4      	addlt	r4, r4, r3
 80081dc:	f000 f8ac 	bl	8008338 <__malloc_lock>
 80081e0:	4a1f      	ldr	r2, [pc, #124]	; (8008260 <_free_r+0x98>)
 80081e2:	6813      	ldr	r3, [r2, #0]
 80081e4:	4610      	mov	r0, r2
 80081e6:	b933      	cbnz	r3, 80081f6 <_free_r+0x2e>
 80081e8:	6063      	str	r3, [r4, #4]
 80081ea:	6014      	str	r4, [r2, #0]
 80081ec:	4628      	mov	r0, r5
 80081ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081f2:	f000 b8a2 	b.w	800833a <__malloc_unlock>
 80081f6:	42a3      	cmp	r3, r4
 80081f8:	d90c      	bls.n	8008214 <_free_r+0x4c>
 80081fa:	6821      	ldr	r1, [r4, #0]
 80081fc:	1862      	adds	r2, r4, r1
 80081fe:	4293      	cmp	r3, r2
 8008200:	bf04      	itt	eq
 8008202:	681a      	ldreq	r2, [r3, #0]
 8008204:	685b      	ldreq	r3, [r3, #4]
 8008206:	6063      	str	r3, [r4, #4]
 8008208:	bf04      	itt	eq
 800820a:	1852      	addeq	r2, r2, r1
 800820c:	6022      	streq	r2, [r4, #0]
 800820e:	6004      	str	r4, [r0, #0]
 8008210:	e7ec      	b.n	80081ec <_free_r+0x24>
 8008212:	4613      	mov	r3, r2
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	b10a      	cbz	r2, 800821c <_free_r+0x54>
 8008218:	42a2      	cmp	r2, r4
 800821a:	d9fa      	bls.n	8008212 <_free_r+0x4a>
 800821c:	6819      	ldr	r1, [r3, #0]
 800821e:	1858      	adds	r0, r3, r1
 8008220:	42a0      	cmp	r0, r4
 8008222:	d10b      	bne.n	800823c <_free_r+0x74>
 8008224:	6820      	ldr	r0, [r4, #0]
 8008226:	4401      	add	r1, r0
 8008228:	1858      	adds	r0, r3, r1
 800822a:	4282      	cmp	r2, r0
 800822c:	6019      	str	r1, [r3, #0]
 800822e:	d1dd      	bne.n	80081ec <_free_r+0x24>
 8008230:	6810      	ldr	r0, [r2, #0]
 8008232:	6852      	ldr	r2, [r2, #4]
 8008234:	605a      	str	r2, [r3, #4]
 8008236:	4401      	add	r1, r0
 8008238:	6019      	str	r1, [r3, #0]
 800823a:	e7d7      	b.n	80081ec <_free_r+0x24>
 800823c:	d902      	bls.n	8008244 <_free_r+0x7c>
 800823e:	230c      	movs	r3, #12
 8008240:	602b      	str	r3, [r5, #0]
 8008242:	e7d3      	b.n	80081ec <_free_r+0x24>
 8008244:	6820      	ldr	r0, [r4, #0]
 8008246:	1821      	adds	r1, r4, r0
 8008248:	428a      	cmp	r2, r1
 800824a:	bf04      	itt	eq
 800824c:	6811      	ldreq	r1, [r2, #0]
 800824e:	6852      	ldreq	r2, [r2, #4]
 8008250:	6062      	str	r2, [r4, #4]
 8008252:	bf04      	itt	eq
 8008254:	1809      	addeq	r1, r1, r0
 8008256:	6021      	streq	r1, [r4, #0]
 8008258:	605c      	str	r4, [r3, #4]
 800825a:	e7c7      	b.n	80081ec <_free_r+0x24>
 800825c:	bd38      	pop	{r3, r4, r5, pc}
 800825e:	bf00      	nop
 8008260:	2000020c 	.word	0x2000020c

08008264 <_malloc_r>:
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	1ccd      	adds	r5, r1, #3
 8008268:	f025 0503 	bic.w	r5, r5, #3
 800826c:	3508      	adds	r5, #8
 800826e:	2d0c      	cmp	r5, #12
 8008270:	bf38      	it	cc
 8008272:	250c      	movcc	r5, #12
 8008274:	2d00      	cmp	r5, #0
 8008276:	4606      	mov	r6, r0
 8008278:	db01      	blt.n	800827e <_malloc_r+0x1a>
 800827a:	42a9      	cmp	r1, r5
 800827c:	d903      	bls.n	8008286 <_malloc_r+0x22>
 800827e:	230c      	movs	r3, #12
 8008280:	6033      	str	r3, [r6, #0]
 8008282:	2000      	movs	r0, #0
 8008284:	bd70      	pop	{r4, r5, r6, pc}
 8008286:	f000 f857 	bl	8008338 <__malloc_lock>
 800828a:	4a21      	ldr	r2, [pc, #132]	; (8008310 <_malloc_r+0xac>)
 800828c:	6814      	ldr	r4, [r2, #0]
 800828e:	4621      	mov	r1, r4
 8008290:	b991      	cbnz	r1, 80082b8 <_malloc_r+0x54>
 8008292:	4c20      	ldr	r4, [pc, #128]	; (8008314 <_malloc_r+0xb0>)
 8008294:	6823      	ldr	r3, [r4, #0]
 8008296:	b91b      	cbnz	r3, 80082a0 <_malloc_r+0x3c>
 8008298:	4630      	mov	r0, r6
 800829a:	f000 f83d 	bl	8008318 <_sbrk_r>
 800829e:	6020      	str	r0, [r4, #0]
 80082a0:	4629      	mov	r1, r5
 80082a2:	4630      	mov	r0, r6
 80082a4:	f000 f838 	bl	8008318 <_sbrk_r>
 80082a8:	1c43      	adds	r3, r0, #1
 80082aa:	d124      	bne.n	80082f6 <_malloc_r+0x92>
 80082ac:	230c      	movs	r3, #12
 80082ae:	6033      	str	r3, [r6, #0]
 80082b0:	4630      	mov	r0, r6
 80082b2:	f000 f842 	bl	800833a <__malloc_unlock>
 80082b6:	e7e4      	b.n	8008282 <_malloc_r+0x1e>
 80082b8:	680b      	ldr	r3, [r1, #0]
 80082ba:	1b5b      	subs	r3, r3, r5
 80082bc:	d418      	bmi.n	80082f0 <_malloc_r+0x8c>
 80082be:	2b0b      	cmp	r3, #11
 80082c0:	d90f      	bls.n	80082e2 <_malloc_r+0x7e>
 80082c2:	600b      	str	r3, [r1, #0]
 80082c4:	50cd      	str	r5, [r1, r3]
 80082c6:	18cc      	adds	r4, r1, r3
 80082c8:	4630      	mov	r0, r6
 80082ca:	f000 f836 	bl	800833a <__malloc_unlock>
 80082ce:	f104 000b 	add.w	r0, r4, #11
 80082d2:	1d23      	adds	r3, r4, #4
 80082d4:	f020 0007 	bic.w	r0, r0, #7
 80082d8:	1ac3      	subs	r3, r0, r3
 80082da:	d0d3      	beq.n	8008284 <_malloc_r+0x20>
 80082dc:	425a      	negs	r2, r3
 80082de:	50e2      	str	r2, [r4, r3]
 80082e0:	e7d0      	b.n	8008284 <_malloc_r+0x20>
 80082e2:	428c      	cmp	r4, r1
 80082e4:	684b      	ldr	r3, [r1, #4]
 80082e6:	bf16      	itet	ne
 80082e8:	6063      	strne	r3, [r4, #4]
 80082ea:	6013      	streq	r3, [r2, #0]
 80082ec:	460c      	movne	r4, r1
 80082ee:	e7eb      	b.n	80082c8 <_malloc_r+0x64>
 80082f0:	460c      	mov	r4, r1
 80082f2:	6849      	ldr	r1, [r1, #4]
 80082f4:	e7cc      	b.n	8008290 <_malloc_r+0x2c>
 80082f6:	1cc4      	adds	r4, r0, #3
 80082f8:	f024 0403 	bic.w	r4, r4, #3
 80082fc:	42a0      	cmp	r0, r4
 80082fe:	d005      	beq.n	800830c <_malloc_r+0xa8>
 8008300:	1a21      	subs	r1, r4, r0
 8008302:	4630      	mov	r0, r6
 8008304:	f000 f808 	bl	8008318 <_sbrk_r>
 8008308:	3001      	adds	r0, #1
 800830a:	d0cf      	beq.n	80082ac <_malloc_r+0x48>
 800830c:	6025      	str	r5, [r4, #0]
 800830e:	e7db      	b.n	80082c8 <_malloc_r+0x64>
 8008310:	2000020c 	.word	0x2000020c
 8008314:	20000210 	.word	0x20000210

08008318 <_sbrk_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	4c06      	ldr	r4, [pc, #24]	; (8008334 <_sbrk_r+0x1c>)
 800831c:	2300      	movs	r3, #0
 800831e:	4605      	mov	r5, r0
 8008320:	4608      	mov	r0, r1
 8008322:	6023      	str	r3, [r4, #0]
 8008324:	f7f8 fd8e 	bl	8000e44 <_sbrk>
 8008328:	1c43      	adds	r3, r0, #1
 800832a:	d102      	bne.n	8008332 <_sbrk_r+0x1a>
 800832c:	6823      	ldr	r3, [r4, #0]
 800832e:	b103      	cbz	r3, 8008332 <_sbrk_r+0x1a>
 8008330:	602b      	str	r3, [r5, #0]
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	20001c14 	.word	0x20001c14

08008338 <__malloc_lock>:
 8008338:	4770      	bx	lr

0800833a <__malloc_unlock>:
 800833a:	4770      	bx	lr

0800833c <_init>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	bf00      	nop
 8008340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008342:	bc08      	pop	{r3}
 8008344:	469e      	mov	lr, r3
 8008346:	4770      	bx	lr

08008348 <_fini>:
 8008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834a:	bf00      	nop
 800834c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834e:	bc08      	pop	{r3}
 8008350:	469e      	mov	lr, r3
 8008352:	4770      	bx	lr
